import { EMPTY } from 'rxjs';
import { map, share } from 'rxjs/operators';

const handleIncomingMessage = event => {
  if (event.type === 'rollCall') {
    return {
      type: 'rollCall',
      userId: event.i,
      sessionId: event.session
    };
  }

  if (event.type === 'state') {
    const {
      sessionId,
      locations
    } = event.m;
    return {
      type: 'state',
      userId: event.i,
      sessionId: sessionId,
      timestamp: new Date().toISOString(),
      locations
    };
  }

  if (event.type === 'disconnect') {
    return {
      type: 'disconnect',
      userId: event.i,
      sessionId: event.m.session,
      timestamp: new Date().toISOString()
    };
  }

  throw new Error("Got unknown presence event: ".concat(JSON.stringify(event)));
};

export const createBifurTransport = (bifur, sessionId) => {
  const incomingEvents$ = bifur.request('presence').pipe(map(handleIncomingMessage));

  const dispatchMessage = message => {
    if (message.type === 'rollCall') {
      return bifur.request('presence_rollcall', {
        session: sessionId
      });
    }

    if (message.type === 'state') {
      return bifur.request('presence_announce', {
        data: {
          locations: message.locations,
          sessionId
        }
      });
    }

    if (message.type === 'disconnect') {
      return bifur.request('presence_disconnect', {
        session: sessionId
      });
    }

    return EMPTY;
  };

  return [incomingEvents$.pipe(share()), dispatchMessage];
};