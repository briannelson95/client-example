import { concat, merge, of, EMPTY } from 'rxjs';
import { map, publishReplay, refCount, mergeMapTo } from 'rxjs/operators';
import { operationArgs } from './operationArgs';
import { getOperationEvents } from './operationEvents';
import { createOperationsAPI, GUARDED } from './operations';
const cache = new Map();
export const editOperations = (ctx, idPair, typeName) => {
  const key = "".concat(idPair.publishedId, ":").concat(typeName);
  let ret = cache.get(key);

  if (!ret) {
    const operationEvents = getOperationEvents(ctx); // To makes sure we connect the stream that actually performs the operations

    const operationResults$ = operationEvents(idPair, typeName).pipe(mergeMapTo(EMPTY));
    const operationArgs$ = operationArgs(ctx, idPair, typeName);
    const operations$ = operationArgs$.pipe(map(createOperationsAPI));
    ret = concat(of(GUARDED), merge(operationResults$, operations$)).pipe(publishReplay(1), refCount());
    cache.set(key, ret);
  }

  return ret;
};