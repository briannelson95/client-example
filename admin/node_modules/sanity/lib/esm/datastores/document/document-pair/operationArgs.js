/* eslint-disable @typescript-eslint/no-use-before-define */
import { combineLatest } from 'rxjs';
import { map, publishReplay, refCount, switchMap } from 'rxjs/operators';
import { memoize } from '../utils/createMemoizer';
import { snapshotPair } from './snapshotPair';
export const operationArgs = memoize((ctx, idPair, typeName) => {
  return snapshotPair(ctx.client, idPair, typeName).pipe(switchMap(versions => combineLatest([versions.draft.snapshots$, versions.published.snapshots$]).pipe(map(_ref => {
    let [draft, published] = _ref;
    return { ...ctx,
      idPair,
      typeName: typeName,
      snapshots: {
        draft,
        published
      },
      draft: versions.draft,
      published: versions.published
    };
  }))), publishReplay(1), refCount());
}, (_ctx, idPair, typeName) => idPair.publishedId + typeName);