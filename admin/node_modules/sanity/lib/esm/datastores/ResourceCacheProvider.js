import React, { createContext, useContext, useMemo } from 'react';
import { createMultiKeyWeakMap } from './createMultiKeyWeakMap';
const ResourceCacheContext = /*#__PURE__*/createContext(null);
export function ResourceCacheProvider(_ref) {
  let {
    children
  } = _ref;
  const resourceCache = useMemo(() => {
    const namespaces = new Map(); // this is used to replace the `null` values in any `dependencies` so that
    // they can be used in the `MultiKeyWeakMap` which doesn't accept null

    const nullReplacer = {};
    return {
      get: _ref2 => {
        let {
          namespace,
          dependencies
        } = _ref2;
        const dependenciesWithoutNull = dependencies.map(dep => dep === null ? nullReplacer : dep);
        const namespaceMap = namespaces.get(namespace);
        return namespaceMap === null || namespaceMap === void 0 ? void 0 : namespaceMap.get(dependenciesWithoutNull);
      },
      set: _ref3 => {
        let {
          namespace,
          dependencies,
          value
        } = _ref3;
        const namespaceMap = namespaces.get(namespace) || createMultiKeyWeakMap();
        const dependenciesWithoutNull = dependencies.map(dep => dep === null ? nullReplacer : dep);
        namespaces.set(namespace, namespaceMap);
        namespaceMap.set(dependenciesWithoutNull, value);
      }
    };
  }, []);
  return /*#__PURE__*/React.createElement(ResourceCacheContext.Provider, {
    value: resourceCache
  }, children);
}
export function useResourceCache() {
  const cache = useContext(ResourceCacheContext);
  if (!cache) throw new Error('Could not find `cache` context');
  return cache;
}