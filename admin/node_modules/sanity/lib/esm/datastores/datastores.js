/* eslint-disable camelcase */
import { useMemo } from 'react';
import { useClient, useSchema, useTemplates } from '../hooks';
import { useSource, useWorkspace } from '../studio';
import { createDocumentPreviewStore } from '../preview';
import { createConnectionStatusStore } from './connection-status/connection-status-store';
import { __tmp_wrap_crossProjectToken } from './crossProjectToken';
import { createDocumentStore } from './document';
import { createGrantsStore } from './grants';
import { createHistoryStore } from './history';
import { __tmp_wrap_presenceStore } from './presence';
import { createProjectStore } from './project';
import { useResourceCache } from './ResourceCacheProvider';
import { createSettingsStore } from './settings';
import { createUserStore, useCurrentUser } from './user';
export function useUserStore() {
  const {
    client,
    currentUser
  } = useSource();
  const resourceCache = useResourceCache();
  return useMemo(() => {
    const userStore = resourceCache.get({
      namespace: 'userStore',
      dependencies: [client, currentUser]
    }) || createUserStore({
      client,
      currentUser
    });
    resourceCache.set({
      namespace: 'userStore',
      dependencies: [client, currentUser],
      value: userStore
    });
    return userStore;
  }, [client, currentUser, resourceCache]);
}
export function useGrantsStore() {
  const {
    client
  } = useSource();
  const currentUser = useCurrentUser();
  const resourceCache = useResourceCache();
  return useMemo(() => {
    const grantsStore = resourceCache.get({
      namespace: 'grantsStore',
      dependencies: [client, currentUser]
    }) || createGrantsStore({
      client,
      currentUser
    });
    resourceCache.set({
      namespace: 'grantsStore',
      dependencies: [client, currentUser],
      value: grantsStore
    });
    return grantsStore;
  }, [client, currentUser, resourceCache]);
}
export function useHistoryStore() {
  const client = useClient();
  const resourceCache = useResourceCache();
  return useMemo(() => {
    const historyStore = resourceCache.get({
      namespace: 'historyStore',
      dependencies: [client]
    }) || createHistoryStore({
      client
    });
    resourceCache.set({
      namespace: 'historyStore',
      dependencies: [client],
      value: historyStore
    });
    return historyStore;
  }, [client, resourceCache]);
}
export function useDocumentPreviewStore() {
  const client = useClient();
  const resourceCache = useResourceCache();
  const crossProjectTokenStore = useCrossProjectTokenStore();
  return useMemo(() => {
    const documentPreviewStore = resourceCache.get({
      namespace: 'documentPreviewStore',
      dependencies: [client, crossProjectTokenStore]
    }) || createDocumentPreviewStore({
      client,
      crossProjectTokenStore
    });
    resourceCache.set({
      namespace: 'documentPreviewStore',
      dependencies: [client, crossProjectTokenStore],
      value: documentPreviewStore
    });
    return documentPreviewStore;
  }, [client, resourceCache, crossProjectTokenStore]);
}
export function useCrossProjectTokenStore() {
  const client = useClient();
  const resourceCache = useResourceCache();
  return useMemo(() => {
    const crossProjectTokenStore = resourceCache.get({
      namespace: 'crossProjectTokenStore',
      dependencies: [client]
    }) || __tmp_wrap_crossProjectToken({
      client
    });

    resourceCache.set({
      namespace: 'crossProjectTokenStore',
      dependencies: [client],
      value: crossProjectTokenStore
    });
    return crossProjectTokenStore;
  }, [client, resourceCache]);
}
export function useDocumentStore() {
  const client = useClient();
  const schema = useSchema();
  const templates = useTemplates();
  const resourceCache = useResourceCache();
  const historyStore = useHistoryStore();
  const documentPreviewStore = useDocumentPreviewStore();
  return useMemo(() => {
    const documentStore = resourceCache.get({
      namespace: 'documentStore',
      dependencies: [client, documentPreviewStore, historyStore, schema]
    }) || createDocumentStore({
      client,
      documentPreviewStore,
      historyStore,
      initialValueTemplates: templates,
      schema
    });
    resourceCache.set({
      namespace: 'documentStore',
      dependencies: [client, documentPreviewStore, historyStore, schema],
      value: documentStore
    });
    return documentStore;
  }, [client, documentPreviewStore, historyStore, resourceCache, schema, templates]);
}
export function useConnectionStatusStore() {
  const {
    bifur
  } = useSource().__internal;

  const resourceCache = useResourceCache();
  return useMemo(() => {
    const connectionStatusStore = resourceCache.get({
      namespace: 'connectionStatusStore',
      dependencies: [bifur]
    }) || createConnectionStatusStore({
      bifur
    });
    resourceCache.set({
      namespace: 'connectionStatusStore',
      dependencies: [bifur],
      value: connectionStatusStore
    });
    return connectionStatusStore;
  }, [bifur, resourceCache]);
}
export function usePresenceStore() {
  const {
    __internal: {
      bifur
    }
  } = useSource();
  const resourceCache = useResourceCache();
  const userStore = useUserStore();
  const connectionStatusStore = useConnectionStatusStore();
  return useMemo(() => {
    const presenceStore = resourceCache.get({
      namespace: 'presenceStore',
      dependencies: [bifur, connectionStatusStore, userStore]
    }) || __tmp_wrap_presenceStore({
      bifur,
      connectionStatusStore,
      userStore
    });

    resourceCache.set({
      namespace: 'presenceStore',
      dependencies: [bifur, connectionStatusStore, userStore],
      value: presenceStore
    });
    return presenceStore;
  }, [bifur, connectionStatusStore, resourceCache, userStore]);
}
export function useProjectStore() {
  const client = useClient();
  const resourceCache = useResourceCache();
  return useMemo(() => {
    const projectStore = resourceCache.get({
      namespace: 'projectStore',
      dependencies: [client]
    }) || createProjectStore({
      client
    });
    resourceCache.set({
      namespace: 'projectStore',
      dependencies: [client],
      value: projectStore
    });
    return projectStore;
  }, [client, resourceCache]);
}
export function useSettingsStore() {
  const resourceCache = useResourceCache();
  const workspace = useWorkspace();
  return useMemo(() => {
    const settingsStore = resourceCache.get({
      dependencies: [workspace],
      namespace: 'settingsStore'
    }) || createSettingsStore();
    resourceCache.set({
      dependencies: [workspace],
      namespace: 'settingsStore',
      value: settingsStore
    });
    return settingsStore;
  }, [resourceCache, workspace]);
}