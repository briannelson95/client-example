import { prettifyQuotaError } from '../../util/prettifyQuotaError';
const helpText = "\nOptions\n  --role Role to invite the user as\n\nExamples\n  # Invite a new user to the project (prompt for details)\n  sanity users invite\n\n  # Send a new user invite to the email \"pippi@sanity.io\", prompt for role\n  sanity users invite pippi@sanity.io\n\n  # Send a new user invite to the email \"pippi@sanity.io\", as administrator\n  sanity users invite pippi@sanity.io --role administrator\n";
const inviteUserCommand = {
  name: 'invite',
  group: 'users',
  signature: '[EMAIL]',
  helpText,
  description: 'Invite a new user to the project',
  action: async (args, context) => {
    const {
      apiClient,
      output,
      prompt
    } = context;
    const [selectedEmail] = args.argsWithoutOptions;
    const flags = args.extOptions;
    const client = apiClient().clone().config({
      useProjectHostname: false,
      apiVersion: '2021-06-07'
    });
    const {
      projectId
    } = client.config();
    const roles = (await client.request({
      uri: "/projects/".concat(projectId, "/roles")
    })).filter(role => role.appliesToUsers);
    const email = selectedEmail || (await promptForEmail(prompt));
    const selectedRole = flags.role || (await promptForRole(prompt, roles));
    const role = roles.find(_ref => {
      let {
        name
      } = _ref;
      return name.toLowerCase() === selectedRole.toLowerCase();
    });

    if (!role) {
      throw new Error("Role name \"".concat(selectedRole, "\" not found"));
    }

    await client.clone().request({
      method: 'POST',
      uri: "/invitations/project/".concat(projectId),
      body: {
        email,
        role: role.name
      },
      useGlobalApi: true,
      maxRedirects: 0
    }).catch(prettifyQuotaError('Project is already at user quota, add billing details to the project in order to allow overage charges.'));
    output.print("Invitation sent to ".concat(email));
  }
};
export default inviteUserCommand;

function promptForEmail(prompt) {
  return prompt.single({
    type: 'input',
    message: 'Email to invite:',
    filter: val => val.trim(),
    validate: name => {
      if (!name || !name.includes('@')) {
        return 'Invalid email';
      }

      return true;
    }
  });
}

function promptForRole(prompt, roles) {
  return prompt.single({
    type: 'list',
    message: 'Which role should the user have?',
    choices: roles.map(role => ({
      value: role.name,
      name: "".concat(role.title, " (").concat(role.description, ")")
    }))
  });
}