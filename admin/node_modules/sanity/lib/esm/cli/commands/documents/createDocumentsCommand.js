import _noop from "lodash/noop";
import _isEqual from "lodash/isEqual";
import _isPlainObject from "lodash/isPlainObject";
import path from 'path';
import fs from 'fs/promises';
import os from 'os';
import json5 from 'json5';
import execa from 'execa';
import chokidar from 'chokidar';
import { uuid } from '@sanity/uuid';
const helpText = "\nOptions\n  --replace On duplicate document IDs, replace existing document with specified document(s)\n  --missing On duplicate document IDs, don't modify the target document(s)\n  --watch   Write the documents whenever the target file or buffer changes\n  --json5   Use JSON5 file type to allow a \"simplified\" version of JSON\n  --id <id> Specify a document ID to use. Will fetch remote document ID and populate editor.\n  --dataset NAME to override dataset\n\nExamples\n  # Create the document specified in \"myDocument.json\".\n  sanity documents create myDocument.json\n\n  # Open configured $EDITOR and create the specified document(s)\n  sanity documents create\n\n  # Fetch document with the ID \"myDocId\" and open configured $EDITOR with the\n  # current document content (if any). Replace document with the edited version\n  # when the editor closes\n  sanity documents create --id myDocId --replace\n\n  # Open configured $EDITOR and replace the document with the given content\n  # on each save. Use JSON5 file extension and parser for simplified syntax.\n  sanity documents create --id myDocId --watch --replace --json5\n";
const createDocumentsCommand = {
  name: 'create',
  group: 'documents',
  signature: '[FILE]',
  helpText,
  description: 'Create one or more documents',
  // eslint-disable-next-line complexity
  action: async (args, context) => {
    const {
      apiClient,
      output
    } = context;
    const {
      replace,
      missing,
      watch,
      id,
      dataset
    } = args.extOptions;
    const [file] = args.argsWithoutOptions;
    const useJson5 = args.extOptions.json5;
    const client = dataset ? apiClient().clone().config({
      dataset
    }) : apiClient();

    if (replace && missing) {
      throw new Error('Cannot use both --replace and --missing');
    }

    if (id && file) {
      throw new Error('Cannot use --id when specifying a file path');
    }

    let operation = 'create';

    if (replace || missing) {
      operation = replace ? 'createOrReplace' : 'createIfNotExists';
    }

    if (file) {
      const contentPath = path.resolve(process.cwd(), file);
      const content = json5.parse(await fs.readFile(contentPath, 'utf8'));
      const result = await writeDocuments(content, operation, client);
      output.print(getResultMessage(result, operation));
      return;
    } // Create a temporary file and use that as source, opening an editor on it


    const docId = id || uuid();
    const ext = useJson5 ? 'json5' : 'json';
    const tmpFile = path.join(os.tmpdir(), 'sanity-cli', "".concat(docId, ".").concat(ext));
    const stringify = useJson5 ? json5.stringify : JSON.stringify;
    const defaultValue = id && (await client.getDocument(id)) || {
      _id: docId,
      _type: 'specify-me'
    };
    await fs.mkdir(path.join(os.tmpdir(), 'sanity-cli'), {
      recursive: true
    });
    await fs.writeFile(tmpFile, stringify(defaultValue, null, 2), 'utf8');
    const editor = getEditor();

    if (watch) {
      // If we're in watch mode, we want to run the creation on each change (if it validates)
      registerUnlinkOnSigInt(tmpFile);
      output.print("Watch mode: ".concat(tmpFile));
      output.print('Watch mode: Will write documents on each save.');
      output.print('Watch mode: Press Ctrl + C to cancel watch mode.');
      chokidar.watch(tmpFile).on('change', () => {
        output.print('');
        return readAndPerformCreatesFromFile(tmpFile);
      });
      execa(editor.bin, editor.args.concat(tmpFile), {
        stdio: 'inherit'
      });
    } else {
      // While in normal mode, we just want to wait for the editor to close and run the thing once
      execa.sync(editor.bin, editor.args.concat(tmpFile), {
        stdio: 'inherit'
      });
      await readAndPerformCreatesFromFile(tmpFile);
      await fs.unlink(tmpFile).catch(_noop);
    }

    async function readAndPerformCreatesFromFile(filePath) {
      let content;

      try {
        content = json5.parse(await fs.readFile(filePath, 'utf8'));
      } catch (err) {
        output.error("Failed to read input: ".concat(err.message));
        return;
      }

      if (_isEqual(content, defaultValue)) {
        output.print('Value not modified, doing nothing.');
        output.print('Modify document to trigger creation.');
        return;
      }

      try {
        const writeResult = await writeDocuments(content, operation, client);
        output.print(getResultMessage(writeResult, operation));
      } catch (err) {
        output.error("Failed to write documents: ".concat(err.message));

        if (err.message.includes('already exists')) {
          output.error('Perhaps you want to use `--replace` or `--missing`?');
        }
      }
    }
  }
};

function registerUnlinkOnSigInt(tmpFile) {
  process.on('SIGINT', async () => {
    await fs.unlink(tmpFile).catch(_noop); // eslint-disable-next-line no-process-exit

    process.exit(130);
  });
}

function writeDocuments(documents, operation, client) {
  const docs = Array.isArray(documents) ? documents : [documents];

  if (docs.length === 0) {
    throw new Error('No documents provided');
  }

  const mutations = docs.map((doc, index) => {
    validateDocument(doc, index, docs);

    if (operation === 'create') {
      return {
        create: doc
      };
    }

    if (operation === 'createIfNotExists') {
      if (isIdentifiedSanityDocument(doc)) {
        return {
          createIfNotExists: doc
        };
      }

      throw new Error("Missing required _id attribute for ".concat(operation));
    }

    if (operation === 'createOrReplace') {
      if (isIdentifiedSanityDocument(doc)) {
        return {
          createOrReplace: doc
        };
      }

      throw new Error("Missing required _id attribute for ".concat(operation));
    }

    throw new Error("Unsupported operation ".concat(operation));
  });
  return client.transaction(mutations).commit();
}

function validateDocument(doc, index, arr) {
  const isSingle = arr.length === 1;

  if (!_isPlainObject(doc)) {
    throw new Error(getErrorMessage('must be an object', index, isSingle));
  }

  if (!isSanityDocumentish(doc)) {
    throw new Error(getErrorMessage('must have a `_type` property of type string', index, isSingle));
  }
}

function isSanityDocumentish(doc) {
  return doc !== null && typeof doc === 'object' && '_type' in doc && typeof doc._type === 'string';
}

function isIdentifiedSanityDocument(doc) {
  return isSanityDocumentish(doc) && '_id' in doc;
}

function getErrorMessage(message, index, isSingle) {
  return isSingle ? "Document ".concat(message) : "Document at index ".concat(index, " ").concat(message);
}

function getResultMessage(result, operation) {
  const joiner = '\n  - ';

  if (operation === 'createOrReplace') {
    return "Upserted:\n  - ".concat(result.results.map(res => res.id).join(joiner));
  }

  if (operation === 'create') {
    return "Created:\n  - ".concat(result.results.map(res => res.id).join(joiner));
  } // "Missing" (createIfNotExists)


  const created = [];
  const skipped = [];

  for (const res of result.results) {
    if (res.operation === 'update') {
      skipped.push(res.id);
    } else {
      created.push(res.id);
    }
  }

  if (created.length > 0 && skipped.length > 0) {
    return ["Created:\n  - ".concat(created.join(joiner)), "Skipped (already exists):".concat(joiner).concat(skipped.join(joiner))].join('\n\n');
  } else if (created.length > 0) {
    return "Created:\n  - ".concat(created.join(joiner));
  }

  return "Skipped (already exists):\n  - ".concat(skipped.join(joiner));
}

function getEditor() {
  const defaultEditor = /^win/.test(process.platform) ? 'notepad' : 'vim'; // eslint-disable-next-line no-process-env

  const editor = process.env.VISUAL || process.env.EDITOR || defaultEditor;
  const args = editor.split(/\s+/);
  const bin = args.shift() || '';
  return {
    bin,
    args
  };
}

export default createDocumentsCommand;