function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import getIt from 'get-it';
import { promise } from 'get-it/middleware';
const request = getIt([promise()]);
export class HttpError extends Error {
  constructor() {
    super(...arguments);

    _defineProperty(this, "statusCode", void 0);
  }

}
export async function getUrlHeaders(url) {
  let headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const response = await request({
    url,
    stream: true,
    maxRedirects: 0,
    method: 'HEAD',
    headers
  });

  if (response.statusCode >= 400) {
    const error = new HttpError("Request returned HTTP ".concat(response.statusCode));
    error.statusCode = response.statusCode;
    throw error;
  }

  response.body.resume();
  return response.headers;
}