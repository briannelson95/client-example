import path from 'path'; // eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore The `@sanity/server` may not be built yet.

import { startDevServer } from '@sanity/server';
import { getTimer } from '../../util/timing';
import { checkStudioDependencyVersions } from '../../util/checkStudioDependencyVersions';
import { checkRequiredDependencies } from '../../util/checkRequiredDependencies';
export default async function startSanityDevServer(args, context) {
  const timers = getTimer();
  const flags = args.extOptions;
  const {
    output,
    workDir,
    cliConfig
  } = context;
  timers.start('checkStudioDependencyVersions');
  await checkStudioDependencyVersions(workDir);
  timers.end('checkStudioDependencyVersions'); // If the check resulted in a dependency install, the CLI command will be re-run,
  // thus we want to exit early

  if ((await checkRequiredDependencies(context)).didInstall) {
    return;
  } // Try to load CLI configuration from sanity.cli.(js|ts)


  const configSpinner = output.spinner('Checking configuration files...');
  const config = getDevServerConfig({
    flags,
    workDir,
    cliConfig
  });
  configSpinner.succeed();

  try {
    await startDevServer(config);
  } catch (err) {
    gracefulDeath(config.httpHost, config.httpPort, err);
  }
}
/**
 * Resolves the configuration for the dev server using:
 *
 * - CLI flags
 * - Environment variables
 * - User build config
 * - Default configuration
 */

function getDevServerConfig(_ref) {
  var _cliConfig$server, _cliConfig$server2, _cliConfig$project;

  let {
    flags,
    workDir,
    cliConfig
  } = _ref;
  // Order of preference: CLI flags, environment variables, user build config, default config
  const env = process.env; // eslint-disable-line no-process-env

  const httpHost = flags.host || env.SANITY_STUDIO_SERVER_HOSTNAME || (cliConfig === null || cliConfig === void 0 ? void 0 : (_cliConfig$server = cliConfig.server) === null || _cliConfig$server === void 0 ? void 0 : _cliConfig$server.hostname) || 'localhost';
  const httpPort = toInt(flags.port || env.SANITY_STUDIO_SERVER_PORT || (cliConfig === null || cliConfig === void 0 ? void 0 : (_cliConfig$server2 = cliConfig.server) === null || _cliConfig$server2 === void 0 ? void 0 : _cliConfig$server2.port), 3333);
  const basePath = env.SANITY_STUDIO_BASEPATH || (cliConfig === null || cliConfig === void 0 ? void 0 : (_cliConfig$project = cliConfig.project) === null || _cliConfig$project === void 0 ? void 0 : _cliConfig$project.basePath) || '/';
  return {
    cwd: workDir,
    httpPort,
    httpHost,
    basePath,
    staticPath: path.join(workDir, 'static'),
    vite: cliConfig === null || cliConfig === void 0 ? void 0 : cliConfig.vite
  };
}

function gracefulDeath(httpHost, httpPort, err) {
  if (err.code === 'EADDRINUSE') {
    throw new Error('Port number is already in use, configure `server.port` in `sanity.cli.js` or pass `--port <somePort>` to `sanity start`');
  }

  if (err.code === 'EACCES') {
    const help = httpPort < 1024 ? 'port numbers below 1024 requires root privileges' : "do you have access to listen to the given host (".concat(httpHost || '127.0.0.1', ")?");
    throw new Error("The studio server does not have access to listen to given port - ".concat(help));
  }

  throw err;
}

function toInt(value, defaultValue) {
  if (typeof value === undefined) {
    return defaultValue;
  }

  const intVal = parseInt("".concat(value), 10);
  return Number.isFinite(intVal) ? intVal : defaultValue;
}