import _upperFirst from "lodash/upperFirst";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import logSymbols from 'log-symbols';
import { generateHelpUrl } from '@sanity/generate-help-url';
// eslint-disable-next-line no-console
const consoleOutputter = {
  error: function () {
    return console.error(...arguments);
  }
};
export class SchemaError extends Error {
  constructor(problemGroups) {
    super('Schema errors encountered');

    _defineProperty(this, "problemGroups", void 0);

    this.problemGroups = problemGroups;
  }

  print(output) {
    const logger = output || consoleOutputter;
    logger.error('Uh ohâ€¦ found errors in schema:\n');
    this.problemGroups.forEach(group => {
      group.problems.forEach(problem => {
        const icon = logSymbols[problem.severity] || logSymbols.info;
        output.error("  ".concat(icon, " ").concat(_upperFirst(problem.severity), ": ").concat(getPath(group.path)));
        output.error("  ".concat(problem.message));

        if (problem.helpId) {
          output.error("  See ".concat(generateHelpUrl(problem.helpId)));
        }

        output.error('');
      });
    });
  }

}

function getPath(path) {
  return path.map(segment => {
    if (segment.kind === 'type' && segment.name && segment.type) {
      return "".concat(segment.name, " - (").concat(segment.type, ")");
    }

    if (segment.kind === 'property' && segment.name) {
      return segment.name;
    }

    return null;
  }).filter(Boolean).join(' / ');
}