import { uuid } from '@sanity/uuid';
import { EMPTY_PARAMS } from './constants';
const state = {
  activePanes: []
};
export function setActivePanes(panes) {
  state.activePanes = panes;
}
/**
 * This function looks at the _active panes_ to resolve an intent. this type of
 * intent resolution is faster and does not cause the panes to reset
 *
 * @internal
 */

export function getIntentState(intent, params, routerState, payload) {
  const panes = (routerState === null || routerState === void 0 ? void 0 : routerState.panes) || [];
  const activePanes = state.activePanes || [];
  const editDocumentId = params.id || uuid();
  const isTemplate = intent === 'create' && params.template; // Loop through open panes and see if any of them can handle the intent

  for (let i = activePanes.length - 1; i >= 0; i--) {
    var _pane$canHandleIntent;

    const pane = activePanes[i];
    if (typeof pane !== 'object') continue; // NOTE: if you update this logic, please also update the similar handler in
    // `resolveIntent.ts`

    if ((_pane$canHandleIntent = pane.canHandleIntent) !== null && _pane$canHandleIntent !== void 0 && _pane$canHandleIntent.call(pane, intent, params, {
      pane,
      index: i
    }) || // see `resolveIntent.ts` for more info
    pane.type === 'documentList' && pane.schemaTypeName === params.type && pane.options.filter === '_type == $type') {
      const paneParams = isTemplate ? {
        template: params.template
      } : EMPTY_PARAMS;
      return {
        panes: panes.slice(0, i).concat([[{
          id: editDocumentId,
          params: paneParams,
          payload
        }]])
      };
    }
  }

  return {
    intent: intent,
    params,
    payload
  };
}