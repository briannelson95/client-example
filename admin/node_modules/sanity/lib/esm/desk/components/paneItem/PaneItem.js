function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { FolderIcon, ChevronRightIcon, DocumentIcon } from '@sanity/icons';
import { isSanityDocument } from '@sanity/types';
import { Text } from '@sanity/ui';
import React, { forwardRef, useCallback, useEffect, useMemo, useState } from 'react';
import { PreviewCard } from '../../../components/PreviewCard';
import { useDocumentPresence, useDocumentPreviewStore } from '../../../datastores';
import { useSchema } from '../../../hooks';
import { SanityDefaultPreview } from '../../../preview';
import { MissingSchemaType } from '../MissingSchemaType';
import { usePaneRouter } from '../paneRouter';
import { PaneItemPreview } from './PaneItemPreview';

/**
 * Return `false` if we explicitly disable the icon.
 * Otherwise return the passed icon or the schema type icon as a backup.
 */
export function getIconWithFallback(icon, schemaType, defaultIcon) {
  if (icon === false) {
    return false;
  }

  return icon || schemaType && schemaType.icon || defaultIcon || false;
}
export function PaneItem(props) {
  const {
    icon,
    id,
    layout = 'default',
    pressed,
    schemaType,
    selected,
    title,
    value
  } = props;
  const schema = useSchema();
  const documentPreviewStore = useDocumentPreviewStore();
  const {
    ChildLink
  } = usePaneRouter();
  const documentPresence = useDocumentPresence(id);
  const hasSchemaType = Boolean(schemaType && schemaType.name && schema.get(schemaType.name));
  const [clicked, setClicked] = useState(false);
  const preview = useMemo(() => {
    if (value && isSanityDocument(value)) {
      if (!schemaType || !hasSchemaType) {
        return /*#__PURE__*/React.createElement(MissingSchemaType, {
          value: value
        });
      }

      return /*#__PURE__*/React.createElement(PaneItemPreview, {
        documentPreviewStore: documentPreviewStore,
        icon: getIconWithFallback(icon, schemaType, DocumentIcon),
        layout: layout,
        schemaType: schemaType,
        value: value,
        presence: documentPresence
      });
    }

    return /*#__PURE__*/React.createElement(SanityDefaultPreview, {
      status: /*#__PURE__*/React.createElement(Text, {
        muted: true
      }, /*#__PURE__*/React.createElement(ChevronRightIcon, null)),
      icon: getIconWithFallback(icon, schemaType, FolderIcon),
      layout: layout,
      title: title
    });
  }, [documentPreviewStore, hasSchemaType, icon, layout, schemaType, title, value, documentPresence]);
  const LinkComponent = useMemo(() =>
  /*#__PURE__*/
  // eslint-disable-next-line @typescript-eslint/no-shadow
  forwardRef(function LinkComponent(linkProps, ref) {
    return /*#__PURE__*/React.createElement(ChildLink, _extends({}, linkProps, {
      childId: id,
      ref: ref
    }));
  }), [ChildLink, id]);
  const handleClick = useCallback(() => setClicked(true), []); // Reset `clicked` state when `selected` prop changes

  useEffect(() => setClicked(false), [selected]);
  return useMemo(() => /*#__PURE__*/React.createElement(PreviewCard, {
    __unstable_focusRing: true,
    as: LinkComponent,
    "data-as": "a",
    "data-ui": "PaneItem",
    padding: 2,
    radius: 2,
    onClick: handleClick,
    pressed: pressed,
    selected: selected || clicked,
    tone: "inherit"
  }, preview), [clicked, handleClick, LinkComponent, pressed, preview, selected]);
}