import _isString from "lodash/isString";
import _isNumber from "lodash/isNumber";

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { isValidElement } from 'react';
import { Inline } from '@sanity/ui';
import { PublishedStatus } from '../PublishedStatus';
import { DraftStatus } from '../DraftStatus';
import { DocumentPreviewPresence } from '../../../presence';
import { SanityDefaultPreview } from '../../../preview';
import { isRecord } from '../../../util';
import { getPreviewStateObservable, getValueWithFallback } from './helpers';
export class PaneItemPreview extends React.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "state", {});

    _defineProperty(this, "subscription", void 0);

    const {
      value,
      schemaType
    } = props; // const {title} = value

    const title = isRecord(value.title) && /*#__PURE__*/isValidElement(value.title) || _isString(value.title) || _isNumber(value.title) ? value.title : null;
    let sync = true;
    this.subscription = getPreviewStateObservable(props.documentPreviewStore, schemaType, value._id, title).subscribe(state => {
      if (sync) {
        this.state = state;
      } else {
        this.setState(state);
      }
    });
    sync = false;
  }

  componentWillUnmount() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }

  render() {
    const {
      icon,
      layout,
      presence,
      value
    } = this.props;
    const {
      draft,
      published,
      isLoading
    } = this.state;
    const status = isLoading ? null : /*#__PURE__*/React.createElement(Inline, {
      space: 4
    }, presence && presence.length > 0 && /*#__PURE__*/React.createElement(DocumentPreviewPresence, {
      presence: presence
    }), /*#__PURE__*/React.createElement(PublishedStatus, {
      document: published
    }), /*#__PURE__*/React.createElement(DraftStatus, {
      document: draft
    }));
    return /*#__PURE__*/React.createElement(SanityDefaultPreview, _extends({}, getValueWithFallback({
      value,
      draft,
      published
    }), {
      isPlaceholder: isLoading,
      icon: icon,
      layout: layout,
      status: status
    }));
  }

}