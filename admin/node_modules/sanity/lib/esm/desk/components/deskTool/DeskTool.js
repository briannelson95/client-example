var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { PortalProvider, useToast } from '@sanity/ui';
import React, { memo, Fragment, useState, useEffect, useCallback } from 'react';
import styled from 'styled-components';
import isHotkey from 'is-hotkey';
import { useSchema } from '../../../hooks';
import { useRouter } from '../../../router';
import { LOADING_PANE } from '../../constants';
import { LoadingPane, DeskToolPane } from '../../panes';
import { useResolvedPanes } from '../../structureResolvers';
import { PaneLayout } from '../pane';
import { useDeskTool } from '../../useDeskTool';
import { _isCustomDocumentTypeDefinition } from '../../../util';
import { NoDocumentTypesScreen } from './NoDocumentTypesScreen';
const StyledPaneLayout = styled(PaneLayout)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  min-height: 100%;\n  min-width: 320px;\n"])));
const isSaveHotkey = isHotkey('mod+s');
/**
 * @internal
 */

export const DeskTool = /*#__PURE__*/memo(function DeskTool(_ref) {
  var _schema$_original;

  let {
    onPaneChange
  } = _ref;
  const {
    navigate
  } = useRouter();
  const {
    push: pushToast
  } = useToast();
  const schema = useSchema();
  const {
    layoutCollapsed,
    setLayoutCollapsed
  } = useDeskTool();
  const {
    paneDataItems,
    resolvedPanes,
    routerPanes
  } = useResolvedPanes();
  const [portalElement, setPortalElement] = useState(null);
  const handleRootCollapse = useCallback(() => setLayoutCollapsed(true), [setLayoutCollapsed]);
  const handleRootExpand = useCallback(() => setLayoutCollapsed(false), [setLayoutCollapsed]);
  useEffect(() => {
    // we check for length before emitting here to skip the initial empty array
    // state from the `useResolvedPanes` hook. there should always be a root
    // pane emitted on subsequent emissions
    if (resolvedPanes.length) {
      onPaneChange(resolvedPanes);
    }
  }, [onPaneChange, resolvedPanes]); // The pane layout is "collapsed" on small screens, and only shows 1 pane at a time.
  // Remove pane siblings (i.e. split panes) as the pane layout collapses.

  useEffect(() => {
    if (!layoutCollapsed) return;
    const hasSiblings = routerPanes.some(group => group.length > 1);
    if (!hasSiblings) return;
    const withoutSiblings = routerPanes.map(group => [group[0]]);
    navigate({
      panes: withoutSiblings
    }, {
      replace: true
    });
  }, [navigate, layoutCollapsed, routerPanes]);
  useEffect(() => {
    const handleGlobalKeyDown = event => {
      // Prevent `Cmd+S`
      if (isSaveHotkey(event)) {
        event.preventDefault();
        pushToast({
          closable: true,
          id: 'auto-save-message',
          status: 'info',
          title: 'Your work is automatically saved!',
          duration: 4000
        });
      }
    };

    window.addEventListener('keydown', handleGlobalKeyDown);
    return () => window.removeEventListener('keydown', handleGlobalKeyDown);
  }, [pushToast]);
  const hasDefinedDocumentTypes = (_schema$_original = schema._original) === null || _schema$_original === void 0 ? void 0 : _schema$_original.types.some(_isCustomDocumentTypeDefinition);

  if (!hasDefinedDocumentTypes) {
    return /*#__PURE__*/React.createElement(NoDocumentTypesScreen, null);
  }

  return /*#__PURE__*/React.createElement(PortalProvider, {
    element: portalElement || null
  }, /*#__PURE__*/React.createElement(StyledPaneLayout, {
    flex: 1,
    height: layoutCollapsed ? undefined : 'fill',
    minWidth: 512,
    onCollapse: handleRootCollapse,
    onExpand: handleRootExpand
  }, paneDataItems.map(_ref2 => {
    let {
      active,
      childItemId,
      groupIndex,
      itemId,
      key: paneKey,
      pane,
      index: paneIndex,
      params: paneParams,
      path,
      payload,
      siblingIndex,
      selected
    } = _ref2;
    return /*#__PURE__*/React.createElement(Fragment, {
      key: "".concat(pane === LOADING_PANE ? 'loading' : pane.type, "-").concat(paneIndex)
    }, pane === LOADING_PANE ? /*#__PURE__*/React.createElement(LoadingPane, {
      paneKey: paneKey,
      path: path,
      selected: selected
    }) : /*#__PURE__*/React.createElement(DeskToolPane, {
      active: active,
      groupIndex: groupIndex,
      index: paneIndex,
      pane: pane,
      childItemId: childItemId,
      itemId: itemId,
      paneKey: paneKey,
      params: paneParams,
      payload: payload,
      selected: selected,
      siblingIndex: siblingIndex
    }));
  })), /*#__PURE__*/React.createElement("div", {
    "data-portal": "",
    ref: setPortalElement
  }));
});