var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { generateHelpUrl } from '@sanity/generate-help-url';
import { Box, Button, Card, Code, Container, Heading, Label, Stack, Text } from '@sanity/ui';
import React, { useCallback } from 'react';
import styled from 'styled-components';
import { SyncIcon } from '@sanity/icons';
import { SerializeError } from '../../structureBuilder';
import { PaneResolutionError } from '../../structureResolvers';
const PathSegment = styled.span(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  &:not(:last-child)::after {\n    content: ' \u279D ';\n    opacity: 0.5;\n  }\n"])));

function formatStack(stack) {
  return stack // Prettify builder functions
  .replace(/\(\.\.\.\)\./g, '(...)\n  .') // Remove webpack cruft from function names
  .replace(/__WEBPACK_IMPORTED_MODULE_\d+_+/g, '') // Remove default export postfix from function names
  .replace(/___default\./g, '.') // Replace full host path, leave only path to JS-file
  .replace(new RegExp(" \\(https?:\\/\\/".concat(window.location.host), 'g'), ' (');
}

export function StructureError(_ref) {
  let {
    error
  } = _ref;

  if (!(error instanceof PaneResolutionError)) {
    throw error;
  }

  const {
    cause
  } = error; // Serialize errors are well-formatted and should be readable, in these cases a stack trace is
  // usually not helpful. Build errors in dev (with HMR) usually also contains a bunch of garbage
  // instead of an actual error message, so make sure we show the message in these cases as well

  const stack = (cause === null || cause === void 0 ? void 0 : cause.stack) || error.stack;
  const showStack = stack && !(cause instanceof SerializeError) && !error.message.includes('Module build failed:');
  const path = cause instanceof SerializeError ? cause.path : [];
  const helpId = cause instanceof SerializeError && cause.helpId || error.helpId;
  const handleReload = useCallback(() => {
    window.location.reload();
  }, []);
  return /*#__PURE__*/React.createElement(Card, {
    height: "fill",
    overflow: "auto",
    padding: 4,
    sizing: "border",
    tone: "critical"
  }, /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Heading, {
    as: "h2"
  }, "Encountered an error while reading structure"), /*#__PURE__*/React.createElement(Card, {
    marginTop: 4,
    padding: 4,
    radius: 2,
    overflow: "auto",
    shadow: 1,
    tone: "inherit"
  }, path.length > 0 && /*#__PURE__*/React.createElement(Stack, {
    space: 2
  }, /*#__PURE__*/React.createElement(Label, null, "Structure path"), /*#__PURE__*/React.createElement(Code, null, path.slice(1).map((segment, i) =>
  /*#__PURE__*/
  // eslint-disable-next-line react/no-array-index-key
  React.createElement(PathSegment, {
    key: "".concat(segment, "-").concat(i)
  }, segment)))), /*#__PURE__*/React.createElement(Stack, {
    marginTop: 4,
    space: 2
  }, /*#__PURE__*/React.createElement(Label, null, "Error"), /*#__PURE__*/React.createElement(Code, null, showStack ? formatStack(stack) : error.message)), helpId && /*#__PURE__*/React.createElement(Box, {
    marginTop: 4
  }, /*#__PURE__*/React.createElement(Text, null, /*#__PURE__*/React.createElement("a", {
    href: generateHelpUrl(helpId),
    rel: "noopener noreferrer",
    target: "_blank"
  }, "View documentation"))), /*#__PURE__*/React.createElement(Box, {
    marginTop: 4
  }, /*#__PURE__*/React.createElement(Button, {
    text: "Reload",
    icon: SyncIcon,
    tone: "primary",
    onClick: handleReload
  })))));
}