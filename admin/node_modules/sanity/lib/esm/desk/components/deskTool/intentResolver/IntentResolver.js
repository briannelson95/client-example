import { Box, Card, Flex, Spinner, Text } from '@sanity/ui';
import React, { useEffect, useState } from 'react';
import { useDocumentStore } from '../../../../datastores';
import { useUnique } from '../../../../util';
import { resolveIntent } from '../../../structureResolvers';
import { useDeskTool } from '../../../useDeskTool';
import { Delay } from '../../Delay';
import { Redirect } from './Redirect';
import { ensureDocumentIdAndType } from './utils';

/**
 * A component that receives an intent from props and redirects to the resolved
 * intent location (while showing a loading spinner during the process)
 */
export function IntentResolver(_ref) {
  let {
    intent,
    params: paramsProp = {},
    payload: payloadProp
  } = _ref;
  const {
    rootPaneNode,
    structureContext
  } = useDeskTool();
  const documentStore = useDocumentStore();
  const params = useUnique(paramsProp);
  const payload = useUnique(payloadProp);
  const [nextRouterPanes, setNextRouterPanes] = useState(null);
  const [error, setError] = useState(null);
  const idParam = typeof params.id === 'string' ? params.id : undefined;
  const typeParam = typeof params.type === 'string' ? params.type : undefined;
  useEffect(() => {
    const cancelledRef = {
      current: false
    };

    async function getNextRouterPanes() {
      const {
        id,
        type
      } = await ensureDocumentIdAndType(documentStore, idParam, typeParam);
      return resolveIntent({
        intent,
        params: { ...params,
          id,
          type
        },
        payload,
        rootPaneNode,
        structureContext
      });
    }

    getNextRouterPanes().then(result => {
      if (!cancelledRef.current) {
        setNextRouterPanes(result);
      }
    }).catch(setError);
    return () => {
      cancelledRef.current = true;
    };
  }, [documentStore, idParam, intent, params, payload, rootPaneNode, structureContext, typeParam]); // throwing here bubbles the error up to the error boundary inside of the
  // `DeskToolRoot` component

  if (error) throw error;
  if (nextRouterPanes) return /*#__PURE__*/React.createElement(Redirect, {
    panes: nextRouterPanes
  });
  return /*#__PURE__*/React.createElement(Card, {
    height: "fill"
  }, /*#__PURE__*/React.createElement(Delay, {
    ms: 300
  }, /*#__PURE__*/React.createElement(Flex, {
    align: "center",
    direction: "column",
    height: "fill",
    justify: "center"
  }, /*#__PURE__*/React.createElement(Spinner, {
    muted: true
  }), /*#__PURE__*/React.createElement(Box, {
    marginTop: 3
  }, /*#__PURE__*/React.createElement(Text, {
    align: "center",
    muted: true,
    size: 1
  }, "Loading\u2026")))));
}