function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useContext, useMemo } from 'react';
import { StateLink } from '../../../router';
import { useUnique } from '../../../util';
import { PaneRouterContext } from './PaneRouterContext';

/**
 * @internal
 */
export const ParameterizedLink = /*#__PURE__*/forwardRef(function ParameterizedLink(props, ref) {
  const {
    routerPanesState: currentPanes,
    groupIndex,
    siblingIndex
  } = useContext(PaneRouterContext);
  const {
    params,
    payload,
    ...rest
  } = props;
  const nextParams = useUnique(params);
  const nextPayload = useUnique(payload);
  const nextState = useMemo(() => {
    const currentGroup = currentPanes[groupIndex];
    const currentSibling = currentGroup[siblingIndex];
    const nextSibling = { ...currentSibling,
      params: nextParams !== null && nextParams !== void 0 ? nextParams : currentSibling.params,
      payload: nextPayload !== null && nextPayload !== void 0 ? nextPayload : currentSibling.payload
    };
    const nextGroup = [...currentGroup.slice(0, siblingIndex), nextSibling, ...currentGroup.slice(siblingIndex + 1)];
    const nextPanes = [...currentPanes.slice(0, groupIndex), nextGroup, ...currentPanes.slice(groupIndex + 1)];
    return {
      panes: nextPanes
    };
  }, [currentPanes, groupIndex, nextParams, nextPayload, siblingIndex]);
  return /*#__PURE__*/React.createElement(StateLink, _extends({
    ref: ref
  }, rest, {
    state: nextState
  }));
});