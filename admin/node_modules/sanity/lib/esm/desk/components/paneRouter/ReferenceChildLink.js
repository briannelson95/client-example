function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef } from 'react';
import { toString as pathToString } from '@sanity/util/paths';
import { ChildLink } from './ChildLink';
export const ReferenceChildLink = /*#__PURE__*/forwardRef(function ReferenceChildLink(_ref, ref) {
  let {
    documentId,
    documentType,
    parentRefPath,
    children,
    template,
    ...rest
  } = _ref;
  return /*#__PURE__*/React.createElement(ChildLink, _extends({}, rest, {
    ref: ref,
    childId: documentId,
    childPayload: template === null || template === void 0 ? void 0 : template.params,
    childParameters: {
      type: documentType,
      parentRefPath: pathToString(parentRefPath),
      ...(template && {
        template: template === null || template === void 0 ? void 0 : template.id
      })
    }
  }), children);
});