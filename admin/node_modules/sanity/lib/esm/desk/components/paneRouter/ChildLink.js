function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useContext } from 'react';
import { StateLink } from '../../../router';
import { PaneRouterContext } from './PaneRouterContext';

/**
 * @internal
 */
export const ChildLink = /*#__PURE__*/forwardRef(function ChildLink(props, ref) {
  const {
    childId,
    childPayload,
    childParameters,
    ...rest
  } = props;
  const {
    routerPanesState,
    groupIndex
  } = useContext(PaneRouterContext);
  return /*#__PURE__*/React.createElement(StateLink, _extends({}, rest, {
    ref: ref,
    state: {
      panes: [...routerPanesState.slice(0, groupIndex + 1), [{
        id: childId,
        params: childParameters,
        payload: childPayload
      }]]
    }
  }));
});