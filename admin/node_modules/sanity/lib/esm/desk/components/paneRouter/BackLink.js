function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useContext, useMemo } from 'react';
import { StateLink } from '../../../router';
import { PaneRouterContext } from './PaneRouterContext';

/**
 * @internal
 */
export const BackLink = /*#__PURE__*/forwardRef(function BackLink(props, ref) {
  const {
    routerPanesState,
    groupIndex
  } = useContext(PaneRouterContext);
  const panes = useMemo(() => routerPanesState.slice(0, groupIndex), [groupIndex, routerPanesState]);
  const state = useMemo(() => ({
    panes
  }), [panes]);
  return /*#__PURE__*/React.createElement(StateLink, _extends({}, props, {
    ref: ref,
    state: state
  }));
});