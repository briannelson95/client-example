var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { Layer } from '@sanity/ui';
import React, { useCallback, useState } from 'react';
import styled from 'styled-components';
import { usePaneLayout } from './usePaneLayout';
const Root = styled(Layer)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: relative;\n  width: 1px;\n  min-width: 1px;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    width: 1px;\n    background-color: var(--card-border-color);\n  }\n\n  &:not([data-disabled]) {\n    cursor: ew-resize;\n    width: 9px;\n    min-width: 9px;\n    margin: 0 -4px;\n\n    &:before {\n      left: 4px;\n    }\n\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 9px;\n      bottom: 0;\n      background-color: var(--card-border-color);\n      opacity: 0;\n      transition: opacity 150ms;\n    }\n\n    &[data-dragging]:after,\n    &:hover:after {\n      opacity: 0.2;\n    }\n  }\n"])));
/**
 * @beta This API will change. DO NOT USE IN PRODUCTION.
 */

export function PaneDivider(_ref) {
  let {
    disabled,
    element
  } = _ref;
  const {
    resize
  } = usePaneLayout();
  const [dragging, setDragging] = useState(false);
  const handleMouseDown = useCallback(event => {
    if (!element) return;
    setDragging(true);
    event.preventDefault();
    const startX = event.pageX;
    resize('start', element, 0);

    const handleMouseMove = e => {
      e.preventDefault();
      const deltaX = e.pageX - startX;
      resize('move', element, deltaX);
    };

    const handleMouseUp = e => {
      e.preventDefault();
      setDragging(false);
      window.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('mouseup', handleMouseUp);
      resize('end', element, 0);
    };

    window.addEventListener('mousemove', handleMouseMove);
    window.addEventListener('mouseup', handleMouseUp);
  }, [element, resize]);
  return /*#__PURE__*/React.createElement(Root, {
    "data-disabled": disabled ? '' : undefined,
    "data-dragging": dragging ? '' : undefined,
    onMouseDown: handleMouseDown
  });
}