function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef } from 'react';
import { usePane } from './usePane';
import { usePaneLayout } from './usePaneLayout';
import { Root } from './PaneContent.styles';

/**
 * @beta This API will change. DO NOT USE IN PRODUCTION.
 */
export const PaneContent = /*#__PURE__*/forwardRef(function PaneContent(props, ref) {
  const {
    as,
    children,
    overflow,
    padding,
    ...restProps
  } = props;
  const {
    collapsed
  } = usePane();
  const {
    collapsed: layoutCollapsed
  } = usePaneLayout();
  return /*#__PURE__*/React.createElement(Root, _extends({
    "data-testid": "pane-content",
    forwardedAs: as
  }, restProps, {
    flex: 1,
    hidden: collapsed,
    overflow: layoutCollapsed ? undefined : overflow,
    padding: padding,
    ref: ref,
    tone: "inherit"
  }), children);
});