import { Flex, ToastProvider, PortalProvider } from '@sanity/ui';
import React, { useState, useCallback } from 'react';
import { useBoolean } from '@sanity/ui-workshop';
import { PaneLayout } from '../../PaneLayout';
import { DocumentPane } from './DocumentPane';
import { ListPane } from './ListPane';
import { Navbar } from './Navbar';
import { panes } from './config';
export function SplitPanesStory() {
  const debug = useBoolean('Debug', false) || false;
  const [portalElement, setPortalElement] = useState(null);
  const [layoutCollapsed, setLayoutCollapsed] = useState(false);
  const [path, setPath] = useState(['root']);
  const handleCollapse = useCallback(() => setLayoutCollapsed(true), []);
  const handleExpand = useCallback(() => setLayoutCollapsed(false), []);
  return /*#__PURE__*/React.createElement(ToastProvider, {
    paddingY: 7,
    zOffset: [100, 11000]
  }, /*#__PURE__*/React.createElement(PortalProvider, {
    element: portalElement
  }, /*#__PURE__*/React.createElement(Flex, {
    direction: "column",
    height: layoutCollapsed ? undefined : 'fill',
    style: {
      minHeight: '100%'
    }
  }, /*#__PURE__*/React.createElement(Navbar, {
    path: path,
    setPath: setPath
  }), /*#__PURE__*/React.createElement(DeskTool, {
    collapsed: layoutCollapsed,
    onExpand: handleExpand,
    onCollapse: handleCollapse,
    path: path,
    setPath: setPath
  }))), /*#__PURE__*/React.createElement("div", {
    "data-portal": "",
    ref: setPortalElement,
    style: {
      outline: '1px solid red'
    }
  }));
}

function DeskTool(props) {
  const {
    collapsed,
    onCollapse,
    onExpand,
    path,
    setPath
  } = props;
  return /*#__PURE__*/React.createElement(PaneLayout, {
    flex: 1,
    height: collapsed ? undefined : 'fill',
    minWidth: 512,
    onCollapse: onCollapse,
    onExpand: onExpand
  }, path.map((s, i) => {
    const key = "".concat(s, "-").concat(i);
    const pane = panes.find(p => p.id === s);

    if (!pane) {
      return /*#__PURE__*/React.createElement("div", {
        key: key
      }, "not found: ", s);
    }

    if (pane.type === 'list') {
      return /*#__PURE__*/React.createElement(ListPane, {
        active: i === path.length - 2,
        childId: path[i + 1],
        index: i,
        key: key,
        node: pane,
        setPath: setPath
      });
    }

    return /*#__PURE__*/React.createElement(DocumentPane, {
      index: i,
      key: key,
      node: pane,
      setPath: setPath
    });
  }));
}