var _templateObject, _templateObject2;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { Box, Card, Code, Flex } from '@sanity/ui';
import React, { memo, useCallback, useEffect, useMemo, useState } from 'react';
import styled from 'styled-components';
import { usePaneLayout } from '../usePaneLayout';
import { PaneDivider } from '../PaneDivider';
import { PaneLayoutContext } from '../PaneLayoutContext';
import { PANE_COLLAPSED_WIDTH, PANE_DEFAULT_MIN_WIDTH } from '../constants';
import { createPaneLayoutController } from '../paneLayoutController';
const PaneLayoutRoot = styled(Flex)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  &[data-resizing] {\n    cursor: ew-resize;\n  }\n"])));
export default function ResizeStory() {
  const [rootElement, setRootElement] = useState(null);
  const controller = useMemo(() => createPaneLayoutController(), []);
  const collapsed = false;
  const [state, setState] = useState({
    expandedElement: null,
    panes: [],
    resizing: false
  });
  const paneLayout = useMemo(() => ({
    collapse: controller.collapse,
    collapsed,
    expand: controller.expand,
    expandedElement: state.expandedElement,
    mount: controller.mount,
    panes: state.panes,
    resize: controller.resize,
    resizing: state.resizing
  }), [collapsed, controller, state.expandedElement, state.panes, state.resizing]);
  useEffect(() => controller.subscribe(setState), [controller]);
  useEffect(() => {
    if (!rootElement) return undefined;
    const ro = new ResizeObserver(entries => {
      controller.setRootWidth(entries[0].contentRect.width);
    });
    ro.observe(rootElement);
    return () => ro.disconnect();
  }, [controller, rootElement]);
  return /*#__PURE__*/React.createElement(PaneLayoutContext.Provider, {
    value: paneLayout
  }, /*#__PURE__*/React.createElement(PaneLayoutRoot, {
    "data-resizing": state.resizing ? '' : undefined,
    height: "fill",
    ref: setRootElement
  }, /*#__PURE__*/React.createElement(Pane, {
    currentMinWidth: undefined // currentMaxWidth={320}
    ,
    flex: 1,
    minWidth: 160,
    maxWidth: 320
  }), /*#__PURE__*/React.createElement(Pane, {
    currentMinWidth: undefined // currentMaxWidth={320}
    ,
    flex: 1,
    minWidth: 160,
    maxWidth: 320
  }), /*#__PURE__*/React.createElement(Pane, {
    currentMinWidth: undefined // currentMaxWidth={320}
    ,
    flex: 1,
    minWidth: 160,
    maxWidth: 320
  }), /*#__PURE__*/React.createElement(Pane, {
    currentMinWidth: 320,
    currentMaxWidth: undefined,
    flex: 2,
    minWidth: 160,
    maxWidth: undefined
  })));
}

function Pane(props) {
  var _pane$flex, _pane$currentMinWidth, _pane$currentMaxWidth;

  const {
    currentMinWidth: currentMinWidthProp,
    currentMaxWidth: currentMaxWidthProp,
    flex: flexProp = 1,
    minWidth: minWidthProp,
    maxWidth: maxWidthProp
  } = props;
  const [rootElement, setRootElement] = useState(null);
  const {
    collapse,
    expand,
    expandedElement,
    mount,
    panes,
    resizing
  } = usePaneLayout();
  const pane = panes.find(p => p.element === rootElement);
  const paneIndex = pane && panes.indexOf(pane);
  const nextPane = typeof paneIndex === 'number' ? panes[paneIndex + 1] : undefined;
  const isLast = !nextPane;
  const expanded = expandedElement === rootElement;
  const collapsed = (pane === null || pane === void 0 ? void 0 : pane.collapsed) || false;
  const nextCollapsed = (nextPane === null || nextPane === void 0 ? void 0 : nextPane.collapsed) || false;
  const flex = (_pane$flex = pane === null || pane === void 0 ? void 0 : pane.flex) !== null && _pane$flex !== void 0 ? _pane$flex : flexProp;
  const currentMinWidth = (_pane$currentMinWidth = pane === null || pane === void 0 ? void 0 : pane.currentMinWidth) !== null && _pane$currentMinWidth !== void 0 ? _pane$currentMinWidth : currentMinWidthProp;
  const currentMaxWidth = (_pane$currentMaxWidth = pane === null || pane === void 0 ? void 0 : pane.currentMaxWidth) !== null && _pane$currentMaxWidth !== void 0 ? _pane$currentMaxWidth : currentMaxWidthProp;
  useEffect(() => {
    if (!rootElement) {
      return undefined;
    }

    return mount(rootElement, {
      currentMinWidth: currentMinWidthProp,
      currentMaxWidth: currentMaxWidthProp,
      flex: flexProp,
      id: String(paneIndex),
      minWidth: minWidthProp,
      maxWidth: maxWidthProp
    });
  }, [currentMinWidthProp, currentMaxWidthProp, flexProp, minWidthProp, maxWidthProp, mount, paneIndex, rootElement]);
  const minWidth = useMemo(() => {
    if (collapsed) return PANE_COLLAPSED_WIDTH;

    if (currentMinWidth === 0) {
      return minWidthProp || PANE_DEFAULT_MIN_WIDTH;
    }

    return currentMinWidth || minWidthProp || PANE_DEFAULT_MIN_WIDTH;
  }, [collapsed, currentMinWidth, minWidthProp]);
  const maxWidth = useMemo(() => {
    if (collapsed) return PANE_COLLAPSED_WIDTH;

    if (maxWidthProp !== undefined) {
      return currentMaxWidth !== null && currentMaxWidth !== void 0 ? currentMaxWidth : maxWidthProp;
    }

    return isLast ? undefined : currentMaxWidth;
  }, [collapsed, currentMaxWidth, isLast, maxWidthProp]);
  const handleCollapse = useCallback(() => {
    if (!rootElement) return;
    collapse(rootElement);
  }, [collapse, rootElement]);
  const handleExpand = useCallback(() => {
    if (!rootElement) return;
    expand(rootElement);
  }, [expand, rootElement]);
  return /*#__PURE__*/React.createElement(PaneView, {
    collapsed: collapsed,
    currentMinWidth: currentMinWidth,
    currentMaxWidth: currentMaxWidth,
    expanded: expanded,
    flex: flex,
    index: paneIndex,
    isLast: isLast,
    minWidth: minWidth,
    maxWidth: maxWidth,
    nextCollapsed: nextCollapsed,
    onCollapse: handleCollapse,
    onExpand: handleExpand,
    resizing: resizing,
    rootElement: rootElement,
    setRootElement: setRootElement
  });
}

const PaneViewRoot = styled(Card)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  box-shadow: 0 0 0 1px var(--card-border-color) !important;\n\n  &[data-resizing] {\n    pointer-events: none;\n  }\n\n  & + & {\n    margin-left: 1px;\n  }\n"])));
const PaneView = /*#__PURE__*/memo(function PaneView(props) {
  const {
    collapsed,
    currentMinWidth,
    currentMaxWidth,
    expanded,
    flex,
    index,
    isLast,
    minWidth,
    maxWidth,
    nextCollapsed,
    onCollapse,
    onExpand,
    resizing,
    rootElement,
    setRootElement
  } = props;
  const style = useMemo(() => ({
    flex,
    minWidth,
    maxWidth: maxWidth === Infinity ? undefined : maxWidth
  }), [flex, minWidth, maxWidth]);
  const handleClick = useCallback(() => {
    if (collapsed) onExpand();else onCollapse();
  }, [collapsed, onCollapse, onExpand]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PaneViewRoot, {
    "data-as": "button",
    "data-resizing": resizing ? '' : undefined,
    id: "pane-".concat(index),
    onClick: handleClick,
    overflow: "hidden",
    ref: setRootElement,
    style: style,
    tone: expanded ? 'primary' : undefined
  }, !collapsed && /*#__PURE__*/React.createElement(Box, {
    padding: 4
  }, /*#__PURE__*/React.createElement(Code, {
    size: 1
  }, ["#".concat(index), "collapsed=".concat(collapsed), "currentMinWidth=".concat(currentMinWidth), "currentMaxWidth=".concat(currentMaxWidth), "flex=".concat(flex), "minWidth=".concat(minWidth), "maxWidth=".concat(maxWidth)].join('\n')))), !isLast && /*#__PURE__*/React.createElement(PaneDivider, {
    disabled: collapsed || nextCollapsed,
    element: rootElement
  }));
});