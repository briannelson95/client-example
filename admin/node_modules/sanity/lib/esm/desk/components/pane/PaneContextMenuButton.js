function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { useId } from '@reach/auto-id';
import { EllipsisVerticalIcon } from '@sanity/icons';
import { Box, Button, Label, Menu, MenuButton, MenuDivider, MenuItem } from '@sanity/ui';
import React, { forwardRef, Fragment, useCallback, useMemo } from 'react';
import { IntentLink } from '../../../router';
const CONTEXT_MENU_POPOVER_PROPS = {
  constrainSize: true,
  placement: 'bottom',
  portal: true
};
/**
 * @beta This API will change. DO NOT USE IN PRODUCTION.
 */

export function PaneContextMenuButton(props) {
  const {
    items,
    itemGroups,
    onAction
  } = props;
  const id = useId() || '';
  const groups = useMemo(() => {
    if (!itemGroups || itemGroups.length === 0) {
      return [{
        id: '$default',
        items
      }];
    }

    const defaultGroup = {
      id: '$default',
      items: []
    };
    const groupMap = itemGroups.reduce((acc, group) => {
      acc[group.id] = {
        id: group.id,
        title: group.title,
        items: []
      };
      return acc;
    }, {});

    for (const item of items) {
      const group = groupMap[item.group || '$default'] || defaultGroup;
      group.items.push(item);
    }

    return Object.values(groupMap).concat([defaultGroup]).filter(g => g.items.length > 0);
  }, [items, itemGroups]);
  return /*#__PURE__*/React.createElement(MenuButton, {
    button: /*#__PURE__*/React.createElement(Button, {
      icon: EllipsisVerticalIcon,
      mode: "bleed",
      padding: 3,
      title: "Show menu"
    }),
    id: id,
    menu: /*#__PURE__*/React.createElement(Menu, null, groups.map((group, groupIndex) =>
    /*#__PURE__*/
    // eslint-disable-next-line react/no-array-index-key
    React.createElement(Fragment, {
      key: groupIndex
    }, groupIndex > 0 && /*#__PURE__*/React.createElement(MenuDivider, null), group.title && /*#__PURE__*/React.createElement(Box, {
      paddingX: 3,
      paddingTop: 3,
      paddingBottom: 2
    }, /*#__PURE__*/React.createElement(Label, {
      muted: true
    }, group.title)), group.items.map((item, itemIndex) => /*#__PURE__*/React.createElement(PaneContextMenuItem, {
      item: item // eslint-disable-next-line react/no-array-index-key
      ,
      key: "".concat(itemIndex, "-").concat(item.title),
      onAction: onAction
    }))))),
    popover: CONTEXT_MENU_POPOVER_PROPS,
    portal: true
  });
}

function PaneContextMenuItem(props) {
  const {
    item,
    onAction
  } = props;
  const handleClick = useCallback(() => {
    onAction(item);
  }, [item, onAction]);
  const hotkeys = useMemo(() => {
    if (!item.shortcut) return undefined;
    return item.shortcut.split('+');
  }, [item]);
  const IntentButtonOrActionButton = /*#__PURE__*/forwardRef((linkProps, linkRef) => item.intent ? /*#__PURE__*/React.createElement(IntentLink, _extends({}, linkProps, {
    intent: item.intent.type,
    params: item.intent.params,
    ref: linkRef
  })) : /*#__PURE__*/React.createElement("button", _extends({
    type: "button"
  }, linkProps)));
  IntentButtonOrActionButton.displayName = 'Link';
  return /*#__PURE__*/React.createElement(MenuItem, {
    as: IntentButtonOrActionButton,
    "data-as": item.intent ? 'a' : 'button',
    hotkeys: hotkeys,
    icon: item.icon,
    onClick: handleClick,
    text: item.title
  });
}