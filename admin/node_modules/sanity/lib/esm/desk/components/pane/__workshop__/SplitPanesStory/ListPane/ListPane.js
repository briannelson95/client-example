import { ArrowLeftIcon, ChevronRightIcon, EllipsisVerticalIcon } from '@sanity/icons';
import { Box, Button, Card, Flex, Stack, Text } from '@sanity/ui';
import React, { useCallback } from 'react';
import { usePaneLayout } from '../../../usePaneLayout';
import { Pane } from '../../../Pane';
import { PaneContent } from '../../../PaneContent';
import { PaneHeader } from '../../../PaneHeader';
export function ListPane(props) {
  const {
    active,
    childId,
    index,
    node,
    setPath
  } = props;
  const {
    collapsed: layoutCollapsed
  } = usePaneLayout();
  const handleBackClick = useCallback(() => {
    setPath(p => p.slice(0, index));
  }, [index, setPath]);
  return /*#__PURE__*/React.createElement(Pane, {
    currentMaxWidth: 350,
    flex: 1,
    id: String(index),
    minWidth: 320,
    maxWidth: 640
  }, /*#__PURE__*/React.createElement(PaneHeader, {
    actions: /*#__PURE__*/React.createElement(Button, {
      icon: EllipsisVerticalIcon,
      mode: "bleed"
    }),
    backButton: index > 0 && layoutCollapsed && /*#__PURE__*/React.createElement(Button, {
      icon: ArrowLeftIcon,
      mode: "bleed",
      onClick: handleBackClick
    }),
    title: node.title
  }), /*#__PURE__*/React.createElement(PaneContent, null, /*#__PURE__*/React.createElement(Stack, {
    padding: 2,
    space: 1
  }, node.items.map(item => /*#__PURE__*/React.createElement(Card, {
    as: "button",
    key: item.id,
    onClick: () => setPath(p => p.slice(0, index + 1).concat([item.id])),
    padding: 3,
    radius: 2,
    pressed: !active && childId === item.id,
    selected: active && childId === item.id
  }, /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(Box, {
    flex: 1
  }, /*#__PURE__*/React.createElement(Text, null, item.title)), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, /*#__PURE__*/React.createElement(ChevronRightIcon, null)))))))));
}