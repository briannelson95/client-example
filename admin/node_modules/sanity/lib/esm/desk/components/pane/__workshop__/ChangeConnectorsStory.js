var _templateObject, _templateObject2, _templateObject3;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { AddIcon, CloseIcon, RestoreIcon } from '@sanity/icons';
import { BoundaryElementProvider, Box, Button, Card, Container, Dialog, DialogProvider, Flex, LayerProvider, PortalProvider, Stack, Text, TextInput } from '@sanity/ui';
import { useAction } from '@sanity/ui-workshop';
import React, { useCallback, useState } from 'react';
import styled from 'styled-components';
import { ChangeConnectorRoot, ChangeIndicator, ChangeFieldWrapper } from '../../../../components/changeIndicators';
import { ScrollContainer } from '../../../../components/scroll';
import { Pane } from '../Pane';
import { PaneContent } from '../PaneContent';
import { PaneFooter } from '../PaneFooter';
import { PaneHeader } from '../PaneHeader';
import { PaneLayout } from '../PaneLayout';
const TestContainer = styled(Container).attrs({
  height: 'fill',
  width: 1
})(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  max-height: 600px;\n"])));
const Root = styled(ChangeConnectorRoot)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  height: 100%;\n  outline: 1px solid var(--card-border-color);\n  position: relative;\n"])));
const Scroller = styled(ScrollContainer)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n"])));
export default function ChangeConnectorsStory() {
  const [reviewChanges, setReviewChanges] = useState(false);
  const onSetFocus = useCallback(() => undefined, []);
  const [focusPath, setFocusPath] = useState([]);
  const toggleReviewChanges = useCallback(() => setReviewChanges(v => !v), []);
  const openReviewChanges = useCallback(() => setReviewChanges(true), []);
  const closeReviewChanges = useCallback(() => setReviewChanges(false), []);
  const [portalElement, setPortalElement] = useState(null);
  const [documentContentElement, setdocumentContentElement] = useState(null);
  const handleLayoutCollapse = useAction('PaneLayout.onCollapse');
  const handleLayoutExpand = useAction('PaneLayout.onExpand');
  return /*#__PURE__*/React.createElement(LayerProvider, null, /*#__PURE__*/React.createElement(Card, {
    height: "fill",
    tone: "transparent"
  }, /*#__PURE__*/React.createElement(Flex, {
    align: "center",
    height: "fill",
    justify: "center",
    padding: 4,
    sizing: "border"
  }, /*#__PURE__*/React.createElement(TestContainer, null, /*#__PURE__*/React.createElement(Root, {
    isReviewChangesOpen: reviewChanges,
    onOpenReviewChanges: openReviewChanges,
    onSetFocus: onSetFocus
  }, /*#__PURE__*/React.createElement(PaneLayout, {
    height: "fill",
    minWidth: 512,
    onCollapse: handleLayoutCollapse,
    onExpand: handleLayoutExpand
  }, /*#__PURE__*/React.createElement(Pane, {
    id: "document-panel"
  }, /*#__PURE__*/React.createElement(PaneHeader, {
    title: "Document"
  }), /*#__PURE__*/React.createElement(PaneContent, {
    ref: setdocumentContentElement
  }, /*#__PURE__*/React.createElement(BoundaryElementProvider, {
    element: documentContentElement
  }, /*#__PURE__*/React.createElement(PortalProvider, {
    element: portalElement
  }, /*#__PURE__*/React.createElement(Scroller, null, /*#__PURE__*/React.createElement(Stack, {
    paddingX: 4,
    paddingY: 5,
    space: 5
  }, /*#__PURE__*/React.createElement(StringField, {
    focusPath: focusPath,
    path: ['a'],
    value: "A",
    compareValue: "B",
    setFocusPath: setFocusPath
  }), /*#__PURE__*/React.createElement(StringField, {
    focusPath: focusPath,
    path: ['b'],
    value: "B",
    compareValue: "C",
    setFocusPath: setFocusPath
  }), /*#__PURE__*/React.createElement(StringField, {
    focusPath: focusPath,
    path: ['c'],
    value: "C",
    compareValue: "D",
    setFocusPath: setFocusPath
  }), /*#__PURE__*/React.createElement(StringField, {
    focusPath: focusPath,
    path: ['d'],
    value: "D",
    compareValue: "D",
    setFocusPath: setFocusPath
  }), /*#__PURE__*/React.createElement(StringField, {
    focusPath: focusPath,
    path: ['e'],
    value: "D",
    compareValue: "D",
    setFocusPath: setFocusPath
  }), /*#__PURE__*/React.createElement(StringField, {
    focusPath: focusPath,
    path: ['f'],
    value: "D",
    compareValue: "D",
    setFocusPath: setFocusPath
  }), /*#__PURE__*/React.createElement(StringField, {
    focusPath: focusPath,
    path: ['g'],
    value: "D",
    compareValue: "D",
    setFocusPath: setFocusPath
  }), /*#__PURE__*/React.createElement(StringField, {
    focusPath: focusPath,
    path: ['h'],
    value: "D",
    compareValue: "D",
    setFocusPath: setFocusPath
  }))), /*#__PURE__*/React.createElement("div", {
    ref: setPortalElement
  })))), /*#__PURE__*/React.createElement(PaneFooter, {
    padding: 2
  }, /*#__PURE__*/React.createElement(Button, {
    icon: RestoreIcon,
    mode: "bleed",
    onClick: toggleReviewChanges,
    selected: reviewChanges
  }))), reviewChanges && /*#__PURE__*/React.createElement(Pane, {
    id: "review-changes-panel"
  }, /*#__PURE__*/React.createElement(PaneHeader, {
    actions: /*#__PURE__*/React.createElement(Button, {
      icon: CloseIcon,
      mode: "bleed",
      onClick: closeReviewChanges
    }),
    title: "Changes"
  }), /*#__PURE__*/React.createElement(PaneContent, null, /*#__PURE__*/React.createElement(Scroller, null, /*#__PURE__*/React.createElement(Stack, {
    flex: 1,
    paddingX: 4,
    paddingY: 5,
    space: 5
  }, /*#__PURE__*/React.createElement(DebugDiffField, {
    path: ['a']
  }, /*#__PURE__*/React.createElement(Text, null, "Diff A")), /*#__PURE__*/React.createElement(DebugDiffField, {
    path: ['b']
  }, /*#__PURE__*/React.createElement(Text, null, "Diff B")), /*#__PURE__*/React.createElement(DebugDiffField, {
    path: ['c']
  }, /*#__PURE__*/React.createElement(Text, null, "Diff C"))))))))))));
}

function StringField(props) {
  const {
    focusPath,
    path,
    value,
    compareValue,
    setFocusPath
  } = props;
  const [open, setOpen] = useState(false);
  const handleBlur = useCallback(() => setFocusPath([]), [setFocusPath]);
  const handleFocus = useCallback(() => setFocusPath(path), [path, setFocusPath]);
  const handleClose = useCallback(() => setOpen(false), []);
  const handleOpen = useCallback(() => setOpen(true), []);
  return /*#__PURE__*/React.createElement(Stack, {
    space: 2
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1,
    weight: "semibold"
  }, "String"), /*#__PURE__*/React.createElement(DebugFormField, {
    path: path,
    focusPath: focusPath,
    value: value,
    compareValue: compareValue
  }, /*#__PURE__*/React.createElement(TextInput, {
    onBlur: handleBlur,
    onFocus: handleFocus,
    value: value
  })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Button, {
    icon: /*#__PURE__*/React.createElement(AddIcon, null),
    mode: "ghost",
    onClick: handleOpen
  })), open && /*#__PURE__*/React.createElement(DialogProvider, {
    position: "absolute"
  }, /*#__PURE__*/React.createElement(Dialog, {
    id: "".concat(path.join('-'), "-dialog"),
    onClickOutside: handleClose
  }, /*#__PURE__*/React.createElement(Box, {
    padding: 4
  }, /*#__PURE__*/React.createElement(Text, null, "Dialog")))));
}

function DebugFormField(props) {
  const {
    children,
    focusPath,
    path,
    value,
    compareValue
  } = props;
  return /*#__PURE__*/React.createElement(ChangeIndicator, {
    path: path,
    isChanged: false,
    hasFocus: false
  }, children);
}

function DebugDiffField(props) {
  const {
    children,
    path
  } = props;
  const [hovered, setHovered] = useState(false);
  const handleMouseEnter = useCallback(() => setHovered(true), []);
  const handleMouseLeave = useCallback(() => setHovered(false), []);
  const handleClick = useCallback(() => {//
  }, []);
  return /*#__PURE__*/React.createElement(Stack, {
    space: 2
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1,
    weight: "semibold"
  }, "String"), /*#__PURE__*/React.createElement(ChangeFieldWrapper, {
    hasHover: hovered,
    path: path
  }, /*#__PURE__*/React.createElement(Card, {
    borderLeft: true,
    onClick: handleClick,
    padding: 3,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }, children)));
}