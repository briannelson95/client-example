var _templateObject;

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { BoundaryElementProvider, Card, Code, Flex, useForwardedRef } from '@sanity/ui';
import React, { forwardRef, useMemo, useState, useCallback, useEffect } from 'react';
import styled from 'styled-components';
import { LegacyLayerProvider } from '../../../components/transitional';
import { PANE_COLLAPSED_WIDTH, PANE_DEBUG, PANE_DEFAULT_MIN_WIDTH } from './constants';
import { PaneContext } from './PaneContext';
import { PaneDivider } from './PaneDivider';
import { usePaneLayout } from './usePaneLayout';
const Root = styled(Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  outline: none;\n\n  // NOTE: This will render a border to the right side of each pane\n  // without taking up physical space.\n  box-shadow: 1px 0 0 var(--card-border-color);\n"])));
/**
 * @beta This API will change. DO NOT USE IN PRODUCTION.
 */
// eslint-disable-next-line complexity

export const Pane = /*#__PURE__*/forwardRef(function Pane(props, ref) {
  var _pane$flex, _pane$currentMinWidth, _pane$currentMaxWidth;

  const {
    children,
    currentMinWidth: currentMinWidthProp,
    currentMaxWidth: currentMaxWidthProp,
    flex: flexProp = 1,
    id,
    minWidth: minWidthProp,
    maxWidth: maxWidthProp,
    selected = false,
    ...restProps
  } = props;
  const [rootElement, setRootElement] = useState(null);
  const {
    collapse,
    collapsed: layoutCollapsed,
    expand,
    expandedElement,
    mount,
    panes
  } = usePaneLayout();
  const pane = panes.find(p => p.element === rootElement);
  const paneIndex = pane && panes.indexOf(pane);
  const nextPane = typeof paneIndex === 'number' ? panes[paneIndex + 1] : undefined;
  const isLast = paneIndex === panes.length - 1;
  const expanded = expandedElement === rootElement;
  const collapsed = layoutCollapsed ? false : (pane === null || pane === void 0 ? void 0 : pane.collapsed) || false;
  const nextCollapsed = (nextPane === null || nextPane === void 0 ? void 0 : nextPane.collapsed) || false;
  const forwardedRef = useForwardedRef(ref);
  const flex = (_pane$flex = pane === null || pane === void 0 ? void 0 : pane.flex) !== null && _pane$flex !== void 0 ? _pane$flex : flexProp;
  const currentMinWidth = (_pane$currentMinWidth = pane === null || pane === void 0 ? void 0 : pane.currentMinWidth) !== null && _pane$currentMinWidth !== void 0 ? _pane$currentMinWidth : currentMinWidthProp;
  const currentMaxWidth = (_pane$currentMaxWidth = pane === null || pane === void 0 ? void 0 : pane.currentMaxWidth) !== null && _pane$currentMaxWidth !== void 0 ? _pane$currentMaxWidth : currentMaxWidthProp;
  const setRef = useCallback(refValue => {
    setRootElement(refValue);
    forwardedRef.current = refValue;
  }, [forwardedRef]);
  useEffect(() => {
    if (!rootElement) return undefined;
    return mount(rootElement, {
      currentMinWidth: currentMinWidthProp,
      currentMaxWidth: currentMaxWidthProp,
      flex: flexProp,
      id,
      minWidth: minWidthProp,
      maxWidth: maxWidthProp
    });
  }, [currentMinWidthProp, currentMaxWidthProp, flexProp, id, minWidthProp, maxWidthProp, mount, rootElement]);
  const handleCollapse = useCallback(() => {
    if (!rootElement) return;
    collapse(rootElement);
  }, [collapse, rootElement]);
  const handleExpand = useCallback(() => {
    if (!rootElement) return;
    expand(rootElement);
  }, [expand, rootElement]);
  const contextValue = useMemo(() => ({
    collapse: handleCollapse,
    collapsed: layoutCollapsed ? false : collapsed,
    expand: handleExpand,
    index: paneIndex,
    isLast,
    rootElement
  }), [collapsed, handleCollapse, handleExpand, isLast, layoutCollapsed, paneIndex, rootElement]);
  const minWidth = useMemo(() => {
    if (layoutCollapsed) {
      return undefined;
    }

    if (collapsed) return PANE_COLLAPSED_WIDTH;

    if (currentMinWidth === 0) {
      return minWidthProp || PANE_DEFAULT_MIN_WIDTH;
    }

    if (isLast) {
      return minWidthProp || PANE_DEFAULT_MIN_WIDTH;
    }

    return currentMinWidth || minWidthProp || PANE_DEFAULT_MIN_WIDTH;
  }, [collapsed, currentMinWidth, isLast, layoutCollapsed, minWidthProp]);
  const maxWidth = useMemo(() => {
    if (collapsed) return PANE_COLLAPSED_WIDTH;

    if (layoutCollapsed && isLast) {
      return undefined;
    }

    if (isLast) {
      if (maxWidthProp) {
        return currentMaxWidth !== null && currentMaxWidth !== void 0 ? currentMaxWidth : maxWidthProp;
      }

      return undefined;
    }

    return currentMaxWidth !== null && currentMaxWidth !== void 0 ? currentMaxWidth : maxWidthProp;
  }, [collapsed, currentMaxWidth, isLast, layoutCollapsed, maxWidthProp]);
  const hidden = layoutCollapsed && !isLast;
  const divider = useMemo(() => !isLast && !layoutCollapsed && /*#__PURE__*/React.createElement(LegacyLayerProvider, {
    zOffset: "paneResizer"
  }, /*#__PURE__*/React.createElement(PaneDivider, {
    disabled: collapsed || nextCollapsed,
    element: rootElement
  })), [collapsed, isLast, layoutCollapsed, nextCollapsed, rootElement]);
  const style = useMemo(() => ({
    flex,
    minWidth,
    maxWidth: maxWidth === Infinity ? undefined : maxWidth
  }), [flex, minWidth, maxWidth]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LegacyLayerProvider, {
    zOffset: "pane"
  }, /*#__PURE__*/React.createElement(PaneContext.Provider, {
    value: contextValue
  }, /*#__PURE__*/React.createElement(Root, _extends({
    "data-testid": "pane",
    tone: "inherit",
    hidden: hidden,
    id: id,
    overflow: layoutCollapsed ? undefined : 'hidden'
  }, restProps, {
    "data-pane-collapsed": collapsed ? '' : undefined,
    "data-pane-index": paneIndex,
    "data-pane-selected": selected ? '' : undefined,
    ref: setRef,
    style: style
  }), PANE_DEBUG && /*#__PURE__*/React.createElement(Card, {
    padding: 4,
    tone: expanded ? 'primary' : 'caution'
  }, /*#__PURE__*/React.createElement(Code, {
    size: 1
  }, ["#".concat(paneIndex), "collapsed=".concat(collapsed), "currentMinWidth=".concat(currentMinWidth), "currentMaxWidth=".concat(currentMaxWidth), "flex=".concat(flex), "minWidth=".concat(minWidth), "maxWidth=".concat(maxWidth)].join('\n'))), /*#__PURE__*/React.createElement(BoundaryElementProvider, {
    element: rootElement
  }, !hidden && /*#__PURE__*/React.createElement(Flex, {
    direction: "column",
    height: "fill"
  }, children))))), divider);
});