var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { Box, Card, Flex, Text, Layer, useTheme } from '@sanity/ui';
import React, { useCallback } from 'react';
import styled from 'styled-components';
import { LegacyLayerProvider } from '../../../../../components/transitional';
const RootCard = styled(Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  padding-left: env(safe-area-inset-left);\n  padding-right: env(safe-area-inset-right);\n"])));
const features = {
  inverted: true
};
export function Navbar(props) {
  const {
    path,
    setPath
  } = props;
  const theme = useTheme();
  const {
    dark
  } = theme.sanity.color;
  const handleHomeClick = useCallback(() => {
    setPath(path.slice(0, 1));
  }, [path, setPath]);
  return /*#__PURE__*/React.createElement(LegacyLayerProvider, {
    zOffset: "navbar"
  }, /*#__PURE__*/React.createElement(Layer, null, /*#__PURE__*/React.createElement(RootCard, {
    scheme: features.inverted ? 'dark' : undefined,
    shadow: features.inverted ? dark ? 1 : 0 : 1
  }, /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(Box, {
    padding: 2
  }, /*#__PURE__*/React.createElement(Card, {
    as: "button",
    onClick: handleHomeClick,
    padding: 3,
    radius: 2
  }, /*#__PURE__*/React.createElement(Text, {
    weight: "bold"
  }, "Studio")))))));
}