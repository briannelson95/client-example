function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { Button } from '@sanity/ui';
import React, { forwardRef, useMemo } from 'react';
import { IntentLink } from '../../router';
export const IntentButton = /*#__PURE__*/forwardRef(function IntentButton(props, ref) {
  const {
    intent,
    ...restProps
  } = props;
  const Link = useMemo(() =>
  /*#__PURE__*/
  // eslint-disable-next-line @typescript-eslint/no-shadow
  forwardRef(function Link(linkProps, linkRef) {
    return /*#__PURE__*/React.createElement(IntentLink, _extends({}, linkProps, {
      intent: intent.type,
      params: intent.params,
      ref: linkRef
    }));
  }), [intent]);
  return props.disabled ? /*#__PURE__*/React.createElement(Button, _extends({}, props, {
    as: "a",
    role: "link",
    "aria-disabled": "true"
  })) : /*#__PURE__*/React.createElement(Button, _extends({}, restProps, {
    as: Link,
    "data-as": "a",
    ref: ref
  }));
});