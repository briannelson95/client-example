function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { ComposeIcon } from '@sanity/icons';
import React, { useMemo, forwardRef } from 'react';
import { Box, Button, Label, Menu, MenuButton, MenuItem } from '@sanity/ui';
import { IntentButton } from '../IntentButton';
import { useTemplatePermissions } from '../../../datastores';
import { IntentLink } from '../../../router';
import { useSchema, useTemplates } from '../../../hooks';
import { InsufficientPermissionsMessageTooltip } from './InsufficientPermissionsMessageTooltip';
const POPOVER_PROPS = {
  constrainSize: true,
  placement: 'bottom',
  portal: true
};

const getIntent = (schema, templates, item) => {
  var _templates$find;

  const typeName = (_templates$find = templates.find(t => t.id === item.templateId)) === null || _templates$find === void 0 ? void 0 : _templates$find.schemaType;
  if (!typeName) return null;
  const baseParams = {
    template: item.templateId,
    type: typeName,
    id: item.initialDocumentId
  };
  return {
    type: 'create',
    params: item.parameters ? [baseParams, item.parameters] : baseParams
  };
};

export function PaneHeaderCreateButton(_ref) {
  let {
    templateItems
  } = _ref;
  const schema = useSchema();
  const templates = useTemplates();
  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({
    templateItems
  });
  const nothingGranted = useMemo(() => {
    return !isTemplatePermissionsLoading && (templatePermissions === null || templatePermissions === void 0 ? void 0 : templatePermissions.every(permission => !permission.granted));
  }, [isTemplatePermissionsLoading, templatePermissions]);
  const permissionsById = useMemo(() => {
    if (!templatePermissions) return {};
    return templatePermissions.reduce((acc, permission) => {
      acc[permission.id] = permission;
      return acc;
    }, {});
  }, [templatePermissions]);

  if (nothingGranted) {
    return /*#__PURE__*/React.createElement(InsufficientPermissionsMessageTooltip, {
      reveal: true,
      loading: isTemplatePermissionsLoading
    }, /*#__PURE__*/React.createElement(Button, {
      "aria-label": "Insufficient permissions",
      icon: ComposeIcon,
      mode: "bleed",
      disabled: true,
      "data-testid": "action-intent-button"
    }));
  }

  if (templateItems.length === 1) {
    const firstItem = templateItems[0];
    const permissions = permissionsById[firstItem.id];
    const disabled = !(permissions !== null && permissions !== void 0 && permissions.granted);
    const intent = getIntent(schema, templates, firstItem);
    if (!intent) return null;
    return /*#__PURE__*/React.createElement(InsufficientPermissionsMessageTooltip, {
      reveal: disabled,
      loading: isTemplatePermissionsLoading
    }, /*#__PURE__*/React.createElement(IntentButton, {
      "aria-label": firstItem.title,
      icon: firstItem.icon || ComposeIcon,
      intent: intent,
      mode: "bleed",
      disabled: disabled,
      "data-testid": "action-intent-button"
    }));
  }

  return /*#__PURE__*/React.createElement(MenuButton, {
    button: /*#__PURE__*/React.createElement(Button, {
      icon: ComposeIcon,
      mode: "bleed",
      padding: 3,
      "data-testid": "multi-action-intent-button"
    }),
    id: "create-menu",
    menu: /*#__PURE__*/React.createElement(Menu, null, /*#__PURE__*/React.createElement(Box, {
      paddingX: 3,
      paddingTop: 3,
      paddingBottom: 2
    }, /*#__PURE__*/React.createElement(Label, {
      muted: true
    }, "Create")), templateItems.map((item, itemIndex) => {
      const permissions = permissionsById[item.id];
      const disabled = !(permissions !== null && permissions !== void 0 && permissions.granted);
      const intent = getIntent(schema, templates, item);
      const template = templates.find(t => t.id === item.templateId);
      if (!template || !intent) return null;
      const Link = /*#__PURE__*/forwardRef((linkProps, linkRef) => disabled ? /*#__PURE__*/React.createElement("button", _extends({
        type: "button",
        disabled: true
      }, linkProps, {
        ref: linkRef
      })) : /*#__PURE__*/React.createElement(IntentLink, _extends({}, linkProps, {
        intent: intent.type,
        params: intent.params,
        ref: linkRef
      })));
      Link.displayName = 'Link';
      return /*#__PURE__*/React.createElement(InsufficientPermissionsMessageTooltip, {
        key: item.id,
        reveal: disabled,
        loading: isTemplatePermissionsLoading
      }, /*#__PURE__*/React.createElement(MenuItem, {
        as: Link,
        "data-as": disabled ? 'button' : 'a',
        text: item.title || template.title,
        "aria-label": disabled ? 'Insufficient permissions' : item.title || template.title,
        disabled: disabled,
        "data-testid": "action-intent-button-".concat(itemIndex)
      }));
    })),
    popover: POPOVER_PROPS
  });
}