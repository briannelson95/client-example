function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useCallback } from 'react';
import { getPublishedId } from '../../../util';
import { PreviewCard } from '../../../components/PreviewCard';
import { useDocumentPresence, useDocumentPreviewStore } from '../../../datastores';
import { PaneItemPreview } from '../paneItem/PaneItemPreview';
import { usePaneRouter } from '../paneRouter';
const EMPTY_ARRAY = [];
export function ReferencePreviewLink(props) {
  const {
    onClick,
    type,
    value
  } = props;
  const publishedId = getPublishedId(value === null || value === void 0 ? void 0 : value._id);
  const documentPresence = useDocumentPresence(publishedId);
  const documentPreviewStore = useDocumentPreviewStore();
  const {
    ReferenceChildLink
  } = usePaneRouter();
  const Link = useCallback(linkProps => /*#__PURE__*/React.createElement(ReferenceChildLink, _extends({
    documentId: value === null || value === void 0 ? void 0 : value._id,
    documentType: type === null || type === void 0 ? void 0 : type.name,
    parentRefPath: EMPTY_ARRAY
  }, linkProps)), [ReferenceChildLink, type === null || type === void 0 ? void 0 : type.name, value === null || value === void 0 ? void 0 : value._id]);
  return /*#__PURE__*/React.createElement(PreviewCard, {
    __unstable_focusRing: true,
    as: Link,
    "data-as": "a",
    onClick: onClick,
    padding: 2,
    radius: 2
  }, /*#__PURE__*/React.createElement(PaneItemPreview, {
    documentPreviewStore: documentPreviewStore,
    icon: type === null || type === void 0 ? void 0 : type.icon,
    layout: "default",
    presence: (documentPresence === null || documentPresence === void 0 ? void 0 : documentPresence.length) > 0 ? documentPresence : EMPTY_ARRAY,
    schemaType: type,
    value: value
  }));
}