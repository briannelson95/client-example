var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React from 'react';
import styled from 'styled-components';
import { rem, Text, Card, Box, Tooltip, Container, Inline } from '@sanity/ui';
import { InfoOutlineIcon } from '@sanity/icons';
export const ChevronWrapper = styled(Box)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  margin-left: auto;\n"])));
export const CrossDatasetReferencesDetails = styled.details(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  flex: none;\n\n  &[open] ", " {\n    transform: rotate(180deg);\n  }\n"])), ChevronWrapper);
export const CrossDatasetReferencesSummary = styled.summary(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  list-style: none;\n\n  &::-webkit-details-marker {\n    display: none;\n  }\n"])));
export const TableContainer = styled(Box).attrs({
  paddingX: 2,
  paddingBottom: 2
})(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  overflow: auto;\n  max-height: 150px;\n"])));
export const Table = styled.table(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  width: 100%;\n  text-align: left;\n  padding: 0 ", ";\n  border-collapse: collapse;\n\n  th {\n    padding: ", ";\n  }\n\n  thead > tr {\n    position: sticky;\n    top: 0;\n    background: var(--card-bg-color);\n    z-index: 1;\n  }\n\n  td {\n    padding: 0 ", ";\n  }\n\n  tr > *:last-child {\n    text-align: right;\n  }\n"])), _ref => {
  let {
    theme
  } = _ref;
  return rem(theme.sanity.space[2]);
}, _ref2 => {
  let {
    theme
  } = _ref2;
  return rem(theme.sanity.space[1]);
}, _ref3 => {
  let {
    theme
  } = _ref3;
  return rem(theme.sanity.space[1]);
});
export const ReferencesCard = styled(Card).attrs({
  radius: 2,
  shadow: 1,
  marginBottom: 4,
  flex: 'auto'
})(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  overflow: hidden;\n  min-height: 150px;\n"])));
export const OtherReferenceCount = props => {
  const difference = props.totalCount - props.references.length;
  if (!difference) return null;
  return /*#__PURE__*/React.createElement(Inline, {
    space: 2
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1,
    muted: true
  }, difference, " other reference", difference === 1 ? '' : 's', " not shown", ' '), /*#__PURE__*/React.createElement(Tooltip, {
    portal: true,
    placement: "top",
    content: /*#__PURE__*/React.createElement(Container, {
      width: 0
    }, /*#__PURE__*/React.createElement(Box, {
      padding: 2
    }, /*#__PURE__*/React.createElement(Text, {
      size: 1
    }, "We can't show metadata about these references because no token with access to the datasets they are in was found.")))
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1,
    muted: true
  }, /*#__PURE__*/React.createElement(InfoOutlineIcon, null))));
};