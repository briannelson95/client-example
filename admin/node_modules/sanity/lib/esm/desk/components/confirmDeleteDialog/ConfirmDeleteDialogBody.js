import React, { useCallback } from 'react';
import { WarningOutlineIcon, DocumentsIcon, ClipboardIcon, UnknownIcon, ChevronDownIcon } from '@sanity/icons';
import { useToast, Text, Box, Button, Flex, Label, Card, Stack } from '@sanity/ui';
import { CopyToClipboard } from 'react-copy-to-clipboard';
import { useSchema } from '../../../hooks';
import { SanityDefaultPreview } from '../../../preview';
import { ReferencePreviewLink } from './ReferencePreviewLink';
import { ReferencesCard, OtherReferenceCount, CrossDatasetReferencesDetails, CrossDatasetReferencesSummary, TableContainer, Table, ChevronWrapper } from './ConfirmDeleteDialogBody.styles';

/**
 * The inner part of the `ConfirmDeleteDialog`. This is ran when both the
 * `crossDatasetReferences` and `internalReferences` are loaded.
 */
export function ConfirmDeleteDialogBody(_ref) {
  let {
    crossDatasetReferences,
    internalReferences,
    documentTitle,
    totalCount,
    action,
    projectIds,
    onReferenceLinkClick
  } = _ref;
  const schema = useSchema();
  const toast = useToast();
  const renderPreviewItem = useCallback(item => {
    const type = schema.get(item._type);

    if (type) {
      return /*#__PURE__*/React.createElement(ReferencePreviewLink, {
        type: type,
        value: item,
        onClick: onReferenceLinkClick
      });
    }

    return (
      /*#__PURE__*/
      // Padding added to match the ReferencePreviewLink styling
      React.createElement(Box, {
        padding: 2
      }, /*#__PURE__*/React.createElement(SanityDefaultPreview, {
        icon: UnknownIcon,
        title: "Preview Unavailable",
        subtitle: "ID: ".concat(item._id),
        layout: "default"
      }))
    );
  }, [schema, onReferenceLinkClick]);

  if ((internalReferences === null || internalReferences === void 0 ? void 0 : internalReferences.totalCount) === 0 && (crossDatasetReferences === null || crossDatasetReferences === void 0 ? void 0 : crossDatasetReferences.totalCount) === 0) {
    return /*#__PURE__*/React.createElement(Text, {
      as: "p"
    }, "Are you sure you want to delete ", /*#__PURE__*/React.createElement("strong", null, "\u201C", documentTitle, "\u201D"), "?");
  }

  const documentCount = crossDatasetReferences.totalCount === 1 ? '1 document' : "".concat(crossDatasetReferences.totalCount.toLocaleString(), " documents");
  const projectCount = projectIds.length === 1 ? 'another project' : "".concat(projectIds.length, " projects");
  const projectIdList = "Project ID".concat(projectIds.length === 1 ? '' : 's', ": ").concat(projectIds.join(', '));
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {
    padding: 3,
    radius: 2,
    tone: "caution",
    marginBottom: 4,
    flex: "none"
  }, /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(Text, {
    "aria-hidden": "true",
    size: 1
  }, /*#__PURE__*/React.createElement(WarningOutlineIcon, null)), /*#__PURE__*/React.createElement(Box, {
    flex: 1,
    marginLeft: 3
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1
  }, totalCount === 1 ? /*#__PURE__*/React.createElement(React.Fragment, null, "1 document refers to \u201C", documentTitle, "\u201D") : /*#__PURE__*/React.createElement(React.Fragment, null, totalCount.toLocaleString(), " documents refer to \u201C", documentTitle, "\u201D"))))), /*#__PURE__*/React.createElement(Box, {
    flex: "none",
    marginBottom: 4
  }, /*#__PURE__*/React.createElement(Text, null, "You may not be able to ", action, " \u201C", documentTitle, "\u201D because the following documents refer to it:")), /*#__PURE__*/React.createElement(ReferencesCard, null, /*#__PURE__*/React.createElement(Flex, {
    direction: "column",
    height: "fill"
  }, internalReferences.totalCount > 0 && /*#__PURE__*/React.createElement(Stack, {
    as: "ul",
    padding: 3,
    space: 3,
    overflow: "auto",
    "data-testid": "internal-references"
  }, internalReferences === null || internalReferences === void 0 ? void 0 : internalReferences.references.map(item => /*#__PURE__*/React.createElement(Box, {
    as: "li",
    key: item._id
  }, renderPreviewItem(item))), internalReferences.totalCount > internalReferences.references.length && /*#__PURE__*/React.createElement(Box, {
    as: "li",
    padding: 3
  }, /*#__PURE__*/React.createElement(OtherReferenceCount, internalReferences))), crossDatasetReferences.totalCount > 0 && /*#__PURE__*/React.createElement(CrossDatasetReferencesDetails, {
    "data-testid": "cross-dataset-references",
    style: {
      // only add the border if needed
      borderTop: internalReferences.totalCount > 0 ? '1px solid var(--card-shadow-outline-color)' : undefined
    }
  }, /*#__PURE__*/React.createElement(CrossDatasetReferencesSummary, null, /*#__PURE__*/React.createElement(Flex, {
    padding: 4,
    align: "center"
  }, /*#__PURE__*/React.createElement(Box, {
    marginRight: 4
  }, /*#__PURE__*/React.createElement(Text, {
    size: 3
  }, /*#__PURE__*/React.createElement(DocumentsIcon, null))), /*#__PURE__*/React.createElement(Flex, {
    marginRight: 4,
    direction: "column"
  }, /*#__PURE__*/React.createElement(Box, {
    marginBottom: 2
  }, /*#__PURE__*/React.createElement(Text, null, documentCount, " in ", projectCount)), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
    title: projectIdList,
    textOverflow: "ellipsis",
    size: 1,
    muted: true
  }, projectIdList))), /*#__PURE__*/React.createElement(ChevronWrapper, null, /*#__PURE__*/React.createElement(Text, {
    muted: true
  }, /*#__PURE__*/React.createElement(ChevronDownIcon, null))))), /*#__PURE__*/React.createElement(TableContainer, null, /*#__PURE__*/React.createElement(Table, null, /*#__PURE__*/React.createElement("thead", null, /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement("th", null, /*#__PURE__*/React.createElement(Label, {
    muted: true,
    size: 0
  }, "Project ID")), /*#__PURE__*/React.createElement("th", null, /*#__PURE__*/React.createElement(Label, {
    muted: true,
    size: 0
  }, "Dataset")), /*#__PURE__*/React.createElement("th", null, /*#__PURE__*/React.createElement(Label, {
    muted: true,
    size: 0
  }, "Document ID")))), /*#__PURE__*/React.createElement("tbody", null, crossDatasetReferences.references.filter(reference => {
    return 'projectId' in reference && 'datasetName' in reference && 'documentId' in reference;
  }).map((_ref2, index) => {
    let {
      projectId,
      datasetName,
      documentId
    } = _ref2;
    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/no-array-index-key
      React.createElement("tr", {
        key: "".concat(documentId, "-").concat(index)
      }, /*#__PURE__*/React.createElement("td", null, /*#__PURE__*/React.createElement(Text, {
        size: 1
      }, projectId)), /*#__PURE__*/React.createElement("td", null, /*#__PURE__*/React.createElement(Text, {
        size: 1
      }, datasetName)), /*#__PURE__*/React.createElement("td", null, /*#__PURE__*/React.createElement(Flex, {
        align: "center",
        gap: 2,
        justify: "flex-end"
      }, /*#__PURE__*/React.createElement(Text, {
        textOverflow: "ellipsis",
        size: 1
      }, documentId), /*#__PURE__*/React.createElement(CopyToClipboard, {
        text: documentId // eslint-disable-next-line react/jsx-no-bind
        ,
        onCopy: () => {
          // TODO: this isn't visible with the dialog open
          toast.push({
            title: 'Copied document ID to clipboard!',
            status: 'success'
          });
        }
      }, /*#__PURE__*/React.createElement(Button, {
        title: "Copy ID to clipboard",
        mode: "bleed",
        icon: ClipboardIcon,
        fontSize: 0
      })))))
    );
  }))), /*#__PURE__*/React.createElement(Box, {
    padding: 2
  }, /*#__PURE__*/React.createElement(OtherReferenceCount, crossDatasetReferences)))))), /*#__PURE__*/React.createElement(Box, {
    flex: "none"
  }, /*#__PURE__*/React.createElement(Text, null, "If you ", action, " this document, documents that refer to it will no longer be able to access it.")));
}