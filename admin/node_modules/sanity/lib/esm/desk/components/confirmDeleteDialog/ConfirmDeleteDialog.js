var _templateObject, _templateObject2;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React, { useMemo } from 'react';
import styled from 'styled-components';
import { Box, Dialog, Button, Text, Spinner, Grid, Flex } from '@sanity/ui';
import { useId } from '@reach/auto-id';
import { DocTitle } from '../DocTitle';
import { useReferringDocuments } from './useReferringDocuments';
import { ConfirmDeleteDialogBody } from './ConfirmDeleteDialogBody';
export const DialogBody = styled(Flex).attrs({
  padding: 4,
  direction: 'column',
  height: 'fill'
})(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  box-sizing: border-box;\n"])));
export const LoadingContainer = styled(Flex).attrs({
  align: 'center',
  direction: 'column',
  justify: 'center'
})(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  height: 300px;\n"])));

/**
 * A confirmation dialog used to prevent unwanted document deletes. Loads all
 * the referencing internal and cross-data references prior to showing the
 * delete button.
 */
export function ConfirmDeleteDialog(_ref) {
  let {
    id,
    type,
    action = 'delete',
    onCancel,
    onConfirm
  } = _ref;
  const dialogId = "deletion-confirmation-".concat(useId());
  const {
    internalReferences,
    crossDatasetReferences,
    isLoading,
    totalCount,
    projectIds
  } = useReferringDocuments(id);
  const capitalizedAction = "".concat(action.substring(0, 1).toUpperCase()).concat(action.substring(1));
  const documentTitle = /*#__PURE__*/React.createElement(DocTitle, {
    document: useMemo(() => ({
      _id: id,
      _type: type
    }), [id, type])
  });
  const showConfirmButton = !isLoading;
  return /*#__PURE__*/React.createElement(Dialog, {
    width: 1,
    id: dialogId,
    header: "".concat(capitalizedAction, " document?"),
    footer: /*#__PURE__*/React.createElement(Grid, {
      columns: showConfirmButton ? 2 : 1,
      gap: 2,
      paddingX: 4,
      paddingY: 3
    }, /*#__PURE__*/React.createElement(Button, {
      mode: "ghost",
      onClick: onCancel,
      text: "Cancel"
    }), showConfirmButton && /*#__PURE__*/React.createElement(Button, {
      "data-testid": "confirm-delete-button",
      text: totalCount > 0 ? "".concat(capitalizedAction, " anyway") : "".concat(capitalizedAction, " now"),
      tone: "critical",
      onClick: onConfirm
    })),
    onClose: onCancel,
    onClickOutside: onCancel
  }, /*#__PURE__*/React.createElement(DialogBody, null, crossDatasetReferences && internalReferences && !isLoading ? /*#__PURE__*/React.createElement(ConfirmDeleteDialogBody, {
    crossDatasetReferences: crossDatasetReferences,
    internalReferences: internalReferences,
    documentTitle: documentTitle,
    isLoading: isLoading,
    totalCount: totalCount,
    action: action,
    projectIds: projectIds,
    onReferenceLinkClick: onCancel
  }) : /*#__PURE__*/React.createElement(LoadingContainer, {
    "data-testid": "loading-container"
  }, /*#__PURE__*/React.createElement(Spinner, {
    muted: true
  }), /*#__PURE__*/React.createElement(Box, {
    marginTop: 3
  }, /*#__PURE__*/React.createElement(Text, {
    align: "center",
    muted: true,
    size: 1
  }, "Looking for referring documents\u2026")))));
}