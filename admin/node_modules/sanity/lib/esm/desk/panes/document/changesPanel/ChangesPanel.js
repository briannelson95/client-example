var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { CloseIcon } from '@sanity/icons';
import { AvatarStack, BoundaryElementProvider, Box, Button, Flex } from '@sanity/ui';
import React, { useRef } from 'react';
import styled from 'styled-components';
import { DiffTooltip, NoChanges, DocumentChangeContext, ChangeList } from '../../../../field';
import { PaneContent, PaneHeader, usePane } from '../../../components';
import { TimelineMenu } from '../timeline';
import { useDocumentPane } from '../useDocumentPane';
import { ScrollContainer } from '../../../../components/scroll';
import { ChangeFieldWrapper } from '../../../../components/changeIndicators';
import { UserAvatar } from '../../../../components/UserAvatar';
import { collectLatestAuthorAnnotations } from './helpers';
import { LoadingContent } from './content/LoadingContent';
const Scroller = styled(ScrollContainer)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n"])));
export function ChangesPanel() {
  const {
    documentId,
    onHistoryClose,
    historyController,
    schemaType,
    value
  } = useDocumentPane();
  const {
    collapsed
  } = usePane();
  const scrollRef = useRef(null);
  const historyState = historyController.selectionState;
  const loading = historyState === 'loading';
  const since = historyController.sinceTime;
  const diff = historyController.currentObjectDiff();
  const isComparingCurrent = !historyController.onOlderRevision();
  const documentContext = React.useMemo(() => ({
    documentId,
    schemaType,
    FieldWrapper: ChangeFieldWrapper,
    rootDiff: diff,
    isComparingCurrent,
    value
  }), [documentId, diff, isComparingCurrent, schemaType, value]);
  const changeAnnotations = React.useMemo(() => diff ? collectLatestAuthorAnnotations(diff) : [], [diff]);

  if (collapsed) {
    return null;
  }

  return /*#__PURE__*/React.createElement(Flex, {
    direction: "column",
    flex: 1,
    style: {
      borderLeft: '1px dashed var(--card-border-color)',
      overflow: 'hidden',
      minWidth: 320
    },
    "data-testid": "review-changes-pane"
  }, /*#__PURE__*/React.createElement(PaneHeader, {
    actions: /*#__PURE__*/React.createElement(Button, {
      icon: CloseIcon,
      mode: "bleed",
      onClick: onHistoryClose,
      padding: 3,
      title: "Hide changes panel"
    }),
    subActions: changeAnnotations.length > 0 && /*#__PURE__*/React.createElement(Box, {
      paddingRight: 1
    }, /*#__PURE__*/React.createElement(DiffTooltip, {
      annotations: changeAnnotations,
      description: "Changes by",
      placement: "bottom-end"
    }, /*#__PURE__*/React.createElement(AvatarStack, {
      maxLength: 4
    }, changeAnnotations.map(_ref => {
      let {
        author
      } = _ref;
      return /*#__PURE__*/React.createElement(UserAvatar, {
        key: author,
        user: author
      });
    })))),
    tabs: /*#__PURE__*/React.createElement(TimelineMenu, {
      mode: "since",
      chunk: since
    }),
    title: "Changes"
  }), /*#__PURE__*/React.createElement(PaneContent, null, /*#__PURE__*/React.createElement(BoundaryElementProvider, {
    element: scrollRef.current
  }, /*#__PURE__*/React.createElement(Scroller, {
    "data-ui": "Scroller",
    ref: scrollRef
  }, /*#__PURE__*/React.createElement(Box, {
    flex: 1,
    padding: 4
  }, /*#__PURE__*/React.createElement(Content, {
    diff: diff,
    documentContext: documentContext,
    loading: loading
  }))))));
}

function Content(_ref2) {
  let {
    diff,
    documentContext,
    loading
  } = _ref2;
  const {
    schemaType
  } = useDocumentPane();

  if (loading) {
    return /*#__PURE__*/React.createElement(LoadingContent, null);
  }

  if (!diff) {
    return /*#__PURE__*/React.createElement(NoChanges, null);
  }

  return /*#__PURE__*/React.createElement(DocumentChangeContext.Provider, {
    value: documentContext
  }, /*#__PURE__*/React.createElement(ChangeList, {
    diff: diff,
    schemaType: schemaType
  }));
}