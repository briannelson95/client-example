var _templateObject, _templateObject2, _templateObject3;

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React from 'react';
import { motion } from 'framer-motion';
import styled, { keyframes } from 'styled-components';
const StyledMotionPath = styled(motion.path)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  transform-origin: center;\n"])));

const Circle = props => /*#__PURE__*/React.createElement(motion.circle, _extends({
  fill: "none",
  r: "8",
  cx: "12.5",
  cy: "12.5",
  strokeWidth: "1.2"
}, props));

const Arrows = props => /*#__PURE__*/React.createElement(StyledMotionPath, _extends({
  fill: "none",
  d: "M14 17.5619L11.5 20.5L14.5 23.0619M11 7.43811L13.5 4.50001L10.5 1.93811"
}, props));

const Checkmark = props => /*#__PURE__*/React.createElement(motion.path, _extends({
  d: "M9.5 12.1316L11.7414 14.5L16 10"
}, props));

const Edit = props => /*#__PURE__*/React.createElement(motion.path, _extends({
  d: "M15 7L18 10M6 19L7 15L17 5L20 8L10 18L6 19Z"
}, props));

const rotateAnimation = keyframes(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  0% {\n    transform: rotate(0);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n"])));
const RotateGroup = styled.g(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  transform-origin: center;\n\n  &[data-rotate] {\n    animation: ", " 1s ease-in-out infinite;\n  }\n"])), rotateAnimation);
const root = {
  syncing: {
    scale: 1,
    transition: {
      duration: 0
    }
  },
  saved: {
    scale: [1, 0.8, 1.2, 0.9, 1.1, 0.95, 1.05, 0.99, 1],
    transition: {
      duration: 0.5,
      delay: 0.2
    }
  },
  changes: {
    transition: {
      duration: 0
    }
  }
};
const circle = {
  syncing: {
    strokeDasharray: '0, 0, 23, 3, 23, 3',
    strokeDashoffset: 10,
    opacity: 1,
    transition: {
      duration: 0
    }
  },
  saved: {
    strokeDasharray: '0, 0, 23, 0, 23, 0',
    strokeDashoffset: 10,
    opacity: 1,
    transition: {
      duration: 0.2
    }
  },
  changes: {
    strokeDasharray: '0, 60, 23, 0, 23, 0',
    strokeDashoffset: 0,
    opacity: 0,
    transition: {
      duration: 0.5
    }
  }
};
const arrows = {
  syncing: {
    opacity: 1,
    transition: {
      duration: 0
    }
  },
  saved: {
    opacity: 0,
    transition: {
      duration: 0.2
    }
  },
  changes: {
    opacity: 0
  }
};
const checkmark = {
  syncing: {
    pathLength: 0,
    transition: {
      duration: 0
    }
  },
  saved: {
    pathLength: 1,
    transition: {
      delay: 0.4,
      duration: 0.3
    }
  },
  changes: {
    pathLength: 0,
    transition: {
      duration: 0.2
    }
  }
};
const edit = {
  syncing: {
    pathLength: 0,
    transition: {
      duration: 0
    }
  },
  saved: {
    pathLength: 0,
    transition: {
      duration: 0
    }
  },
  changes: {
    pathLength: 1,
    transition: {
      duration: 0.4,
      delay: 0.5
    }
  }
};
export function AnimatedStatusIcon(props) {
  const {
    status
  } = props;

  if (!status) {
    return null;
  }

  return /*#__PURE__*/React.createElement("svg", {
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "1.2",
    "data-sanity-icon": ""
  }, /*#__PURE__*/React.createElement(motion.g, {
    variants: root,
    initial: status,
    animate: status
  }, /*#__PURE__*/React.createElement(RotateGroup, {
    "data-rotate": status === 'changes' ? undefined : ''
  }, /*#__PURE__*/React.createElement(Arrows, {
    variants: arrows,
    initial: status,
    animate: status
  }), /*#__PURE__*/React.createElement(Circle, {
    variants: circle,
    initial: status,
    animate: status
  })), /*#__PURE__*/React.createElement(Checkmark, {
    variants: checkmark,
    initial: status,
    animate: status
  }), /*#__PURE__*/React.createElement(Edit, {
    variants: edit,
    initial: status,
    animate: status
  })));
}