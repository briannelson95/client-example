var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React from 'react';
import { Box, Card, Container, Flex, Text } from '@sanity/ui';
import { ReadOnlyIcon } from '@sanity/icons';
import styled from 'styled-components';
import { useCurrentUser } from '../../../../datastores';
const Root = styled(Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: relative;\n  z-index: 50;\n"])));
export function PermissionCheckBanner(_ref) {
  var _currentUser$roles, _currentUser$roles2;

  let {
    granted,
    requiredPermission
  } = _ref;
  const currentUser = useCurrentUser();
  const plural = (currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$roles = currentUser.roles) === null || _currentUser$roles === void 0 ? void 0 : _currentUser$roles.length) !== 1;
  const roles = join((currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$roles2 = currentUser.roles) === null || _currentUser$roles2 === void 0 ? void 0 : _currentUser$roles2.map(r => /*#__PURE__*/React.createElement("code", {
    key: r.name
  }, r.title))) || [], ', ');
  if (granted) return null;
  return /*#__PURE__*/React.createElement(Root, {
    "data-testid": "permission-check-banner",
    shadow: 1,
    tone: "transparent"
  }, /*#__PURE__*/React.createElement(Container, {
    paddingX: 4,
    paddingY: 3,
    sizing: "border",
    width: 1
  }, /*#__PURE__*/React.createElement(Flex, {
    align: "flex-start"
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1
  }, /*#__PURE__*/React.createElement(ReadOnlyIcon, null)), /*#__PURE__*/React.createElement(Box, {
    flex: 1,
    marginLeft: 3
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1
  }, "Your role", plural && 's', " ", roles, " ", plural ? 'do' : 'does', " not have permissions to", ' ', requiredPermission, " this document.")))));
}

function join(array, sep) {
  return array.reduce((result, item) => {
    if (result === null) {
      return [item];
    }

    return result.concat([sep, item]);
  }, null);
}