import React, { useCallback, createElement, useState } from 'react';
import { Box, Flex, Stack, Text } from '@sanity/ui';
import { useTimeAgo } from '../../../../hooks';
import { formatTimelineEventLabel, getTimelineEventIconComponent } from './helpers';
import { UserAvatarStack } from './userAvatarStack';
import { EventLabel, IconBox, IconWrapper, Root } from './timelineItem.styled';
const TIMELINE_ITEM_EVENT_TONE = {
  initial: 'primary',
  create: 'primary',
  publish: 'positive',
  editLive: 'caution',
  editDraft: 'caution',
  unpublish: 'critical',
  discardDraft: 'critical',
  delete: 'critical',
  withinSelection: 'primary'
};
export function TimelineItem(props) {
  const {
    isSelectionBottom,
    isSelectionTop,
    state,
    onSelect,
    timestamp,
    chunk,
    type
  } = props;
  const iconComponent = getTimelineEventIconComponent(type);
  const authorUserIds = Array.from(chunk.authors);
  const timeAgo = useTimeAgo(timestamp, {
    minimal: true
  });
  const isSelected = state === 'selected';
  const isWithinSelection = state === 'withinSelection';
  const [isHovered, setHovered] = useState(false);
  const handleClick = useCallback(evt => {
    evt.preventDefault();
    evt.stopPropagation();
    onSelect(chunk);
  }, [onSelect, chunk]);
  return /*#__PURE__*/React.createElement(Root, {
    "data-ui": "timelineItem",
    radius: 2,
    "data-chunk-id": chunk.id,
    paddingY: 0,
    paddingX: 2,
    tone: isHovered || isSelected || isWithinSelection ? 'default' : TIMELINE_ITEM_EVENT_TONE[type],
    pressed: isWithinSelection,
    state: state,
    selected: isSelected,
    isHovered: isHovered,
    disabled: state === 'disabled',
    "data-selection-bottom": isSelectionBottom,
    "data-selection-top": isSelectionTop,
    onClick: handleClick
  }, /*#__PURE__*/React.createElement("div", {
    // eslint-disable-next-line react/jsx-no-bind
    onMouseEnter: () => setHovered(true) // eslint-disable-next-line react/jsx-no-bind
    ,
    onMouseLeave: () => setHovered(false)
  }, /*#__PURE__*/React.createElement(Flex, {
    align: "stretch"
  }, /*#__PURE__*/React.createElement(IconWrapper, {
    align: "center"
  }, /*#__PURE__*/React.createElement(IconBox, {
    padding: 2
  }, /*#__PURE__*/React.createElement(Text, {
    size: 2
  }, iconComponent && /*#__PURE__*/createElement(iconComponent)))), /*#__PURE__*/React.createElement(Stack, {
    space: 2,
    margin: 2
  }, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(EventLabel, {
    size: 1,
    weight: "medium"
  }, formatTimelineEventLabel(type) || /*#__PURE__*/React.createElement("code", null, type))), /*#__PURE__*/React.createElement(Text, {
    size: 0,
    muted: true
  }, timeAgo)), /*#__PURE__*/React.createElement(Flex, {
    flex: 1,
    justify: "flex-end",
    align: "center"
  }, /*#__PURE__*/React.createElement(UserAvatarStack, {
    maxLength: 3,
    userIds: authorUserIds
  })))));
}