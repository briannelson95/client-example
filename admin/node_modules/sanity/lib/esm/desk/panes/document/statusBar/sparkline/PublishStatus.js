var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { Box, Button, Flex, Stack, Text, Tooltip } from '@sanity/ui';
import { PlayIcon, PublishIcon } from '@sanity/icons';
import React from 'react';
import styled from 'styled-components';
import { useTimeAgo } from '../../../../../hooks';
const Root = styled(Flex)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  cursor: default;\n"])));
export function PublishStatus(props) {
  const {
    collapsed,
    disabled,
    lastPublished,
    lastUpdated,
    liveEdit
  } = props;
  const lastPublishedTimeAgo = useTimeAgo(lastPublished || '', {
    minimal: true,
    agoSuffix: true
  });
  const lastPublishedTime = useTimeAgo(lastPublished || '', {
    minimal: true
  });
  const lastUpdatedTimeAgo = useTimeAgo(lastUpdated || '', {
    minimal: true,
    agoSuffix: true
  });
  const lastUpdatedTime = useTimeAgo(lastUpdated || '', {
    minimal: true
  });
  return /*#__PURE__*/React.createElement(Root, {
    align: "center",
    "data-ui": "SessionLayout",
    sizing: "border"
  }, /*#__PURE__*/React.createElement(Tooltip, {
    portal: true,
    content: /*#__PURE__*/React.createElement(Stack, {
      padding: 3,
      space: 3
    }, /*#__PURE__*/React.createElement(Text, {
      size: 1,
      muted: true
    }, liveEdit ? /*#__PURE__*/React.createElement(React.Fragment, null, "Last updated ", lastUpdated ? lastUpdatedTimeAgo : lastPublishedTimeAgo) : /*#__PURE__*/React.createElement(React.Fragment, null, "Last published ", lastPublishedTimeAgo)))
  }, /*#__PURE__*/React.createElement(Button, {
    mode: "bleed",
    tone: liveEdit ? 'critical' : 'positive',
    tabIndex: -1,
    disabled: disabled
  }, /*#__PURE__*/React.createElement(Flex, {
    align: "center"
  }, /*#__PURE__*/React.createElement(Box, {
    marginRight: collapsed ? 0 : 3
  }, /*#__PURE__*/React.createElement(Text, {
    size: 2
  }, liveEdit ? /*#__PURE__*/React.createElement(PlayIcon, null) : /*#__PURE__*/React.createElement(PublishIcon, null))), !collapsed && /*#__PURE__*/React.createElement(Text, {
    size: 1,
    weight: "medium"
  }, liveEdit ? /*#__PURE__*/React.createElement(React.Fragment, null, lastUpdated ? lastUpdatedTime : lastPublishedTime) : lastPublishedTime)))));
}