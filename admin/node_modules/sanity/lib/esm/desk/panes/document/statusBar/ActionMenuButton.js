import { useId } from '@reach/auto-id';
import { ChevronDownIcon } from '@sanity/icons';
import { Box, Button, Flex, Hotkeys, Menu, MenuButton, MenuItem, Text, Tooltip } from '@sanity/ui';
import React, { createElement, isValidElement, useCallback, useRef, useState, useMemo } from 'react';
import { isValidElementType } from 'react-is';
import { LegacyLayerProvider } from '../../../../components/transitional';
import { ActionStateDialog } from './ActionStateDialog';
export function ActionMenuButton(props) {
  const {
    actionStates,
    disabled
  } = props;
  const idPrefix = useId() || '';
  const buttonRef = useRef(null);
  const [actionIndex, setActionIndex] = useState(-1);
  const [referenceElement, setReferenceElement] = useState(null);
  const handleAction = useCallback(idx => {
    setActionIndex(idx);
  }, []);
  const popoverProps = useMemo(() => ({
    placement: 'top-end',
    portal: true,
    preventOverflow: true
  }), []);
  const currentAction = actionStates[actionIndex];
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MenuButton, {
    id: "".concat(idPrefix, "-action-menu"),
    button: /*#__PURE__*/React.createElement(Button, {
      "data-testid": "action-menu-button",
      "aria-label": "Open document actions",
      disabled: disabled,
      icon: ChevronDownIcon,
      mode: "ghost",
      ref: buttonRef
    }),
    menu: /*#__PURE__*/React.createElement(Menu, {
      padding: 1
    }, actionStates.map((actionState, idx) => /*#__PURE__*/React.createElement(ActionMenuListItem, {
      actionState: actionState,
      disabled: disabled,
      index: idx // eslint-disable-next-line react/no-array-index-key
      ,
      key: idx,
      onAction: handleAction
    }))),
    popover: popoverProps,
    ref: setReferenceElement
  }), currentAction && currentAction.modal && /*#__PURE__*/React.createElement(LegacyLayerProvider, {
    zOffset: "paneFooter"
  }, /*#__PURE__*/React.createElement(ActionStateDialog, {
    modal: currentAction.modal,
    referenceElement: referenceElement
  })));
}

function ActionMenuListItem(props) {
  const {
    actionState,
    disabled,
    index,
    onAction
  } = props;
  const {
    onHandle
  } = actionState;
  const handleClick = useCallback(() => {
    onAction(index);
    if (onHandle) onHandle();
  }, [index, onAction, onHandle]);
  const tooltipContent = actionState.title && /*#__PURE__*/React.createElement(Box, {
    padding: 2
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1
  }, actionState.title));
  return /*#__PURE__*/React.createElement(MenuItem, {
    "data-testid": "action-".concat(actionState.label.replace(' ', '')),
    disabled: disabled || Boolean(actionState.disabled),
    onClick: handleClick,
    padding: 0,
    tone: actionState.tone
  }, /*#__PURE__*/React.createElement(Tooltip, {
    content: tooltipContent,
    disabled: !tooltipContent,
    fallbackPlacements: ['left', 'bottom'],
    placement: "top",
    portal: true
  }, /*#__PURE__*/React.createElement(Flex, {
    align: "center",
    paddingX: 3
  }, /*#__PURE__*/React.createElement(Flex, {
    flex: 1,
    paddingY: 3
  }, actionState.icon && /*#__PURE__*/React.createElement(Box, {
    marginRight: 3
  }, /*#__PURE__*/React.createElement(Text, null, /*#__PURE__*/isValidElement(actionState.icon) && actionState.icon, isValidElementType(actionState.icon) && /*#__PURE__*/createElement(actionState.icon))), /*#__PURE__*/React.createElement(Text, null, actionState.label)), actionState.shortcut && /*#__PURE__*/React.createElement(Box, {
    marginLeft: 3
  }, /*#__PURE__*/React.createElement(Hotkeys, {
    keys: String(actionState.shortcut).split('+').map(s => s.slice(0, 1).toUpperCase() + s.slice(1))
  })))));
}