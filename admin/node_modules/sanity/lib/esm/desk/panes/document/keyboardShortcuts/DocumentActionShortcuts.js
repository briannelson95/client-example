function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import isHotkey from 'is-hotkey';
import React, { useCallback, useMemo, useState } from 'react';
import { ActionStateDialog } from '../statusBar';
import { Pane } from '../../../components';
import { useDocumentPane } from '../useDocumentPane';
import { RenderActionCollectionState } from '../../../actions';
import { LegacyLayerProvider } from '../../../../components/transitional';

function KeyboardShortcutResponder(props) {
  const {
    actionsBoxElement,
    activeIndex,
    children,
    id,
    onActionStart,
    onKeyDown,
    rootRef,
    states,
    ...rest
  } = props;
  const activeAction = states[activeIndex];
  const handleKeyDown = useCallback(event => {
    const matchingStates = states.filter(state => state.shortcut && isHotkey(state.shortcut, event));
    const matchingState = matchingStates[0];

    if (matchingStates.length > 1) {
      // eslint-disable-next-line no-console
      console.warn("Keyboard shortcut conflict: More than one document action matches the shortcut \"".concat(matchingState.shortcut, "\""));
    }

    if (matchingState && !matchingState.disabled && matchingState.onHandle) {
      event.preventDefault();
      matchingState.onHandle();
      onActionStart(states.indexOf(matchingState));
      return;
    }

    if (onKeyDown) {
      onKeyDown(event);
    }
  }, [onActionStart, onKeyDown, states]);
  return /*#__PURE__*/React.createElement(Pane, _extends({
    id: id,
    onKeyDown: handleKeyDown,
    tabIndex: -1
  }, rest, {
    ref: rootRef
  }), children, activeAction && activeAction.modal && /*#__PURE__*/React.createElement(LegacyLayerProvider, {
    zOffset: "paneFooter"
  }, /*#__PURE__*/React.createElement(ActionStateDialog, {
    modal: activeAction.modal,
    referenceElement: actionsBoxElement
  })));
}

export const DocumentActionShortcuts = /*#__PURE__*/React.memo(props => {
  const {
    actionsBoxElement,
    children,
    ...rest
  } = props;
  const {
    actions,
    editState
  } = useDocumentPane();
  const [activeIndex, setActiveIndex] = useState(-1);
  const onActionStart = useCallback(idx => {
    setActiveIndex(idx);
  }, []);
  const actionProps = useMemo(() => editState && { ...editState,
    // @todo: what to call here?
    onComplete: () => undefined,
    // @todo: get revision string
    revision: undefined
  }, [editState]);
  if (!actionProps || !actions) return null;
  return /*#__PURE__*/React.createElement(RenderActionCollectionState, {
    actionProps: actionProps,
    actions: actions
  }, _ref => {
    let {
      states
    } = _ref;
    return /*#__PURE__*/React.createElement(KeyboardShortcutResponder, _extends({}, rest, {
      activeIndex: activeIndex,
      actionsBoxElement: actionsBoxElement,
      onActionStart: onActionStart,
      states: states
    }), children);
  });
});
DocumentActionShortcuts.displayName = 'DocumentActionShortcuts';