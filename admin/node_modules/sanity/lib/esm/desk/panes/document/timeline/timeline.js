import React, { useCallback, useEffect, useRef, useState } from 'react';
import { Text, Spinner, Flex } from '@sanity/ui';
import { TimelineItem } from './timelineItem';
import { Root, StackWrapper, MenuWrapper } from './timeline.styled';
// Must be a positive number
const LOAD_MORE_OFFSET = 20;
export const Timeline = _ref => {
  let {
    timeline,
    disabledBeforeSelection,
    topSelection,
    bottomSelection,
    onSelect,
    onLoadMore
  } = _ref;
  const rootRef = useRef(null);
  const listRef = useRef(null);
  const [loadingElement, setLoadingElement] = useState(null);
  let state = disabledBeforeSelection ? 'disabled' : 'enabled';
  const checkIfLoadIsNeeded = useCallback(() => {
    const rootEl = rootRef.current;

    if (loadingElement && rootEl) {
      const {
        offsetHeight,
        scrollTop
      } = rootEl;
      const bottomPosition = offsetHeight + scrollTop + LOAD_MORE_OFFSET;
      const isVisible = loadingElement.offsetTop < bottomPosition;

      if (isVisible) {
        // @todo: find out why, for some reason, it won't load without RAF wrapper
        requestAnimationFrame(() => onLoadMore(isVisible));
      }
    }
  }, [onLoadMore, loadingElement]); // Load whenever it's needed

  useEffect(checkIfLoadIsNeeded, [checkIfLoadIsNeeded]);
  return /*#__PURE__*/React.createElement(Root, {
    ref: rootRef,
    onScroll: checkIfLoadIsNeeded,
    "data-ui": "timeline"
  }, timeline.chunkCount === 0 && /*#__PURE__*/React.createElement(StackWrapper, {
    padding: 3,
    space: 3
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1,
    weight: "semibold"
  }, "No document history"), /*#__PURE__*/React.createElement(Text, {
    muted: true,
    size: 1
  }, "When changing the content of the document, the document versions will appear in this menu.")), timeline.chunkCount > 0 && /*#__PURE__*/React.createElement(MenuWrapper, {
    ref: listRef,
    padding: 1,
    space: 0
  }, timeline.mapChunks(chunk => {
    const isSelectionTop = topSelection === chunk;
    const isSelectionBottom = bottomSelection === chunk;

    if (isSelectionTop) {
      state = 'withinSelection';
    }

    if (isSelectionBottom) {
      state = 'selected';
    }

    const item = /*#__PURE__*/React.createElement(TimelineItem, {
      chunk: chunk,
      isSelectionBottom: isSelectionBottom,
      isSelectionTop: isSelectionTop,
      key: chunk.id,
      state: state,
      onSelect: onSelect,
      type: chunk.type,
      timestamp: chunk.endTimestamp
    }); // Flip it back to normal after we've rendered the active one.

    if (state === 'selected') {
      state = 'enabled';
    }

    return item;
  })), !timeline.reachedEarliestEntry && /*#__PURE__*/React.createElement(Flex, {
    align: "center",
    justify: "center",
    padding: 4,
    ref: setLoadingElement
  }, /*#__PURE__*/React.createElement(Spinner, {
    muted: true
  })));
};
Timeline.displayName = 'Timeline';