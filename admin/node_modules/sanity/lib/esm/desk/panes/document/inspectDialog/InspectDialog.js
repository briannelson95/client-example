import { Card, Code, Dialog, Flex, Tab, TabList, TabPanel } from '@sanity/ui';
import React, { useCallback } from 'react';
import JSONInspector from '@rexxars/react-json-inspector';
import { DocTitle } from '../../../components';
import { useDeskToolSetting } from '../../../useDeskToolSetting';
import { useDocumentPane } from '../useDocumentPane';
import { VIEW_MODE_PARSED, VIEW_MODE_RAW, VIEW_MODES } from './constants';
import { isDocumentLike, isExpanded, maybeSelectAll, select, toggleExpanded } from './helpers';
import { JSONInspectorWrapper } from './InspectDialog.styles';
import { Search } from './Search';
export function InspectDialog(props) {
  const {
    value
  } = props;
  const {
    onInspectClose,
    paneKey
  } = useDocumentPane();
  const dialogIdPrefix = "".concat(paneKey, "_inspect_");
  /* this creates a view mode (the default that it opens with is the parsed tab) that is saved based on the paneKey
  where the inspect dialog lives.
  This also means that when a page is loaded, the state of the tabs remains and doesn't revert to the pane tab */

  const [viewModeId, onViewModeChange] = useDeskToolSetting('desk-tool', "inspect-view-preferred-view-mode-".concat(paneKey), 'parsed');
  /* based on the view mode it shows the right tab content */

  const viewMode = VIEW_MODES.find(mode => mode.id === viewModeId);
  const setParsedViewMode = useCallback(() => {
    onViewModeChange(VIEW_MODE_PARSED.id);
  }, [onViewModeChange]);
  const setRawViewMode = useCallback(() => {
    onViewModeChange(VIEW_MODE_RAW.id);
  }, [onViewModeChange]);
  return /*#__PURE__*/React.createElement(Dialog, {
    id: "".concat(dialogIdPrefix, "dialog"),
    header: isDocumentLike(value) ? /*#__PURE__*/React.createElement(React.Fragment, null, "Inspecting", ' ', /*#__PURE__*/React.createElement("em", null, /*#__PURE__*/React.createElement(DocTitle, {
      document: value
    }))) : /*#__PURE__*/React.createElement("em", null, "No value"),
    onClose: onInspectClose,
    width: 3
  }, /*#__PURE__*/React.createElement(Flex, {
    direction: "column",
    height: "fill"
  }, /*#__PURE__*/React.createElement(Card, {
    padding: 3,
    shadow: 1,
    style: {
      position: 'sticky',
      bottom: 0,
      zIndex: 3
    }
  }, /*#__PURE__*/React.createElement(TabList, {
    space: 1
  }, /*#__PURE__*/React.createElement(Tab, {
    "aria-controls": "".concat(dialogIdPrefix, "tabpanel"),
    fontSize: 1,
    id: "".concat(dialogIdPrefix, "tab-").concat(VIEW_MODE_PARSED.id),
    label: VIEW_MODE_PARSED.title,
    onClick: setParsedViewMode,
    selected: viewMode === VIEW_MODE_PARSED
  }), /*#__PURE__*/React.createElement(Tab, {
    "aria-controls": "".concat(dialogIdPrefix, "tabpanel"),
    fontSize: 1,
    id: "".concat(dialogIdPrefix, "tab-").concat(VIEW_MODE_RAW.id),
    label: VIEW_MODE_RAW.title,
    onClick: setRawViewMode,
    selected: viewMode === VIEW_MODE_RAW
  }))), /*#__PURE__*/React.createElement(TabPanel, {
    "aria-labelledby": "".concat(dialogIdPrefix, "tab-").concat(viewModeId),
    flex: 1,
    id: "".concat(dialogIdPrefix, "tabpanel"),
    overflow: "auto",
    padding: 4,
    style: {
      outline: 'none'
    }
  }, viewMode === VIEW_MODE_PARSED && /*#__PURE__*/React.createElement(JSONInspectorWrapper, null, /*#__PURE__*/React.createElement(JSONInspector, {
    data: value,
    isExpanded: isExpanded,
    onClick: toggleExpanded,
    search: Search
  })), viewMode === VIEW_MODE_RAW && /*#__PURE__*/React.createElement(Code, {
    language: "json",
    tabIndex: 0,
    onKeyDown: maybeSelectAll,
    onDoubleClick: select,
    onFocus: select
  }, JSON.stringify(value, null, 2)))));
}