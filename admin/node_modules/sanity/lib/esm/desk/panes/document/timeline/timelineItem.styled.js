var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { Text, Box, MenuItem, Flex } from '@sanity/ui';
import styled, { css } from 'styled-components';
export const IconWrapper = styled(Flex)(_ref => {
  var _theme$sanity$color$b;

  let {
    theme
  } = _ref;
  const borderColor = (_theme$sanity$color$b = theme.sanity.color.base.skeleton) === null || _theme$sanity$color$b === void 0 ? void 0 : _theme$sanity$color$b.from;
  return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    --timeline-hairline-width: 1px;\n    position: relative;\n    z-index: 2;\n    margin: 0;\n    padding: 0;\n\n    &::before {\n      position: absolute;\n      content: '';\n      height: 100%;\n      width: var(--timeline-hairline-width);\n      background: ", ";\n      top: 0;\n      left: calc((100% - var(--timeline-hairline-width)) / 2);\n      z-index: 1;\n    }\n  "])), borderColor);
});
export const Root = styled(MenuItem)(_ref2 => {
  let {
    state = 'enabled',
    isHovered,
    theme
  } = _ref2;
  const {
    color
  } = theme.sanity;
  const selectedState = color.button.default.primary.enabled;
  return css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    position: relative;\n    min-width: 244px;\n\n    ", "\n\n    ", "\n\n      ", "\n\n    // line styling \uD83D\uDC47\n      &:first-child ", "::before {\n      height: 50%;\n      top: unset;\n      bottom: 0;\n    }\n\n    &:last-child ", "::before {\n      height: 50%;\n    }\n\n    ", "\n\n    // Remove timeline lines when using the keyboard to navigate timeline items\n    &:focus ", "::before {\n      background: transparent;\n    }\n  "])), state === 'selected' && css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n      --card-bg-color: ", ";\n      --card-fg-color: ", ";\n      --card-muted-fg-color: ", ";\n      --card-border-color: ", ";\n      &:not([data-selection-bottom='true']) {\n        border-top-left-radius: 0;\n        border-top-right-radius: 0;\n      }\n    "])), selectedState.bg, selectedState.fg, selectedState.muted, selectedState.bg), state === 'withinSelection' && css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n      border-bottom-left-radius: 0;\n      border-bottom-right-radius: 0;\n      box-shadow: 0px 3px 0px 0px var(--card-bg-color);\n      &:not([data-selection-top='true']) {\n        border-radius: 0;\n      }\n\n      ", " {\n        &::before {\n          background: var(--card-hairline-soft-color);\n        }\n      }\n    "])), IconWrapper), state === 'disabled' && css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n      [data-ui='Avatar'] {\n        opacity: 0.2;\n      }\n    "]))), IconWrapper, IconWrapper, (isHovered || state === 'selected') && css(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n      ", "::before {\n        background: transparent;\n      }\n    "])), IconWrapper), IconWrapper);
});
export const IconBox = styled(Box)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  background: var(--card-bg-color);\n  border-radius: 50px;\n  position: relative;\n  z-index: 2;\n"])));
export const EventLabel = styled(Text)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  text-transform: capitalize;\n"])));