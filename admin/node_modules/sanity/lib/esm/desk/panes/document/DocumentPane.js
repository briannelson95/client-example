var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { BoundaryElementProvider, Card, Code, DialogProvider, Flex, Stack, Text, useElementRect } from '@sanity/ui';
import React, { memo, useCallback, useMemo, useState } from 'react';
import styled from 'styled-components';
import { fromString as pathFromString } from '@sanity/util/paths';
import { PaneFooter } from '../../components/pane';
import { usePaneLayout } from '../../components/pane/usePaneLayout';
import { ErrorPane } from '../error';
import { LoadingPane } from '../loading';
import { ChangeConnectorRoot } from '../../../components/changeIndicators';
import { useZIndex } from '../../../components/zOffsets';
import { isDev } from '../../../environment';
import { useTemplates } from '../../../hooks';
import { useSource, SourceProvider } from '../../../studio';
import { usePaneRouter } from '../../components';
import { useDocumentType, useTemplatePermissions } from '../../../datastores';
import { ReferenceInputOptionsProvider } from '../../../form';
import { useDeskTool } from '../../useDeskTool';
import { ChangesPanel } from './changesPanel';
import { DocumentPanel } from './documentPanel';
import { DocumentOperationResults } from './DocumentOperationResults';
import { DocumentActionShortcuts } from './keyboardShortcuts';
import { DocumentStatusBar } from './statusBar';
import { useDocumentPane } from './useDocumentPane';
import { DocumentPaneProvider } from './DocumentPaneProvider';
const DOCUMENT_PANEL_MIN_WIDTH = 320;
const DOCUMENT_PANEL_INITIAL_MIN_WIDTH = 600;
const CHANGES_PANEL_MIN_WIDTH = 320;
const DIALOG_PROVIDER_POSITION = [// We use the `position: fixed` for dialogs on narrow screens (< 512px).
'fixed', // And we use the `position: absolute` strategy (within panes) on wide screens.
'absolute'];
const StyledChangeConnectorRoot = styled(ChangeConnectorRoot)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  flex: 1;\n  display: flex;\n  min-height: 0;\n  min-width: 0;\n"])));
export const DocumentPane = /*#__PURE__*/memo(function DocumentPane(props) {
  const {
    name: parentSourceName
  } = useSource();
  return /*#__PURE__*/React.createElement(SourceProvider, {
    name: props.pane.source || parentSourceName
  }, /*#__PURE__*/React.createElement(DocumentPaneInner, props));
});

function DocumentPaneInner(props) {
  var _routerPanesState;

  const {
    pane,
    paneKey
  } = props;
  const {
    resolveNewDocumentOptions
  } = useSource().document;
  const paneRouter = usePaneRouter();
  const options = usePaneOptions(pane.options, paneRouter.params);
  const {
    documentType,
    isLoaded: isDocumentLoaded
  } = useDocumentType(options.id, options.type);
  const templateItems = useMemo(() => {
    return resolveNewDocumentOptions({
      type: 'global'
    });
  }, [resolveNewDocumentOptions]);
  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({
    templateItems
  });
  const isLoaded = isDocumentLoaded && !isTemplatePermissionsLoading;
  const providerProps = useMemo(() => {
    return isLoaded && documentType && options.type !== documentType ? mergeDocumentType(props, options, documentType) : props;
  }, [props, documentType, isLoaded, options]);
  const {
    ReferenceChildLink,
    handleEditReference,
    groupIndex,
    routerPanesState
  } = paneRouter;
  const childParams = ((_routerPanesState = routerPanesState[groupIndex + 1]) === null || _routerPanesState === void 0 ? void 0 : _routerPanesState[0].params) || {};
  const routerPanesStateLength = routerPanesState.length;
  const {
    parentRefPath
  } = childParams;
  const activePath = useMemo(() => {
    return parentRefPath ? {
      path: pathFromString(parentRefPath),
      state: // eslint-disable-next-line no-nested-ternary
      groupIndex >= routerPanesStateLength - 1 ? 'none' : groupIndex >= routerPanesStateLength - 2 ? 'selected' : 'pressed'
    } : {
      path: [],
      state: 'none'
    };
  }, [parentRefPath, groupIndex, routerPanesStateLength]);

  if (options.type === '*' && !isLoaded) {
    return /*#__PURE__*/React.createElement(LoadingPane, {
      flex: 2.5,
      minWidth: 320,
      paneKey: paneKey,
      title: "Loading document\u2026"
    });
  }

  if (!documentType) {
    return /*#__PURE__*/React.createElement(ErrorPane, {
      flex: 2.5,
      minWidth: 320,
      paneKey: paneKey,
      title: /*#__PURE__*/React.createElement(React.Fragment, null, "The document was not found")
    }, /*#__PURE__*/React.createElement(Stack, {
      space: 4
    }, /*#__PURE__*/React.createElement(Text, {
      as: "p"
    }, "The document type is not defined, and a document with the ", /*#__PURE__*/React.createElement("code", null, options.id), ' ', "identifier could not be found.")));
  }

  return /*#__PURE__*/React.createElement(DocumentPaneProvider, providerProps, /*#__PURE__*/React.createElement(ReferenceInputOptionsProvider, {
    EditReferenceLinkComponent: ReferenceChildLink,
    onEditReference: handleEditReference,
    initialValueTemplateItems: templatePermissions,
    activePath: activePath
  }, /*#__PURE__*/React.createElement(InnerDocumentPane, null)));
}

function usePaneOptions(options) {
  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const templates = useTemplates();
  return useMemo(() => {
    // The document type is provided, so return
    if (options.type && options.type !== '*') {
      return options;
    } // Attempt to derive document type from the template configuration


    const templateName = options.template || params.template;
    const template = templateName ? templates.find(t => t.id === templateName) : undefined;
    const documentType = template === null || template === void 0 ? void 0 : template.schemaType; // No document type was found in a template

    if (!documentType) {
      return options;
    } // The template provided the document type, so modify the paneâ€™s `options` property


    return { ...options,
      type: documentType
    };
  }, [options, params.template, templates]);
}

function mergeDocumentType(props, options, documentType) {
  return { ...props,
    pane: { ...props.pane,
      options: { ...options,
        type: documentType
      }
    }
  };
}

function InnerDocumentPane() {
  const {
    changesOpen,
    documentType,
    onFocus,
    onPathOpen,
    onHistoryOpen,
    onKeyUp,
    inspectOpen,
    paneKey,
    schemaType,
    value
  } = useDocumentPane();
  const {
    features
  } = useDeskTool();
  const {
    collapsed: layoutCollapsed
  } = usePaneLayout();
  const zOffsets = useZIndex();
  const [rootElement, setRootElement] = useState(null);
  const [footerElement, setFooterElement] = useState(null);
  const [actionsBoxElement, setActionsBoxElement] = useState(null);
  const footerRect = useElementRect(footerElement);
  const footerH = footerRect === null || footerRect === void 0 ? void 0 : footerRect.height;
  const documentPanel = useMemo(() => /*#__PURE__*/React.createElement(DocumentPanel, {
    footerHeight: footerH || null,
    rootElement: rootElement,
    isInspectOpen: inspectOpen
  }), [footerH, rootElement, inspectOpen]);
  const footer = useMemo(() => /*#__PURE__*/React.createElement(PaneFooter, {
    ref: setFooterElement
  }, /*#__PURE__*/React.createElement(DocumentStatusBar, {
    actionsBoxRef: setActionsBoxElement
  })), []);
  const changesPanel = useMemo(() => {
    if (!features.reviewChanges) return null;
    if (!changesOpen) return null;
    return /*#__PURE__*/React.createElement(BoundaryElementProvider, {
      element: rootElement
    }, /*#__PURE__*/React.createElement(ChangesPanel, null));
  }, [changesOpen, features.reviewChanges, rootElement]);
  const onConnectorSetFocus = useCallback(path => {
    onPathOpen(path);
    onFocus(path);
  }, [onPathOpen, onFocus]);
  const children = useMemo(() => {
    if (!schemaType) {
      return /*#__PURE__*/React.createElement(ErrorPane, {
        flex: 2.5,
        minWidth: 320,
        paneKey: paneKey,
        title: /*#__PURE__*/React.createElement(React.Fragment, null, "Unknown document type: ", /*#__PURE__*/React.createElement("code", null, documentType)),
        tone: "caution"
      }, /*#__PURE__*/React.createElement(Stack, {
        space: 4
      }, documentType && /*#__PURE__*/React.createElement(Text, {
        as: "p"
      }, "This document has the schema type ", /*#__PURE__*/React.createElement("code", null, documentType), ", which is not defined as a type in the local content studio schema."), !documentType && /*#__PURE__*/React.createElement(Text, {
        as: "p"
      }, "This document does not exist, and no schema type was specified for it."), isDev && value && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Text, {
        as: "p"
      }, "Here is the JSON representation of the document:"), /*#__PURE__*/React.createElement(Card, {
        padding: 3,
        overflow: "auto",
        radius: 2,
        shadow: 1,
        tone: "inherit"
      }, /*#__PURE__*/React.createElement(Code, {
        language: "json",
        size: [1, 1, 2]
      }, JSON.stringify(value, null, 2))))));
    }

    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DialogProvider, {
      position: DIALOG_PROVIDER_POSITION,
      zOffset: zOffsets.portal
    }, /*#__PURE__*/React.createElement(Flex, {
      direction: "column",
      flex: 1,
      height: layoutCollapsed ? undefined : 'fill'
    }, /*#__PURE__*/React.createElement(StyledChangeConnectorRoot, {
      "data-testid": "change-connector-root",
      isReviewChangesOpen: changesOpen,
      onOpenReviewChanges: onHistoryOpen,
      onSetFocus: onConnectorSetFocus
    }, documentPanel, changesPanel))), footer, /*#__PURE__*/React.createElement(DocumentOperationResults, null));
  }, [changesOpen, changesPanel, documentPanel, documentType, footer, onConnectorSetFocus, onHistoryOpen, layoutCollapsed, paneKey, schemaType, value, zOffsets.portal]);
  const currentMinWidth = changesOpen ? DOCUMENT_PANEL_INITIAL_MIN_WIDTH + CHANGES_PANEL_MIN_WIDTH : DOCUMENT_PANEL_INITIAL_MIN_WIDTH;
  const minWidth = changesOpen ? DOCUMENT_PANEL_MIN_WIDTH + CHANGES_PANEL_MIN_WIDTH : DOCUMENT_PANEL_MIN_WIDTH;
  return /*#__PURE__*/React.createElement(DocumentActionShortcuts, {
    actionsBoxElement: actionsBoxElement,
    currentMinWidth: currentMinWidth,
    "data-testid": "document-pane",
    flex: 2.5,
    id: paneKey,
    minWidth: minWidth,
    onKeyUp: onKeyUp,
    rootRef: setRootElement
  }, children);
}