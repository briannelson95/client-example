import _upperFirst from "lodash/upperFirst";

var _templateObject;

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { SelectIcon } from '@sanity/icons';
import { useClickOutside, Button, Popover } from '@sanity/ui';
import React, { useCallback, useState } from 'react';
import styled from 'styled-components';
import { useTimeAgo } from '../../../../hooks';
import { useDocumentPane } from '../useDocumentPane';
import { sinceTimelineProps, revTimelineProps, formatTimelineEventLabel } from './helpers';
import { Timeline } from './timeline';
const Root = styled(Popover)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  & > div {\n    display: flex;\n    flex-direction: column;\n\n    & > [data-ui='Card'] {\n      flex: 1;\n      min-height: 0;\n      display: flex;\n      flex-direction: column;\n\n      /* This is the scrollable container rendered by <Timeline /> */\n      & > div {\n        flex: 1;\n        min-height: 0;\n      }\n    }\n  }\n"])));
export function TimelineMenu(_ref) {
  let {
    chunk,
    mode
  } = _ref;
  const {
    historyController,
    setTimelineRange,
    setTimelineMode,
    timeline,
    ready
  } = useDocumentPane();
  const [open, setOpen] = useState(false);
  const [buttonRef, setButtonRef] = useState(null);
  const [menuContent, setMenuContent] = useState(null);
  const handleOpen = useCallback(() => {
    setTimelineMode(mode);
    setOpen(true);
  }, [mode, setTimelineMode]);
  const handleClose = useCallback(() => {
    setTimelineMode('closed');
    setOpen(false);
  }, [setTimelineMode]);
  const handleClickOutside = useCallback(() => {
    handleClose();
  }, [handleClose]);
  useClickOutside(handleClickOutside, [menuContent, buttonRef]);
  const selectRev = useCallback(revChunk => {
    const [sinceId, revId] = historyController.findRangeForNewRev(revChunk);
    setTimelineMode('closed');
    setOpen(false);
    setTimelineRange(sinceId, revId);
  }, [historyController, setTimelineMode, setTimelineRange]);
  const selectSince = useCallback(sinceChunk => {
    const [sinceId, revId] = historyController.findRangeForNewSince(sinceChunk);
    setTimelineMode('closed');
    setOpen(false);
    setTimelineRange(sinceId, revId);
  }, [historyController, setTimelineMode, setTimelineRange]);
  const loadMoreHistory = useCallback(state => {
    historyController.setLoadMore(state);
  }, [historyController]);
  const content = open && /*#__PURE__*/React.createElement("div", {
    ref: setMenuContent
  }, mode === 'rev' ? /*#__PURE__*/React.createElement(Timeline, _extends({
    onSelect: selectRev,
    onLoadMore: loadMoreHistory,
    timeline: timeline
  }, revTimelineProps(historyController.realRevChunk))) : /*#__PURE__*/React.createElement(Timeline, _extends({
    onSelect: selectSince,
    onLoadMore: loadMoreHistory,
    timeline: timeline
  }, sinceTimelineProps(historyController.sinceTime, historyController.realRevChunk))));
  const timeAgo = useTimeAgo((chunk === null || chunk === void 0 ? void 0 : chunk.endTimestamp) || '', {
    agoSuffix: true
  });
  const revLabel = chunk ? "".concat(_upperFirst(formatTimelineEventLabel(chunk.type)), " ").concat(timeAgo) : 'Current version';
  const sinceLabel = chunk ? "Since ".concat(formatTimelineEventLabel(chunk.type), " ").concat(timeAgo) : 'Since unknown version';
  const openLabel = mode === 'rev' ? 'Select version' : 'Review changes since';
  const buttonLabel = mode === 'rev' ? revLabel : sinceLabel;
  return /*#__PURE__*/React.createElement(Root, {
    constrainSize: true,
    content: content,
    "data-ui": "versionMenu",
    open: open,
    portal: true,
    referenceElement: buttonRef
  }, /*#__PURE__*/React.createElement(Button, {
    disabled: !ready,
    mode: "bleed",
    fontSize: 1,
    padding: 2,
    iconRight: SelectIcon,
    onClick: open ? handleClose : handleOpen,
    ref: setButtonRef,
    selected: open,
    text: open ? openLabel : buttonLabel
  }));
}