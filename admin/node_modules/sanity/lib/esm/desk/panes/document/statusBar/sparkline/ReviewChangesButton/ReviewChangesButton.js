function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useMemo } from 'react';
import { Box, Button, Flex, Stack, Text, Tooltip } from '@sanity/ui';
import { useTimeAgo } from '../../../../../../hooks';
import { AnimatedStatusIcon } from './AnimatedStatusIcon';
const ReviewButton = /*#__PURE__*/React.forwardRef(function ReviewButton(props, ref) {
  const {
    collapsed,
    status,
    lastUpdated,
    ...rest
  } = props;
  const lastUpdatedTime = useTimeAgo(lastUpdated || '', {
    minimal: true
  });
  const lastUpdatedTimeAgo = useTimeAgo(lastUpdated || '', {
    minimal: true,
    agoSuffix: true
  });
  const buttonProps = useMemo(() => {
    if (status === 'syncing') {
      return {
        text: 'Saving...',
        tone: undefined
      };
    }

    if (status === 'changes') {
      return {
        text: lastUpdatedTime,
        tone: 'caution'
      };
    }

    if (status === 'saved') {
      return {
        text: 'Saved!',
        tone: 'positive'
      };
    }

    return {};
  }, [status, lastUpdatedTime]);

  if (!status) {
    return null;
  }

  return /*#__PURE__*/React.createElement(Tooltip, {
    portal: true,
    disabled: status !== 'changes',
    content: /*#__PURE__*/React.createElement(Stack, {
      padding: 3,
      space: 3
    }, /*#__PURE__*/React.createElement(Text, {
      size: 1,
      weight: "semibold"
    }, "Review changes"), /*#__PURE__*/React.createElement(Text, {
      size: 1,
      muted: true
    }, "Changes saved ", lastUpdatedTimeAgo))
  }, /*#__PURE__*/React.createElement(Button, _extends({
    mode: "bleed",
    justify: "flex-start",
    tone: buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.tone
  }, rest, {
    "data-testid": "review-changes-button",
    ref: ref
  }), /*#__PURE__*/React.createElement(Flex, {
    align: "center"
  }, /*#__PURE__*/React.createElement(Box, {
    marginRight: collapsed ? 0 : 3
  }, /*#__PURE__*/React.createElement(Text, null, /*#__PURE__*/React.createElement(AnimatedStatusIcon, {
    status: status
  }))), !collapsed && /*#__PURE__*/React.createElement(Text, {
    size: 1,
    weight: "medium"
  }, buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.text))));
});
export const ReviewChangesButton = /*#__PURE__*/React.memo(ReviewButton);