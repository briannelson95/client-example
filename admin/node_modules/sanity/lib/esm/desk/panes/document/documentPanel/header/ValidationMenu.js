function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { useId } from '@reach/auto-id';
import { ErrorOutlineIcon, InfoOutlineIcon, WarningOutlineIcon } from '@sanity/icons';
import { isValidationInfoMarker, isValidationWarningMarker, isValidationErrorMarker } from '@sanity/types';
import { Button, Menu, MenuButton } from '@sanity/ui';
import React, { useCallback, useMemo } from 'react';
import { ValidationList } from '../../../../../components/validation';
import { useDocumentPane } from '../../useDocumentPane';
const BUTTON_PROPS = {
  error: {
    tone: 'critical',
    icon: ErrorOutlineIcon
  },
  warning: {
    tone: 'caution',
    icon: WarningOutlineIcon
  },
  info: {
    tone: 'primary',
    icon: InfoOutlineIcon
  }
};
export function ValidationMenu(props) {
  const {
    boundaryElement,
    isOpen,
    setOpen
  } = props;
  const {
    onFocus,
    onPathOpen,
    schemaType,
    validation
  } = useDocumentPane();
  const id = useId();
  const hasValidationMarkers = validation.length > 0;
  const hasErrorMarkers = validation.some(isValidationErrorMarker);
  const hasWarningMarkers = validation.some(isValidationWarningMarker);
  const hasInfoMarkers = validation.some(isValidationInfoMarker);
  const buttonProps = useMemo(() => {
    if (hasErrorMarkers) return BUTTON_PROPS.error;
    if (hasWarningMarkers) return BUTTON_PROPS.warning;
    if (hasInfoMarkers) return BUTTON_PROPS.info;
    return undefined;
  }, [hasErrorMarkers, hasInfoMarkers, hasWarningMarkers]);
  const handleClose = useCallback(() => setOpen(false), [setOpen]);
  if (!hasValidationMarkers) return null;
  return /*#__PURE__*/React.createElement(MenuButton, {
    id: id || '',
    button: /*#__PURE__*/React.createElement(Button, _extends({}, buttonProps, {
      title: "Show validation issues",
      mode: "bleed",
      "data-testid": "validation-list-button"
    })),
    menu: /*#__PURE__*/React.createElement(Menu, {
      open: isOpen
    }, /*#__PURE__*/React.createElement(ValidationList, {
      documentType: schemaType,
      validation: validation,
      onClose: handleClose,
      onFocus: onPathOpen
    })),
    popover: {
      portal: true,
      boundaryElement: boundaryElement,
      constrainSize: true,
      preventOverflow: true,
      width: 0
    },
    placement: "bottom-end"
  });
}