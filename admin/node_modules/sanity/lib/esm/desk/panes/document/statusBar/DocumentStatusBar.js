var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React, { useMemo } from 'react';
import styled from 'styled-components';
import { Box, Flex } from '@sanity/ui';
import { useDocumentPane } from '../useDocumentPane';
import { DocumentStatusBarActions, HistoryStatusBarActions } from './DocumentStatusBarActions';
import { DocumentSparkline } from './sparkline/DocumentSparkline';
const DocumentActionsBox = styled(Box)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  min-width: 10em;\n  max-width: 16em;\n"])));
export function DocumentStatusBar(props) {
  const {
    actionsBoxRef
  } = props;
  const {
    badges,
    historyController
  } = useDocumentPane();
  const showingRevision = historyController.onOlderRevision();
  return useMemo(() => /*#__PURE__*/React.createElement(Box, {
    paddingLeft: 2,
    paddingRight: [2, 3],
    paddingY: 2
  }, /*#__PURE__*/React.createElement(Flex, {
    align: "center"
  }, /*#__PURE__*/React.createElement(Box, {
    flex: [1, 2]
  }, badges && /*#__PURE__*/React.createElement(DocumentSparkline, null)), /*#__PURE__*/React.createElement(DocumentActionsBox, {
    flex: 1,
    marginLeft: [1, 3],
    ref: actionsBoxRef
  }, showingRevision ? /*#__PURE__*/React.createElement(HistoryStatusBarActions, null) : /*#__PURE__*/React.createElement(DocumentStatusBarActions, null)))), [actionsBoxRef, badges, showingRevision]);
}