var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import styled, { css } from 'styled-components';
import React, { createElement, memo } from 'react';
import { Text } from '@sanity/ui';
const Root = styled.div(_ref => {
  let {
    $disabled,
    $muted,
    $tone,
    theme
  } = _ref;
  const {
    color
  } = theme.sanity;
  const tone = $muted ? color.muted[$tone] : color.solid[$tone];
  const state = $disabled ? tone.disabled : tone.enabled;
  return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      --icon-badge-size: 27px;\n      --card-bg-color: ", ";\n      --card-fg-color: ", ";\n      --card-border-color: ", ";\n\n      width: var(--icon-badge-size);\n      height: var(--icon-badge-size);\n      border-radius: calc(var(--icon-badge-size) / 2);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      background-color: var(--card-bg-color);\n      color: var(--card-fg-color);\n      box-shadow: inset 0 0 0 1px var(--card-border-color);\n      margin: -3px;\n\n      & > span {\n        color: inherit;\n      }\n    "])), state.bg, state.fg, state.border);
});
export const IconBadge = /*#__PURE__*/memo(function IconBadge(props) {
  const {
    disabled = false,
    icon,
    muted = false,
    tone
  } = props;
  return /*#__PURE__*/React.createElement(Root, {
    $disabled: disabled,
    $muted: muted,
    $tone: tone,
    "aria-hidden": true
  }, /*#__PURE__*/React.createElement(Text, {
    as: "span"
  }, /*#__PURE__*/createElement(icon)));
});