import _isEqual from "lodash/isEqual";
import React, { memo, lazy, Suspense } from 'react';
import { PaneRouterProvider } from '../components/paneRouter';
import { UnknownPane } from './unknown';
import { LoadingPane } from './loading';
// TODO: audit this creates separate chunks
const paneMap = {
  component: /*#__PURE__*/lazy(() => import('./userComponent')),
  document: /*#__PURE__*/lazy(() => import('./document')),
  documentList: /*#__PURE__*/lazy(() => import('./documentList')),
  list: /*#__PURE__*/lazy(() => import('./list'))
};
/**
 * NOTE: The same pane might appear multiple times (split pane), so use index as tiebreaker
 *
 * @internal
 */

export const DeskToolPane = /*#__PURE__*/memo(function DeskToolPane(props) {
  const {
    active,
    childItemId,
    groupIndex,
    index,
    itemId,
    pane,
    paneKey,
    params,
    payload,
    selected,
    siblingIndex
  } = props;
  const PaneComponent = paneMap[pane.type] || UnknownPane;
  return /*#__PURE__*/React.createElement(PaneRouterProvider, {
    flatIndex: index,
    index: groupIndex,
    params: params,
    payload: payload,
    siblingIndex: siblingIndex
  }, /*#__PURE__*/React.createElement(Suspense, {
    fallback: /*#__PURE__*/React.createElement(LoadingPane, {
      paneKey: paneKey
    })
  }, /*#__PURE__*/React.createElement(PaneComponent, {
    childItemId: childItemId || '',
    index: index,
    itemId: itemId,
    isActive: active,
    isSelected: selected,
    paneKey: paneKey // @ts-expect-error TS doesn't know how to handle this intersection
    ,
    pane: pane
  })));
}, (_ref, _ref2) => {
  let {
    params: prevParams = {},
    payload: prevPayload = null,
    ...prev
  } = _ref;
  let {
    params: nextParams = {},
    payload: nextPayload = null,
    ...next
  } = _ref2;
  // deeply compare these objects (it's okay, they're small)
  if (!_isEqual(prevParams, nextParams)) return false;
  if (!_isEqual(prevPayload, nextPayload)) return false;
  const keys = new Set([...Object.keys(prev), ...Object.keys(next)]); // then shallow equal the rest

  for (const key of keys) {
    if (prev[key] !== next[key]) return false;
  }

  return true;
});