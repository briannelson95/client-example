import { catchError, distinctUntilChanged, map, mergeMapTo, startWith, switchMap, take, scan, delay, takeUntil, share, publishReplay, refCount } from 'rxjs/operators';
import { concat, merge, of, fromEvent, Subject } from 'rxjs';
import deepEquals from 'react-fast-compare';
import { listenQuery } from '../../../datastores';
const INITIAL_CHILD_PROPS = {
  result: null,
  error: false
};

const createResultChildProps = documents => ({
  result: {
    documents
  },
  loading: false,
  error: false
});

const createErrorChildProps = error => ({
  result: null,
  loading: false,
  error
});

export const getQueryResults = function (receivedProps$) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const onRetry$ = new Subject();
  const onRetry = onRetry$.next.bind(onRetry$);
  const queryProps$ = receivedProps$.pipe(map(props => ({
    client: props.client,
    query: props.query,
    params: props.params
  })), distinctUntilChanged(deepEquals), publishReplay(1), refCount());
  const queryResults$ = queryProps$.pipe(switchMap(queryProps => {
    const query$ = listenQuery(queryProps.client, queryProps.query, queryProps.params, options).pipe(map(createResultChildProps), share());
    return merge(of({
      loading: true
    }).pipe(delay(400), takeUntil(query$)), query$);
  }));
  return queryResults$.pipe(startWith(INITIAL_CHILD_PROPS), catchError((err, caught$) => concat(of(createErrorChildProps(err)), merge(fromEvent(window, 'online'), onRetry$).pipe(take(1), mergeMapTo(caught$)))), scan((prev, next) => ({ ...prev,
    ...next,
    onRetry
  })));
};