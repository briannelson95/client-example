import React, { memo, useMemo, useRef } from 'react';
import { Card, Code } from '@sanity/ui';
import shallowEquals from 'shallow-equals';
import { Pane } from '../../components/pane';
import { _DEBUG } from '../../constants';
import { useUnique } from '../../../util';
import { useDeskToolSetting } from '../../useDeskToolSetting';
import { useSchema } from '../../../hooks';
import { useSource, SourceProvider } from '../../../studio';
import { DEFAULT_ORDERING, EMPTY_RECORD } from './constants';
import { applyOrderingFunctions, getTypeNameFromSingleTypeFilter, isSimpleTypeFilter } from './helpers';
import { DocumentListPaneContent } from './DocumentListPaneContent';
import { DocumentListPaneHeader } from './DocumentListPaneHeader';
import { useDocumentList } from './useDocumentList';
const emptyArray = [];

function useShallowUnique(value) {
  const valueRef = useRef(value);

  if (!shallowEquals(valueRef.current, value)) {
    valueRef.current = value;
  }

  return valueRef.current;
}
/**
 * @internal
 */


export const DocumentListPane = /*#__PURE__*/memo(function DocumentListPane(props) {
  const {
    childItemId,
    index,
    isActive,
    isSelected,
    pane,
    paneKey
  } = props;
  const schema = useSchema();
  const {
    name: parentSourceName
  } = useSource();
  const {
    defaultLayout = 'default',
    displayOptions,
    initialValueTemplates = emptyArray,
    menuItems,
    menuItemGroups,
    options,
    title
  } = pane;
  const {
    apiVersion,
    defaultOrdering = emptyArray,
    filter
  } = options;
  const params = useShallowUnique(options.params || EMPTY_RECORD);
  const sourceName = pane.source;
  const typeName = useMemo(() => getTypeNameFromSingleTypeFilter(filter, params), [filter, params]);
  const showIcons = (displayOptions === null || displayOptions === void 0 ? void 0 : displayOptions.showIcons) !== false;
  const [layout, setLayout] = useDeskToolSetting(typeName, 'layout', defaultLayout);
  const [sortOrderRaw, setSortOrder] = useDeskToolSetting(typeName, 'sortOrder', DEFAULT_ORDERING);
  const sortWithOrderingFn = typeName && sortOrderRaw ? applyOrderingFunctions(sortOrderRaw, schema.get(typeName)) : sortOrderRaw;
  const sortOrder = useUnique(sortWithOrderingFn);
  const filterIsSimpleTypeContraint = isSimpleTypeFilter(filter);
  const {
    error,
    fullList,
    handleListChange,
    isLoading,
    items,
    onRetry
  } = useDocumentList({
    defaultOrdering,
    filter,
    params,
    sortOrder,
    apiVersion
  });
  return /*#__PURE__*/React.createElement(SourceProvider, {
    name: sourceName || parentSourceName
  }, /*#__PURE__*/React.createElement(Pane, {
    currentMaxWidth: 350,
    id: paneKey,
    maxWidth: 640,
    minWidth: 320,
    selected: isSelected
  }, _DEBUG && /*#__PURE__*/React.createElement(Card, {
    padding: 4,
    tone: "transparent"
  }, /*#__PURE__*/React.createElement(Code, null, pane.source || '(none)')), /*#__PURE__*/React.createElement(DocumentListPaneHeader, {
    index: index,
    initialValueTemplates: initialValueTemplates,
    menuItems: menuItems,
    menuItemGroups: menuItemGroups,
    setLayout: setLayout,
    setSortOrder: setSortOrder,
    title: title
  }), /*#__PURE__*/React.createElement(DocumentListPaneContent, {
    childItemId: childItemId,
    error: error,
    filterIsSimpleTypeContraint: filterIsSimpleTypeContraint,
    fullList: fullList,
    isActive: isActive,
    isLoading: isLoading,
    items: items,
    layout: layout,
    onListChange: handleListChange,
    onRetry: onRetry,
    showIcons: showIcons
  })));
});