import { SyncIcon } from '@sanity/icons';
import { Box, Button, Card, Container, Flex, Heading, Spinner, Stack, Text, VirtualList } from '@sanity/ui';
import React, { useCallback, useEffect, useMemo, useState } from 'react';
import { Delay, PaneContent, usePane, usePaneLayout, PaneItem } from '../../components';
import { useSchema } from '../../../hooks';
import { getPublishedId } from '../../../util';
import { getDocumentKey } from './helpers';
import { FULL_LIST_LIMIT } from './constants';
export function DocumentListPaneContent(props) {
  const {
    childItemId,
    error,
    filterIsSimpleTypeContraint,
    fullList,
    isActive,
    isLoading,
    items,
    layout,
    onListChange,
    onRetry,
    showIcons
  } = props;
  const schema = useSchema();
  const {
    collapsed: layoutCollapsed
  } = usePaneLayout();
  const {
    collapsed,
    index
  } = usePane();
  const [shouldRender, setShouldRender] = useState(false);
  useEffect(() => {
    if (collapsed) return undefined;
    const timer = setTimeout(() => {
      setShouldRender(true);
    }, 0);
    return () => {
      clearTimeout(timer);
    };
  }, [collapsed]);
  const renderItem = useCallback(item => {
    const publishedId = getPublishedId(item._id);
    const isSelected = childItemId === publishedId;
    const pressed = !isActive && isSelected;
    const selected = isActive && isSelected;
    return /*#__PURE__*/React.createElement(PaneItem, {
      icon: showIcons === false ? false : undefined,
      id: publishedId,
      pressed: pressed,
      selected: selected,
      layout: layout,
      schemaType: schema.get(item._type),
      value: item
    });
  }, [childItemId, isActive, layout, schema, showIcons]);
  const content = useMemo(() => {
    if (!shouldRender) {
      return null;
    }

    if (error) {
      return /*#__PURE__*/React.createElement(Flex, {
        align: "center",
        direction: "column",
        height: "fill",
        justify: "center"
      }, /*#__PURE__*/React.createElement(Container, {
        width: 1
      }, /*#__PURE__*/React.createElement(Stack, {
        paddingX: 4,
        paddingY: 5,
        space: 4
      }, /*#__PURE__*/React.createElement(Heading, {
        as: "h3"
      }, "Could not fetch list items"), /*#__PURE__*/React.createElement(Text, {
        as: "p"
      }, "Error: ", /*#__PURE__*/React.createElement("code", null, error.message)), onRetry && /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Button, {
        icon: SyncIcon,
        onClick: onRetry,
        text: "Retry",
        tone: "primary"
      })))));
    }

    if (items === null) {
      return /*#__PURE__*/React.createElement(Flex, {
        align: "center",
        direction: "column",
        height: "fill",
        justify: "center"
      }, /*#__PURE__*/React.createElement(Delay, {
        ms: 300
      }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Spinner, {
        muted: true
      }), /*#__PURE__*/React.createElement(Box, {
        marginTop: 3
      }, /*#__PURE__*/React.createElement(Text, {
        align: "center",
        muted: true,
        size: 1
      }, "Loading documents\u2026")))));
    }

    if (!isLoading && items.length === 0) {
      return /*#__PURE__*/React.createElement(Flex, {
        align: "center",
        direction: "column",
        height: "fill",
        justify: "center"
      }, /*#__PURE__*/React.createElement(Container, {
        width: 1
      }, /*#__PURE__*/React.createElement(Box, {
        paddingX: 4,
        paddingY: 5
      }, /*#__PURE__*/React.createElement(Text, {
        align: "center",
        muted: true,
        size: 2
      }, filterIsSimpleTypeContraint ? 'No documents of this type' : 'No matching documents'))));
    }

    const hasMoreItems = fullList && items.length === FULL_LIST_LIMIT;
    return /*#__PURE__*/React.createElement(Box, {
      padding: 2
    }, items.length > 0 && /*#__PURE__*/React.createElement(VirtualList, {
      gap: 1,
      getItemKey: getDocumentKey,
      items: items,
      renderItem: renderItem,
      onChange: onListChange // prevents bug when panes won't render if first rendered while collapsed
      ,
      key: "".concat(index, "-").concat(collapsed)
    }), isLoading && /*#__PURE__*/React.createElement(Card, {
      borderTop: true,
      marginTop: 1,
      paddingX: 3,
      paddingY: 4
    }, /*#__PURE__*/React.createElement(Text, {
      align: "center",
      muted: true,
      size: 1
    }, "Loading\u2026")), hasMoreItems && /*#__PURE__*/React.createElement(Card, {
      marginTop: 1,
      paddingX: 3,
      paddingY: 4,
      radius: 2,
      tone: "transparent"
    }, /*#__PURE__*/React.createElement(Text, {
      align: "center",
      muted: true,
      size: 1
    }, "Displaying a maximum of ", FULL_LIST_LIMIT, " documents")));
  }, [error, filterIsSimpleTypeContraint, fullList, onListChange, isLoading, items, onRetry, renderItem, shouldRender, collapsed, index]);
  return /*#__PURE__*/React.createElement(PaneContent, {
    overflow: layoutCollapsed ? undefined : 'auto'
  }, content);
}