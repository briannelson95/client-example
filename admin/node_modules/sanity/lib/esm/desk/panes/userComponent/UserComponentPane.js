import React, { createElement, isValidElement, useState } from 'react';
import { isValidElementType } from 'react-is';
import { Pane, usePaneRouter } from '../../components';
import { UserComponentPaneHeader } from './UserComponentPaneHeader';
import { UserComponentPaneContent } from './UserComponentPaneContent';

/**
 * @internal
 */
export function UserComponentPane(props) {
  const {
    index,
    pane,
    paneKey,
    ...restProps
  } = props;
  const {
    params
  } = usePaneRouter();
  const {
    child,
    component,
    menuItems,
    menuItemGroups,
    title = '',
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    type: _unused,
    __preserveInstance = false,
    ...restPane
  } = pane;
  const [ref, setRef] = useState(null);
  return /*#__PURE__*/React.createElement(Pane, {
    id: paneKey,
    minWidth: 320,
    selected: restProps.isSelected
  }, /*#__PURE__*/React.createElement(UserComponentPaneHeader, {
    actionHandlers: ref === null || ref === void 0 ? void 0 : ref.actionHandlers,
    index: index,
    menuItems: menuItems,
    menuItemGroups: menuItemGroups,
    title: title
  }), /*#__PURE__*/React.createElement(UserComponentPaneContent, null, isValidElementType(component) && /*#__PURE__*/createElement(component, { // this forces a re-render when the router panes change. note: in
    // theory, this shouldn't be necessary and the downstream user
    // component could internally handle these updates, but this was done
    // to preserve older desk tool behavior. if the experimental flag
    // `__preserveInstance` is true, then no key will be applied.
    ...(!__preserveInstance && {
      key: "".concat(restProps.itemId, "-").concat(restProps.childItemId)
    }),
    ...restProps,
    ...restPane,
    // NOTE: here we're utilizing the function form of refs so setting
    // the ref causes a re-render for `UserComponentPaneHeader`
    ...{
      ref: setRef
    },
    child: child,
    // @todo: Fix typings
    paneKey,
    // NOTE: this is for backwards compatibility (<= 2.20.0)
    urlParams: params
  }), /*#__PURE__*/isValidElement(component) && component));
}