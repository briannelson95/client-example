import { of, merge } from 'rxjs';
import { mapTo, delay } from 'rxjs/operators';
import { isDev } from '../../../environment';
/**
 * @internal
 */

export function getWaitMessages(path) {
  const thresholds = [{
    ms: 300,
    message: 'Loading…'
  }, {
    ms: 5000,
    message: 'Still loading…'
  }];

  if (isDev) {
    const message = ['Check console for errors?', 'Is your observable/promise resolving?', path.length > 0 ? "Structure path: ".concat(path.join(' ➝ ')) : ''];
    thresholds.push({
      ms: 10000,
      message: message.join('\n')
    });
  }

  const src = of(null);
  return merge(...thresholds.map(_ref => {
    let {
      ms,
      message
    } = _ref;
    return src.pipe(mapTo(message), delay(ms));
  }));
}