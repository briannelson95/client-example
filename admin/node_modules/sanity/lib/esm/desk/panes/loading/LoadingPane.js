var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { Box, Flex, Spinner, Text, _raf2 } from '@sanity/ui';
import React, { memo, useMemo, useState, useEffect } from 'react';
import styled from 'styled-components';
import { Delay } from '../../components/Delay';
import { Pane, PaneContent } from '../../components/pane';
import { getWaitMessages } from './getWaitMessages';
const DELAY = false;
const DEFAULT_MESSAGE = 'Loadingâ€¦';
const Content = styled(Flex)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  opacity: 0;\n  transition: opacity 200ms;\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n"])));
/**
 * @internal
 */

export const LoadingPane = /*#__PURE__*/memo(props => {
  const {
    delay = 300,
    flex,
    message: messageProp = getWaitMessages,
    minWidth,
    paneKey,
    path,
    selected,
    title,
    tone
  } = props;
  const resolvedMessage = useMemo(() => {
    if (typeof messageProp === 'function') {
      return messageProp(path ? path.split(';') : []);
    }

    return messageProp;
  }, [messageProp, path]);
  const [currentMessage, setCurrentMessage] = useState(() => {
    if (typeof resolvedMessage === 'string') return resolvedMessage;
    return DEFAULT_MESSAGE;
  });
  useEffect(() => {
    if (typeof resolvedMessage !== 'object') return undefined;
    if (typeof resolvedMessage.subscribe === 'function') return undefined;
    const sub = resolvedMessage.subscribe(setCurrentMessage);
    return () => sub.unsubscribe();
  }, [resolvedMessage]);
  const [contentElement, setContentElement] = useState(null);
  const [mounted, setMounted] = useState(false);
  useEffect(() => {
    if (!contentElement) return undefined;
    return _raf2(() => setMounted(true));
  }, [contentElement]);
  const content = /*#__PURE__*/React.createElement(Content, {
    align: "center",
    "data-mounted": mounted ? '' : undefined,
    direction: "column",
    height: "fill",
    justify: "center",
    ref: setContentElement
  }, /*#__PURE__*/React.createElement(Spinner, {
    muted: true
  }), (title || currentMessage) && /*#__PURE__*/React.createElement(Box, {
    marginTop: 3
  }, /*#__PURE__*/React.createElement(Text, {
    align: "center",
    muted: true,
    size: 1
  }, title || currentMessage)));
  return /*#__PURE__*/React.createElement(Pane, {
    flex: flex,
    id: paneKey,
    minWidth: minWidth,
    selected: selected,
    tone: tone
  }, /*#__PURE__*/React.createElement(PaneContent, null, DELAY ? /*#__PURE__*/React.createElement(Delay, {
    ms: delay
  }, content) : content));
});
LoadingPane.displayName = 'LoadingPane';