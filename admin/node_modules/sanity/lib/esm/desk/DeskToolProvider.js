import React, { useMemo, useState } from 'react';
import { useConfigContextFromSource } from '../config/useConfigContextFromSource';
import { useSource } from '../studio';
import { DeskToolContext } from './DeskToolContext';
import { createStructureBuilder } from './structureBuilder';
export function DeskToolProvider(_ref) {
  let {
    defaultDocumentNode,
    structure: resolveStructure,
    children
  } = _ref;
  const [layoutCollapsed, setLayoutCollapsed] = useState(false);
  const source = useSource();
  const configContext = useConfigContextFromSource(source);
  const S = useMemo(() => {
    return createStructureBuilder({
      defaultDocumentNode,
      source
    });
  }, [defaultDocumentNode, source]);
  const rootPaneNode = useMemo(() => {
    // TODO: unify types and remove cast
    if (resolveStructure) return resolveStructure(S, configContext);
    return S.defaults();
  }, [S, resolveStructure, configContext]);
  return /*#__PURE__*/React.createElement(DeskToolContext.Provider, {
    value: useMemo(() => {
      return {
        features: {
          backButton: layoutCollapsed,
          reviewChanges: !layoutCollapsed,
          splitPanes: !layoutCollapsed,
          splitViews: !layoutCollapsed
        },
        layoutCollapsed,
        setLayoutCollapsed,
        rootPaneNode,
        structureContext: S.context
      };
    }, [layoutCollapsed, rootPaneNode, S.context])
  }, children);
}