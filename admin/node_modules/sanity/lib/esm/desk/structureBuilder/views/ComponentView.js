function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { SerializeError, HELP_URL } from '../SerializeError';
import { isRecord } from '../../../util';
import { GenericViewBuilder } from './View';

const isComponentSpec = spec => isRecord(spec) && spec.type === 'component';

export class ComponentViewBuilder extends GenericViewBuilder {
  constructor(componentOrSpec) {
    const spec = isComponentSpec(componentOrSpec) ? { ...componentOrSpec
    } : {
      options: {}
    };
    super();

    _defineProperty(this, "spec", void 0);

    this.spec = spec;
    const userComponent = typeof componentOrSpec === 'function' ? componentOrSpec : this.spec.component;

    if (userComponent) {
      // Because we're cloning, this'll return a new instance, so grab the spec from it
      this.spec = this.component(userComponent).spec;
    }
  }

  component(component) {
    return this.clone({
      component
    });
  }

  getComponent() {
    return this.spec.component;
  }

  options(options) {
    return this.clone({
      options
    });
  }

  getOptions() {
    return this.spec.options || {};
  }

  serialize() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      path: []
    };
    const base = super.serialize(options);
    const component = this.spec.component;

    if (typeof component !== 'function') {
      throw new SerializeError('`component` is required and must be a function for `component()` view item', options.path, options.index).withHelpUrl(HELP_URL.COMPONENT_REQUIRED);
    }

    return { ...base,
      component,
      options: this.spec.options || {},
      type: 'component'
    };
  }

  clone(withSpec) {
    const builder = new ComponentViewBuilder();
    builder.spec = { ...this.spec,
      ...(withSpec || {})
    };
    return builder;
  }

}