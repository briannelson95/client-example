import _uniqueId from "lodash/uniqueId";
import { isValidElementType } from 'react-is';
import { getConfigContextFromSource } from '../../config';
import { getPublishedId } from '../../util';
import { ListBuilder } from './List';
import { getDocumentTypeListItems, getDocumentTypeListItem, getDocumentTypeList } from './documentTypeListItems';
import { MenuItemBuilder, getOrderingMenuItemsForSchemaType, getOrderingMenuItem } from './MenuItem';
import { ListItemBuilder } from './ListItem';
import { MenuItemGroupBuilder } from './MenuItemGroup';
import { DocumentListBuilder } from './DocumentList';
import { DocumentBuilder, documentFromEditor, documentFromEditorWithInitialValue } from './Document';
import { ComponentBuilder } from './Component';
import { DocumentListItemBuilder } from './DocumentListItem';
import * as views from './views';
import { InitialValueTemplateItemBuilder, defaultInitialValueTemplateItems, menuItemsFromInitialValueTemplateItems } from './InitialValueTemplateItem';

function hasIcon(schemaType) {
  if (!schemaType || typeof schemaType === 'string') {
    return false;
  }

  return Boolean(schemaType.icon);
}

function getDefaultStructure(context) {
  const items = getDocumentTypeListItems(context);
  return new ListBuilder(context).id('__root__').title('Content').items(items).showIcons(items.some(item => hasIcon(item.getSchemaType())));
}

export function createStructureBuilder(_ref) {
  let {
    defaultDocumentNode,
    source
  } = _ref;
  const configContext = getConfigContextFromSource(source);
  const context = { ...source,
    getStructureBuilder: () => structureBuilder,
    resolveDocumentNode: options => {
      let builder = (defaultDocumentNode === null || defaultDocumentNode === void 0 ? void 0 : defaultDocumentNode(structureBuilder, { ...options,
        ...configContext
      })) || new DocumentBuilder(context);

      if (!builder.getId()) {
        builder = builder.id('documentEditor');
      }

      if (options.documentId) {
        builder = builder.documentId(getPublishedId(options.documentId));
      }

      return builder.schemaType(options.schemaType);
    }
  };
  const structureBuilder = {
    defaults: () => getDefaultStructure(context),
    documentTypeList: function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return getDocumentTypeList(context, ...args);
    },
    documentTypeListItem: function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return getDocumentTypeListItem(context, ...args);
    },
    documentTypeListItems: function () {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return getDocumentTypeListItems(context, ...args);
    },
    document: function () {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return new DocumentBuilder(context, ...args);
    },
    documentWithInitialValueTemplate: function () {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      return documentFromEditorWithInitialValue(context, ...args);
    },
    defaultDocument: context.resolveDocumentNode,
    list: function () {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      return new ListBuilder(context, ...args);
    },
    listItem: function () {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      return new ListItemBuilder(context, ...args);
    },
    menuItem: function () {
      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        args[_key8] = arguments[_key8];
      }

      return new MenuItemBuilder(context, ...args);
    },
    menuItemGroup: function () {
      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        args[_key9] = arguments[_key9];
      }

      return new MenuItemGroupBuilder(context, ...args);
    },
    menuItemsFromInitialValueTemplateItems: function () {
      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        args[_key10] = arguments[_key10];
      }

      return menuItemsFromInitialValueTemplateItems(context, ...args);
    },
    documentList: function () {
      for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
        args[_key11] = arguments[_key11];
      }

      return new DocumentListBuilder(context, ...args);
    },
    documentListItem: function () {
      for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
        args[_key12] = arguments[_key12];
      }

      return new DocumentListItemBuilder(context, ...args);
    },
    orderingMenuItem: function () {
      for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
        args[_key13] = arguments[_key13];
      }

      return getOrderingMenuItem(context, ...args);
    },
    orderingMenuItemsForType: function () {
      for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
        args[_key14] = arguments[_key14];
      }

      return getOrderingMenuItemsForSchemaType(context, ...args);
    },
    editor: function () {
      for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
        args[_key15] = arguments[_key15];
      }

      return documentFromEditor(context, ...args);
    },
    defaultInitialValueTemplateItems: function () {
      for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
        args[_key16] = arguments[_key16];
      }

      return defaultInitialValueTemplateItems(context, ...args);
    },
    initialValueTemplateItem: (templateId, parameters) => new InitialValueTemplateItemBuilder(context, {
      id: templateId,
      parameters,
      templateId
    }),
    component: spec => {
      return isValidElementType(spec) ? new ComponentBuilder().component(spec) : new ComponentBuilder(spec);
    },
    divider: () => ({
      id: _uniqueId('__divider__'),
      type: 'divider'
    }),
    view: views,
    context
  };
  return structureBuilder;
}