import _find from "lodash/find";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { isRecord } from '../../util';
import { SerializeError, HELP_URL } from './SerializeError';
import { ListItemBuilder } from './ListItem';
import { isDocumentListItem } from './DocumentListItem';
import { GenericListBuilder, shallowIntentChecker } from './GenericList';

const getArgType = thing => {
  if (thing instanceof ListBuilder) {
    return 'ListBuilder';
  }

  if (isPromise(thing)) {
    return 'Promise';
  }

  return Array.isArray(thing) ? 'array' : typeof thing;
};

const isListItem = item => {
  return item.type === 'listItem';
};

const defaultCanHandleIntent = (intentName, params, context) => {
  const pane = context.pane;
  const items = pane.items || [];
  return items.filter(isDocumentListItem).some(item => item.schemaType.name === params.type && item._id === params.id) || shallowIntentChecker(intentName, params, context);
};

const resolveChildForItem = (itemId, options) => {
  const parentItem = options.parent;
  const items = parentItem.items.filter(isListItem);
  const target = (items.find(item => item.id === itemId) || {
    child: undefined
  }).child;

  if (!target || typeof target !== 'function') {
    return target;
  }

  return typeof target === 'function' ? target(itemId, options) : target;
};

function maybeSerializeListItem(item, index, path) {
  if (item instanceof ListItemBuilder) {
    return item.serialize({
      path,
      index
    });
  }

  const listItem = item;

  if (listItem && listItem.type === 'divider') {
    return item;
  }

  if (!listItem || listItem.type !== 'listItem') {
    const gotWhat = listItem && listItem.type || getArgType(listItem);
    const helpText = gotWhat === 'array' ? ' - did you forget to spread (...moreItems)?' : '';
    throw new SerializeError("List items must be of type \"listItem\", got \"".concat(gotWhat, "\"").concat(helpText), path, index).withHelpUrl(HELP_URL.INVALID_LIST_ITEM);
  }

  return item;
}

function isPromise(thing) {
  return isRecord(thing) && typeof thing.then === 'function';
}

export class ListBuilder extends GenericListBuilder {
  constructor(_context, spec) {
    super();
    this._context = _context;

    _defineProperty(this, "spec", void 0);

    this.spec = spec ? spec : {};
    this.initialValueTemplatesSpecified = Boolean(spec && spec.initialValueTemplates);
  }

  items(items) {
    return this.clone({
      items
    });
  }

  getItems() {
    return this.spec.items;
  }

  serialize() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      path: []
    };
    const id = this.spec.id;

    if (typeof id !== 'string' || !id) {
      throw new SerializeError('`id` is required for lists', options.path, options.index).withHelpUrl(HELP_URL.ID_REQUIRED);
    }

    const items = typeof this.spec.items === 'undefined' ? [] : this.spec.items;

    if (!Array.isArray(items)) {
      throw new SerializeError('`items` must be an array of items', options.path, options.index).withHelpUrl(HELP_URL.LIST_ITEMS_MUST_BE_ARRAY);
    }

    const path = (options.path || []).concat(id);
    const serializedItems = items.map((item, index) => maybeSerializeListItem(item, index, path));
    const dupes = serializedItems.filter((val, i) => _find(serializedItems, {
      id: val.id
    }, i + 1));

    if (dupes.length > 0) {
      const dupeIds = dupes.map(item => item.id).slice(0, 5);
      const dupeDesc = dupes.length > 5 ? "".concat(dupeIds.join(', '), "...") : dupeIds.join(', ');
      throw new SerializeError("List items with same ID found (".concat(dupeDesc, ")"), options.path, options.index).withHelpUrl(HELP_URL.LIST_ITEM_IDS_MUST_BE_UNIQUE);
    }

    return { ...super.serialize(options),
      type: 'list',
      canHandleIntent: this.spec.canHandleIntent || defaultCanHandleIntent,
      child: this.spec.child || resolveChildForItem,
      items: serializedItems
    };
  }

  clone(withSpec) {
    const builder = new ListBuilder(this._context);
    builder.spec = { ...this.spec,
      ...(withSpec || {})
    };
    return builder;
  }

}