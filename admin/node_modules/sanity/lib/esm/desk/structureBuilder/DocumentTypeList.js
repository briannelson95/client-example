function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { DocumentListBuilder } from './DocumentList';
import { DEFAULT_INTENT_HANDLER } from './Intent';
export class DocumentTypeListBuilder extends DocumentListBuilder {
  constructor(_context, spec) {
    super(_context);
    this._context = _context;

    _defineProperty(this, "spec", void 0);

    this.spec = spec ? spec : {};
  }

  child(child) {
    return this.cloneWithoutDefaultIntentHandler({
      child
    });
  }

  clone(withSpec) {
    const parent = super.clone(withSpec);
    const builder = new DocumentTypeListBuilder(this._context);
    builder.spec = { ...this.spec,
      ...parent.getSpec(),
      ...(withSpec || {})
    };
    return builder;
  }

  cloneWithoutDefaultIntentHandler(withSpec) {
    const parent = super.clone(withSpec);
    const builder = new DocumentTypeListBuilder(this._context);
    const canHandleIntent = this.spec.canHandleIntent;
    const shouldOverride = canHandleIntent && canHandleIntent.identity === DEFAULT_INTENT_HANDLER;
    const override = shouldOverride ? {
      canHandleIntent: undefined
    } : {};
    builder.spec = { ...parent.getSpec(),
      ...this.spec,
      ...(withSpec || {}),
      ...override
    };
    return builder;
  }

}