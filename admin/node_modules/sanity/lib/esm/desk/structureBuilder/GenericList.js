import _camelCase from "lodash/camelCase";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { layoutOptions } from './Layout';
import { maybeSerializeMenuItem } from './MenuItem';
import { maybeSerializeMenuItemGroup } from './MenuItemGroup';
import { defaultIntentChecker } from './Intent';
import { SerializeError } from './SerializeError';
import { maybeSerializeInitialValueTemplateItem } from './InitialValueTemplateItem';
import { validateId } from './util/validateId';

function noChildResolver() {
  return undefined;
}

export const shallowIntentChecker = (intentName, params, _ref) => {
  let {
    pane,
    index
  } = _ref;
  return index <= 1 && defaultIntentChecker(intentName, params, {
    pane,
    index
  });
};
export class GenericListBuilder {
  constructor() {
    _defineProperty(this, "initialValueTemplatesSpecified", false);

    _defineProperty(this, "spec", {});
  }

  id(id) {
    return this.clone({
      id
    });
  }

  getId() {
    return this.spec.id;
  }

  title(title) {
    return this.clone({
      title,
      id: this.spec.id || _camelCase(title)
    });
  }

  getTitle() {
    return this.spec.title;
  }

  defaultLayout(defaultLayout) {
    return this.clone({
      defaultLayout
    });
  }

  getDefaultLayout() {
    return this.spec.defaultLayout;
  }

  menuItems(menuItems) {
    return this.clone({
      menuItems
    });
  }

  getMenuItems() {
    return this.spec.menuItems;
  }

  menuItemGroups(menuItemGroups) {
    return this.clone({
      menuItemGroups
    });
  }

  getMenuItemGroups() {
    return this.spec.menuItemGroups;
  }

  child(child) {
    return this.clone({
      child
    });
  }

  getChild() {
    return this.spec.child;
  }

  canHandleIntent(canHandleIntent) {
    return this.clone({
      canHandleIntent
    });
  }

  getCanHandleIntent() {
    return this.spec.canHandleIntent;
  }

  showIcons() {
    let enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    return this.clone({
      displayOptions: { ...(this.spec.displayOptions || {}),
        showIcons: enabled
      }
    });
  }

  getShowIcons() {
    return this.spec.displayOptions ? this.spec.displayOptions.showIcons : undefined;
  }

  initialValueTemplates(templates) {
    this.initialValueTemplatesSpecified = true;
    return this.clone({
      initialValueTemplates: Array.isArray(templates) ? templates : [templates]
    });
  }

  getInitialValueTemplates() {
    return this.spec.initialValueTemplates;
  }

  serialize() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      path: []
    };
    const id = this.spec.id || '';
    const path = options.path;
    const defaultLayout = this.spec.defaultLayout;

    if (defaultLayout && !layoutOptions.includes(defaultLayout)) {
      throw new SerializeError("`layout` must be one of ".concat(layoutOptions.map(item => "\"".concat(item, "\"")).join(', ')), path, id || options.index, this.spec.title);
    }

    const initialValueTemplates = (this.spec.initialValueTemplates || []).map((item, i) => maybeSerializeInitialValueTemplateItem(item, i, path));
    return {
      id: validateId(id, options.path, id || options.index),
      title: this.spec.title,
      type: 'genericList',
      defaultLayout,
      child: this.spec.child || noChildResolver,
      canHandleIntent: this.spec.canHandleIntent || shallowIntentChecker,
      displayOptions: this.spec.displayOptions,
      initialValueTemplates,
      menuItems: (this.spec.menuItems || []).map((item, i) => maybeSerializeMenuItem(item, i, path)),
      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) => maybeSerializeMenuItemGroup(item, i, path))
    };
  }

}