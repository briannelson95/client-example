import { ResetIcon } from '@sanity/icons';
import React, { useCallback, useMemo, useState } from 'react';
import { useDocumentOperation } from '../../../hooks';
import { InsufficientPermissionsMessage } from '../../../components/InsufficientPermissionsMessage';
import { useCurrentUser, useDocumentPairPermissions } from '../../../datastores';
const DISABLED_REASON_TITLE = {
  NO_CHANGES: 'This document has no unpublished changes',
  NOT_PUBLISHED: 'This document is not published'
};
export const DiscardChangesAction = _ref => {
  let {
    id,
    type,
    published,
    liveEdit,
    onComplete
  } = _ref;
  const {
    discardChanges
  } = useDocumentOperation(id, type);
  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false);
  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({
    id,
    type,
    permission: 'discardDraft'
  });
  const currentUser = useCurrentUser();
  const handleConfirm = useCallback(() => {
    discardChanges.execute();
    onComplete();
  }, [discardChanges, onComplete]);
  const handle = useCallback(() => {
    setConfirmDialogOpen(true);
  }, []);
  const modal = useMemo(() => isConfirmDialogOpen && {
    type: 'confirm',
    tone: 'critical',
    onCancel: onComplete,
    onConfirm: handleConfirm,
    message: /*#__PURE__*/React.createElement(React.Fragment, null, "Are you sure you want to discard all changes since last published?")
  }, [handleConfirm, isConfirmDialogOpen, onComplete]);

  if (!published || liveEdit) {
    return null;
  }

  if (!isPermissionsLoading && !(permissions !== null && permissions !== void 0 && permissions.granted)) {
    return {
      tone: 'critical',
      icon: ResetIcon,
      disabled: true,
      label: 'Discard changes',
      title: /*#__PURE__*/React.createElement(InsufficientPermissionsMessage, {
        operationLabel: "discard changes in this document",
        currentUser: currentUser
      })
    };
  }

  return {
    tone: 'critical',
    icon: ResetIcon,
    disabled: Boolean(discardChanges.disabled) || isPermissionsLoading,
    title: discardChanges.disabled && DISABLED_REASON_TITLE[discardChanges.disabled] || '',
    label: 'Discard changes',
    onHandle: handle,
    modal
  };
};
DiscardChangesAction.action = 'discardChanges';