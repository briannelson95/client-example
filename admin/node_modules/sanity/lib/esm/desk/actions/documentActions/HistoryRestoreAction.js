import { RestoreIcon } from '@sanity/icons';
import React, { useCallback, useMemo, useState } from 'react';
import { useDocumentOperation } from '../../../hooks';
import { useRouter } from '../../../router';
export const HistoryRestoreAction = _ref => {
  let {
    id,
    type,
    revision,
    onComplete
  } = _ref;
  const {
    restore
  } = useDocumentOperation(id, type);
  const router = useRouter();
  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false);
  const handleConfirm = useCallback(() => {
    restore.execute(revision);
    router.navigateIntent('edit', {
      id,
      type
    });
    onComplete();
  }, [revision, restore, router, onComplete, id, type]);
  const handle = useCallback(() => {
    setConfirmDialogOpen(true);
  }, []);
  const modal = useMemo(() => {
    if (isConfirmDialogOpen) {
      return {
        type: 'confirm',
        tone: 'critical',
        onCancel: onComplete,
        onConfirm: handleConfirm,
        message: /*#__PURE__*/React.createElement(React.Fragment, null, "Are you sure you want to restore this document?")
      };
    }

    return null;
  }, [handleConfirm, isConfirmDialogOpen, onComplete]);
  const isRevisionInitialVersion = revision === '@initial';
  return {
    label: 'Restore',
    color: 'primary',
    onHandle: handle,
    title: isRevisionInitialVersion ? "You can't restore to the initial version" : 'Restore to this version',
    icon: RestoreIcon,
    modal,
    disabled: isRevisionInitialVersion
  };
};
HistoryRestoreAction.action = 'restore';