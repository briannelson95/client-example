var _templateObject;

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { ChevronDownIcon } from '@sanity/icons';
import { isKeySegment } from '@sanity/types';
import { Card, Flex, Label, Popover, useClickOutside } from '@sanity/ui';
import { FOCUS_TERMINATOR, toString } from '@sanity/util/paths';
import React, { useCallback, useContext, useState, useEffect, useMemo } from 'react';
import styled from 'styled-components';
import { ConnectorContext, useReportedValues } from '../../../../../components/changeIndicators';
import { SanityPreview } from '../../../../../preview';
import { ChangeList, DiffContext, DiffTooltip, useDiffAnnotationColor } from '../../../../diff';
import { isEmptyObject } from '../helpers';
import { InlineBox, InlineText, PopoverContainer, PreviewContainer } from './styledComponents';
const InlineObjectWrapper = styled(Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  &:not([hidden]) {\n    display: inline;\n    cursor: pointer;\n    white-space: nowrap;\n    align-items: center;\n\n    &[data-removed] {\n      text-decoration: line-through;\n    }\n\n    ", " {\n      display: inline-flex;\n    }\n  }\n"])), InlineBox);
export function InlineObject(_ref) {
  let {
    diff,
    object,
    schemaType,
    ...restProps
  } = _ref;

  if (!schemaType) {
    return /*#__PURE__*/React.createElement(InlineObjectWrapper, _extends({}, restProps, {
      border: true,
      radius: 1
    }), "Unknown schema type: ", object._type);
  }

  if (diff) {
    return /*#__PURE__*/React.createElement(InlineObjectWithDiff, _extends({}, restProps, {
      diff: diff,
      object: object,
      schemaType: schemaType
    }));
  }

  return /*#__PURE__*/React.createElement(InlineObjectWrapper, null, /*#__PURE__*/React.createElement(SanityPreview, {
    schemaType: schemaType,
    value: object,
    layout: "inline"
  }));
}

function InlineObjectWithDiff(_ref2) {
  let {
    diff,
    object,
    path,
    schemaType,
    ...restProps
  } = _ref2;
  const {
    path: fullPath
  } = useContext(DiffContext);
  const {
    onSetFocus
  } = useContext(ConnectorContext);
  const color = useDiffAnnotationColor(diff, []);
  const style = useMemo(() => color ? {
    background: color.background,
    color: color.text
  } : {}, [color]);
  const [open, setOpen] = useState(false);
  const emptyObject = object && isEmptyObject(object);
  const isRemoved = diff.action === 'removed';
  const prefix = fullPath.slice(0, fullPath.findIndex(seg => isKeySegment(seg) && seg._key === object._key));
  const myPath = prefix.concat(path);
  const myValue = "field-".concat(toString(myPath));
  const values = useReportedValues();
  const isEditing = values.filter(_ref3 => {
    let [p] = _ref3;
    return p.startsWith(myValue);
  }).length > 0;
  const focusPath = fullPath.slice(0, -1).concat(path).concat([FOCUS_TERMINATOR]);
  useEffect(() => {
    if (isEditing) {
      setOpen(true);
      onSetFocus(focusPath);
    }
  }, [isEditing]);
  const handleOpenPopup = useCallback(event => {
    event.stopPropagation();
    setOpen(true);

    if (!isRemoved) {
      onSetFocus(focusPath);
      return;
    }

    event.preventDefault();
  }, [focusPath]);
  const handleClose = useCallback(() => {
    setOpen(false);
  }, []);
  const popoverContent = /*#__PURE__*/React.createElement(DiffContext.Provider, {
    value: {
      path: myPath
    }
  }, /*#__PURE__*/React.createElement(PopoverContent, {
    diff: diff,
    emptyObject: emptyObject,
    onClose: handleClose,
    schemaType: schemaType
  }));
  const annotation = diff.action !== 'unchanged' && diff.annotation || null;
  const annotations = annotation ? [annotation] : [];
  return /*#__PURE__*/React.createElement(InlineObjectWrapper, _extends({}, restProps, {
    onClick: handleOpenPopup,
    style: style,
    "data-removed": diff.action === 'removed' ? '' : undefined,
    border: true,
    radius: 2
  }), /*#__PURE__*/React.createElement(Popover, {
    content: popoverContent,
    open: open,
    portal: true
  }, /*#__PURE__*/React.createElement(PreviewContainer, null, /*#__PURE__*/React.createElement(DiffTooltip, {
    annotations: annotations,
    description: "".concat(diff.action, " inline object")
  }, /*#__PURE__*/React.createElement(InlineBox, null, /*#__PURE__*/React.createElement(SanityPreview, {
    schemaType: schemaType,
    value: object,
    layout: "inline"
  }), /*#__PURE__*/React.createElement(Flex, {
    align: "center",
    paddingX: 1
  }, /*#__PURE__*/React.createElement(InlineText, {
    size: 0
  }, /*#__PURE__*/React.createElement(ChevronDownIcon, null))))))));
}

function PopoverContent(_ref4) {
  let {
    diff,
    emptyObject,
    onClose,
    schemaType
  } = _ref4;
  const [popoverElement, setPopoverElement] = useState(null); // const {isTopLayer} = useLayer()

  const handleClickOutside = useCallback(() => {
    // Popover doesn't close at all when using this condition
    // if (!isTopLayer) return
    onClose();
  }, [onClose]);
  useClickOutside(handleClickOutside, [popoverElement]);
  return /*#__PURE__*/React.createElement(PopoverContainer, {
    ref: setPopoverElement,
    padding: 3
  }, emptyObject && /*#__PURE__*/React.createElement(Label, {
    size: 1,
    muted: true
  }, "Empty ", schemaType.title), !emptyObject && /*#__PURE__*/React.createElement(ChangeList, {
    diff: diff,
    schemaType: schemaType
  }));
}