var _templateObject;

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { ChevronDownIcon } from '@sanity/icons';
import { useClickOutside, Label, Popover, Flex } from '@sanity/ui';
import { toString } from '@sanity/util/paths';
import { isKeySegment } from '@sanity/types';
import React, { useCallback, useContext, useEffect, useMemo, useState } from 'react';
import styled from 'styled-components';
import { ConnectorContext, useReportedValues } from '../../../../../components/changeIndicators';
import { ChangeList, DiffContext, DiffTooltip, useDiffAnnotationColor } from '../../../../diff';
import { isEmptyObject } from '../helpers';
import { InlineBox, InlineText, PopoverContainer, PreviewContainer } from './styledComponents';
const AnnotationWrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  text-decoration: none;\n  display: inline;\n  position: relative;\n  border: 0;\n  padding: 0;\n  border-bottom: 2px dotted currentColor;\n  box-shadow: inset 0 0 0 1px var(--card-border-color);\n  white-space: nowrap;\n  align-items: center;\n  background-color: color(var(--card-fg-color) a(10%));\n\n  &[data-changed] {\n    cursor: pointer;\n  }\n\n  &[data-removed] {\n    text-decoration: line-through;\n  }\n\n  &:hover ", " {\n    opacity: 1;\n  }\n"])), PreviewContainer);
export function Annotation(_ref) {
  let {
    children,
    diff,
    object,
    schemaType,
    path,
    ...restProps
  } = _ref;

  if (!schemaType) {
    return /*#__PURE__*/React.createElement(AnnotationWrapper, restProps, "Unknown schema type");
  }

  if (diff && diff.action !== 'unchanged') {
    return /*#__PURE__*/React.createElement(AnnnotationWithDiff, _extends({}, restProps, {
      diff: diff,
      object: object,
      schemaType: schemaType,
      path: path
    }), children);
  }

  return /*#__PURE__*/React.createElement(AnnotationWrapper, null, children);
}

function AnnnotationWithDiff(_ref2) {
  let {
    diff,
    children,
    object,
    schemaType,
    path,
    ...restProps
  } = _ref2;
  const {
    onSetFocus
  } = useContext(ConnectorContext);
  const {
    path: fullPath
  } = useContext(DiffContext);
  const [popoverElement, setPopoverElement] = useState(null);
  const color = useDiffAnnotationColor(diff, []);
  const style = useMemo(() => color ? {
    background: color.background,
    color: color.text
  } : {}, [color]);
  const isRemoved = diff.action === 'removed';
  const [open, setOpen] = useState(false);
  const emptyObject = object && isEmptyObject(object);
  const markDefPath = useMemo(() => [path[0]].concat(['markDefs', {
    _key: object._key
  }]), [object._key, path]);
  const prefix = useMemo(() => fullPath.slice(0, fullPath.findIndex(seg => isKeySegment(seg) && seg._key === object._key)), [fullPath, object._key]);
  const annotationPath = useMemo(() => prefix.concat(path), [path, prefix]);
  const myPath = useMemo(() => prefix.concat(markDefPath), [markDefPath, prefix]);
  const myValue = "field-".concat(toString(myPath));
  const values = useReportedValues();
  const isEditing = useMemo(() => values.filter(_ref3 => {
    let [p] = _ref3;
    return p.startsWith(myValue);
  }).length > 0, [myValue, values]);
  useEffect(() => {
    if (!open && isEditing) {
      setOpen(true);
      onSetFocus(myPath);
    }
  }, [isEditing, myPath, onSetFocus, open]);
  const handleOpenPopup = useCallback(event => {
    event.stopPropagation();
    setOpen(true);

    if (!isRemoved) {
      event.preventDefault();
      onSetFocus(annotationPath); // Go to span first

      setTimeout(() => onSetFocus(myPath), 10); // Open edit object interface
    }
  }, [annotationPath, isRemoved, myPath, onSetFocus]);
  const handleClickOutside = useCallback(() => {
    if (!isEditing) {
      setOpen(false);
    }
  }, [isEditing]);
  useClickOutside(handleClickOutside, [popoverElement]);
  const annotation = diff.action !== 'unchanged' && diff.annotation || null;
  const annotations = useMemo(() => annotation ? [annotation] : [], [annotation]);
  const popoverContent = /*#__PURE__*/React.createElement(DiffContext.Provider, {
    value: {
      path: myPath
    }
  }, /*#__PURE__*/React.createElement(PopoverContainer, {
    padding: 3
  }, /*#__PURE__*/React.createElement("div", null, emptyObject && /*#__PURE__*/React.createElement(Label, {
    size: 1,
    muted: true
  }, "Empty ", schemaType.title), !emptyObject && /*#__PURE__*/React.createElement(ChangeList, {
    diff: diff,
    schemaType: schemaType
  }))));
  return /*#__PURE__*/React.createElement(AnnotationWrapper, _extends({}, restProps, {
    onClick: handleOpenPopup,
    style: style,
    "data-changed": "",
    "data-removed": diff.action === 'removed' ? '' : undefined
  }), /*#__PURE__*/React.createElement(Popover, {
    content: popoverContent,
    open: open,
    ref: setPopoverElement,
    portal: true
  }, /*#__PURE__*/React.createElement(PreviewContainer, {
    paddingLeft: 1
  }, /*#__PURE__*/React.createElement(DiffTooltip, {
    annotations: annotations,
    description: "".concat(diff.action, " annotation")
  }, /*#__PURE__*/React.createElement(InlineBox, {
    style: {
      display: 'inline-flex'
    }
  }, /*#__PURE__*/React.createElement("span", null, children), /*#__PURE__*/React.createElement(Flex, {
    align: "center",
    paddingX: 1
  }, /*#__PURE__*/React.createElement(InlineText, {
    size: 0
  }, /*#__PURE__*/React.createElement(ChevronDownIcon, null))))))));
}