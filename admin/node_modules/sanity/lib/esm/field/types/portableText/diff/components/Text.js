import _startCase from "lodash/startCase";

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { isKeySegment } from '@sanity/types';
import React, { useCallback, useMemo } from 'react';
import { ConnectorContext } from '../../../../../components/changeIndicators';
import { DiffCard, DiffContext } from '../../../../diff';
import { InlineBox } from './styledComponents';
export function Text(_ref) {
  let {
    diff,
    childDiff,
    children,
    path,
    segment,
    ...restProps
  } = _ref;
  const diffWithFallback = diff || childDiff;
  const hasChanged = diffWithFallback && diffWithFallback.action !== 'unchanged' && segment.action !== 'unchanged';

  if (hasChanged) {
    return /*#__PURE__*/React.createElement(TextWithDiff, _extends({}, restProps, {
      childDiff: childDiff,
      diff: diff,
      segment: segment,
      path: path
    }), children);
  }

  return /*#__PURE__*/React.createElement(InlineBox, null, children);
}
export function TextWithDiff(_ref2) {
  let {
    diff,
    childDiff,
    children,
    path,
    segment,
    ...restProps
  } = _ref2;
  const {
    onSetFocus
  } = React.useContext(ConnectorContext);
  const {
    path: fullPath
  } = React.useContext(DiffContext);
  const spanSegment = useMemo(() => path.slice(-2, 1)[0], [path]);
  const isRemoved = diff && diff.action === 'removed';
  const prefix = fullPath.slice(0, fullPath.findIndex(seg => isKeySegment(seg) && isKeySegment(spanSegment) && seg._key === spanSegment._key));
  const focusPath = prefix.concat(path);
  const handleClick = useCallback(event => {
    event.stopPropagation();

    if (!isRemoved) {
      event.preventDefault();
      onSetFocus(focusPath);
    }
  }, [focusPath, isRemoved, onSetFocus]);
  const realSeg = diff && diff.segments.find(rSeg => rSeg.text === segment.text);
  const diffWithFallback = realSeg || diff || childDiff;
  const annotation = diffWithFallback && diffWithFallback.action !== 'unchanged' && diffWithFallback.annotation || null;
  const diffCard = annotation && segment.action !== 'unchanged' ? /*#__PURE__*/React.createElement(DiffCard, {
    annotation: annotation,
    as: segment.action === 'removed' ? 'del' : 'ins',
    tooltip: {
      description: "".concat(_startCase(segment.action), " text")
    }
  }, children) : null;
  return /*#__PURE__*/React.createElement(InlineBox, _extends({}, restProps, {
    onClick: handleClick,
    "data-changed": ""
  }), /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement(React.Fragment, null, diffCard || children)));
}