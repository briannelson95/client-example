import { Box, Card, Stack, Text } from '@sanity/ui';
import React, { useCallback, useContext } from 'react';
import { ConnectorContext } from '../../../../../components/changeIndicators';
import { DiffContext, DiffTooltip, useDiffAnnotationColor } from '../../../../diff';
import { isHeader } from '../helpers';
import Blockquote from './Blockquote';
import Header from './Header';
import Paragraph from './Paragraph';
const EMPTY_PATH = [];
export default function Block(props) {
  const {
    diff,
    block,
    children
  } = props;
  const color = useDiffAnnotationColor(diff, EMPTY_PATH);
  const {
    path: fullPath
  } = useContext(DiffContext);
  const {
    onSetFocus
  } = useContext(ConnectorContext);
  const isRemoved = diff.action === 'removed';
  let returned = children;
  const handleClick = useCallback(event => {
    event.stopPropagation();

    if (!isRemoved) {
      onSetFocus(fullPath);
    }
  }, [fullPath, isRemoved, onSetFocus]);

  if (block.style === 'blockquote') {
    returned = /*#__PURE__*/React.createElement(Blockquote, null, returned);
  } else if (block.style && isHeader(block)) {
    returned = /*#__PURE__*/React.createElement(Header, {
      style: block.style
    }, returned);
  } else {
    returned = /*#__PURE__*/React.createElement(Paragraph, null, returned);
  }

  let fromStyle; // If style was changed, indicate that

  if (diff.origin.action === 'changed' && diff.origin.fields.style && diff.origin.fields.style.action === 'changed' && diff.origin.fields.style.annotation) {
    var _diff$origin, _diff$origin$fromValu, _diff$origin$fields$s;

    fromStyle = diff === null || diff === void 0 ? void 0 : (_diff$origin = diff.origin) === null || _diff$origin === void 0 ? void 0 : (_diff$origin$fromValu = _diff$origin.fromValue) === null || _diff$origin$fromValu === void 0 ? void 0 : _diff$origin$fromValu.style;
    const style = color ? {
      background: color.background,
      color: color.text
    } : {};
    returned = /*#__PURE__*/React.createElement(Card, {
      padding: 3,
      border: true,
      radius: 2,
      style: {
        borderStyle: 'dotted'
      },
      "diff-block-action": diff.action,
      "data-block-note": "changed_from_style_".concat(fromStyle || 'undefined')
    }, /*#__PURE__*/React.createElement(Stack, {
      space: 2
    }, /*#__PURE__*/React.createElement(DiffTooltip, {
      annotations: [(_diff$origin$fields$s = diff.origin.fields.style) === null || _diff$origin$fields$s === void 0 ? void 0 : _diff$origin$fields$s.annotation],
      diff: diff.origin.fields.style
    }, /*#__PURE__*/React.createElement(Text, {
      size: 0
    }, "Changed block style from '", fromStyle, "'")), /*#__PURE__*/React.createElement(Box, {
      style: style
    }, returned)));
  }

  return /*#__PURE__*/React.createElement("div", {
    onClick: handleClick,
    "diff-block-action": diff.action,
    "data-block-note": "changed_from_style_".concat(fromStyle || 'undefined')
  }, returned);
}