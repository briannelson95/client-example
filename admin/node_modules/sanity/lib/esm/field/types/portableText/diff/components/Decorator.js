var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React from 'react';
import styled from 'styled-components';
const DecoratorWrapper = styled.span(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: inline;\n  ", "\n"])), _ref => {
  let {
    theme,
    decoration
  } = _ref;

  switch (decoration) {
    case 'strong':
      return 'font-weight: bold;';

    case 'em':
      return 'font-style: italic;';

    case 'underline':
      return 'text-decoration: underline;';

    case 'overline':
      return 'text-decoration: overline;';

    case 'strike-through':
      return 'text-decoration: line-through;';

    case 'code':
      return "\n          font-family: ".concat(theme.sanity.fonts.code.family, ";\n          background: ").concat(theme.sanity.color.muted.default.enabled.bg, ";\n        ");

    default:
      return '';
  }
});
export default function Decorator(_ref2) {
  let {
    mark,
    children
  } = _ref2;
  return /*#__PURE__*/React.createElement(DecoratorWrapper, {
    decoration: mark
  }, children);
}