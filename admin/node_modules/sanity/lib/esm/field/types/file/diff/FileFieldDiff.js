var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { DocumentIcon } from '@sanity/icons';
import React, { useMemo } from 'react';
import { Box, Card, Flex, Text } from '@sanity/ui';
import styled from 'styled-components';
import { DiffCard, DiffTooltip, FromTo, MetaInfo, ChangeList } from '../../../diff';
import { useRefValue } from '../../../diff/hooks';
import { getSizeDiff } from './helpers';
const SizeDiff = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  ", "\n  &:not([hidden]) {\n    display: inline-block;\n  }\n\n  [data-number='positive'] {\n    color: var(--size-diff-positive);\n  }\n\n  [data-number='negative'] {\n    color: var(--size-diff-negative);\n  }\n"])), _ref => {
  let {
    theme
  } = _ref;
  return "\n    --size-diff-positive: ".concat(theme.sanity.color.solid.positive.enabled.bg, ";\n    --size-diff-negative: ").concat(theme.sanity.color.solid.critical.enabled.bg, ";\n  ");
});
export const FileFieldDiff = _ref2 => {
  let {
    diff,
    schemaType
  } = _ref2;
  const {
    fromValue,
    toValue,
    fields
  } = diff;
  const fromAsset = fromValue === null || fromValue === void 0 ? void 0 : fromValue.asset;
  const toAsset = toValue === null || toValue === void 0 ? void 0 : toValue.asset;
  const prev = useRefValue(fromAsset === null || fromAsset === void 0 ? void 0 : fromAsset._ref);
  const next = useRefValue(toAsset === null || toAsset === void 0 ? void 0 : toAsset._ref);
  const changedFields = Object.entries(fields).filter(_ref3 => {
    let [name, field] = _ref3;
    return field.isChanged && name !== '_type';
  }).map(_ref4 => {
    let [name] = _ref4;
    return name;
  });
  const didAssetChange = changedFields.includes('asset');
  const nestedFields = schemaType.fields.filter(field => field.name !== 'asset' && changedFields.includes(field.name)).map(field => field.name); // Sizes in MB TODO: improve. Apple uses 1000^2

  const prevSize = (prev === null || prev === void 0 ? void 0 : prev.size) && prev.size / 1000 / 1000;
  const nextSize = (next === null || next === void 0 ? void 0 : next.size) && next.size / 1000 / 1000;
  const pctDiff = getSizeDiff(prevSize, nextSize);
  const roundedPrevSize = prevSize ? prevSize.toFixed(2) : undefined;
  const roundedNextSize = nextSize ? nextSize.toFixed(2) : undefined;
  const cardStyles = useMemo(() => ({
    display: 'block',
    flex: 1
  }), []);
  const from = prev && /*#__PURE__*/React.createElement(DiffCard, {
    as: "del",
    diff: diff,
    path: "asset._ref",
    style: cardStyles
  }, /*#__PURE__*/React.createElement(MetaInfo, {
    title: prev.originalFilename || 'Untitled',
    icon: DocumentIcon
  }, /*#__PURE__*/React.createElement(Text, {
    size: 0,
    style: {
      color: 'inherit'
    }
  }, "".concat(roundedPrevSize, "MB"))));
  const to = next && /*#__PURE__*/React.createElement(DiffCard, {
    as: "ins",
    diff: diff,
    path: "asset._ref",
    style: cardStyles
  }, /*#__PURE__*/React.createElement(MetaInfo, {
    title: next.originalFilename || 'Untitled',
    icon: DocumentIcon
  }, /*#__PURE__*/React.createElement(Flex, {
    align: "center"
  }, /*#__PURE__*/React.createElement(Text, {
    size: 0,
    style: {
      color: 'inherit'
    }
  }, "".concat(roundedNextSize, "MB")), pctDiff !== 0 && /*#__PURE__*/React.createElement(Card, {
    radius: 2,
    padding: 1,
    as: SizeDiff,
    marginLeft: 2
  }, /*#__PURE__*/React.createElement(Text, {
    size: 0,
    "data-number": pctDiff > 0 ? 'positive' : 'negative'
  }, pctDiff > 0 && '+', pctDiff, "%")))));
  const FileAssetChange = /*#__PURE__*/React.createElement(React.Fragment, null, from && !to && /*#__PURE__*/React.createElement(DiffTooltip, {
    diff: diff,
    path: "asset._ref",
    description: "Removed"
  }, from), from && to && /*#__PURE__*/React.createElement(DiffTooltip, {
    diff: diff,
    path: "asset._ref"
  }, /*#__PURE__*/React.createElement(FromTo, {
    from: from,
    layout: "grid",
    to: to
  })), !from && to && /*#__PURE__*/React.createElement(DiffTooltip, {
    diff: diff,
    path: "asset._ref",
    description: "Added"
  }, to));
  return /*#__PURE__*/React.createElement(React.Fragment, null, didAssetChange && FileAssetChange, nestedFields.length > 0 && /*#__PURE__*/React.createElement(Box, {
    marginTop: didAssetChange ? 4 : 3
  }, /*#__PURE__*/React.createElement(ChangeList, {
    diff: diff,
    schemaType: schemaType,
    fields: nestedFields
  })));
};