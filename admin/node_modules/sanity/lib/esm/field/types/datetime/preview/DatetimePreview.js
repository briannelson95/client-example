var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import * as legacyDateFormat from '@sanity/util/legacyDateFormat';
import { Box } from '@sanity/ui';
import React from 'react';
import styled from 'styled-components';
const DEFAULT_DATE_FORMAT = 'YYYY-MM-DD';
const DEFAULT_TIME_FORMAT = 'HH:mm';
const DatetimeWrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: inline-block;\n  word-wrap: break-word;\n"])));
export const DatetimePreview = function DatetimePreview(_ref) {
  let {
    value,
    schemaType
  } = _ref;
  return /*#__PURE__*/React.createElement(Box, {
    as: DatetimeWrapper,
    paddingX: 2,
    paddingY: 1
  }, formatDateTime(value, schemaType));
};

function formatDateTime(value, schemaType) {
  const {
    options,
    name
  } = schemaType;
  const dateFormat = (options === null || options === void 0 ? void 0 : options.dateFormat) || DEFAULT_DATE_FORMAT;
  const timeFormat = (options === null || options === void 0 ? void 0 : options.timeFormat) || DEFAULT_TIME_FORMAT;
  return legacyDateFormat.format(new Date(value), name === 'date' ? dateFormat : "".concat(dateFormat, " ").concat(timeFormat));
}