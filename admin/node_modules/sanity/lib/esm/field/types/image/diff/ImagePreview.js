var _templateObject, _templateObject2, _templateObject3;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React, { useMemo } from 'react';
import { getImageDimensions, isDefaultCrop, isDefaultHotspot } from '@sanity/asset-utils';
import imageUrlBuilder from '@sanity/image-url';
import { ImageIcon } from '@sanity/icons';
import { Box, Card, Flex, Text } from '@sanity/ui';
import styled from 'styled-components';
import { hues } from '@sanity/color';
import { useClient } from '../../../../hooks';
import { MetaInfo } from '../../../diff';
import { useDocumentValues } from '../../../../datastores';
import { getDeviceDpr, simpleHash } from './helpers';
import { HotspotCropSVG } from './HotspotCropSVG';
const ASSET_FIELDS = ['originalFilename']; // To trigger error state, change `src` attribute to random string ("foo")
// To trigger slow loading, use a throttling proxy (charles) or browser devtools
// To trigger deleted state, set `id` to valid, non-existant image asset ID,
// eg: 'image-1217bc35db5030739b7be571c79d3c401551911d-300x200-png'

export const NoImagePreview = () => /*#__PURE__*/React.createElement(Card, {
  flex: 1,
  tone: "transparent",
  padding: 4,
  radius: 2,
  height: "stretch"
}, /*#__PURE__*/React.createElement(Flex, {
  align: "center",
  justify: "center",
  height: "fill"
}, /*#__PURE__*/React.createElement(Text, {
  size: 1,
  muted: true
}, "(no image)")));
const ImageWrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  height: 100%;\n  max-height: 190px;\n  position: relative;\n\n  /* Ideally the checkerboard component currently in the form builder should be made available and used here */\n  background-color: ", ";\n  background-image: linear-gradient(45deg, ", " 25%, transparent 25%),\n    linear-gradient(-45deg, ", " 25%, transparent 25%),\n    linear-gradient(45deg, transparent 75%, ", " 75%),\n    linear-gradient(-45deg, transparent 75%, ", " 75%);\n  background-size: 16px 16px;\n  background-position: 0 0, 0 8px, 8px -8px, -8px 0;\n\n  &::after {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    box-shadow: inset 0 0 0 1px var(--card-border-color);\n    pointer-events: none;\n  }\n\n  &[data-changed] {\n    opacity: 0.45;\n  }\n"])), hues.gray[100].hex, hues.gray[50].hex, hues.gray[50].hex, hues.gray[50].hex, hues.gray[50].hex);
const Image = styled.img(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: block;\n  flex: 1;\n  min-height: 0;\n  object-fit: contain;\n  width: 100%;\n  height: 100%;\n\n  &[data-action='removed'] {\n    opacity: 0.45;\n  }\n"])));
const HotspotDiff = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  svg {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n  }\n"])));
export function ImagePreview(props) {
  var _diff$fromValue, _diff$fromValue$asset, _diff$toValue, _diff$toValue$asset;

  const {
    id,
    action,
    diff,
    hotspot,
    crop,
    is
  } = props;
  const client = useClient();
  const [imageError, setImageError] = React.useState();
  const {
    value: asset
  } = useDocumentValues(id, ASSET_FIELDS);
  const dimensions = getImageDimensions(id);
  const imageBuilder = useMemo(() => imageUrlBuilder(client), [client]); // undefined = still loading, null = its gone

  const assetIsDeleted = asset === null;
  const title = asset && asset.originalFilename || 'Untitled';
  const imageSource = imageBuilder.image(id).height(190) // Should match container max-height
  .dpr(getDeviceDpr()).fit('max');
  const assetChanged = ((_diff$fromValue = diff.fromValue) === null || _diff$fromValue === void 0 ? void 0 : (_diff$fromValue$asset = _diff$fromValue.asset) === null || _diff$fromValue$asset === void 0 ? void 0 : _diff$fromValue$asset._ref) !== ((_diff$toValue = diff.toValue) === null || _diff$toValue === void 0 ? void 0 : (_diff$toValue$asset = _diff$toValue.asset) === null || _diff$toValue$asset === void 0 ? void 0 : _diff$toValue$asset._ref);
  const metaAction = action === 'changed' ? undefined : action;
  return /*#__PURE__*/React.createElement(Flex, {
    direction: "column",
    height: "fill",
    flex: 1
  }, /*#__PURE__*/React.createElement(Box, {
    flex: 1,
    padding: 2,
    paddingBottom: 0
  }, /*#__PURE__*/React.createElement(Flex, {
    as: ImageWrapper,
    direction: "column",
    "data-changed": is === 'from' && assetChanged ? '' : undefined,
    "data-error": imageError ? '' : undefined
  }, !assetIsDeleted && !imageError && /*#__PURE__*/React.createElement(Image, {
    src: imageSource.toString() || '',
    alt: title,
    "data-action": metaAction,
    onError: setImageError,
    width: dimensions.width,
    height: dimensions.height
  }), (assetIsDeleted || imageError) && /*#__PURE__*/React.createElement(Box, {
    paddingY: 5
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1,
    muted: true,
    align: "center"
  }, assetIsDeleted ? 'Image is deleted' : 'Error loading image')), /*#__PURE__*/React.createElement(HotspotDiff, null, /*#__PURE__*/React.createElement(HotspotCropSVG, {
    crop: crop && !isDefaultCrop(crop) ? crop : undefined,
    diff: diff,
    hash: simpleHash("".concat(imageSource.toString() || '', "-").concat(is)),
    hotspot: hotspot && !isDefaultHotspot(hotspot) ? hotspot : undefined,
    width: dimensions.width,
    height: dimensions.height
  })))), /*#__PURE__*/React.createElement(MetaInfo, {
    title: title,
    icon: ImageIcon,
    markRemoved: assetChanged && is === 'from'
  }, metaAction ? /*#__PURE__*/React.createElement("div", null, metaAction) : /*#__PURE__*/React.createElement("div", null, dimensions.width, " \xD7 ", dimensions.height)));
}