import * as React from 'react';
import { Box, Card, Text } from '@sanity/ui';
import { DiffCard, DiffTooltip, ChangeList, getAnnotationAtPath } from '../../../diff';
import { FromTo } from '../../../diff/components';
import { ImagePreview, NoImagePreview } from './ImagePreview';
const IMAGE_META_FIELDS = ['crop', 'hotspot'];
const BASE_IMAGE_FIELDS = ['asset', ...IMAGE_META_FIELDS];
const CARD_STYLES = {
  flex: 1
};
export const ImageFieldDiff = _ref => {
  var _fromValue$asset, _toValue$asset;

  let {
    diff,
    schemaType
  } = _ref;
  const {
    fromValue,
    toValue,
    fields,
    isChanged
  } = diff;
  const fromRef = fromValue === null || fromValue === void 0 ? void 0 : (_fromValue$asset = fromValue.asset) === null || _fromValue$asset === void 0 ? void 0 : _fromValue$asset._ref;
  const toRef = toValue === null || toValue === void 0 ? void 0 : (_toValue$asset = toValue.asset) === null || _toValue$asset === void 0 ? void 0 : _toValue$asset._ref;
  const assetAnnotation = getAnnotationAtPath(diff, ['asset', '_ref']); // Get all the changed fields within this image field

  const changedFields = Object.keys(fields).filter(name => fields[name].isChanged && name !== '_type');
  const nestedFields = schemaType.fields.filter(field => !BASE_IMAGE_FIELDS.includes(field.name) && changedFields.includes(field.name)).map(field => field.name);
  let assetAction = 'changed';

  if (!fromRef && toRef) {
    assetAction = 'added';
  } else if (!toRef && fromRef) {
    assetAction = 'removed';
  }

  const didAssetChange = changedFields.includes('asset');
  const didCropChange = changedFields.includes('crop');
  const didHotspotChange = changedFields.includes('hotspot');
  const didMetaChange = didCropChange || didHotspotChange;
  const showImageDiff = didAssetChange || didMetaChange;
  const showMetaChange = didMetaChange && !didAssetChange;
  const from = fromValue && fromRef ? /*#__PURE__*/React.createElement(DiffCard, {
    annotation: assetAnnotation,
    style: CARD_STYLES
  }, /*#__PURE__*/React.createElement(ImagePreview, {
    is: "from",
    id: fromRef,
    diff: diff,
    action: assetAction,
    hotspot: showMetaChange && didHotspotChange ? fromValue.hotspot : undefined,
    crop: showMetaChange && didCropChange ? fromValue.crop : undefined
  })) : /*#__PURE__*/React.createElement(NoImagePreview, null);
  const to = toValue && toRef ? /*#__PURE__*/React.createElement(DiffCard, {
    annotation: assetAnnotation,
    style: CARD_STYLES
  }, /*#__PURE__*/React.createElement(ImagePreview, {
    is: "to",
    id: toRef,
    diff: diff,
    hotspot: showMetaChange && didHotspotChange ? toValue.hotspot : undefined,
    crop: showMetaChange && didCropChange ? toValue.crop : undefined
  })) : /*#__PURE__*/React.createElement(NoImagePreview, null);

  if (!from && !to) {
    return /*#__PURE__*/React.createElement(Card, {
      padding: 4,
      radius: 2,
      tone: "transparent"
    }, /*#__PURE__*/React.createElement(Text, {
      muted: true,
      size: 1,
      align: "center"
    }, "Image not set"));
  }

  if (!isChanged) {
    return toRef ? /*#__PURE__*/React.createElement(DiffCard, {
      annotation: assetAnnotation,
      style: CARD_STYLES
    }, /*#__PURE__*/React.createElement(ImagePreview, {
      id: toRef,
      is: "to",
      diff: diff
    })) : null;
  }

  const imageDiff = /*#__PURE__*/React.createElement(FromTo, {
    align: "center",
    from: from,
    layout: "grid",
    to: to
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, showImageDiff && (didAssetChange ? /*#__PURE__*/React.createElement(DiffTooltip, {
    annotations: assetAnnotation ? [assetAnnotation] : [],
    description: "".concat(assetAction[0].toUpperCase()).concat(assetAction.slice(1))
  }, imageDiff) : imageDiff), nestedFields.length > 0 && /*#__PURE__*/React.createElement(Box, {
    marginTop: showImageDiff ? 4 : 3
  }, /*#__PURE__*/React.createElement(ChangeList, {
    diff: diff,
    schemaType: schemaType,
    fields: nestedFields
  })));
};