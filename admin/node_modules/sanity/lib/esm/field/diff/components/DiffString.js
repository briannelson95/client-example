var _templateObject, _templateObject2;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { Text, Card, rem } from '@sanity/ui';
import * as React from 'react';
import styled from 'styled-components';
import { DiffCard } from './DiffCard';
const RoundedCard = styled.span(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  border-radius: ", ";\n"])), _ref => {
  let {
    theme
  } = _ref;
  return rem(theme.sanity.radius[1]);
});
const ChangeSegment = styled(Text)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  &:not([hidden]) {\n    display: inline;\n    line-height: calc(1.25em + 2px);\n  }\n\n  &:hover {\n    background-color: none !important;\n    background-image: linear-gradient(\n      to bottom,\n      var(--card-bg-color) 0,\n      var(--card-bg-color) 33.333%,\n      currentColor 33.333%,\n      currentColor 100%\n    );\n    background-size: 1px 3px;\n    background-repeat: repeat-x;\n    background-position-y: bottom;\n    padding-bottom: 3px;\n    box-shadow: 0 0 0 1px var(--card-bg-color);\n    z-index: 1;\n  }\n"])));
export function DiffStringSegment(props) {
  const {
    segment
  } = props;
  const {
    text
  } = segment;

  if (segment.action === 'added') {
    return /*#__PURE__*/React.createElement(DiffCard, {
      annotation: segment.annotation,
      disableHoverEffect: true,
      tooltip: {
        description: 'Added'
      },
      as: RoundedCard
    }, /*#__PURE__*/React.createElement(ChangeSegment, {
      as: "ins",
      style: {
        textDecoration: 'none'
      }
    }, text));
  }

  if (segment.action === 'removed') {
    return /*#__PURE__*/React.createElement(DiffCard, {
      annotation: segment.annotation,
      as: RoundedCard,
      disableHoverEffect: true,
      tooltip: {
        description: 'Removed'
      }
    }, /*#__PURE__*/React.createElement(ChangeSegment, {
      as: "del"
    }, text));
  }

  return /*#__PURE__*/React.createElement(Card, {
    as: "span",
    radius: 2,
    style: {
      display: 'inline'
    }
  }, text);
}
export function DiffString(props) {
  const {
    diff
  } = props;
  return /*#__PURE__*/React.createElement(React.Fragment, null, (diff.segments || []).map((segment, segmentIndex) => /*#__PURE__*/React.createElement(DiffStringSegment // eslint-disable-next-line react/no-array-index-key
  , {
    key: segmentIndex,
    segment: segment
  })));
}