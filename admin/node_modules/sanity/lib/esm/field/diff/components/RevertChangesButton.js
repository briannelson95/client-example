var _templateObject;

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { RevertIcon } from '@sanity/icons';
import { Button } from '@sanity/ui';
import React, { forwardRef } from 'react';
import styled from 'styled-components';
const Root = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  [data-ui='Text'] {\n    font-weight: normal;\n  }\n\n  div[data-ui='Box'] {\n    display: none;\n  }\n\n  &:not([data-disabled='true']):hover,\n  &:not([data-disabled='true']):focus {\n    --card-fg-color: ", ";\n    --card-bg-color: transparent;\n    --card-border-color: transparent;\n\n    div[data-ui='Box'] {\n      display: block;\n    }\n  }\n"])), _ref => {
  let {
    theme
  } = _ref;
  return theme.sanity.color.solid.critical.enabled.bg;
});
export const RevertChangesButton = /*#__PURE__*/forwardRef(function RevertChangesButton(props, ref) {
  const {
    selected,
    ...restProps
  } = props;
  return /*#__PURE__*/React.createElement(Root, _extends({
    icon: RevertIcon,
    selected: selected,
    text: "Revert changes",
    mode: "bleed",
    padding: 1,
    fontSize: 1,
    space: 2,
    ref: ref
  }, restProps));
});