function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useMemo } from 'react';
import { Flex, Grid, rem, useTheme } from '@sanity/ui';
import { FromToArrow } from './FromToArrow';
const INLINE_COLUMN_STYLES = {
  flexShrink: 0
};
const BLOCK_COLUMN_STYLES = {
  alignItems: 'stretch'
};
const FLEX_ALIGN = {
  top: 'flex-start',
  center: 'center',
  bottom: 'flex-end',
  default: 'flex-start'
};
export const FromTo = /*#__PURE__*/forwardRef(function FromTo(props, ref) {
  const {
    align = 'top',
    layout = 'inline',
    from,
    to,
    style,
    ...restProps
  } = props;
  const theme = useTheme();
  const Layout = layout === 'inline' ? Flex : Grid;
  const layoutStyles = useMemo(() => ({ ...style,
    ...(layout === 'inline' ? {
      maxWidth: '100%',
      display: 'inline-flex'
    } : {
      gridTemplateColumns: "minmax(0, 1fr) ".concat(rem(theme.sanity.space[5]), " minmax(0, 1fr)")
    })
  }), [layout, style, theme]);
  const columnStyles = layout === 'inline' ? INLINE_COLUMN_STYLES : BLOCK_COLUMN_STYLES;
  return /*#__PURE__*/React.createElement(Layout, _extends({}, restProps, {
    ref: ref,
    style: layoutStyles,
    "data-from-to-layout": true
  }), from && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Flex, {
    align: FLEX_ALIGN[align],
    style: columnStyles
  }, from), /*#__PURE__*/React.createElement(Flex, {
    align: "center",
    justify: "center",
    padding: 2
  }, /*#__PURE__*/React.createElement(FromToArrow, null))), /*#__PURE__*/React.createElement(Flex, {
    align: FLEX_ALIGN[align],
    style: columnStyles
  }, to));
});