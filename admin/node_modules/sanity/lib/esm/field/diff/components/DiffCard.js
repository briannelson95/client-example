var _templateObject;

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React, { forwardRef, useMemo } from 'react';
import { Card, rem } from '@sanity/ui';
import styled from 'styled-components';
import { getAnnotationAtPath, useAnnotationColor } from '../annotations';
import { DiffTooltip } from './DiffTooltip';
const StyledCard = styled(Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  --diff-card-radius: ", ";\n  --diff-card-bg-color: ", ";\n\n  max-width: 100%;\n  position: relative;\n  border-radius: var(--diff-card-radius);\n\n  &:not(del) {\n    text-decoration: none;\n  }\n\n  &[data-hover] {\n    &::after {\n      content: '';\n      display: block;\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n    }\n\n    &:hover {\n      border-bottom-left-radius: 0;\n      border-bottom-right-radius: 0;\n\n      &::after {\n        bottom: -3px;\n        border-top: 1px solid var(---diff-card-bg-color);\n        border-bottom: 2px solid currentColor;\n        border-bottom-left-radius: var(--diff-card-radius);\n        border-bottom-right-radius: var(--diff-card-radius);\n      }\n    }\n\n    [data-from-to-layout]:hover & {\n      border-bottom-left-radius: 0;\n      border-bottom-right-radius: 0;\n\n      &::after {\n        bottom: -3px;\n        border-top: 1px solid var(---diff-card-bg-color);\n        border-bottom: 2px solid currentColor;\n        border-bottom-left-radius: var(--diff-card-radius);\n        border-bottom-right-radius: var(--diff-card-radius);\n      }\n    }\n  }\n"])), _ref => {
  let {
    theme
  } = _ref;
  return rem(theme.sanity.radius[2]);
}, _ref2 => {
  let {
    theme
  } = _ref2;
  return theme.sanity.color.card.enabled.bg;
});
const EMPTY_PATH = [];
export const DiffCard = /*#__PURE__*/forwardRef(function DiffCard(props, ref) {
  const {
    annotation: annotationProp,
    as = 'div',
    children,
    className,
    diff,
    disableHoverEffect,
    path = EMPTY_PATH,
    style = {},
    tooltip,
    ...restProps
  } = props;
  const annotation = useMemo(() => annotationProp || getAnnotationAtPath(diff, path), [annotationProp, diff, path]);
  const color = useAnnotationColor(annotation);
  const element = /*#__PURE__*/React.createElement(StyledCard, _extends({}, restProps, {
    as: as,
    className: className,
    "data-hover": disableHoverEffect || !annotation ? undefined : '',
    ref: ref,
    radius: 1,
    style: { ...style,
      backgroundColor: color.background,
      color: color.text
    }
  }), children);

  if (tooltip && annotation) {
    return /*#__PURE__*/React.createElement(DiffTooltip, {
      annotations: [annotation],
      description: tooltip && typeof tooltip === 'object' && tooltip.description
    }, element);
  }

  return element;
});