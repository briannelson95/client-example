var _templateObject, _templateObject2;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import * as React from 'react';
import { Box, rem, Text } from '@sanity/ui';
import styled from 'styled-components';
import { getAnnotationAtPath } from '../annotations';
import { DiffCard } from './DiffCard';
const RoundedCard = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  border-radius: ", ";\n  padding: ", ";\n"])), _ref => {
  let {
    theme
  } = _ref;
  return rem(theme.sanity.radius[2]);
}, _ref2 => {
  let {
    theme
  } = _ref2;
  return rem(theme.sanity.space[1]);
});
const AnnotationText = styled(Text)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  &:not([hidden]) {\n    color: inherit;\n  }\n"])));
export function ChangeTitleSegment(props) {
  const {
    change,
    segment
  } = props;

  if (typeof segment === 'string') {
    return /*#__PURE__*/React.createElement(Box, {
      style: segment.length > 30 ? {
        maxWidth: 100
      } : {}
    }, /*#__PURE__*/React.createElement(Text, {
      title: segment,
      size: 1,
      weight: "semibold",
      textOverflow: "ellipsis"
    }, segment));
  }

  const {
    hasMoved,
    fromIndex,
    toIndex,
    annotation
  } = segment;
  const created = typeof fromIndex === 'undefined';
  const deleted = typeof toIndex === 'undefined';

  if (created) {
    // Item was created
    return /*#__PURE__*/React.createElement(CreatedTitleSegment, {
      annotation: annotation,
      change: change,
      toIndex: toIndex
    });
  }

  if (deleted) {
    // Item was deleted
    return /*#__PURE__*/React.createElement(DeletedTitleSegment, {
      annotation: annotation,
      fromIndex: fromIndex
    });
  }

  if (hasMoved && typeof toIndex !== 'undefined' && typeof fromIndex !== 'undefined') {
    // Item was moved
    return /*#__PURE__*/React.createElement(MovedTitleSegment, {
      annotation: annotation,
      fromIndex: fromIndex,
      toIndex: toIndex
    });
  } // Changed/unchanged


  const readableIndex = (toIndex || 0) + 1;
  return /*#__PURE__*/React.createElement(Box, {
    padding: 1
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1,
    weight: "semibold"
  }, "#", readableIndex));
}

function CreatedTitleSegment(props) {
  const {
    annotation: annotationProp,
    change,
    toIndex = 0
  } = props;
  const readableIndex = toIndex + 1;
  const description = "Added in position ".concat(readableIndex);
  const content = /*#__PURE__*/React.createElement(React.Fragment, null, "#", readableIndex);
  const diffAnnotation = change !== null && change !== void 0 && change.diff ? getAnnotationAtPath(change.diff, []) : undefined;
  const annotation = diffAnnotation || annotationProp;

  if (annotation) {
    return /*#__PURE__*/React.createElement(DiffCard, {
      annotation: annotation,
      tooltip: {
        description
      },
      as: RoundedCard
    }, /*#__PURE__*/React.createElement(AnnotationText, {
      size: 1,
      weight: "semibold",
      forwardedAs: "ins",
      style: {
        textDecoration: 'none'
      }
    }, content));
  }

  return /*#__PURE__*/React.createElement(Text, {
    size: 1,
    weight: "semibold"
  }, content);
}

function DeletedTitleSegment(props) {
  const {
    annotation,
    fromIndex = 0
  } = props;
  const readableIndex = fromIndex + 1;
  const description = "Removed from position ".concat(readableIndex);
  return /*#__PURE__*/React.createElement(DiffCard, {
    annotation: annotation || null,
    as: RoundedCard,
    tooltip: {
      description
    }
  }, /*#__PURE__*/React.createElement(AnnotationText, {
    size: 1,
    weight: "semibold",
    forwardedAs: "del"
  }, "#", readableIndex));
}

function MovedTitleSegment(props) {
  const {
    annotation,
    fromIndex,
    toIndex
  } = props;
  const indexDiff = toIndex - fromIndex;
  const indexSymbol = indexDiff < 0 ? '↑' : '↓';
  const positions = Math.abs(indexDiff);
  const description = "Moved ".concat(positions, " position").concat(positions === 1 ? '' : 's', " ").concat(indexDiff < 0 ? 'up' : 'down');
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {
    padding: 1
  }, /*#__PURE__*/React.createElement(AnnotationText, {
    size: 1,
    weight: "semibold"
  }, "#", toIndex + 1)), /*#__PURE__*/React.createElement(DiffCard, {
    annotation: annotation,
    as: RoundedCard,
    tooltip: {
      description
    }
  }, /*#__PURE__*/React.createElement(AnnotationText, {
    size: 1,
    weight: "semibold"
  }, indexSymbol, Math.abs(indexDiff))));
}