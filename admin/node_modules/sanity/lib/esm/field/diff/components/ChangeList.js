import { Button, Box, Card, Grid, Stack, useClickOutside } from '@sanity/ui';
import { RevertIcon } from '@sanity/icons';
import React, { useCallback, useContext, useMemo, useState } from 'react';
import { unstable_useConditionalProperty as useConditionalProperty } from '../../../conditional-property';
import { useDocumentOperation } from '../../../hooks';
import { DiffContext } from '../contexts/DiffContext';
import { buildObjectChangeList } from '../changes/buildChangeList';
import { undoChange } from '../changes/undoChange';
import { useDocumentChange } from '../hooks/useDocumentChange';
import { useDocumentPairPermissions } from '../../../datastores';
import { ChangeResolver } from './ChangeResolver';
import { NoChanges } from './NoChanges';
import { ChangeListWrapper, PopoverWrapper } from './ChangeList.styled';
export function ChangeList(_ref) {
  let {
    diff,
    fields,
    schemaType
  } = _ref;
  const {
    documentId,
    isComparingCurrent,
    value
  } = useDocumentChange();
  const docOperations = useDocumentOperation(documentId, schemaType.name);
  const {
    path
  } = useContext(DiffContext);
  const isRoot = path.length === 0;
  const [confirmRevertAllOpen, setConfirmRevertAllOpen] = useState(false);
  const [confirmRevertAllHover, setConfirmRevertAllHover] = useState(false);
  const isReadOnly = useConditionalProperty({
    document: value,
    value: undefined,
    checkProperty: schemaType.readOnly,
    checkPropertyKey: 'readOnly'
  });

  if (schemaType.jsonType !== 'object') {
    throw new Error("Only object schema types are allowed in ChangeList");
  }

  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({
    id: documentId,
    type: schemaType.name,
    permission: 'update'
  });
  const allChanges = useMemo(() => buildObjectChangeList(schemaType, diff, path, [], {
    fieldFilter: fields
  }), [schemaType, fields, path, diff]);
  const changes = useMemo(() => fields && fields.length === 0 ? [] : maybeFlatten(allChanges), [allChanges, fields]);
  const rootChange = allChanges[0];
  const revertAllChanges = useCallback(() => {
    undoChange(rootChange, diff, docOperations);
    setConfirmRevertAllOpen(false);
  }, [rootChange, diff, docOperations]);
  const handleRevertAllChangesClick = useCallback(() => {
    setConfirmRevertAllOpen(true);
  }, []);
  const handleRevertAllChangesMouseEnter = useCallback(() => {
    setConfirmRevertAllHover(true);
  }, []);
  const handleRevertAllChangesMouseLeave = useCallback(() => {
    setConfirmRevertAllHover(false);
  }, []);
  const closeRevertAllChangesConfirmDialog = useCallback(() => {
    setConfirmRevertAllOpen(false);
  }, []);
  const [revertAllContainerElement, setRevertAllContainerElement] = useState(null);
  const handleClickOutside = useCallback(() => setConfirmRevertAllOpen(false), []);
  useClickOutside(handleClickOutside, [revertAllContainerElement]);

  if (changes.length === 0) {
    return isRoot ? /*#__PURE__*/React.createElement(NoChanges, null) : null;
  }

  const showFooter = isRoot && changes.length > 1;
  return /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(Stack, {
    space: 5
  }, /*#__PURE__*/React.createElement(Stack, {
    as: ChangeListWrapper,
    space: 5
  }, changes.map(change => /*#__PURE__*/React.createElement("div", {
    key: change.key
  }, /*#__PURE__*/React.createElement(ChangeResolver, {
    change: change,
    key: change.key,
    "data-revert-all-changes-hover": confirmRevertAllHover ? '' : undefined,
    readOnly: isReadOnly || (change === null || change === void 0 ? void 0 : change.readOnly),
    hidden: change === null || change === void 0 ? void 0 : change.hidden
  })))), showFooter && isComparingCurrent && !isPermissionsLoading && (permissions === null || permissions === void 0 ? void 0 : permissions.granted) && /*#__PURE__*/React.createElement(PopoverWrapper, {
    content: /*#__PURE__*/React.createElement(Box, null, "Are you sure you want to revert all ", changes.length, " changes?", /*#__PURE__*/React.createElement(Grid, {
      columns: 2,
      gap: 2,
      marginTop: 2
    }, /*#__PURE__*/React.createElement(Button, {
      mode: "ghost",
      text: "Cancel",
      onClick: closeRevertAllChangesConfirmDialog
    }), /*#__PURE__*/React.createElement(Button, {
      tone: "critical",
      text: "Revert all",
      onClick: revertAllChanges
    }))),
    open: confirmRevertAllOpen,
    padding: 4,
    placement: 'left',
    portal: true,
    ref: setRevertAllContainerElement
  }, /*#__PURE__*/React.createElement(Stack, null, /*#__PURE__*/React.createElement(Button, {
    tone: "critical",
    mode: "ghost",
    text: "Revert all changes",
    icon: RevertIcon,
    onClick: handleRevertAllChangesClick,
    onMouseEnter: handleRevertAllChangesMouseEnter,
    onMouseLeave: handleRevertAllChangesMouseLeave,
    disabled: isReadOnly
  })))));
}

function maybeFlatten(changes) {
  return changes.length === 1 && changes[0].type === 'group' && changes[0].path.length === 0 ? changes[0].changes : changes;
}