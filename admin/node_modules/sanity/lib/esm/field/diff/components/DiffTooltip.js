function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { Tooltip, Text, Stack, Flex, Inline, Label } from '@sanity/ui';
import { LegacyLayerProvider } from '../../../components/transitional';
import { UserAvatar } from '../../../components/UserAvatar';
import { useTimeAgo } from '../../../hooks';
import { getAnnotationAtPath, useAnnotationColor } from '../annotations';
import { useUser } from '../../../datastores';
export function DiffTooltip(props) {
  if ('diff' in props) {
    const {
      diff,
      path = [],
      ...restProps
    } = props;
    const annotation = getAnnotationAtPath(diff, path);
    return /*#__PURE__*/React.createElement(DiffTooltipWithAnnotation, _extends({}, restProps, {
      annotations: annotation ? [annotation] : []
    }));
  }

  return /*#__PURE__*/React.createElement(DiffTooltipWithAnnotation, props);
}

function DiffTooltipWithAnnotation(props) {
  const {
    annotations,
    children,
    description = 'Changed',
    ...restProps
  } = props;

  if (!annotations) {
    return children;
  }

  const content = /*#__PURE__*/React.createElement(Stack, {
    padding: 3,
    space: 2
  }, /*#__PURE__*/React.createElement(Label, {
    size: 1,
    style: {
      textTransform: 'uppercase'
    },
    muted: true
  }, description), /*#__PURE__*/React.createElement(Stack, {
    space: 2
  }, annotations.map((annotation, idx) => /*#__PURE__*/React.createElement(AnnotationItem, {
    annotation: annotation,
    key: idx
  }))));
  return /*#__PURE__*/React.createElement(LegacyLayerProvider, {
    zOffset: "paneFooter"
  }, /*#__PURE__*/React.createElement(Tooltip, _extends({
    content: content // data-placement={restProps.placement}
    ,
    portal: true,
    allowedAutoPlacements: ['top', 'bottom']
  }, restProps), children));
}

function AnnotationItem(_ref) {
  let {
    annotation
  } = _ref;
  const {
    author,
    timestamp
  } = annotation;
  const [user] = useUser(author);
  const color = useAnnotationColor(annotation);
  const timeAgo = useTimeAgo(timestamp, {
    minimal: true
  });
  return /*#__PURE__*/React.createElement(Inline, {
    space: 2
  }, /*#__PURE__*/React.createElement(Flex, {
    align: "center",
    paddingRight: 3,
    style: {
      backgroundColor: color.background,
      color: color.text,
      borderRadius: 'calc(23px / 2)'
    }
  }, /*#__PURE__*/React.createElement(UserAvatar, {
    user: author
  }), /*#__PURE__*/React.createElement(Inline, {
    paddingLeft: 2
  }, /*#__PURE__*/React.createElement(Text, {
    muted: true,
    size: 1,
    style: {
      color: color.text
    }
  }, user ? user.displayName : 'Loadingâ€¦'))), /*#__PURE__*/React.createElement(Text, {
    as: "time",
    muted: true,
    size: 1,
    dateTime: timestamp
  }, timeAgo));
}