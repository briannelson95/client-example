import React from 'react';
import { Text } from '@sanity/ui';
import { unstable_useConditionalProperty as useConditionalProperty } from '../../../conditional-property';
import { useDocumentChange } from '../hooks';
import { FieldChange } from './FieldChange';
import { GroupChange } from './GroupChange';
export function ChangeResolver(props) {
  var _change$schemaType, _change$schemaType2;

  const {
    change,
    hidden,
    readOnly
  } = props;
  const {
    value
  } = useDocumentChange();
  const isHidden = useConditionalProperty({
    // @todo: is parent missing here?
    document: value,
    checkProperty: hidden || ((_change$schemaType = change.schemaType) === null || _change$schemaType === void 0 ? void 0 : _change$schemaType.hidden),
    checkPropertyKey: 'hidden',
    value: change.type === 'field' ? change.diff.toValue : undefined
  });
  const isReadOnly = useConditionalProperty({
    // @todo: is parent missing here?
    document: value,
    checkProperty: readOnly || ((_change$schemaType2 = change.schemaType) === null || _change$schemaType2 === void 0 ? void 0 : _change$schemaType2.readOnly),
    checkPropertyKey: 'readOnly',
    value: change.type === 'field' ? change.diff.toValue : undefined
  });
  if (isHidden) return null;

  if (change.type === 'field') {
    return /*#__PURE__*/React.createElement(FieldChange, {
      change: change,
      readOnly: isReadOnly
    });
  }

  if (change.type === 'group') {
    return /*#__PURE__*/React.createElement(GroupChange, {
      change: change,
      "data-testid": "group-change-".concat(change.fieldsetName),
      readOnly: isReadOnly
    });
  }

  return /*#__PURE__*/React.createElement(Text, null, "Unknown change type: ", /*#__PURE__*/React.createElement("code", null, change.type || 'undefined'));
}