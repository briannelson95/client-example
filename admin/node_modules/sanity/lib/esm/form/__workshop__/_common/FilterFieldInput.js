var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React, { useCallback, useMemo } from 'react';
import { Button, Card, Code, Grid, Label, Stack, TextArea } from '@sanity/ui';
import styled from 'styled-components';
const ExampleCode = styled(Code)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  cursor: pointer;\n"])));
const EXAMPLE_FILTER_FUNCTION = "(type, field) => field.name === 'title'";
export const FilterFieldInput = /*#__PURE__*/React.forwardRef(function FilterFieldInput(props, ref) {
  const {
    value,
    onChange,
    onFilter
  } = props;
  const handleChange = useCallback(event => {
    onChange(event.target.value);
  }, [onChange]);
  const handleFilterExample = useCallback(() => {
    onChange(EXAMPLE_FILTER_FUNCTION);
  }, [onChange]);
  const handleFilter = useCallback(() => {
    onFilter(value);
  }, [onFilter, value]);
  const handleReset = useCallback(() => {
    onFilter("");
  }, [onFilter]);
  const isDisabled = useMemo(() => {
    return (value === null || value === void 0 ? void 0 : value.length) === 0;
  }, [value]);
  return /*#__PURE__*/React.createElement(Card, {
    padding: 4,
    tone: "default",
    border: true
  }, /*#__PURE__*/React.createElement(Stack, {
    space: 4
  }, /*#__PURE__*/React.createElement(Label, {
    size: 0
  }, "Function value"), /*#__PURE__*/React.createElement(TextArea, {
    rows: 4,
    ref: ref,
    onChange: handleChange,
    value: value || ''
  }), /*#__PURE__*/React.createElement(ExampleCode, {
    title: "Use example code",
    size: 1,
    onClick: handleFilterExample
  }, "Example: ".concat(EXAMPLE_FILTER_FUNCTION)), /*#__PURE__*/React.createElement(Grid, {
    columns: 2,
    gap: 3
  }, /*#__PURE__*/React.createElement(Button, {
    text: "Filter",
    onClick: handleFilter,
    disabled: isDisabled
  }), /*#__PURE__*/React.createElement(Button, {
    text: "Reset",
    mode: "ghost",
    onClick: handleReset,
    disabled: isDisabled
  }))));
});