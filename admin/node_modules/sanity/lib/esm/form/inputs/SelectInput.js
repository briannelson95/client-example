import _capitalize from "lodash/capitalize";
import { useId } from '@reach/auto-id';
import { isTitledListValue } from '@sanity/types';
import { Box, Card, Flex, Inline, Radio, Select, Stack, Text } from '@sanity/ui';
import React, { forwardRef, useCallback, useMemo } from 'react';
import { ChangeIndicator } from '../../components/changeIndicators';
import { PatchEvent, set, unset } from '../patch';

function toSelectItem(option) {
  return isTitledListValue(option) ? option : {
    title: _capitalize("".concat(option)),
    value: option
  };
}

const EMPTY_ITEM = {
  title: '',
  value: undefined
};
export const SelectInput = /*#__PURE__*/React.forwardRef(function SelectInput(props, forwardedRef) {
  var _schemaType$options2, _schemaType$options3;

  const {
    value,
    readOnly,
    validationError,
    schemaType,
    onChange,
    onFocus,
    path,
    changed,
    focused
  } = props;
  const items = useMemo(() => {
    var _schemaType$options;

    return (((_schemaType$options = schemaType.options) === null || _schemaType$options === void 0 ? void 0 : _schemaType$options.list) || []).map(toSelectItem);
  }, [(_schemaType$options2 = schemaType.options) === null || _schemaType$options2 === void 0 ? void 0 : _schemaType$options2.list]);
  const currentItem = items.find(item => item.value === value);
  const isRadio = schemaType.options && schemaType.options.layout === 'radio';
  const itemFromOptionValue = useCallback(optionValue => {
    const index = Number(optionValue);
    return items[index];
  }, [items]);
  const optionValueFromItem = useCallback(item => {
    return String(items.indexOf(item));
  }, [items]);
  const inputId = useId();
  const handleChange = React.useCallback(nextItem => {
    onChange(PatchEvent.from(typeof (nextItem === null || nextItem === void 0 ? void 0 : nextItem.value) === 'undefined' ? unset() : set(nextItem.value)));
  }, [onChange]);
  const handleSelectChange = useCallback(event => {
    const nextItem = itemFromOptionValue(event.currentTarget.value);

    if (!nextItem) {
      handleChange(EMPTY_ITEM);
      return;
    }

    handleChange(nextItem);
  }, [handleChange, itemFromOptionValue]);
  const content = isRadio ? /*#__PURE__*/React.createElement(RadioSelect, {
    inputId: inputId,
    items: items,
    value: currentItem,
    onChange: handleChange,
    direction: ((_schemaType$options3 = schemaType.options) === null || _schemaType$options3 === void 0 ? void 0 : _schemaType$options3.direction) || 'vertical',
    ref: forwardedRef,
    readOnly: readOnly,
    onFocus: onFocus,
    customValidity: validationError
  }) : /*#__PURE__*/React.createElement(Select, {
    onChange: handleSelectChange,
    onFocus: onFocus,
    id: inputId,
    ref: forwardedRef,
    readOnly: readOnly,
    customValidity: validationError,
    value: optionValueFromItem(currentItem)
  }, [EMPTY_ITEM, ...items].map((item, i) => /*#__PURE__*/React.createElement("option", {
    key: "".concat(i - 1),
    value: i - 1
  }, item.title)));
  return /*#__PURE__*/React.createElement(ChangeIndicator, {
    path: path,
    isChanged: changed,
    hasFocus: !!focused
  }, content);
});
const RadioSelect = /*#__PURE__*/forwardRef(function RadioSelect(props, ref) {
  const {
    items,
    value,
    onChange,
    onFocus,
    readOnly,
    customValidity,
    direction,
    inputId
  } = props;
  const Layout = direction === 'horizontal' ? Inline : Stack;
  return /*#__PURE__*/React.createElement(Card, {
    border: true,
    padding: 3,
    radius: 1
  }, /*#__PURE__*/React.createElement(Layout, {
    space: 3,
    role: "group"
  }, items.map((item, index) => /*#__PURE__*/React.createElement(RadioSelectItem, {
    customValidity: customValidity,
    inputId: inputId,
    item: item,
    key: index,
    onChange: onChange,
    onFocus: onFocus,
    readOnly: readOnly,
    ref: index === 0 ? ref : null,
    value: value
  }))));
});
const RadioSelectItem = /*#__PURE__*/forwardRef(function RadioSelectItem(props, ref) {
  const {
    customValidity,
    inputId,
    item,
    onChange,
    onFocus,
    readOnly,
    value
  } = props;
  const handleChange = useCallback(() => {
    onChange(item);
  }, [item, onChange]);
  return /*#__PURE__*/React.createElement(Flex, {
    as: "label",
    align: "center"
  }, /*#__PURE__*/React.createElement(Radio, {
    ref: ref,
    checked: value === item,
    onChange: handleChange,
    onFocus: onFocus,
    readOnly: readOnly,
    customValidity: customValidity,
    name: inputId
  }), /*#__PURE__*/React.createElement(Box, {
    marginLeft: 2
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1,
    weight: "semibold"
  }, item.title)));
});