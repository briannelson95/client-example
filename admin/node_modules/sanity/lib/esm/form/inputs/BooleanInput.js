var _templateObject, _templateObject2;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/* eslint-disable import/no-unresolved */
import React, { useCallback } from 'react';
import styled from 'styled-components';
import { Box, Card, Checkbox, Flex, Switch } from '@sanity/ui';
import { set } from '../patch';
import { ChangeIndicator } from '../../components/changeIndicators';
import { FormFieldHeaderText } from '../components/formField/FormFieldHeaderText';
import { FormFieldStatus } from '../components/formField/FormFieldStatus';
const CenterAlignedBox = styled(Box)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  align-self: center;\n"])));
const ZeroLineHeightBox = styled(Box)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  line-height: 0;\n"])));
export const BooleanInput = /*#__PURE__*/React.forwardRef(function BooleanInput(props, ref) {
  var _schemaType$options;

  const {
    id,
    value,
    schemaType,
    readOnly,
    onBlur,
    onFocus,
    onChange,
    path,
    focused,
    changed
  } = props;
  const layout = ((_schemaType$options = schemaType.options) === null || _schemaType$options === void 0 ? void 0 : _schemaType$options.layout) || 'switch';
  const handleChange = useCallback(event => {
    onChange(set(event.currentTarget.checked));
  }, [onChange]);
  const indeterminate = typeof value !== 'boolean';
  const checked = value || false;
  const LayoutSpecificInput = layout === 'checkbox' ? Checkbox : Switch;
  return /*#__PURE__*/React.createElement(ChangeIndicator, {
    path: path,
    isChanged: changed,
    hasFocus: !!focused
  }, /*#__PURE__*/React.createElement(Card, {
    border: true,
    radius: 1
  }, /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(ZeroLineHeightBox, {
    padding: 3
  }, /*#__PURE__*/React.createElement(LayoutSpecificInput, {
    id: id,
    ref: ref,
    label: schemaType.title,
    readOnly: Boolean(readOnly),
    onBlur: onBlur,
    onChange: handleChange,
    onFocus: onFocus,
    indeterminate: indeterminate,
    checked: checked,
    style: {
      margin: -4
    },
    disabled: readOnly
  })), /*#__PURE__*/React.createElement(Box, {
    flex: 1,
    paddingY: 3
  }, /*#__PURE__*/React.createElement(FormFieldHeaderText, {
    description: schemaType.description,
    inputId: id // validation={validation}
    ,
    title: schemaType.title
  })), /*#__PURE__*/React.createElement(CenterAlignedBox, {
    paddingX: 3,
    paddingY: 1
  }, /*#__PURE__*/React.createElement(FormFieldStatus, {
    maxAvatars: 1,
    position: "top"
  })))));
});