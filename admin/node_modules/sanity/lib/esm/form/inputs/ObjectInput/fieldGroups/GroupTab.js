function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef } from 'react';
import { Tab } from '@sanity/ui';
export const GroupTab = /*#__PURE__*/forwardRef(function GroupTab(props, ref) {
  // Separate props for resolving conditional hidden groups
  const {
    onClick
  } = props; // Here goes the content of our component

  const handleClick = React.useCallback(() => {
    onClick === null || onClick === void 0 ? void 0 : onClick(props.name);
  }, [props.name, onClick]);
  return /*#__PURE__*/React.createElement(Tab, _extends({
    "data-testid": "group-tab-".concat(name),
    size: 1,
    id: "".concat(props.name, "-tab"),
    label: props.title,
    ref: ref
  }, props, {
    onClick: handleClick
  }));
});
export const GroupOption = props => {
  const {
    name,
    title,
    ...rest
  } = props;
  const {
    selected
  } = props;
  return /*#__PURE__*/React.createElement("option", {
    title: title,
    value: name,
    id: "".concat(name, "-tab"),
    "aria-controls": rest['aria-controls'],
    "data-testid": "group-select-".concat(name),
    "aria-selected": selected ? 'true' : 'false'
  }, title || name);
};