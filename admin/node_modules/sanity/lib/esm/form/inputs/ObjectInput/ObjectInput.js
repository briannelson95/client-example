import React, { memo, useCallback, useMemo } from 'react';
import { Grid, Stack } from '@sanity/ui';
import { ObjectMembers } from '../../members';
import { UnknownFields } from './UnknownFields';
import { FieldGroupTabsWrapper } from './ObjectInput.styled';
import { FieldGroupTabs } from './fieldGroups/FieldGroupTabs';
export const ObjectInput = /*#__PURE__*/memo(function ObjectInput(props) {
  const {
    schemaType,
    groups,
    members,
    onChange,
    renderInput,
    renderField,
    renderItem,
    renderPreview,
    level,
    value,
    id,
    path,
    onFieldGroupSelect
  } = props;
  const {
    columns
  } = schemaType.options || {};
  const renderedUnknownFields = useMemo(() => {
    if (!schemaType.fields) {
      return null;
    }

    const knownFieldNames = schemaType.fields.map(field => field.name);
    const unknownFields = Object.keys(value || {}).filter(key => !key.startsWith('_') && !knownFieldNames.includes(key));

    if (unknownFields.length === 0) {
      return null;
    }

    return /*#__PURE__*/React.createElement(UnknownFields, {
      fieldNames: unknownFields,
      value: value,
      onChange: onChange
    });
  }, [onChange, schemaType.fields, value]);
  const renderObjectMembers = useCallback(() => /*#__PURE__*/React.createElement(ObjectMembers, {
    members: members,
    renderInput: renderInput,
    renderField: renderField,
    renderItem: renderItem,
    renderPreview: renderPreview
  }), [members, renderField, renderInput, renderItem, renderPreview]);

  if (members.length === 0) {
    return null;
  }

  return /*#__PURE__*/React.createElement(Stack, {
    space: 5
  }, groups.length > 0 ? /*#__PURE__*/React.createElement(FieldGroupTabsWrapper, {
    $level: level,
    "data-testid": "field-groups"
  }, /*#__PURE__*/React.createElement(FieldGroupTabs, {
    inputId: id,
    onClick: onFieldGroupSelect,
    groups: groups,
    shouldAutoFocus: path.length === 0
  })) : null, columns ? /*#__PURE__*/React.createElement(Grid, {
    columns: columns,
    gap: 4,
    marginTop: 1
  }, renderObjectMembers()) : renderObjectMembers(), renderedUnknownFields);
});