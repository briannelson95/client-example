import React from 'react';
import { TextInput } from '@sanity/ui';
import { useId } from '@reach/auto-id';
import { set, unset } from '../patch';
import { getValidationRule } from '../utils/getValidationRule';
import { ChangeIndicator } from '../../components/changeIndicators';
export const NumberInput = /*#__PURE__*/React.forwardRef(function NumberInput(props, forwardedRef) {
  const {
    changed,
    focused,
    onChange,
    onFocus,
    path,
    readOnly,
    schemaType,
    validationError,
    value = ''
  } = props;
  const id = useId(); // Show numpad on mobile if only positive numbers is preferred

  const minRule = getValidationRule(schemaType, 'min');
  const onlyPositiveNumber = ((minRule === null || minRule === void 0 ? void 0 : minRule.constraint) || 0) >= 0;
  const handleChange = React.useCallback(event => {
    const nextValue = event.currentTarget.value;
    onChange(nextValue === '' ? unset() : set(Number(nextValue)));
  }, [onChange]);
  return /*#__PURE__*/React.createElement(ChangeIndicator, {
    path: path,
    isChanged: changed,
    hasFocus: !!focused
  }, /*#__PURE__*/React.createElement(TextInput, {
    type: "number",
    step: "any",
    inputMode: onlyPositiveNumber ? 'numeric' : 'text',
    id: id,
    customValidity: validationError,
    value: value,
    readOnly: Boolean(readOnly),
    placeholder: schemaType.placeholder,
    onChange: handleChange,
    onFocus: onFocus,
    ref: forwardedRef,
    pattern: onlyPositiveNumber ? '[d]*' : undefined
  }));
});