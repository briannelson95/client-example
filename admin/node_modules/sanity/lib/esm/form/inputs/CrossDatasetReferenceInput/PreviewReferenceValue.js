import React from 'react';
import { Stack, Text, TextSkeleton } from '@sanity/ui';
import { CrossDatasetReferencePreview } from './CrossDatasetReferencePreview';
export function PreviewReferenceValue(props) {
  var _referenceInfo$result, _referenceInfo$result2;

  const {
    value,
    type,
    showStudioUrlIcon,
    hasStudioUrl,
    referenceInfo
  } = props;

  if (referenceInfo.isLoading || referenceInfo.error) {
    return /*#__PURE__*/React.createElement(Stack, {
      space: 2,
      padding: 1
    }, /*#__PURE__*/React.createElement(TextSkeleton, {
      style: {
        maxWidth: 320
      },
      radius: 1,
      animated: !referenceInfo.error
    }), /*#__PURE__*/React.createElement(TextSkeleton, {
      style: {
        maxWidth: 200
      },
      radius: 1,
      size: 1,
      animated: !referenceInfo.error
    }));
  }

  const showTypeLabel = type.to.length > 1;
  const refTypeName = (_referenceInfo$result = referenceInfo.result) === null || _referenceInfo$result === void 0 ? void 0 : _referenceInfo$result.type;
  const refType = type.to.find(toType => toType.type === refTypeName);

  if ((_referenceInfo$result2 = referenceInfo.result.availability) !== null && _referenceInfo$result2 !== void 0 && _referenceInfo$result2.available && !refType) {
    return /*#__PURE__*/React.createElement(Stack, {
      space: 2,
      padding: 2
    }, /*#__PURE__*/React.createElement(Text, {
      as: "p"
    }, "The referenced document is of invalid type: (", refTypeName || 'unknown', ")", /*#__PURE__*/React.createElement("pre", null, JSON.stringify(value, null, 2))));
  }

  return /*#__PURE__*/React.createElement(CrossDatasetReferencePreview, {
    availability: referenceInfo.result.availability,
    hasStudioUrl: hasStudioUrl,
    showStudioUrlIcon: showStudioUrlIcon,
    preview: referenceInfo.result.preview,
    refType: refType,
    projectId: type.projectId,
    dataset: type.dataset,
    id: value._ref,
    showTypeLabel: showTypeLabel
  });
}