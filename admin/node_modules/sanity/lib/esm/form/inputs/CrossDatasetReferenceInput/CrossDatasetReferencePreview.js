import React, { createElement, useMemo } from 'react';
import { Box, Flex, Inline, Label, Text, Tooltip } from '@sanity/ui';
import { AccessDeniedIcon, HelpCircleIcon, LaunchIcon } from '@sanity/icons';
import imageUrlBuilder from '@sanity/image-url';
import { DefaultPreview } from '../../../components/previews';
import { TextWithTone } from '../../../components/TextWithTone';

function UnavailableMessage(props) {
  const Icon = props.icon;
  return /*#__PURE__*/React.createElement(Flex, {
    padding: 3
  }, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
    size: 1
  }, /*#__PURE__*/React.createElement(Icon, null))), /*#__PURE__*/React.createElement(Box, {
    flex: 1,
    marginLeft: 3
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1,
    weight: "semibold"
  }, props.title), /*#__PURE__*/React.createElement(Box, {
    marginTop: 3
  }, /*#__PURE__*/React.createElement(Text, {
    as: "p",
    muted: true,
    size: 1
  }, props.children))));
}
/**
 * Used to preview a referenced type
 * Takes the reference type as props
 */


export function CrossDatasetReferencePreview(props) {
  var _preview$published, _preview$published2, _preview$published3;

  const {
    refType,
    showStudioUrlIcon,
    hasStudioUrl,
    showTypeLabel,
    availability,
    preview,
    id,
    dataset,
    projectId
  } = props;
  const notFound = (availability === null || availability === void 0 ? void 0 : availability.reason) === 'NOT_FOUND';
  const insufficientPermissions = (availability === null || availability === void 0 ? void 0 : availability.reason) === 'PERMISSION_DENIED';
  const previewMedia = (_preview$published = preview.published) === null || _preview$published === void 0 ? void 0 : _preview$published.media;
  const media = useMemo(() => {
    if (previewMedia) {
      return function MediaPreview(_ref) {
        let {
          dimensions
        } = _ref;
        return /*#__PURE__*/React.isValidElement(previewMedia) ? previewMedia : /*#__PURE__*/React.createElement("img", {
          src: imageUrlBuilder({
            dataset,
            projectId
          }).image(previewMedia).withOptions(dimensions).url(),
          alt: "Image preview of referenced document",
          referrerPolicy: "strict-origin-when-cross-origin"
        });
      };
    }

    return refType !== null && refType !== void 0 && refType.icon ? /*#__PURE__*/createElement(refType.icon) : null;
  }, [previewMedia, dataset, projectId, refType === null || refType === void 0 ? void 0 : refType.icon]);
  return /*#__PURE__*/React.createElement(Flex, {
    align: "center",
    "data-testid": "preview"
  }, availability !== null && availability !== void 0 && availability.available ? /*#__PURE__*/React.createElement(Box, {
    flex: 1,
    paddingX: 2,
    paddingY: 1
  }, /*#__PURE__*/React.createElement(DefaultPreview, {
    title: (_preview$published2 = preview.published) === null || _preview$published2 === void 0 ? void 0 : _preview$published2.title,
    subtitle: (_preview$published3 = preview.published) === null || _preview$published3 === void 0 ? void 0 : _preview$published3.subtitle,
    media: media || false
  })) : /*#__PURE__*/React.createElement(Box, {
    flex: 1,
    padding: 2
  }, /*#__PURE__*/React.createElement(Flex, {
    align: "center",
    justify: "center"
  }, /*#__PURE__*/React.createElement(Box, {
    flex: 1,
    paddingY: 2
  }, /*#__PURE__*/React.createElement(Text, {
    muted: true
  }, "Document unavailable")))), /*#__PURE__*/React.createElement(Box, {
    paddingLeft: 3
  }, /*#__PURE__*/React.createElement(Inline, {
    space: 4
  }, refType && showTypeLabel && /*#__PURE__*/React.createElement(Label, {
    size: 1,
    muted: true
  }, refType.title || refType.type), (insufficientPermissions || notFound) && /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Tooltip, {
    portal: true,
    content: notFound ? /*#__PURE__*/React.createElement(UnavailableMessage, {
      title: "Not found",
      icon: HelpCircleIcon
    }, "The referenced document does not exist", /*#__PURE__*/React.createElement("br", null), "(id: ", /*#__PURE__*/React.createElement("code", null, id), ")") : /*#__PURE__*/React.createElement(UnavailableMessage, {
      title: "Insufficient permissions",
      icon: AccessDeniedIcon
    }, "The referenced document could not be accessed due to insufficient permissions")
  }, /*#__PURE__*/React.createElement(TextWithTone, {
    tone: "default"
  }, insufficientPermissions ? /*#__PURE__*/React.createElement(AccessDeniedIcon, null) : /*#__PURE__*/React.createElement(HelpCircleIcon, null)))), !(notFound || insufficientPermissions) && showStudioUrlIcon && /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Tooltip, {
    portal: true,
    content: /*#__PURE__*/React.createElement(Box, {
      padding: 2
    }, hasStudioUrl ? /*#__PURE__*/React.createElement(Text, {
      size: 1
    }, "This document opens in another Studio") : /*#__PURE__*/React.createElement(Text, {
      size: 1
    }, "This document cannot be opened (unable to resolve URL to Studio)"))
  }, /*#__PURE__*/React.createElement(TextWithTone, {
    size: 1,
    tone: "default",
    muted: !hasStudioUrl
  }, /*#__PURE__*/React.createElement(LaunchIcon, null)))))));
}