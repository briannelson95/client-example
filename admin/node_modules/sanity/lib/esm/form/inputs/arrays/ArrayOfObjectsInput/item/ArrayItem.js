/* eslint-disable camelcase */
import { isReferenceSchemaType } from '@sanity/types';
import { Box } from '@sanity/ui';
import React, { memo, useCallback, useRef } from 'react';
import { ChangeIndicator } from '../../../../../components/changeIndicators';
import { useScrollIntoViewOnFocusWithin } from '../../../../hooks/useScrollIntoViewOnFocusWithin';
import { useDidUpdate } from '../../../../hooks/useDidUpdate';
import { useChildPresence } from '../../../../studio/contexts/Presence';
import { RowItem } from './RowItem';
import { CellItem } from './CellItem';
// This renders the item / preview of unexpanded array items
export const ArrayItem = /*#__PURE__*/memo(function ArrayItem(props) {
  const {
    changed,
    value,
    insertableTypes,
    schemaType,
    index,
    open,
    path,
    onClick,
    layout,
    readOnly,
    presence = [],
    validation = [],
    focused,
    onRemove,
    onInsert,
    onFocus,
    children,
    renderPreview
  } = props;
  const innerElementRef = useRef(null); // this is here to make sure the item is visible if it's being edited behind a modal

  useScrollIntoViewOnFocusWithin(innerElementRef, open);
  useDidUpdate(focused, (hadFocus, hasFocus) => {
    if (!hadFocus && hasFocus && innerElementRef.current) {
      var _innerElementRef$curr;

      // Note: if editing an inline item, focus is handled by the item input itself and no ref is being set
      (_innerElementRef$curr = innerElementRef.current) === null || _innerElementRef$curr === void 0 ? void 0 : _innerElementRef$curr.focus();
    }
  });
  const childPresence = useChildPresence(path);
  const handleRemove = useCallback(() => onRemove(value), [onRemove, value]);
  const options = schemaType.options || {};
  const isSortable = !readOnly && options.sortable !== false;
  const isGrid = layout === 'grid';
  const ItemComponent = isGrid ? CellItem : RowItem;
  const isReference = schemaType && isReferenceSchemaType(schemaType);
  const item = /*#__PURE__*/React.createElement(ItemComponent, {
    "aria-selected": open,
    index: index,
    onFocus: onFocus,
    value: value,
    readOnly: readOnly,
    type: schemaType,
    insertableTypes: insertableTypes,
    presence: open ? presence : childPresence,
    validation: validation,
    isSortable: isSortable,
    onInsert: onInsert,
    onClick: onClick,
    onRemove: handleRemove,
    ref: innerElementRef,
    renderPreview: renderPreview
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ChangeIndicator, {
    path: path,
    disabled: open && !isReference,
    isChanged: changed,
    hasFocus: !!focused
  }, isGrid ? // grid should be rendered without a margin
  item : /*#__PURE__*/React.createElement(Box, {
    marginX: 1
  }, item)), children);
});