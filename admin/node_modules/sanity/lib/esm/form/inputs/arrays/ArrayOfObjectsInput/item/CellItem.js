var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { CopyIcon as DuplicateIcon, EllipsisVerticalIcon, TrashIcon, WarningOutlineIcon } from '@sanity/icons';
import React, { useCallback, useMemo } from 'react';
import { Badge, Box, Button, Card, Flex, Menu, MenuButton, MenuItem, Text, Tooltip } from '@sanity/ui';
import styled from 'styled-components';
import { useId } from '@reach/auto-id';
import { FormFieldValidationStatus } from '../../../../components/formField';
import { FieldPresence } from '../../../../../presence';
import { DragHandle } from '../../common/DragHandle';
import { randomKey } from '../../common/randomKey';
import { createProtoValue } from '../ArrayInput';
import { InsertMenu } from '../InsertMenu';
import { EMPTY_ARRAY } from '../../../../utils/empty';
import { ItemWithMissingType } from './ItemWithMissingType';
const dragHandle = /*#__PURE__*/React.createElement(DragHandle, {
  grid: true,
  padding: 2,
  mode: "ghost"
});
const DragHandleCard = styled(Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: absolute;\n  top: 0;\n  left: 0;\n"])));
const PresenceFlex = styled(Flex)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: absolute;\n  top: 0;\n  right: 0;\n  height: 35px;\n"])));
const Root = styled(Card)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  transition: border-color 250ms;\n  position: relative;\n\n  @media (hover: hover) {\n    ", " {\n      opacity: 0;\n    }\n\n    &:hover,\n    &:focus-within {\n      ", " {\n        opacity: 1;\n      }\n    }\n  }\n\n  &[aria-selected='true'] {\n    box-shadow: 0 0 0 2px var(--card-focus-ring-color);\n  }\n"])), DragHandleCard, DragHandleCard);
const FooterFlex = styled(Flex)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  min-height: 35px;\n"])));
const PreviewCard = styled(Card)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  border-top-right-radius: inherit;\n  border-top-left-radius: inherit;\n  height: 100%;\n\n  @media (hover: hover) {\n    &:hover {\n      filter: brightness(95%);\n    }\n  }\n\n  &:focus:focus-visible {\n    box-shadow: 0 0 0 2px var(--card-focus-ring-color);\n  }\n"])));
const MissingTypeBox = styled(Box)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  padding-bottom: 100%;\n"])));
const StyledItemWithMissingType = styled(ItemWithMissingType)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n"])));
export const CellItem = /*#__PURE__*/React.forwardRef(function ItemCell(props, ref) {
  const focusRef = React.useRef(null);
  const {
    isSortable,
    value,
    onClick,
    onFocus,
    onInsert,
    insertableTypes,
    type,
    readOnly,
    presence,
    onRemove,
    renderPreview,
    validation = EMPTY_ARRAY,
    ...rest
  } = props;
  const hasError = validation.filter(item => item.level === 'error').length > 0;
  const hasWarning = validation.filter(item => item.level === 'warning').length > 0;
  const tone = useMemo(() => {
    if (!value._key) {
      return 'caution';
    }

    if (hasError) {
      return 'critical';
    }

    if (hasWarning) {
      return 'caution';
    }

    return undefined;
  }, [hasError, hasWarning, value._key]);
  const handleDuplicate = useCallback(() => {
    onInsert === null || onInsert === void 0 ? void 0 : onInsert({
      items: [{ ...value,
        _key: randomKey()
      }],
      position: 'after'
    });
  }, [onInsert, value]);
  const handleInsert = useCallback((pos, insertType) => {
    onInsert === null || onInsert === void 0 ? void 0 : onInsert({
      items: [createProtoValue(insertType)],
      position: pos
    });
  }, [onInsert, value._key]);
  const id = useId();
  return /*#__PURE__*/React.createElement(Root, _extends({}, rest, {
    radius: 2,
    ref: ref,
    border: true,
    tone: tone
  }), type ? /*#__PURE__*/React.createElement(PreviewCard, {
    tone: "inherit",
    "data-ui": "PreviewCard",
    forwardedAs: 'button',
    type: "button",
    overflow: "auto",
    flex: 1,
    tabIndex: 0,
    onClick: onClick,
    ref: focusRef,
    onFocus: onFocus,
    __unstable_focusRing: true
  }, renderPreview({
    layout: 'media',
    schemaType: type,
    value,
    withBorder: false,
    withRadius: false
  })) : /*#__PURE__*/React.createElement(MissingTypeBox, {
    flex: 1
  }, /*#__PURE__*/React.createElement(StyledItemWithMissingType, {
    value: value,
    onFocus: onFocus,
    vertical: true
  })), /*#__PURE__*/React.createElement(DragHandleCard, {
    margin: 1,
    radius: 2,
    display: "flex",
    tone: "inherit",
    "data-ui": "DragHandleCard"
  }, !readOnly && isSortable && dragHandle), /*#__PURE__*/React.createElement(PresenceFlex, {
    align: "center",
    marginX: 1
  }, !readOnly && /*#__PURE__*/React.createElement(FieldPresence, {
    presence: presence,
    maxAvatars: 1
  })), /*#__PURE__*/React.createElement(FooterFlex, {
    align: "center",
    paddingX: 1,
    sizing: "border",
    justify: "space-between"
  }, /*#__PURE__*/React.createElement(Flex, null, (value === null || value === void 0 ? void 0 : value._key) && validation.length > 0 && /*#__PURE__*/React.createElement(Box, {
    marginLeft: 1,
    paddingX: 1,
    paddingY: 3
  }, /*#__PURE__*/React.createElement(FormFieldValidationStatus, {
    validation: validation,
    __unstable_showSummary: !(value !== null && value !== void 0 && value._ref),
    placement: "bottom",
    portal: true
  })), !value._key && /*#__PURE__*/React.createElement(Tooltip, {
    portal: true,
    content: /*#__PURE__*/React.createElement(Card, {
      padding: 2
    }, /*#__PURE__*/React.createElement(Text, {
      size: 1
    }, "This item is missing a required ", /*#__PURE__*/React.createElement("code", null, "_key"), " property."))
  }, /*#__PURE__*/React.createElement(Badge, {
    mode: "outline",
    tone: "caution",
    margin: 1,
    padding: 2,
    fontSize: 1
  }, /*#__PURE__*/React.createElement(WarningOutlineIcon, null), " key"))), !readOnly && /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(MenuButton, {
    button: /*#__PURE__*/React.createElement(Button, {
      padding: 2,
      mode: "bleed",
      icon: EllipsisVerticalIcon
    }),
    id: "".concat(id, "-menuButton"),
    portal: true,
    menu: /*#__PURE__*/React.createElement(Menu, null, /*#__PURE__*/React.createElement(MenuItem, {
      text: "Remove",
      tone: "critical",
      icon: TrashIcon,
      onClick: onRemove
    }), /*#__PURE__*/React.createElement(MenuItem, {
      text: "Duplicate",
      icon: DuplicateIcon,
      onClick: handleDuplicate
    }), /*#__PURE__*/React.createElement(InsertMenu, {
      types: insertableTypes,
      onInsert: handleInsert
    }))
  }))));
});