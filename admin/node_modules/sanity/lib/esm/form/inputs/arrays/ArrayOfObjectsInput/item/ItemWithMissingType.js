var _templateObject;

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { Box, Card, Code, Flex, Popover, Stack, Text, useClickOutside } from '@sanity/ui';
import React, { useCallback } from 'react';
import { BulbOutlineIcon, UnknownIcon } from '@sanity/icons';
import { resolveTypeName } from '@sanity/util/content';
import styled from 'styled-components';
const PopoverCard = styled(Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  max-width: ", "px;\n"])), _ref => {
  let {
    theme
  } = _ref;
  return theme.sanity.container[1];
});
export function ItemWithMissingType(props) {
  const {
    value,
    onFocus,
    vertical,
    ...rest
  } = props;
  const [showDetails, setShowDetails] = React.useState(false);
  const [popoverRef, setPopoverRef] = React.useState(null);
  useClickOutside(() => setShowDetails(false), [popoverRef]);
  const handleKeyDown = React.useCallback(e => {
    if (e.key === 'Escape' || e.key === 'Tab') {
      setShowDetails(false);
    }
  }, []);
  const handleShowDetails = useCallback(() => {
    setShowDetails(v => !v);
  }, []);
  const typeName = resolveTypeName(value);
  return /*#__PURE__*/React.createElement(Popover, {
    open: showDetails,
    ref: setPopoverRef,
    onKeyDown: handleKeyDown,
    portal: true,
    constrainSize: true,
    tone: "default",
    content: /*#__PURE__*/React.createElement(PopoverCard, {
      margin: 1,
      padding: 3,
      onKeyDown: handleKeyDown,
      tabIndex: 0,
      overflow: "auto"
    }, /*#__PURE__*/React.createElement(Stack, {
      space: 4
    }, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
      weight: "semibold"
    }, "Why is this happening?")), /*#__PURE__*/React.createElement(Text, {
      size: 1
    }, "The current schema does not declare items of type ", /*#__PURE__*/React.createElement("code", null, typeName), " as valid for this list. This could mean that the type has been removed as a valid item type, or that someone else has added it to their own local schema that is not yet deployed."), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
      size: 1
    }, /*#__PURE__*/React.createElement(BulbOutlineIcon, null), " You can still move or delete this item, but it cannot be edited since the schema definition for its type is nowhere to be found.")), /*#__PURE__*/React.createElement(Stack, {
      space: 2
    }, /*#__PURE__*/React.createElement(Text, {
      size: 1,
      weight: "semibold"
    }, "JSON representation of this item:"), /*#__PURE__*/React.createElement(Card, {
      padding: 2,
      overflow: "auto",
      border: true
    }, /*#__PURE__*/React.createElement(Code, {
      size: 1,
      as: "pre"
    }, JSON.stringify(value, null, 2))))))
  }, /*#__PURE__*/React.createElement(Card, _extends({
    as: "button",
    type: "button",
    radius: 2,
    tone: "inherit",
    padding: 2,
    onFocus: onFocus,
    onClick: handleShowDetails,
    onKeyDown: handleKeyDown
  }, rest), vertical && /*#__PURE__*/React.createElement(Stack, {
    space: 4
  }, /*#__PURE__*/React.createElement(Text, {
    align: "center"
  }, /*#__PURE__*/React.createElement(UnknownIcon, null)), /*#__PURE__*/React.createElement(Text, {
    size: 1,
    align: "center"
  }, "Item type ", /*#__PURE__*/React.createElement("code", null, typeName), " not defined for this list")), !vertical && /*#__PURE__*/React.createElement(Flex, {
    align: "center"
  }, /*#__PURE__*/React.createElement(Box, {
    marginRight: 3
  }, /*#__PURE__*/React.createElement(Text, null, /*#__PURE__*/React.createElement(UnknownIcon, null))), /*#__PURE__*/React.createElement(Box, {
    flex: 1
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1,
    textOverflow: "ellipsis"
  }, "Item type ", /*#__PURE__*/React.createElement("code", null, typeName), " not defined for this list")))));
}