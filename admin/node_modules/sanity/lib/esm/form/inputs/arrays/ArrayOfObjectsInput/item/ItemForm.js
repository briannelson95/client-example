function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable camelcase */
import { isReferenceSchemaType } from '@sanity/types';
import React, { forwardRef, useMemo } from 'react';
export const ItemForm = /*#__PURE__*/forwardRef(function ItemForm(props, ref) {
  const {
    schemaType,
    value,
    validation,
    focusPath,
    ReferenceItemComponent,
    insertableTypes,
    isSortable,
    filterField,
    presence,
    onChange,
    onInsert,
    changed,
    onFocus,
    onBlur,
    readOnly
  } = props;
  const isReference = isReferenceSchemaType(schemaType);
  const Input = useMemo(() => isReference ? function Input_(givenProps) {
    return /*#__PURE__*/React.createElement(ReferenceItemComponent, _extends({}, givenProps, {
      insertableTypes: insertableTypes,
      onInsert: onInsert,
      isSortable: isSortable,
      onChange: onChange
    }));
  } : undefined, [ReferenceItemComponent, insertableTypes, isReference, isSortable, onInsert, onChange]);
  const path = useMemo(() => [{
    _key: value === null || value === void 0 ? void 0 : value._key
  }], [value === null || value === void 0 ? void 0 : value._key]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, "TODO") // <FormBuilderInput
  //   type={type}
  //   level={0}
  //   value={value}
  //   onChange={onChange}
  //   onFocus={onFocus}
  //   onBlur={onBlur}
  //   inputComponent={Input}
  //   changed={changed}
  //   focusPath={focusPath}
  //   readOnly={readOnly || type.readOnly || false}
  //   validation={validation}
  //   path={path}
  //   // filterField={filterField}
  //   presence={presence}
  //   ref={ref}
  // />
  ;
});