var _templateObject;

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { Card, Grid } from '@sanity/ui';
import React from 'react';
import styled from 'styled-components';
import { MOVING_ITEM_CLASS_NAME, sortableGrid, sortableItem, sortableList } from './sortable';
const ListItem = styled(Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  &.", " {\n    z-index: 10000;\n    border-radius: ", "px;\n    box-shadow: 0 0 0 0, 0 8px 17px 2px var(--card-shadow-umbra-color),\n      0 3px 14px 2px var(--card-shadow-penumbra-color),\n      0 5px 5px -3px var(--card-shadow-ambient-color);\n\n    // Used inside CellItem\n    [data-ui='DragHandleCard'] {\n      opacity: 1;\n    }\n\n    [data-ui='DragHandleButton'] {\n      background-color: ", ";\n      color: ", ";\n      [data-ui='Text'] {\n        color: inherit;\n      }\n    }\n  }\n"])), MOVING_ITEM_CLASS_NAME, _ref => {
  let {
    theme
  } = _ref;
  return theme.sanity.radius[2];
}, _ref2 => {
  let {
    theme
  } = _ref2;
  return theme.sanity.color.button.bleed.primary.pressed.bg;
}, _ref3 => {
  let {
    theme
  } = _ref3;
  return theme.sanity.color.button.bleed.primary.pressed.fg;
});
const GridItem = ListItem;
const SortableList = sortableList(Grid);
const SortableListItem = sortableItem(ListItem);
const SortableGrid = sortableGrid(Grid);
const SortableGridItem = SortableListItem;
export function List(props) {
  const {
    isSortable,
    isGrid,
    onSortEnd,
    ...rest
  } = props;

  if (isGrid) {
    return isSortable ? /*#__PURE__*/React.createElement(SortableGrid, _extends({
      columns: [2, 3, 4],
      gap: 3,
      onSortEnd: onSortEnd
    }, rest)) : /*#__PURE__*/React.createElement(Grid, _extends({
      columns: [2, 3, 4],
      gap: 3
    }, rest));
  }

  return isSortable ? /*#__PURE__*/React.createElement(SortableList, _extends({
    gap: 1,
    onSortEnd: onSortEnd
  }, rest)) : /*#__PURE__*/React.createElement(Grid, _extends({
    gap: 1
  }, rest));
}
export function Item(props) {
  const {
    isSortable,
    isGrid,
    ...rest
  } = props;

  if (isGrid) {
    const ItemComponent = isSortable ? SortableGridItem : GridItem;
    return /*#__PURE__*/React.createElement(ItemComponent, rest);
  }

  const ItemComponent = isSortable ? SortableListItem : ListItem;
  return /*#__PURE__*/React.createElement(ItemComponent, rest);
}