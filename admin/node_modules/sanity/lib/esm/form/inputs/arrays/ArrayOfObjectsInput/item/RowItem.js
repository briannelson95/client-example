function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable no-nested-ternary */
import React, { useCallback } from 'react';
import { Badge, Box, Button, Card, Flex, Menu, MenuButton, MenuItem, Text, Tooltip } from '@sanity/ui';
import { CopyIcon as DuplicateIcon, EllipsisVerticalIcon, TrashIcon } from '@sanity/icons';
import { useId } from '@reach/auto-id';
import { FormFieldValidationStatus } from '../../../../components/formField';
import { FieldPresence } from '../../../../../presence';
import { DragHandle } from '../../common/DragHandle';
import { randomKey } from '../../common/randomKey';
import { createProtoValue } from '../ArrayInput';
import { InsertMenu } from '../InsertMenu';
import { EMPTY_ARRAY } from '../../../../utils/empty';
import { ItemWithMissingType } from './ItemWithMissingType';
import { RowWrapper } from './components/RowWrapper';
const dragHandle = /*#__PURE__*/React.createElement(DragHandle, {
  paddingX: 1,
  paddingY: 3
});
const MENU_POPOVER_PROPS = {
  portal: true,
  tone: 'default'
};
export const RowItem = /*#__PURE__*/React.forwardRef(function RegularItem(props, ref) {
  var _type$options;

  const focusRef = React.useRef(null);
  const {
    isSortable,
    value,
    onClick,
    onFocus,
    type,
    readOnly,
    presence,
    onInsert,
    insertableTypes,
    onRemove,
    renderPreview,
    validation = EMPTY_ARRAY,
    ...rest
  } = props;
  const hasErrors = validation.some(v => v.level === 'error');
  const hasWarnings = validation.some(v => v.level === 'warning');
  const handleDuplicate = useCallback(() => {
    onInsert({
      items: [{ ...value,
        _key: randomKey()
      }],
      position: 'after'
    });
  }, [onInsert, value]);
  const handleInsert = useCallback((pos, insertType) => {
    onInsert({
      items: [{ ...createProtoValue(insertType),
        _key: randomKey()
      }],
      position: pos
    });
  }, [onInsert]);
  const id = useId();
  return /*#__PURE__*/React.createElement(RowWrapper, _extends({}, rest, {
    ref: ref,
    radius: 2,
    padding: 1,
    tone: readOnly ? 'transparent' : hasErrors ? 'critical' : hasWarnings ? 'caution' : 'default'
  }), /*#__PURE__*/React.createElement(Flex, {
    align: "center"
  }, isSortable && /*#__PURE__*/React.createElement(Card, {
    className: "dragHandle",
    tone: "inherit",
    marginRight: 1
  }, dragHandle), type ? /*#__PURE__*/React.createElement(Card, {
    as: "button",
    type: "button",
    tone: "inherit",
    radius: 2,
    padding: 1,
    flex: 1,
    onClick: onClick,
    ref: focusRef,
    onFocus: onFocus,
    __unstable_focusRing: true
  }, renderPreview({
    layout: type.options && 'layout' in type.options && ((_type$options = type.options) === null || _type$options === void 0 ? void 0 : _type$options.layout) === 'grid' ? 'media' : 'default',
    schemaType: type,
    value
  })) : /*#__PURE__*/React.createElement(Box, {
    flex: 1
  }, /*#__PURE__*/React.createElement(ItemWithMissingType, {
    value: value,
    onFocus: onFocus
  })), /*#__PURE__*/React.createElement(Flex, {
    align: "center"
  }, !readOnly && presence.length > 0 && /*#__PURE__*/React.createElement(Box, {
    marginLeft: 1
  }, /*#__PURE__*/React.createElement(FieldPresence, {
    presence: presence,
    maxAvatars: 1
  })), validation.length > 0 && /*#__PURE__*/React.createElement(Box, {
    marginLeft: 1,
    paddingX: 1,
    paddingY: 3
  }, /*#__PURE__*/React.createElement(FormFieldValidationStatus, {
    __unstable_showSummary: !(value !== null && value !== void 0 && value._ref)
  })), !readOnly && /*#__PURE__*/React.createElement(MenuButton, {
    button: /*#__PURE__*/React.createElement(Button, {
      padding: 2,
      mode: "bleed",
      icon: EllipsisVerticalIcon
    }),
    id: "".concat(id, "-menuButton"),
    menu: /*#__PURE__*/React.createElement(Menu, null, /*#__PURE__*/React.createElement(MenuItem, {
      text: "Remove",
      tone: "critical",
      icon: TrashIcon,
      onClick: onRemove
    }), /*#__PURE__*/React.createElement(MenuItem, {
      text: "Duplicate",
      icon: DuplicateIcon,
      onClick: handleDuplicate
    }), /*#__PURE__*/React.createElement(InsertMenu, {
      types: insertableTypes,
      onInsert: handleInsert
    })),
    placement: "right",
    popover: MENU_POPOVER_PROPS
  }), !value._key && /*#__PURE__*/React.createElement(Box, {
    marginLeft: 1
  }, /*#__PURE__*/React.createElement(Tooltip, {
    content: /*#__PURE__*/React.createElement(Box, {
      padding: 2
    }, /*#__PURE__*/React.createElement(Text, {
      muted: true,
      size: 1
    }, "This item is missing the required ", /*#__PURE__*/React.createElement("code", null, "_key"), " property.")),
    placement: "top"
  }, /*#__PURE__*/React.createElement(Badge, {
    mode: "outline",
    tone: "caution"
  }, "Missing key"))))));
});