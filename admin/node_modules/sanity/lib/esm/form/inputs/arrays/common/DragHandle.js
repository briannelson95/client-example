var _templateObject;

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import styled from 'styled-components';
import { Button } from '@sanity/ui';
import React from 'react';
import { DragHandleIcon } from '@sanity/icons';
import { DRAG_HANDLE_ATTRIBUTE, sortableHandle } from './sortable';
const DragHandleButton = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  cursor: ", ";\n"])), props => props.grid ? 'move' : 'ns-resize');
const DRAG_HANDLE_PROPS = {
  [DRAG_HANDLE_ATTRIBUTE]: true
};
export const DragHandle = sortableHandle(function DragHandle(props) {
  return /*#__PURE__*/React.createElement(DragHandleButton, _extends({
    icon: DragHandleIcon,
    mode: "bleed",
    tabIndex: 0,
    "data-ui": "DragHandleButton"
  }, props, DRAG_HANDLE_PROPS));
});