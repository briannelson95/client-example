/* eslint-disable react/no-unused-prop-types */
import { isReferenceSchemaType } from '@sanity/types';
import { AddIcon } from '@sanity/icons';
import React, { useMemo } from 'react';
import { Box, Button, Grid, Menu, MenuButton, MenuItem, Tooltip, Text } from '@sanity/ui';
import { useId } from '@reach/auto-id';
export function ArrayOfPrimitivesFunctions(props) {
  const {
    type,
    readOnly,
    children,
    onCreateValue,
    onAppendItem
  } = props;
  const menuButtonId = useId();
  const insertItem = React.useCallback(itemType => {
    onAppendItem(onCreateValue(itemType));
  }, [onCreateValue, onAppendItem]);
  const handleAddBtnClick = React.useCallback(() => {
    insertItem(type.of[0]);
  }, [type, insertItem]);
  const popoverProps = useMemo(() => ({
    constrainSize: true,
    portal: true
  }), []);

  if (readOnly) {
    return /*#__PURE__*/React.createElement(Tooltip, {
      portal: true,
      content: /*#__PURE__*/React.createElement(Box, {
        padding: 2,
        sizing: "border"
      }, /*#__PURE__*/React.createElement(Text, {
        size: 1,
        muted: true
      }, "This field is read-only"))
    }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Button, {
      icon: AddIcon,
      mode: "ghost",
      disabled: true,
      text: type.of.length === 1 ? 'Add item' : 'Add item...'
    })));
  }

  return /*#__PURE__*/React.createElement(Grid, {
    gap: 1,
    style: {
      gridTemplateColumns: 'repeat(auto-fit, minmax(100px, 1fr))'
    }
  }, type.of.length === 1 ? /*#__PURE__*/React.createElement(Button, {
    icon: AddIcon,
    mode: "ghost",
    onClick: handleAddBtnClick,
    text: "Add item"
  }) : /*#__PURE__*/React.createElement(MenuButton, {
    button: /*#__PURE__*/React.createElement(Button, {
      icon: AddIcon,
      mode: "ghost",
      text: "Add item\u2026"
    }),
    id: menuButtonId || '',
    menu: /*#__PURE__*/React.createElement(Menu, null, type.of.map((memberDef, i) => {
      var _memberDef$type, _memberDef$type2;

      // Use reference icon if reference is to one type only
      const referenceIcon = isReferenceSchemaType(memberDef) && (memberDef.to || []).length === 1 && memberDef.to[0].icon;
      const icon = memberDef.icon || ((_memberDef$type = memberDef.type) === null || _memberDef$type === void 0 ? void 0 : _memberDef$type.icon) || referenceIcon;
      return /*#__PURE__*/React.createElement(MenuItem, {
        key: i,
        text: memberDef.title || ((_memberDef$type2 = memberDef.type) === null || _memberDef$type2 === void 0 ? void 0 : _memberDef$type2.name),
        onClick: () => insertItem(memberDef),
        icon: icon
      });
    })),
    popover: popoverProps
  }), children);
}
ArrayOfPrimitivesFunctions.__SANITY_INTERNAL_IMPLEMENTATION = true;