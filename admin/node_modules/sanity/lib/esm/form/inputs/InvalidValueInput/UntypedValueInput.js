import React, { useCallback, useMemo } from 'react';
import { Button, Card, Code, Grid, Stack, Text } from '@sanity/ui';
import { useSchema } from '../../../hooks';
import { PatchEvent, setIfMissing, unset } from '../../patch';
import { Alert } from '../../components/Alert';
import { Details } from '../../components/Details';
import { isDev } from '../../../environment';

function SetMissingTypeButton(_ref) {
  let {
    value,
    targetType,
    onChange
  } = _ref;
  const itemValue = useMemo(() => ({ ...value,
    _type: targetType
  }), [targetType, value]);
  const handleClick = useCallback(() => onChange(PatchEvent.from(setIfMissing(targetType, ['_type'])), itemValue), [itemValue, onChange, targetType]);
  return /*#__PURE__*/React.createElement(Button, {
    onClick: handleClick,
    text: /*#__PURE__*/React.createElement(React.Fragment, null, "Convert to ", /*#__PURE__*/React.createElement("code", null, targetType))
  });
}

function UnsetItemButton(_ref2) {
  let {
    value,
    onChange,
    validTypes
  } = _ref2;
  // Doesn't matter which `_type` we use as long as it's allowed by the array
  const itemValue = useMemo(() => ({ ...value,
    _type: validTypes[0]
  }), [validTypes, value]);
  const handleClick = useCallback(() => onChange(PatchEvent.from(unset()), itemValue), [itemValue, onChange]);
  return /*#__PURE__*/React.createElement(Button, {
    onClick: handleClick,
    tone: "critical",
    text: "Unset value"
  });
}
/**
 * When the value does not have an `_type` property,
 * but the schema has a named type
 */


export function UntypedValueInput(_ref3) {
  let {
    validTypes,
    value,
    onChange
  } = _ref3;
  const schema = useSchema();
  const isSingleValidType = validTypes.length === 1;
  const isHoistedType = schema.has(validTypes[0]);
  return /*#__PURE__*/React.createElement(Alert, {
    status: "warning",
    title: /*#__PURE__*/React.createElement(React.Fragment, null, "Property value missing ", /*#__PURE__*/React.createElement("code", null, "_type"))
  }, /*#__PURE__*/React.createElement(Details, {
    open: isDev,
    title: /*#__PURE__*/React.createElement(React.Fragment, null, "Developer info")
  }, /*#__PURE__*/React.createElement(Stack, {
    space: 3
  }, /*#__PURE__*/React.createElement(Text, {
    as: "p",
    muted: true,
    size: 1
  }, "Encountered an object value without a ", /*#__PURE__*/React.createElement("code", null, "_type"), " property."), isSingleValidType && !isHoistedType && /*#__PURE__*/React.createElement(Text, {
    as: "p",
    muted: true,
    size: 1
  }, "Either remove the ", /*#__PURE__*/React.createElement("code", null, "name"), " property of the object declaration, or set", ' ', /*#__PURE__*/React.createElement("code", null, "_type"), " property on items."), !isSingleValidType && /*#__PURE__*/React.createElement(Text, {
    as: "p",
    muted: true,
    size: 1
  }, "The following types are valid here according to schema:"), !isSingleValidType && /*#__PURE__*/React.createElement(Stack, {
    as: "ul",
    space: 2
  }, validTypes.map(validType => /*#__PURE__*/React.createElement(Text, {
    as: "li",
    key: validType,
    muted: true,
    size: 1
  }, /*#__PURE__*/React.createElement("code", null, validType)))), /*#__PURE__*/React.createElement(Stack, {
    space: 2
  }, /*#__PURE__*/React.createElement(Text, {
    as: "h4",
    weight: "semibold",
    size: 1
  }, "Current value (", /*#__PURE__*/React.createElement("code", null, "object"), "):"), /*#__PURE__*/React.createElement(Card, {
    border: true,
    overflow: "auto",
    padding: 2,
    radius: 2,
    tone: "inherit"
  }, /*#__PURE__*/React.createElement(Code, {
    language: "json"
  }, JSON.stringify(value, null, 2)))), /*#__PURE__*/React.createElement(Grid, {
    columns: [1, 2, 2],
    gap: 1
  }, isSingleValidType && /*#__PURE__*/React.createElement(SetMissingTypeButton, {
    onChange: onChange,
    targetType: validTypes[0],
    value: value
  }), /*#__PURE__*/React.createElement(UnsetItemButton, {
    onChange: onChange,
    validTypes: validTypes,
    value: value
  })))));
}