import React, { useCallback } from 'react';
import { UploadIcon, ClipboardIcon, ResetIcon, DownloadIcon } from '@sanity/icons';
import { Box, MenuItem, MenuDivider, Label, useToast } from '@sanity/ui';
import { FileInputMenuItem } from './FileInputMenuItem/FileInputMenuItem';
export function ActionsMenu(props) {
  const {
    onUpload,
    onReset,
    readOnly,
    accept,
    directUploads,
    browse,
    downloadUrl,
    copyUrl
  } = props;
  const {
    push: pushToast
  } = useToast();
  const handleCopyURL = useCallback(() => {
    navigator.clipboard.writeText(copyUrl || '');
    pushToast({
      closable: true,
      status: 'success',
      title: 'The url is copied to the clipboard'
    });
  }, [pushToast, copyUrl]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {
    padding: 2
  }, /*#__PURE__*/React.createElement(Label, {
    muted: true,
    size: 1
  }, "Replace")), /*#__PURE__*/React.createElement(FileInputMenuItem, {
    icon: UploadIcon,
    mode: "bleed",
    onSelect: onUpload,
    accept: accept,
    text: "Upload",
    "data-testid": "file-input-upload-button",
    disabled: readOnly || !directUploads,
    fontSize: 2
  }), browse, (downloadUrl || copyUrl) && /*#__PURE__*/React.createElement(MenuDivider, null), downloadUrl && /*#__PURE__*/React.createElement(MenuItem, {
    as: "a",
    icon: DownloadIcon,
    text: "Download",
    href: downloadUrl
  }), copyUrl && /*#__PURE__*/React.createElement(MenuItem, {
    icon: ClipboardIcon,
    text: "Copy URL",
    onClick: handleCopyURL
  }), /*#__PURE__*/React.createElement(MenuDivider, null), /*#__PURE__*/React.createElement(MenuItem, {
    tone: "critical",
    icon: ResetIcon,
    text: "Clear field",
    onClick: onReset,
    disabled: readOnly,
    "data-testid": "file-input-clear"
  }));
}