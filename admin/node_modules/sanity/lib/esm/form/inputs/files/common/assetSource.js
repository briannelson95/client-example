import _get from "lodash/get";
import { set, setIfMissing, unset } from '../../../patch';
import { base64ToFile, urlToFile } from '../ImageInput/utils/image';
export function handleSelectAssetFromSource(_ref) {
  let {
    assetFromSource,
    onChange,
    type,
    resolveUploader,
    uploadWith,
    isImage
  } = _ref;

  // const {onChange, type, resolveUploader} = this.props
  if (!assetFromSource) {
    throw new Error('No asset given');
  }

  if (!Array.isArray(assetFromSource) || assetFromSource.length === 0) {
    throw new Error('Returned value must be an array with at least one item (asset)');
  }

  const firstAsset = assetFromSource[0];

  const originalFilename = _get(firstAsset, 'assetDocumentProps.originalFilename');

  const label = _get(firstAsset, 'assetDocumentProps.label');

  const title = _get(firstAsset, 'assetDocumentProps.title');

  const description = _get(firstAsset, 'assetDocumentProps.description');

  const creditLine = _get(firstAsset, 'assetDocumentProps.creditLine');

  const source = _get(firstAsset, 'assetDocumentProps.source');

  const imagePatches = isImage ? [unset(['hotspot']), unset(['crop'])] : [];

  switch (firstAsset.kind) {
    case 'assetDocumentId':
      onChange([setIfMissing({
        _type: type.name
      }), ...imagePatches, set({
        _type: 'reference',
        _ref: firstAsset.value
      }, ['asset'])]);
      break;

    case 'file':
      {
        const uploader = resolveUploader(type, firstAsset.value);

        if (uploader) {
          uploadWith(uploader, firstAsset.value, {
            label,
            title,
            description,
            creditLine,
            source
          });
        }

        break;
      }

    case 'base64':
      base64ToFile(firstAsset.value, originalFilename).then(file => {
        const uploader = resolveUploader(type, file);

        if (uploader) {
          uploadWith(uploader, file, {
            label,
            title,
            description,
            creditLine,
            source
          });
        }
      });
      break;

    case 'url':
      urlToFile(firstAsset.value, originalFilename).then(file => {
        const uploader = resolveUploader(type, file);

        if (uploader) {
          uploadWith(uploader, file, {
            label,
            title,
            description,
            creditLine,
            source
          });
        }
      });
      break;

    default:
      {
        throw new Error('Invalid value returned from asset source plugin');
      }
  }
}