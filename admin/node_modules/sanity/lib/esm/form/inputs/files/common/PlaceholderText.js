var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React, { useMemo } from 'react';
import { BinaryDocumentIcon, AccessDeniedIcon, ImageIcon, ReadOnlyIcon } from '@sanity/icons';
import { Flex, Text } from '@sanity/ui';
import styled from 'styled-components';
const RootFlex = styled(Flex)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  pointer-events: none;\n"])));
export function PlaceholderText(props) {
  const {
    hoveringFiles,
    type,
    readOnly,
    acceptedFiles,
    rejectedFilesCount,
    directUploads
  } = props;
  const isFileType = type === 'file';
  const messageIcon = useMemo(() => {
    if (readOnly) {
      return /*#__PURE__*/React.createElement(ReadOnlyIcon, null);
    }

    if (hoveringFiles && rejectedFilesCount > 0 || !directUploads) {
      return /*#__PURE__*/React.createElement(AccessDeniedIcon, null);
    }

    return isFileType ? /*#__PURE__*/React.createElement(BinaryDocumentIcon, null) : /*#__PURE__*/React.createElement(ImageIcon, null);
  }, [directUploads, hoveringFiles, isFileType, readOnly, rejectedFilesCount]);
  const messageText = useMemo(() => {
    let message = "Drag or paste ".concat(type, " here");

    if (!directUploads) {
      return "Can't upload files here";
    }

    if (readOnly) {
      message = 'Read only';
    }

    if (hoveringFiles && directUploads && !readOnly) {
      if (acceptedFiles.length > 0) {
        message = "Drop to upload ".concat(type);
      }

      if (rejectedFilesCount > 0) {
        message = "Can't upload ".concat(rejectedFilesCount, " file").concat(rejectedFilesCount > 1 ? 's' : '', " here");
      }
    }

    return message;
  }, [acceptedFiles.length, directUploads, hoveringFiles, readOnly, rejectedFilesCount, type]);
  return /*#__PURE__*/React.createElement(RootFlex, {
    align: "center",
    gap: 2,
    justify: "center"
  }, /*#__PURE__*/React.createElement(Text, {
    muted: true
  }, messageIcon), /*#__PURE__*/React.createElement(Text, {
    size: 1,
    muted: true
  }, messageText));
}