function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { createElement, isValidElement } from 'react';
import { isValidElementType } from 'react-is';
import { useId } from '@reach/auto-id';
import { Box, Flex, Text } from '@sanity/ui';
import { FileButton } from './FileInputMenuItem.styled';
export const FileInputMenuItem = /*#__PURE__*/React.forwardRef(function FileInputMenuItem(props, forwardedRef) {
  const {
    icon,
    id: idProp,
    accept,
    capture,
    fontSize,
    multiple,
    onSelect,
    padding = 3,
    space = 3,
    textAlign,
    text,
    disabled,
    ...rest
  } = props;
  const id = useId(idProp);
  const handleChange = React.useCallback(event => {
    if (onSelect && event.target.files) {
      onSelect(Array.from(event.target.files));
    }
  }, [onSelect]);
  const content = /*#__PURE__*/React.createElement(Flex, {
    align: "center",
    justify: "flex-start",
    padding: padding
  }, icon && /*#__PURE__*/React.createElement(Box, {
    marginRight: text ? space : undefined
  }, /*#__PURE__*/React.createElement(Text, {
    size: fontSize
  }, /*#__PURE__*/isValidElement(icon) && icon, isValidElementType(icon) && /*#__PURE__*/createElement(icon))), text && /*#__PURE__*/React.createElement(Text, {
    align: textAlign,
    size: fontSize,
    textOverflow: "ellipsis"
  }, text));
  return /*#__PURE__*/React.createElement(FileButton, _extends({}, rest, {
    htmlFor: id,
    padding: 0,
    fontSize: 2,
    disabled: disabled,
    ref: forwardedRef
  }), content, /*#__PURE__*/React.createElement("input", {
    "data-testid": "file-button-input",
    accept: accept,
    capture: capture,
    id: id,
    multiple: multiple,
    onChange: handleChange,
    type: "file",
    value: "",
    disabled: disabled
  }));
});