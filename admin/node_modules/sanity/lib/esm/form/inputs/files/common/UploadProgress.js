import React, { useEffect } from 'react';
import { Flex, Text, Button, Inline, Card } from '@sanity/ui';
import { LinearProgress } from '../../../../components/progress';
import { CardWrapper, FlexWrapper, LeftSection, CodeWrapper } from './UploadProgress.styled';
// If it's more than this amount of milliseconds since last time upload state was reported,
// the upload will be marked as stale/interrupted.
const STALE_UPLOAD_MS = 1000 * 60 * 2; // 2 minutes

const elapsedMs = date => new Date().getTime() - new Date(date).getTime();

export function UploadProgress(_ref) {
  let {
    uploadState,
    onCancel,
    onStale,
    height
  } = _ref;
  const filename = uploadState.file.name;
  useEffect(() => {
    if (elapsedMs(uploadState.updated) > STALE_UPLOAD_MS) {
      onStale === null || onStale === void 0 ? void 0 : onStale();
    }
  }, [uploadState.updated, onStale]);
  return /*#__PURE__*/React.createElement(CardWrapper, {
    tone: "primary",
    padding: 4,
    border: true,
    style: {
      height: "".concat(height, "px")
    }
  }, /*#__PURE__*/React.createElement(FlexWrapper, {
    align: "center",
    justify: "space-between",
    height: "fill",
    direction: "row",
    gap: 2
  }, /*#__PURE__*/React.createElement(LeftSection, null, /*#__PURE__*/React.createElement(Flex, {
    justify: "center",
    gap: [3, 3, 2, 2],
    direction: ['column', 'column', 'row']
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1
  }, /*#__PURE__*/React.createElement(Inline, {
    space: 2
  }, "Uploading", /*#__PURE__*/React.createElement(CodeWrapper, {
    size: 1
  }, filename ? filename : '...')))), /*#__PURE__*/React.createElement(Card, {
    marginTop: 3,
    radius: 5,
    shadow: 1
  }, /*#__PURE__*/React.createElement(LinearProgress, {
    value: uploadState.progress
  }))), onCancel ? /*#__PURE__*/React.createElement(Button, {
    fontSize: 2,
    text: "Cancel upload",
    mode: "ghost",
    tone: "critical",
    onClick: onCancel
  }) : null));
}