function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { ImageLoader } from './ImageLoader';
import { ToolCanvas } from './ToolCanvas';
import { Resize } from './Resize';
export function ImageTool(props) {
  return /*#__PURE__*/React.createElement(ImageLoader, {
    src: props.src
  }, _ref => {
    let {
      isLoading,
      image,
      error
    } = _ref;

    if (isLoading) {
      return /*#__PURE__*/React.createElement("div", null, "Loading...");
    }

    if (error) {
      return /*#__PURE__*/React.createElement("div", null, error.message);
    }

    if (image) {
      return /*#__PURE__*/React.createElement(Resize, {
        image: image,
        maxHeight: ImageTool.maxHeight,
        maxWidth: ImageTool.maxWidth
      }, canvas => /*#__PURE__*/React.createElement(ToolCanvas, _extends({
        image: canvas
      }, props)));
    }

    return null;
  });
}
ImageTool.maxHeight = 500;
ImageTool.maxWidth = 1000;