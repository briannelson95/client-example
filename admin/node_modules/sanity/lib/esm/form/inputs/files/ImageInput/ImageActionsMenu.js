import React, { useCallback, useState } from 'react';
import { EllipsisVerticalIcon, CropIcon } from '@sanity/icons';
import { Menu, Popover, useClickOutside, useGlobalKeyDown } from '@sanity/ui';
import { MenuActionsWrapper, ButtonContainer } from './ImageActionsMenu.styled';
export function ImageActionsMenu(props) {
  const {
    onEdit,
    children,
    showEdit,
    isMenuOpen,
    onMenuOpen
  } = props;
  const [menuElement, setMenuRef] = useState(null);
  const [menuButtonRef, setMenuButtonRef] = useState(null);
  const handleClick = React.useCallback(() => onMenuOpen(true), [onMenuOpen]);
  const handleClickOutside = useCallback(() => {
    onMenuOpen(false);
  }, [onMenuOpen]);
  const handleGlobalKeyDown = useCallback(e => {
    if (e.key === 'Escape') {
      onMenuOpen(false);
      menuButtonRef === null || menuButtonRef === void 0 ? void 0 : menuButtonRef.focus();
    }
  }, [menuButtonRef, onMenuOpen]);
  useClickOutside(handleClickOutside, [menuElement]);
  useGlobalKeyDown(handleGlobalKeyDown);
  return /*#__PURE__*/React.createElement(MenuActionsWrapper, {
    "data-buttons": true,
    space: 1,
    padding: 2
  }, showEdit && /*#__PURE__*/React.createElement(ButtonContainer, {
    icon: CropIcon,
    mode: "ghost",
    onClick: onEdit,
    "data-testid": "options-menu-edit-details"
  }), /*#__PURE__*/React.createElement(Popover, {
    content: /*#__PURE__*/React.createElement(Menu, {
      ref: setMenuRef,
      shouldFocus: "first"
    }, children),
    portal: true,
    constrainSize: true,
    open: isMenuOpen
  }, /*#__PURE__*/React.createElement(ButtonContainer, {
    icon: EllipsisVerticalIcon,
    mode: "ghost",
    "data-testid": "options-menu-button",
    onClick: handleClick,
    ref: setMenuButtonRef
  })));
}