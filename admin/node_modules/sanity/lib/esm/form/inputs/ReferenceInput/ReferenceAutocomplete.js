var _templateObject, _templateObject2;

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React, { forwardRef, useCallback } from 'react';
import { Autocomplete, Box, Flex, Popover, Text } from '@sanity/ui';
import styled from 'styled-components';
const StyledPopover = styled(Popover)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  & > div {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n  }\n"])));
const StyledText = styled(Text)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  word-break: break-word;\n"])));
export const ReferenceAutocomplete = /*#__PURE__*/forwardRef(function ReferenceAutocomplete(props, ref) {
  const hasResults = props.options && props.options.length > 0;
  const renderPopover = useCallback((_ref, contentRef) => {
    var _props$searchString;

    let {
      content,
      hidden,
      inputElement,
      onMouseEnter,
      onMouseLeave
    } = _ref;
    return /*#__PURE__*/React.createElement(StyledPopover, {
      placement: "bottom-start",
      arrow: false,
      constrainSize: true,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave,
      content: /*#__PURE__*/React.createElement("div", {
        ref: contentRef
      }, hasResults ? content : /*#__PURE__*/React.createElement(Box, {
        padding: 4
      }, /*#__PURE__*/React.createElement(Flex, {
        align: "center",
        height: "fill",
        justify: "center"
      }, /*#__PURE__*/React.createElement(StyledText, {
        align: "center",
        muted: true
      }, "No results for ", /*#__PURE__*/React.createElement("strong", null, "\u201C", props.searchString, "\u201D"), ((_props$searchString = props.searchString) === null || _props$searchString === void 0 ? void 0 : _props$searchString.toLowerCase()) === 'capybara' ? /*#__PURE__*/React.createElement(React.Fragment, null, ". What a shame. There should be more Capybaras.") : null)))),
      open: !props.loading && !hidden,
      ref: props.portalRef,
      portal: true,
      referenceElement: props.referenceElement || inputElement,
      matchReferenceWidth: true
    });
  }, [hasResults, props.searchString, props.loading, props.portalRef, props.referenceElement]);
  return /*#__PURE__*/React.createElement(Autocomplete, _extends({}, props, {
    ref: ref,
    renderPopover: renderPopover
  }));
});