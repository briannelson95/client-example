import React, { useMemo } from 'react';
import { Box, Flex, Inline, Label, Text, Tooltip, useRootTheme } from '@sanity/ui';
import { AccessDeniedIcon, EditIcon, HelpCircleIcon, PublishIcon } from '@sanity/icons';
import { TextWithTone } from '../../../components/TextWithTone';
import { DocumentPreviewPresence } from '../../../presence';
import { useDocumentPresence } from '../../../datastores';
import { TimeAgo } from './utils/TimeAgo';

function UnavailableMessage(props) {
  const Icon = props.icon;
  return /*#__PURE__*/React.createElement(Flex, {
    padding: 3
  }, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
    size: 1
  }, /*#__PURE__*/React.createElement(Icon, null))), /*#__PURE__*/React.createElement(Box, {
    flex: 1,
    marginLeft: 3
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1,
    weight: "semibold"
  }, props.title), /*#__PURE__*/React.createElement(Box, {
    marginTop: 3
  }, /*#__PURE__*/React.createElement(Text, {
    as: "p",
    muted: true,
    size: 1
  }, props.children))));
}
/**
 * Used to preview a referenced type
 * Takes the reference type as props
 */


export function ReferencePreview(props) {
  var _preview$draft, _preview$published, _preview$published2, _preview$draft2;

  const {
    availability,
    id,
    layout,
    preview,
    refType,
    renderPreview,
    showTypeLabel
  } = props;
  const theme = useRootTheme();
  const documentPresence = useDocumentPresence(id);
  const notFound = availability.reason === 'NOT_FOUND';
  const insufficientPermissions = availability.reason === 'PERMISSION_DENIED';
  const previewId = ((_preview$draft = preview.draft) === null || _preview$draft === void 0 ? void 0 : _preview$draft._id) || ((_preview$published = preview.published) === null || _preview$published === void 0 ? void 0 : _preview$published._id) || // note: during publish of the referenced document we might have both a missing draft and a missing published version
  // this happens because the preview system tries to optimistically re-fetch as soon as it sees a mutation, but
  // when publishing, the draft is deleted, and therefore both the draft and the published may be missing for a brief
  // moment before the published version appears. In this case, it's safe to fallback to the given id, which is always
  // the published id
  id; // Note: we can't pass the preview values as-is to the Preview-component here since it's a "prepared" value and the
  // Preview component expects the "raw"/unprepared value. By passing only _id and _type we make sure the Preview-component
  // resolve the preview value it needs (this is cached in the runtime, so not likely to cause any fetch overhead)

  const previewStub = useMemo(() => ({
    _id: previewId,
    _type: refType.name
  }), [previewId, refType.name]);
  return /*#__PURE__*/React.createElement(Flex, {
    align: "center"
  }, availability.available ? /*#__PURE__*/React.createElement(Box, {
    flex: 1
  }, renderPreview({
    layout,
    schemaType: refType,
    value: previewStub
  })) : /*#__PURE__*/React.createElement(Box, {
    flex: 1
  }, /*#__PURE__*/React.createElement(Flex, {
    align: "center"
  }, /*#__PURE__*/React.createElement(Box, {
    flex: 1,
    paddingY: 2
  }, /*#__PURE__*/React.createElement(Text, {
    muted: true
  }, "Document unavailable")))), /*#__PURE__*/React.createElement(Box, {
    paddingLeft: 3
  }, /*#__PURE__*/React.createElement(Inline, {
    space: 3
  }, showTypeLabel && /*#__PURE__*/React.createElement(Label, {
    size: 1,
    muted: true
  }, refType.title), insufficientPermissions || notFound ? /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Tooltip, {
    portal: true,
    content: notFound ? /*#__PURE__*/React.createElement(UnavailableMessage, {
      title: "Not found",
      icon: HelpCircleIcon
    }, "The referenced document does not exist", /*#__PURE__*/React.createElement("br", null), "(id: ", /*#__PURE__*/React.createElement("code", null, id), ")") : /*#__PURE__*/React.createElement(UnavailableMessage, {
      title: "Insufficcient permissions",
      icon: AccessDeniedIcon
    }, "The referenced document could not be accessed due to insufficient permissions")
  }, /*#__PURE__*/React.createElement(TextWithTone, {
    tone: "default"
  }, /*#__PURE__*/React.createElement(HelpCircleIcon, null)))) : null, documentPresence && documentPresence.length > 0 && /*#__PURE__*/React.createElement(DocumentPreviewPresence, {
    presence: documentPresence
  }), /*#__PURE__*/React.createElement(Inline, {
    space: 4
  }, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Tooltip, {
    content: /*#__PURE__*/React.createElement(Box, {
      padding: 2
    }, /*#__PURE__*/React.createElement(Text, {
      size: 1
    }, (_preview$published2 = preview.published) !== null && _preview$published2 !== void 0 && _preview$published2._updatedAt ? /*#__PURE__*/React.createElement(React.Fragment, null, "Published ", /*#__PURE__*/React.createElement(TimeAgo, {
      time: preview.published._updatedAt
    })) : /*#__PURE__*/React.createElement(React.Fragment, null, "Not published")))
  }, /*#__PURE__*/React.createElement(TextWithTone, {
    tone: theme.tone === 'default' ? 'positive' : 'default',
    size: 1,
    dimmed: !preview.published,
    muted: !preview.published
  }, /*#__PURE__*/React.createElement(PublishIcon, null)))), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Tooltip, {
    content: /*#__PURE__*/React.createElement(Box, {
      padding: 2
    }, /*#__PURE__*/React.createElement(Text, {
      size: 1
    }, (_preview$draft2 = preview.draft) !== null && _preview$draft2 !== void 0 && _preview$draft2._updatedAt ? /*#__PURE__*/React.createElement(React.Fragment, null, "Edited ", /*#__PURE__*/React.createElement(TimeAgo, {
      time: preview.draft._updatedAt
    })) : /*#__PURE__*/React.createElement(React.Fragment, null, "No unpublished edits")))
  }, /*#__PURE__*/React.createElement(TextWithTone, {
    tone: theme.tone === 'default' ? 'caution' : 'default',
    size: 1,
    dimmed: !preview.draft,
    muted: !preview.draft
  }, /*#__PURE__*/React.createElement(EditIcon, null))))))));
}