var _templateObject, _templateObject2;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { Grid, useElementRect } from '@sanity/ui';
import React, { forwardRef, useCallback, useState } from 'react';
import styled, { css } from 'styled-components';
const NARROW_LAYOUT = css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  grid-template-columns: minmax(0px, 1fr);\n"])));
const WIDE_LAYOUT = css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  grid-template-columns: 1fr min-content;\n"])));
const Root = styled(Grid)(props => props.$narrow ? NARROW_LAYOUT : WIDE_LAYOUT);
export const AutocompleteContainer = /*#__PURE__*/forwardRef(function AutocompleteContainer(props, forwardedRef) {
  const [rootElement, setRootElement] = useState(null);
  const handleNewRef = useCallback(element => {
    // there's a bit of "double bookkeeping" here. since useElementRect needs to re-run whenever the ref updates,
    // and thus we need to keep it in the state
    setForwardedRef(forwardedRef, element);
    setRootElement(element);
  }, [forwardedRef]);
  const inputWrapperRect = useElementRect(rootElement);
  return /*#__PURE__*/React.createElement(Root, {
    ref: handleNewRef,
    gap: 1,
    $narrow: ((inputWrapperRect === null || inputWrapperRect === void 0 ? void 0 : inputWrapperRect.width) || 0) < 480
  }, props.children);
});

function setForwardedRef(ref, instance) {
  if (typeof ref === 'function') {
    ref(instance);
  } else if (ref) {
    ref.current = instance;
  }
}