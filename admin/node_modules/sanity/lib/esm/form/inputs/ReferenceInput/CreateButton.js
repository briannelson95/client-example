function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable complexity */

/* eslint-disable max-nested-callbacks,no-nested-ternary */
import React from 'react';
import { AddIcon } from '@sanity/icons';
import { Box, Button, Menu, MenuButton, MenuItem, Tooltip } from '@sanity/ui';
import { InsufficientPermissionsMessage } from '../../../components/InsufficientPermissionsMessage';

function ConditionalTooltip(props) {
  const {
    enabled,
    ...rest
  } = props;
  return enabled ? /*#__PURE__*/React.createElement(Tooltip, rest) : /*#__PURE__*/React.createElement(React.Fragment, null, props.children);
}

const INLINE_BLOCK_STYLE = {
  display: 'inline-flex'
};
const FULL_WIDTH = {
  width: '100%'
};
export function CreateButton(props) {
  const {
    createOptions,
    onCreate,
    id,
    ...rest
  } = props;
  const canCreateAny = createOptions.some(option => option.permission.granted);

  if (!canCreateAny) {
    return /*#__PURE__*/React.createElement(Tooltip, {
      content: /*#__PURE__*/React.createElement(Box, {
        padding: 2
      }, /*#__PURE__*/React.createElement(InsufficientPermissionsMessage, {
        operationLabel: "create a new reference"
      }))
    }, /*#__PURE__*/React.createElement("div", {
      style: INLINE_BLOCK_STYLE
    }, /*#__PURE__*/React.createElement(Button, {
      text: "Create new",
      mode: "ghost",
      disabled: true,
      icon: AddIcon,
      style: FULL_WIDTH
    })));
  }

  return createOptions.length > 1 ? /*#__PURE__*/React.createElement(MenuButton, {
    button: /*#__PURE__*/React.createElement(Button, _extends({}, rest, {
      text: "Create new\u2026",
      mode: "ghost",
      icon: AddIcon
    })),
    id: id,
    menu: /*#__PURE__*/React.createElement(Menu, {
      ref: props.menuRef
    }, createOptions.map(createOption => /*#__PURE__*/React.createElement(ConditionalTooltip, {
      enabled: !createOption.permission.granted,
      key: createOption.id,
      content: /*#__PURE__*/React.createElement(Box, {
        padding: 2
      }, /*#__PURE__*/React.createElement(InsufficientPermissionsMessage, {
        operationLabel: "create this type of document"
      })),
      portal: true
    }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(MenuItem, {
      disabled: !createOption.permission.granted,
      icon: createOption.icon,
      text: createOption.title,
      onClick: () => onCreate(createOption)
    }))))),
    placement: "right",
    popover: {
      portal: true,
      tone: 'default',
      constrainSize: true
    }
  }) : /*#__PURE__*/React.createElement(Button, _extends({}, rest, {
    text: "Create new",
    mode: "ghost",
    disabled: !createOptions[0].permission.granted,
    onClick: () => onCreate(createOptions[0]),
    icon: AddIcon
  }));
}