import React from 'react';
import { Box, Flex, Inline, Label, Stack } from '@sanity/ui';
import { SanityDefaultPreview } from '../../../preview';
import { ReferencePreview } from './ReferencePreview';
export function PreviewReferenceValue(props) {
  var _referenceInfo$result, _referenceInfo$result2, _referenceInfo$result3, _referenceInfo$result4;

  const {
    referenceInfo,
    renderPreview,
    type,
    value
  } = props;

  if (referenceInfo.isLoading || referenceInfo.error) {
    return /*#__PURE__*/React.createElement(SanityDefaultPreview, {
      isPlaceholder: true
    });
  }

  const showTypeLabel = type.to.length > 1;

  if (((_referenceInfo$result = referenceInfo.result) === null || _referenceInfo$result === void 0 ? void 0 : _referenceInfo$result.availability.reason) === 'NOT_FOUND' && value._strengthenOnPublish) {
    const refType = type.to.find(toType => {
      var _value$_strengthenOnP;

      return toType.name === (value === null || value === void 0 ? void 0 : (_value$_strengthenOnP = value._strengthenOnPublish) === null || _value$_strengthenOnP === void 0 ? void 0 : _value$_strengthenOnP.type);
    });

    if (!refType) {
      return /*#__PURE__*/React.createElement("div", null, "Invalid reference type");
    }

    if (value._strengthenOnPublish) {
      var _value$_strengthenOnP2, _value$_strengthenOnP3;

      const stub = (_value$_strengthenOnP2 = value._strengthenOnPublish) !== null && _value$_strengthenOnP2 !== void 0 && _value$_strengthenOnP2.type ? {
        _id: value._ref,
        _type: (_value$_strengthenOnP3 = value._strengthenOnPublish) === null || _value$_strengthenOnP3 === void 0 ? void 0 : _value$_strengthenOnP3.type
      } : value;
      return /*#__PURE__*/React.createElement(Flex, {
        align: "center"
      }, /*#__PURE__*/React.createElement(Box, {
        flex: 1
      }, renderPreview({
        layout: 'default',
        schemaType: refType,
        value: stub
      })), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Inline, {
        space: 4
      }, showTypeLabel && /*#__PURE__*/React.createElement(Label, {
        size: 1,
        muted: true
      }, refType.title))));
    }
  }

  const refTypeName = (_referenceInfo$result2 = referenceInfo.result) === null || _referenceInfo$result2 === void 0 ? void 0 : _referenceInfo$result2.type;
  const refType = type.to.find(toType => toType.name === refTypeName);

  if (!refType) {
    return /*#__PURE__*/React.createElement(Stack, {
      space: 2,
      padding: 2
    }, "The referenced document is of invalid type: (", refTypeName || 'unknown', ")", /*#__PURE__*/React.createElement("pre", null, JSON.stringify(value, null, 2)));
  }

  return /*#__PURE__*/React.createElement(ReferencePreview, {
    availability: (_referenceInfo$result3 = referenceInfo.result) === null || _referenceInfo$result3 === void 0 ? void 0 : _referenceInfo$result3.availability,
    id: value._ref,
    layout: "default",
    preview: (_referenceInfo$result4 = referenceInfo.result) === null || _referenceInfo$result4 === void 0 ? void 0 : _referenceInfo$result4.preview,
    refType: refType,
    renderPreview: renderPreview,
    showTypeLabel: showTypeLabel
  });
}