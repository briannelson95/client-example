function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { EditIcon, LinkIcon, TrashIcon, EyeOpenIcon, EllipsisVerticalIcon } from '@sanity/icons';
import { PortableTextEditor, usePortableTextEditor } from '@sanity/portable-text-editor';
import { Box, Button, Flex, Menu, MenuButton, MenuItem, useGlobalKeyDown, useLayer } from '@sanity/ui';
import React, { forwardRef, useCallback, useMemo, useRef } from 'react';
import { useId } from '@reach/auto-id';
import { IntentLink } from '../../../../router';
import { is } from '../../../utils/is';
const POPOVER_PROPS = {
  constrainSize: true,
  placement: 'bottom',
  portal: 'default',
  tone: 'default'
};
export function BlockObjectPreview(props) {
  var _type$preview;

  const {
    focused,
    value,
    type,
    readOnly,
    onClickingEdit,
    onClickingDelete,
    renderPreview
  } = props;
  const {
    isTopLayer
  } = useLayer();
  const editor = usePortableTextEditor();
  const menuButtonId = useId() || '';
  const menuButton = useRef(null);
  const isTabbing = useRef(false);
  const isCustomPreviewComponent = Boolean((_type$preview = type.preview) === null || _type$preview === void 0 ? void 0 : _type$preview.component);
  const isImageType = is('image', type);
  const referenceLink = useMemo(() => /*#__PURE__*/forwardRef(function ReferenceLink(linkProps, ref) {
    return /*#__PURE__*/React.createElement(IntentLink, _extends({}, linkProps, {
      intent: "edit",
      params: {
        id: value._ref
      },
      ref: ref
    }));
  }), [value === null || value === void 0 ? void 0 : value._ref]); // Go to menu when tabbed to
  // Focus block on escape

  useGlobalKeyDown(useCallback(event => {
    if (!focused) {
      return;
    }

    if (event.key === 'Escape' && isTopLayer) {
      // event.preventDefault()
      // event.stopPropagation()
      isTabbing.current = false;
      PortableTextEditor.focus(editor);
    }

    if (event.key === 'Tab') {
      if (menuButton.current && !isTabbing.current) {
        event.preventDefault();
        event.stopPropagation();
        menuButton.current.focus();
        isTabbing.current = true;
      }
    }
  }, [focused, isTopLayer, editor]));
  const actions = /*#__PURE__*/React.createElement(MenuButton, {
    button: /*#__PURE__*/React.createElement(Button, {
      "aria-label": "Open menu",
      fontSize: 1,
      iconRight: EllipsisVerticalIcon,
      mode: "bleed",
      paddingX: 2
    }),
    ref: menuButton,
    id: menuButtonId,
    menu: /*#__PURE__*/React.createElement(Menu, null, (value === null || value === void 0 ? void 0 : value._ref) && /*#__PURE__*/React.createElement(MenuItem, {
      as: referenceLink,
      "data-as": "a",
      icon: LinkIcon,
      text: "Open reference"
    }), readOnly && /*#__PURE__*/React.createElement(MenuItem, {
      icon: EyeOpenIcon,
      onClick: onClickingEdit,
      text: "View"
    }), !readOnly && /*#__PURE__*/React.createElement(MenuItem, {
      icon: EditIcon,
      onClick: onClickingEdit,
      text: "Edit"
    }), !readOnly && /*#__PURE__*/React.createElement(MenuItem, {
      icon: TrashIcon,
      onClick: onClickingDelete,
      text: "Delete",
      tone: "critical"
    })),
    popover: POPOVER_PROPS
  });

  if (isCustomPreviewComponent) {
    return /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(Box, {
      flex: 1
    }, renderPreview({
      layout: isImageType ? 'blockImage' : 'block',
      schemaType: type,
      value
    })), /*#__PURE__*/React.createElement(Box, {
      marginLeft: 1
    }, actions));
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, renderPreview({
    actions,
    layout: isImageType ? 'blockImage' : 'block',
    schemaType: type,
    value
  }));
}