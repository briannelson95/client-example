function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { memo, useCallback, useMemo } from 'react';
import { Button } from '@sanity/ui';
import { EllipsisVerticalIcon } from '@sanity/icons';
import { PortableTextEditor, usePortableTextEditor } from '@sanity/portable-text-editor';
import { CollapseMenuButton, CollapseMenu } from '../../../../components/collapseMenu';
import { useActiveActionKeys, useFeatures, useFocusBlock } from './hooks';
import { getActionIcon } from './helpers';
const CollapseMenuMemo = /*#__PURE__*/memo(CollapseMenu);
const MENU_POPOVER_PROPS = {
  constrainSize: true,
  portal: true
};
const COLLAPSE_BUTTON_PROPS = {
  padding: 2,
  mode: 'bleed'
};
export const ActionMenu = /*#__PURE__*/memo(function ActionMenu(props) {
  const {
    disabled: disabledProp,
    groups,
    isFullscreen,
    collapsed
  } = props;
  const focusBlock = useFocusBlock();
  const features = useFeatures();
  const editor = usePortableTextEditor();
  const isVoidBlock = (focusBlock === null || focusBlock === void 0 ? void 0 : focusBlock._type) !== features.types.block.name;
  const isEmptyTextBlock = !isVoidBlock && (focusBlock === null || focusBlock === void 0 ? void 0 : focusBlock.children.length) === 1 && (focusBlock === null || focusBlock === void 0 ? void 0 : focusBlock.children[0].text) === '';
  const disabled = disabledProp || isVoidBlock;
  const actions = useMemo(() => groups.reduce((acc, group) => {
    return acc.concat(group.actions.map( // eslint-disable-next-line max-nested-callbacks
    (action, actionIndex) => {
      if (actionIndex === 0) return { ...action,
        firstInGroup: true
      };
      return action;
    }));
  }, []), [groups]);
  const activeKeys = useActiveActionKeys({
    actions
  });
  const handleMenuClose = useCallback(() => {
    PortableTextEditor.focus(editor);
  }, [editor]);
  const children = useMemo(() => actions.map(action => {
    const annotationDisabled = action.type === 'annotation' && isEmptyTextBlock;
    const active = activeKeys.includes(action.key);
    return /*#__PURE__*/React.createElement(CollapseMenuButton, _extends({
      disabled: disabled || annotationDisabled
    }, COLLAPSE_BUTTON_PROPS, {
      dividerBefore: action.firstInGroup,
      icon: getActionIcon(action, active),
      key: action.key // eslint-disable-next-line react/jsx-no-bind
      ,
      onClick: () => action.handle(active),
      selected: active,
      text: action.title || action.key,
      tooltipText: action.title || action.key,
      tooltipProps: {
        disabled: disabled || annotationDisabled,
        placement: isFullscreen ? 'bottom' : 'top',
        portal: 'default'
      }
    }));
  }), [actions, activeKeys, disabled, isEmptyTextBlock, isFullscreen]);
  const menuButtonProps = useMemo(() => ({
    button: /*#__PURE__*/React.createElement(Button, {
      icon: EllipsisVerticalIcon,
      mode: "bleed",
      padding: 2,
      disabled: disabled
    }),
    popover: MENU_POPOVER_PROPS
  }), [disabled]);
  return /*#__PURE__*/React.createElement(CollapseMenuMemo, {
    collapsed: collapsed,
    disableRestoreFocusOnClose: true,
    gap: 1,
    menuButtonProps: menuButtonProps,
    onMenuClose: handleMenuClose
  }, children);
});