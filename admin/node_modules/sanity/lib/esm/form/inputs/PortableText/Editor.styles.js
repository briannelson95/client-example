var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { Card, Container, rem } from '@sanity/ui';
import styled, { css } from 'styled-components';
import { ScrollContainer } from '../../../components/scroll';
import { createListName, TEXT_LEVELS } from './text';
export const Root = styled(Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  height: ", ";\n\n  &:not([hidden]) {\n    display: flex;\n  }\n\n  flex-direction: column;\n"])), _ref => {
  let {
    $fullscreen
  } = _ref;
  return $fullscreen ? '100%' : '15em';
});
export const ToolbarCard = styled(Card)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  z-index: 10;\n  line-height: 0;\n"])));
export const EditableCard = styled(Card)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  position: relative;\n  overflow: hidden;\n\n  & > [data-portal] {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    pointer-events: none;\n\n    & > * {\n      pointer-events: initial;\n    }\n  }\n\n  &::selection,\n  *::selection {\n    background-color: transparent;\n  }\n"])));
export const Scroller = styled(ScrollContainer)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  position: relative;\n  overflow: auto;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n\n  & > * {\n    flex: 1;\n    min-height: auto;\n  }\n"])));
export const EditableContainer = styled(Container)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  /* @todo: calculate from theme */\n  /* max-width: 728px; */\n"])));
export const EditableWrapper = styled(Card)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  height: 100%;\n  width: 100%;\n  counter-reset: ", ";\n  overflow: hidden;\n\n  & > div {\n    height: 100%;\n  }\n\n  & .pt-editable {\n    display: block;\n    width: 100%;\n    height: 100%;\n\n    ", "\n\n    & > .pt-list-item-bullet + .pt-list-item-number,\n    & > .pt-list-item-number + .pt-list-item-bullet {\n      margin-top: ", "px;\n      counter-reset: ", ";\n    }\n\n    & > :not(.pt-list-item) + .pt-list-item {\n      margin-top: ", "px;\n    }\n\n    /* Reset the list count if the element is not a numbered list item */\n    & > :not(.pt-list-item-number) {\n      counter-reset: ", ";\n    }\n\n    ", "\n\n    & > .pt-list-item + :not(.pt-list-item) {\n      margin-top: ", "px;\n    }\n\n    & > :first-child {\n      padding-top: ", "px;\n    }\n\n    & > :last-child {\n      padding-bottom: ", "px;\n    }\n\n    /* & > .pt-block {\n      & .pt-inline-object {\n      }\n    } */\n\n    & .pt-drop-indicator {\n      pointer-events: none;\n      border: 1px solid var(--card-focus-ring-color) !important;\n      height: 0px !important;\n      border-radius: 1px;\n      margin-top: -3px;\n      left: calc(\n        ", " - 1px\n      );\n      right: calc(\n        ", " - 1px\n      );\n      width: calc(\n        100% -\n          ", " + 2px\n      ) !important;\n    }\n  }\n"])), TEXT_LEVELS.map(l => createListName(l)).join(' '), TEXT_LEVELS.map(l => {
  return css(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n        & > .pt-list-item-number[class~='pt-list-item-level-", "'] {\n          counter-increment: ", ";\n        }\n      "])), l, createListName(l));
}), _ref2 => {
  let {
    theme
  } = _ref2;
  return theme.sanity.space[3];
}, TEXT_LEVELS.map(l => createListName(l)).join(' '), _ref3 => {
  let {
    theme
  } = _ref3;
  return theme.sanity.space[2];
}, TEXT_LEVELS.map(l => createListName(l)).join(' '), TEXT_LEVELS.slice(1).map(l => {
  return css(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n        & > .pt-list-item-level-", " + .pt-list-item-level-", " {\n          counter-reset: ", ";\n        }\n      "])), l, l - 1, createListName(l));
}), _ref4 => {
  let {
    theme
  } = _ref4;
  return theme.sanity.space[3];
}, _ref5 => {
  let {
    $isFullscreen,
    theme
  } = _ref5;
  return theme.sanity.space[$isFullscreen ? 5 : 3];
}, _ref6 => {
  let {
    $isFullscreen,
    theme
  } = _ref6;
  return theme.sanity.space[$isFullscreen ? 9 : 5];
}, _ref7 => {
  let {
    $isFullscreen,
    theme
  } = _ref7;
  return $isFullscreen ? rem(theme.sanity.space[5]) : rem(theme.sanity.space[3]);
}, _ref8 => {
  let {
    $isFullscreen,
    theme
  } = _ref8;
  return $isFullscreen ? rem(theme.sanity.space[5]) : rem(theme.sanity.space[3]);
}, _ref9 => {
  let {
    $isFullscreen,
    theme
  } = _ref9;
  return $isFullscreen ? rem(theme.sanity.space[5] * 2) : rem(theme.sanity.space[3] * 2);
});