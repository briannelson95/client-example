import { Box, Button, Text, Tooltip } from '@sanity/ui';
import React, { memo, useCallback } from 'react';
import { CopyIcon } from '@sanity/icons';
import { keyGenerator } from '@sanity/portable-text-editor';
const BlockActions = /*#__PURE__*/memo(function BlockActions(props) {
  const {
    block,
    insert
  } = props;
  const handleDuplicate = useCallback(() => {
    const dupBlock = { ...block,
      _type: 'block',
      _key: keyGenerator(),
      children: block.children || [],
      markDefs: block.markDefs || []
    };

    if (dupBlock.children) {
      dupBlock.children = dupBlock.children.map(c => ({ ...c,
        _key: keyGenerator()
      }));
    }

    insert(dupBlock);
  }, [block, insert]);
  return /*#__PURE__*/React.createElement(Tooltip, {
    content: /*#__PURE__*/React.createElement(Box, {
      padding: 2
    }, /*#__PURE__*/React.createElement(Text, {
      size: 1
    }, "Duplicate")),
    placement: "right",
    portal: "default"
  }, /*#__PURE__*/React.createElement(Button, {
    "aria-label": "Duplicate",
    fontSize: 1,
    icon: CopyIcon,
    onClick: handleDuplicate,
    padding: 2,
    mode: "bleed"
  }));
});
export const renderBlockActions = _ref => {
  let {
    block,
    insert
  } = _ref;
  return /*#__PURE__*/React.createElement(BlockActions, {
    block: block,
    insert: insert
  });
};