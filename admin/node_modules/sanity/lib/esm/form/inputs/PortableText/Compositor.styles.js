var _templateObject, _templateObject2;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { Layer } from '@sanity/ui';
import styled, { css } from 'styled-components';
import { focusRingBorderStyle, focusRingStyle } from '../../components/withFocusRing/helpers';
export const Root = styled.div(_ref => {
  let {
    theme
  } = _ref;
  const {
    focusRing,
    input
  } = theme.sanity;
  const base = theme.sanity.color.base;
  const color = theme.sanity.color.input;
  const border = {
    color: color.default.enabled.border,
    width: input.border.width
  };
  return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    --input-box-shadow: ", ";\n\n    position: relative;\n\n    & [data-wrapper] {\n      overflow: hidden;\n      position: relative;\n      z-index: 1;\n      padding: ", "px;\n    }\n\n    & [data-border] {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      box-shadow: var(--input-box-shadow);\n      z-index: 2;\n      border-radius: 1px;\n      pointer-events: none;\n    }\n\n    &:not([data-read-only])[data-focused] [data-border] {\n      --input-box-shadow: ", ";\n    }\n  "])), focusRingBorderStyle(border), input.border.width, focusRingStyle({
    base,
    border,
    focusRing
  }));
}); // This element only wraps the input when in "fullscreen" mode

export const ExpandedLayer = styled(Layer)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  &:not([data-fullscreen]) {\n    position: relative;\n  }\n"])));