var _templateObject, _templateObject2, _templateObject3;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { hues } from '@sanity/color';
import { PortableTextEditor, usePortableTextEditor, usePortableTextEditorSelection } from '@sanity/portable-text-editor';
import React, { useCallback, useEffect, useMemo, useState } from 'react';
import styled, { css } from 'styled-components';
import { Box, Card, Tooltip } from '@sanity/ui';
import { useFormBuilder } from '../../../useFormBuilder';
import { usePortableTextMarkers } from '../hooks/usePortableTextMarkers';
import { useMemberValidation } from '../hooks/useMemberValidation';
import { usePortableTextMemberItem } from '../hooks/usePortableTextMembers';
import { pathToString } from '../../../../field/paths';
import { InlineObjectToolbarPopover } from './InlineObjectToolbarPopover';

function rootStyle(_ref) {
  var _color$selectable, _color$selectable2, _color$selectable3;

  let {
    theme
  } = _ref;
  const {
    color,
    radius
  } = theme.sanity;
  return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    line-height: 0;\n    border-radius: ", "px;\n    padding: 2px;\n    box-shadow: inset 0 0 0 1px var(--card-border-color);\n    height: calc(1em - 1px);\n    margin-top: 0.0625em;\n    cursor: default;\n\n    &:not([hidden]) {\n      display: inline-flex;\n      align-items: center;\n      vertical-align: top;\n    }\n\n    &[data-ready-only] {\n      cursor: default;\n    }\n\n    &[data-focused] {\n      box-shadow: inset 0 0 0 1px ", ";\n      color: ", ";\n    }\n\n    &[data-selected] {\n      background-color: ", ";\n    }\n\n    &:not([data-focused]):not([data-selected]) {\n      @media (hover: hover) {\n        &:hover {\n          --card-border-color: ", ";\n        }\n      }\n    }\n\n    &[data-markers] {\n      --card-bg-color: ", ";\n    }\n\n    &[data-warning] {\n      --card-bg-color: ", ";\n\n      @media (hover: hover) {\n        &:hover {\n          --card-border-color: ", ";\n        }\n      }\n    }\n\n    &[data-invalid] {\n      --card-bg-color: ", ";\n      --card-border-color: ", ";\n\n      @media (hover: hover) {\n        &:hover {\n          --card-border-color: ", ";\n        }\n      }\n    }\n  "])), radius[2], (_color$selectable = color.selectable) === null || _color$selectable === void 0 ? void 0 : _color$selectable.primary.selected.border, (_color$selectable2 = color.selectable) === null || _color$selectable2 === void 0 ? void 0 : _color$selectable2.primary.pressed.fg, (_color$selectable3 = color.selectable) === null || _color$selectable3 === void 0 ? void 0 : _color$selectable3.primary.pressed.bg, color.input.default.hovered.border, color.dark ? hues.purple[950].hex : hues.purple[50].hex, color.muted.caution.hovered.bg, color.muted.caution.hovered.border, color.input.invalid.enabled.bg, color.input.invalid.enabled.border, color.input.invalid.hovered.border);
}

const Root = styled(Card)(rootStyle);
const PreviewSpan = styled.span(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: block;\n  max-width: calc(5em + 80px);\n  position: relative;\n"])));
const TooltipBox = styled(Box)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  max-width: 250px;\n"])));
export const InlineObject = /*#__PURE__*/React.forwardRef(function InlineObject(props, forwardedRef) {
  var _memberItem$elementRe2;

  const {
    attributes: {
      focused,
      selected,
      path
    },
    onOpenItem,
    readOnly,
    renderCustomMarkers,
    renderPreview,
    scrollElement,
    type,
    value
  } = props;

  const {
    Markers
  } = useFormBuilder().__internal.components;

  const editor = usePortableTextEditor();
  const editorSelection = usePortableTextEditorSelection();
  const markers = usePortableTextMarkers(path);
  const memberItem = usePortableTextMemberItem(pathToString(path));
  const {
    validation,
    hasError,
    hasWarning
  } = useMemberValidation(memberItem === null || memberItem === void 0 ? void 0 : memberItem.node);
  const hasValidationMarkers = validation.length > 0;
  const [showPopover, setShowPopover] = useState(false);
  const tone = useMemo(() => {
    if (hasError) {
      return 'critical';
    }

    if (hasWarning) {
      return 'caution';
    }

    if (selected || focused) {
      return 'primary';
    }

    return undefined;
  }, [focused, hasError, hasWarning, selected]);
  useEffect(() => {
    var _memberItem$elementRe;

    if (memberItem !== null && memberItem !== void 0 && (_memberItem$elementRe = memberItem.elementRef) !== null && _memberItem$elementRe !== void 0 && _memberItem$elementRe.current) {
      setShowPopover(!readOnly && focused && selected);
    }
  }, [focused, selected, editorSelection, memberItem === null || memberItem === void 0 ? void 0 : memberItem.elementRef, readOnly]);
  const preview = useMemo(() => /*#__PURE__*/React.createElement(PreviewSpan, null, renderPreview({
    fallbackTitle: 'Click to edit',
    layout: 'inline',
    schemaType: type,
    value
  })), [renderPreview, type, value]);
  const markersToolTip = useMemo(() => markers.length > 0 || validation.length > 0 ? /*#__PURE__*/React.createElement(Tooltip, {
    placement: "bottom",
    portal: "editor",
    content: /*#__PURE__*/React.createElement(TooltipBox, {
      padding: 2
    }, /*#__PURE__*/React.createElement(Markers, {
      markers: markers,
      validation: validation,
      renderCustomMarkers: renderCustomMarkers
    }))
  }, preview) : undefined, [Markers, markers, validation, preview, renderCustomMarkers]);
  const handleRemoveClick = useCallback(event => {
    event.preventDefault();
    event.stopPropagation();
    setShowPopover(false);
    const point = {
      path,
      offset: 0
    };
    const selection = {
      anchor: point,
      focus: point
    };
    PortableTextEditor.delete(editor, selection, {
      mode: 'children'
    });
    PortableTextEditor.focus(editor);
  }, [editor, path]);
  const handleEditClick = useCallback(() => {
    setShowPopover(false);
    PortableTextEditor.blur(editor);

    if (memberItem) {
      onOpenItem(memberItem.node.path);
    }
  }, [editor, memberItem, onOpenItem]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Root, {
    "data-focused": focused || undefined,
    "data-invalid": hasError || undefined,
    "data-warning": hasWarning || undefined,
    "data-selected": selected || undefined,
    "data-read-only": readOnly || undefined,
    "data-markers": hasValidationMarkers || undefined,
    tone: tone,
    forwardedAs: "span",
    contentEditable: false,
    ref: memberItem === null || memberItem === void 0 ? void 0 : memberItem.elementRef
  }, /*#__PURE__*/React.createElement("span", {
    ref: forwardedRef,
    onDoubleClick: handleEditClick
  }, markersToolTip || preview)), showPopover && /*#__PURE__*/React.createElement(InlineObjectToolbarPopover, {
    open: showPopover,
    setOpen: setShowPopover,
    onDelete: handleRemoveClick,
    onEdit: handleEditClick,
    referenceElement: (memberItem === null || memberItem === void 0 ? void 0 : (_memberItem$elementRe2 = memberItem.elementRef) === null || _memberItem$elementRe2 === void 0 ? void 0 : _memberItem$elementRe2.current) || null,
    scrollElement: scrollElement,
    title: (type === null || type === void 0 ? void 0 : type.title) || type.name
  }));
});