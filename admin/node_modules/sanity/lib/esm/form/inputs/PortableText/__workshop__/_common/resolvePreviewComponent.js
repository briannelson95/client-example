function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { Button, Card, Code, ErrorBoundary, Stack } from '@sanity/ui';
import React, { useCallback, useState } from 'react';
import { SanityDefaultPreview, SanityPreview } from '../../../../../preview';
export const resolvePreviewComponent = () => TestPreview;

function TestPreview(props) {
  var _props$type, _props$type$type;

  const [errorParams, setErrorParams] = useState(null);
  const handleCatch = useCallback(params => {
    setErrorParams(params);
  }, []);
  const handleRetry = useCallback(() => setErrorParams(null), []);

  if (errorParams) {
    return /*#__PURE__*/React.createElement(Card, {
      padding: 3,
      tone: "critical"
    }, /*#__PURE__*/React.createElement(Code, {
      language: "json"
    }, JSON.stringify(errorParams)), /*#__PURE__*/React.createElement(Stack, {
      marginTop: 3
    }, /*#__PURE__*/React.createElement(Button, {
      onClick: handleRetry,
      text: "Retry"
    })));
  } // NOTE: Hacky way to preview a block image in the Workshop


  if (((_props$type = props.type) === null || _props$type === void 0 ? void 0 : (_props$type$type = _props$type.type) === null || _props$type$type === void 0 ? void 0 : _props$type$type.name) === 'image') {
    return /*#__PURE__*/React.createElement(SanityDefaultPreview, _extends({}, props, {
      _renderAsBlockImage: true,
      layout: "block",
      value: {
        media: /*#__PURE__*/React.createElement("img", {
          src: "https://source.unsplash.com/960x960/?tree"
        }),
        ...props.value
      }
    }));
  }

  return /*#__PURE__*/React.createElement(ErrorBoundary, {
    onCatch: handleCatch
  }, /*#__PURE__*/React.createElement(SanityPreview, props));
}