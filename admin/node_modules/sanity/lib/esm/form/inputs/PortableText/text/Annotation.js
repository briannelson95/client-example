var _templateObject, _templateObject2;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { hues } from '@sanity/color';
import { PortableTextEditor, usePortableTextEditor, usePortableTextEditorSelection } from '@sanity/portable-text-editor';
import { Box, Tooltip } from '@sanity/ui';
import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import styled, { css } from 'styled-components';
import { DefaultMarkers } from '../_legacyDefaultParts/Markers';
import { useFormBuilder } from '../../../useFormBuilder';
import { useMemberValidation } from '../hooks/useMemberValidation';
import { usePortableTextMarkers } from '../hooks/usePortableTextMarkers';
import { usePortableTextMemberItem } from '../hooks/usePortableTextMembers';
import { pathToString } from '../../../../field/paths';
import { AnnotationToolbarPopover } from './AnnotationToolbarPopover';
const Root = styled.span(props => {
  var _theme$sanity$color$s, _theme$sanity$color$s2, _theme$sanity$color$s3, _theme$sanity$color$s4;

  const {
    $toneKey = 'default',
    theme
  } = props;
  return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      text-decoration: none;\n      display: inline;\n      background-color: ", ";\n      border-bottom: 1px dashed ", ";\n      color: ", ";\n\n      &[data-link] {\n        border-bottom: 1px solid ", ";\n      }\n\n      &[data-custom-markers] {\n        background-color: ", ";\n      }\n\n      &[data-warning] {\n        background-color: ", ";\n      }\n\n      &[data-error] {\n        background-color: ", ";\n      }\n    "])), (_theme$sanity$color$s = theme.sanity.color.selectable) === null || _theme$sanity$color$s === void 0 ? void 0 : _theme$sanity$color$s[$toneKey].enabled.bg, (_theme$sanity$color$s2 = theme.sanity.color.selectable) === null || _theme$sanity$color$s2 === void 0 ? void 0 : _theme$sanity$color$s2[$toneKey].enabled.fg, (_theme$sanity$color$s3 = theme.sanity.color.selectable) === null || _theme$sanity$color$s3 === void 0 ? void 0 : _theme$sanity$color$s3[$toneKey].enabled.fg, (_theme$sanity$color$s4 = theme.sanity.color.selectable) === null || _theme$sanity$color$s4 === void 0 ? void 0 : _theme$sanity$color$s4[$toneKey].enabled.fg, theme.sanity.color.dark ? hues.purple[950].hex : hues.purple[50].hex, theme.sanity.color.muted.caution.hovered.bg, theme.sanity.color.muted.critical.hovered.bg);
});
const TooltipBox = styled(Box).attrs({
  forwardedAs: 'span'
})(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  max-width: 250px;\n"])));
export const Annotation = function Annotation(props) {
  const {
    attributes: {
      focused,
      path,
      selected
    },
    children,
    onOpenItem,
    renderCustomMarkers,
    scrollElement,
    readOnly,
    type,
    value
  } = props;

  const {
    Markers = DefaultMarkers
  } = useFormBuilder().__internal.components;

  const annotationRef = useRef(null);
  const editor = usePortableTextEditor();
  const editorSelection = usePortableTextEditorSelection();
  const markDefPath = useMemo(() => [path[0]].concat(['markDefs', {
    _key: value._key
  }]), [path, value._key]);
  const [textElement, setTextElement] = useState(null);
  const memberItem = usePortableTextMemberItem(pathToString(markDefPath));
  const {
    validation,
    hasError,
    hasWarning
  } = useMemberValidation(memberItem === null || memberItem === void 0 ? void 0 : memberItem.node);
  const markers = usePortableTextMarkers(path);
  const [showPopover, setShowPopover] = useState(false);
  const text = useMemo(() => /*#__PURE__*/React.createElement("span", {
    ref: setTextElement,
    "data-annotation": ""
  }, children), [children]);
  useEffect(() => {
    setShowPopover(true);
  }, [editorSelection]);
  useEffect(() => {
    var _memberItem$elementRe;

    if (memberItem !== null && memberItem !== void 0 && (_memberItem$elementRe = memberItem.elementRef) !== null && _memberItem$elementRe !== void 0 && _memberItem$elementRe.current) {
      setShowPopover(!readOnly && focused && selected);
    }
  }, [focused, selected, memberItem === null || memberItem === void 0 ? void 0 : memberItem.elementRef, readOnly]);
  const markersToolTip = useMemo(() => validation.length > 0 || markers.length > 0 ? /*#__PURE__*/React.createElement(Tooltip, {
    placement: "bottom",
    portal: "default",
    content: /*#__PURE__*/React.createElement(TooltipBox, {
      padding: 2
    }, /*#__PURE__*/React.createElement(Markers, {
      markers: markers,
      renderCustomMarkers: renderCustomMarkers,
      validation: validation
    }))
  }, /*#__PURE__*/React.createElement("span", null, text)) : undefined, [Markers, markers, renderCustomMarkers, text, validation]);
  const handleEditClick = useCallback(event => {
    setShowPopover(false);
    PortableTextEditor.blur(editor);
    event.preventDefault();
    event.stopPropagation();

    if (memberItem) {
      onOpenItem(memberItem.node.path);
    }
  }, [editor, memberItem, onOpenItem]);
  const handleRemoveClick = useCallback(event => {
    event.preventDefault();
    event.stopPropagation();
    PortableTextEditor.removeAnnotation(editor, type);
    PortableTextEditor.focus(editor);
  }, [editor, type]);
  const isLink = type.name === 'link';
  const toneKey = useMemo(() => {
    if (hasError) {
      return 'critical';
    }

    if (hasWarning) {
      return 'caution';
    }

    if (isLink) {
      return 'primary';
    }

    return 'default';
  }, [isLink, hasError, hasWarning]);
  const hasCustomMarkers = markers.length > 0;
  return /*#__PURE__*/React.createElement(Root, {
    $toneKey: toneKey,
    ref: annotationRef,
    "data-link": isLink ? '' : undefined,
    "data-error": hasError ? '' : undefined,
    "data-warning": hasWarning ? '' : undefined,
    "data-custom-markers": hasCustomMarkers ? '' : undefined
  }, /*#__PURE__*/React.createElement("span", {
    ref: memberItem === null || memberItem === void 0 ? void 0 : memberItem.elementRef
  }, markersToolTip || text), showPopover && /*#__PURE__*/React.createElement(AnnotationToolbarPopover, {
    focused: focused,
    textElement: textElement,
    annotationElement: annotationRef === null || annotationRef === void 0 ? void 0 : annotationRef.current,
    scrollElement: scrollElement,
    onEdit: handleEditClick,
    onDelete: handleRemoveClick,
    title: (type === null || type === void 0 ? void 0 : type.title) || type.name
  }));
};