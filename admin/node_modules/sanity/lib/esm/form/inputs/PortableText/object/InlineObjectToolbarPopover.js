var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React, { useRef, useCallback, useEffect } from 'react';
import { Box, Button, Inline, Popover, Text, useGlobalKeyDown, useTheme } from '@sanity/ui';
import styled from 'styled-components';
import { EditIcon, TrashIcon } from '@sanity/icons';
const ToolbarPopover = styled(Popover)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  &[data-popper-reference-hidden='true'] {\n    display: none !important;\n  }\n"])));
const POPOVER_FALLBACK_PLACEMENTS = ['top', 'bottom'];
export function InlineObjectToolbarPopover(props) {
  const {
    open,
    onEdit,
    onDelete,
    referenceElement,
    scrollElement,
    setOpen,
    title
  } = props;
  const {
    sanity
  } = useTheme();
  const editButtonRef = useRef(null);
  const popoverScheme = sanity.color.dark ? 'light' : 'dark';
  const isTabbing = useRef(false); // Close floating toolbar on Escape
  // Focus to edit button on Tab

  useGlobalKeyDown(useCallback(event => {
    if (!open) {
      return;
    }

    if (event.key === 'Escape') {
      event.preventDefault();
      event.stopPropagation();
      isTabbing.current = false;
      setOpen(false);
    }

    if (event.key === 'Tab') {
      if (!isTabbing.current) {
        var _editButtonRef$curren;

        event.preventDefault();
        event.stopPropagation();
        (_editButtonRef$curren = editButtonRef.current) === null || _editButtonRef$curren === void 0 ? void 0 : _editButtonRef$curren.focus();
        isTabbing.current = true;
      }
    }
  }, [open, setOpen]));
  useEffect(() => {
    if (open && isTabbing.current) {
      var _editButtonRef$curren2;

      (_editButtonRef$curren2 = editButtonRef.current) === null || _editButtonRef$curren2 === void 0 ? void 0 : _editButtonRef$curren2.focus();
    }
  }, [open]);
  return /*#__PURE__*/React.createElement("div", {
    contentEditable: false
  }, /*#__PURE__*/React.createElement(ToolbarPopover, {
    boundaryElement: scrollElement,
    constrainSize: true,
    content: /*#__PURE__*/React.createElement(Box, {
      padding: 1
    }, /*#__PURE__*/React.createElement(Inline, {
      space: 1
    }, /*#__PURE__*/React.createElement(Box, {
      padding: 2
    }, /*#__PURE__*/React.createElement(Text, {
      weight: "semibold",
      size: 1
    }, title)), /*#__PURE__*/React.createElement(Button, {
      icon: EditIcon,
      mode: "bleed",
      onClick: onEdit,
      padding: 2,
      ref: editButtonRef,
      alt: "Edit object"
    }), /*#__PURE__*/React.createElement(Button, {
      icon: TrashIcon,
      mode: "bleed",
      padding: 2,
      onClick: onDelete,
      tone: "critical",
      alt: "Remove object"
    }))),
    fallbackPlacements: POPOVER_FALLBACK_PLACEMENTS,
    open: true,
    placement: "top",
    portal: "editor",
    referenceElement: referenceElement,
    scheme: popoverScheme
  }));
}