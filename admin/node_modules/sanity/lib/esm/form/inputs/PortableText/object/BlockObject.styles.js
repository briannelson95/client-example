var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { hues } from '@sanity/color';
import { Card, Flex, Box } from '@sanity/ui';
import styled, { css } from 'styled-components';
export const Root = styled(Card)(props => {
  var _color$selectable;

  const {
    color,
    radius,
    space
  } = props.theme.sanity;
  const overlay = css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    pointer-events: none;\n    content: '';\n    position: absolute;\n    top: -", "px;\n    bottom: -", "px;\n    left: -", "px;\n    right: -", "px;\n    border-radius: ", "px;\n    mix-blend-mode: ", ";\n  "])), space[1], space[1], space[1], space[1], radius[2], color.dark ? 'screen' : 'multiply');
  return css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    box-shadow: 0 0 0 1px var(--card-border-color);\n    border-radius: ", "px;\n    pointer-events: all;\n    position: relative;\n\n    &[data-focused] {\n      box-shadow: 0 0 0 1px ", ";\n    }\n\n    &:not([data-focused]):not([data-selected]) {\n      @media (hover: hover) {\n        &:hover {\n          --card-border-color: ", ";\n        }\n      }\n    }\n\n    &[data-markers] {\n      &:after {\n        ", "\n        background-color: ", ";\n      }\n    }\n\n    &[data-warning] {\n      &:after {\n        ", "\n        background-color: ", ";\n      }\n\n      @media (hover: hover) {\n        &:hover {\n          --card-border-color: ", ";\n        }\n      }\n    }\n\n    &[data-invalid] {\n      &:after {\n        ", "\n        background-color: ", ";\n      }\n\n      @media (hover: hover) {\n        &:hover {\n          --card-border-color: ", ";\n        }\n      }\n    }\n  "])), radius[1], (_color$selectable = color.selectable) === null || _color$selectable === void 0 ? void 0 : _color$selectable.primary.selected.border, color.input.default.hovered.border, overlay, color.dark ? hues.purple[950].hex : hues.purple[50].hex, overlay, color.muted.caution.hovered.bg, color.muted.caution.hovered.border, overlay, color.input.invalid.enabled.bg, color.input.invalid.hovered.border);
});
export const PreviewContainer = styled(Flex)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  user-select: none;\n  pointer-events: none;\n"])));
export const ChangeIndicatorWrapper = styled.div(_ref => {
  let {
    theme,
    $hasChanges
  } = _ref;
  const {
    space
  } = theme.sanity;
  return css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n      position: absolute;\n      width: ", "px;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      padding-left: ", "px;\n      user-select: none;\n\n      ", "\n\n      [data-dragged] & {\n        visibility: hidden;\n      }\n    "])), space[2], space[1], !$hasChanges && css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n        display: none;\n      "]))));
});
export const InnerFlex = styled(Flex)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  position: relative;\n\n  [data-dragged] > & {\n    opacity: 0.5;\n  }\n"])));
export const BlockActionsOuter = styled(Box)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  width: 25px;\n  position: relative;\n\n  [data-dragged] & {\n    visibility: hidden;\n  }\n"])));
export const BlockActionsInner = styled(Flex)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  position: absolute;\n  right: 0;\n  [data-dragged] & {\n    visibility: hidden;\n  }\n"])));
export const TooltipBox = styled(Box)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  max-width: 250px;\n"])));
export const BlockPreview = styled(Box)(props => {
  const color = props.theme.sanity.color.input;
  return css(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n    background-color: ", ";\n  "])), color.default.enabled.bg);
});