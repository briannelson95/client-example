var _templateObject, _templateObject2, _templateObject3, _templateObject4;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { Box, Container, Flex, Stack, Text } from '@sanity/ui';
import { useBoolean, useSelect } from '@sanity/ui-workshop';
import React from 'react';
import styled, { css } from 'styled-components';
const LEVELS = [0, 1, 2, 3, 4, 5, 6, 7, 8];
const BULLET_MARKERS = ['●', '○', '■'];
const NUMBER_FORMATS = ['number', 'lower-alpha', 'lower-roman'];
const FONT_SIZE_OPTIONS = {
  '0': 0,
  '1': 1,
  '2': 2,
  '3': 3,
  '4': 4
};
const SPACE_OPTIONS = {
  '0': 0,
  '1': 1,
  '2': 2,
  '3': 3,
  '4': 4,
  '5': 5,
  '6': 6,
  '7': 7,
  '8': 8,
  '9': 9
};
const items = [{
  level: 0
}, {
  level: 0,
  listItem: 'number'
}, {
  level: 0,
  listItem: 'number'
}, {
  level: 0,
  listItem: 'bullet'
}, {
  level: 1,
  listItem: 'bullet'
}, {
  level: 2,
  listItem: 'bullet'
}, {
  level: 0,
  listItem: 'number'
}, {
  level: 1,
  listItem: 'number'
}, {
  level: 0,
  listItem: 'number'
}, {
  level: 1,
  listItem: 'number'
}, {
  level: 0
}, {
  level: 0
}, {
  level: 0,
  listItem: 'bullet'
}, {
  level: 1,
  listItem: 'number'
}, {
  level: 1,
  listItem: 'number'
}, {
  level: 0,
  listItem: 'bullet'
}, {
  level: 0,
  listItem: 'number'
}, {
  level: 1,
  listItem: 'number'
}, {
  level: 2,
  listItem: 'number'
}, {
  level: 3,
  listItem: 'number'
}, {
  level: 4,
  listItem: 'number'
}, {
  level: 5,
  listItem: 'number'
}, {
  level: 5,
  listItem: 'number'
}, {
  level: 5,
  listItem: 'number'
}, {
  level: 5,
  listItem: 'number'
}, {
  level: 4,
  listItem: 'number'
}, {
  level: 3,
  listItem: 'number'
}, {
  level: 2,
  listItem: 'number'
}, {
  level: 1,
  listItem: 'number'
}, {
  level: 0,
  listItem: 'number'
}, {
  level: 0,
  listItem: 'number'
}, {
  level: 0,
  listItem: 'number'
}, {
  level: 0,
  listItem: 'number'
}, {
  level: 0,
  listItem: 'number'
}, {
  level: 0,
  listItem: 'number'
}, {
  level: 0,
  listItem: 'number'
}, {
  level: 0,
  listItem: 'number'
}, {
  level: 0,
  listItem: 'number'
}, {
  level: 0,
  listItem: 'number'
}, {
  level: 0,
  listItem: 'number'
}, {
  level: 0,
  listItem: 'number'
}, {
  level: 0,
  listItem: 'number'
}, {
  level: 0,
  listItem: 'number'
}, {
  level: 0,
  listItem: 'bullet'
}];
const EditableWrapper = styled(Stack)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  counter-reset: ", ";\n\n  &[data-debug] {\n    outline: 1px solid cyan;\n  }\n\n  ", "\n\n  & > [data-list-item='number'] + *:not([data-list-item='number']) {\n    counter-reset: ", ";\n  }\n\n  ", "\n\n  & > [data-list-item='bullet'] {\n    counter-reset: ", ";\n  }\n"])), LEVELS.map(l => "list-level-".concat(l)).join(' '), LEVELS.map(l => {
  return css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n      & > [data-level='", "'][data-list-item='number'] {\n        counter-increment: list-level-", ";\n      }\n    "])), l, l);
}), LEVELS.map(l => "list-level-".concat(l)).join(' '), LEVELS.slice(1).map(l => {
  return css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n      & > [data-level='", "'] + [data-level='", "'] {\n        counter-reset: list-level-", ";\n      }\n    "])), l, l - 1, l);
}), LEVELS.map(l => "list-level-".concat(l)).join(' '));
export function ListCounterStory() {
  const debug = useBoolean('Debug', false);
  const fontSize = useSelect('Font size', FONT_SIZE_OPTIONS, 2);
  const space = useSelect('Space', SPACE_OPTIONS, 3);
  return /*#__PURE__*/React.createElement(Flex, {
    paddingLeft: 6,
    paddingRight: 4,
    paddingY: [4, 5, 6]
  }, /*#__PURE__*/React.createElement(Container, {
    width: 1
  }, /*#__PURE__*/React.createElement(EditableWrapper, {
    "data-debug": debug ? '' : undefined,
    space: space
  }, items.map((item, itemIndex) => /*#__PURE__*/React.createElement(Block, {
    fontSize: fontSize,
    index: itemIndex,
    key: itemIndex,
    value: item
  })))));
}
const BlockRoot = styled.div(props => {
  const {
    $level
  } = props;
  return css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n    padding-left: ", "px;\n\n    [data-debug] & {\n      outline: 1px solid rgba(0 0 0 / 0.25);\n      outline-offset: -1px;\n    }\n\n    &[data-list-item] {\n      padding-left: ", "px;\n    }\n\n    &[data-list-item] > div > [data-prefix] {\n      position: absolute;\n      margin-left: -4.5rem;\n      width: 3.75rem;\n      text-align: right;\n      box-sizing: border-box;\n\n      [data-debug] & {\n        background: rgba(255 0 0 / 0.2);\n      }\n    }\n\n    &[data-list-item='number'] > div > [data-prefix] {\n      width: 4rem;\n      font-variant-numeric: tabular-nums;\n\n      & > span:before {\n        content: ", " '.';\n        content: ", "\n          '.';\n      }\n    }\n\n    &[data-list-item='bullet'] > div > [data-prefix] {\n      /* padding-right: 0.25rem; */\n\n      & > span {\n        position: relative;\n        top: -0.1875em;\n\n        &:before {\n          content: '", "';\n          font-size: 0.46666em;\n        }\n      }\n    }\n  "])), $level * 32, 32 + $level * 32, "counter(list-level-".concat($level, ")"), "counter(list-level-".concat($level, ", ").concat(NUMBER_FORMATS[$level % NUMBER_FORMATS.length], ")"), BULLET_MARKERS[$level % BULLET_MARKERS.length]);
});

function Block(props) {
  const {
    fontSize,
    index,
    value
  } = props;
  return /*#__PURE__*/React.createElement(BlockRoot, {
    $level: value.level || 0,
    "data-level": value.level || 0,
    "data-list-item": value.listItem
  }, /*#__PURE__*/React.createElement(Flex, {
    align: "flex-start"
  }, /*#__PURE__*/React.createElement(Text, {
    as: "span",
    "data-prefix": "",
    size: fontSize
  }), /*#__PURE__*/React.createElement(Box, {
    as: "span",
    flex: 1
  }, /*#__PURE__*/React.createElement(Text, {
    as: "span",
    "data-text": "",
    size: fontSize
  }, "Block ", /*#__PURE__*/React.createElement("code", null, "#", index), value.level !== undefined && /*#__PURE__*/React.createElement(React.Fragment, null, ", Level ", /*#__PURE__*/React.createElement("code", null, "#", value.level))))));
}