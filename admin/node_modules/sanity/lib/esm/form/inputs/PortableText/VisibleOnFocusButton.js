var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { Button, useLayer } from '@sanity/ui';
import React from 'react';
import styled from 'styled-components';
const Root = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: absolute;\n  z-index: ", ";\n  margin: 1px;\n\n  &:not(:focus) {\n    height: 1px;\n    width: 1px;\n    overflow: hidden;\n    clip: rect(1px, 1px, 1px, 1px);\n  }\n"])), _ref => {
  let {
    $zIndex
  } = _ref;
  return $zIndex;
});
export function VisibleOnFocusButton(props) {
  const {
    children,
    onClick
  } = props;
  const {
    zIndex
  } = useLayer();
  return /*#__PURE__*/React.createElement(Root, {
    mode: "ghost",
    onClick: onClick,
    $zIndex: zIndex + 1
  }, children);
}