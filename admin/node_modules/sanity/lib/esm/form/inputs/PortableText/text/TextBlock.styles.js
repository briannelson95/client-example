var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { hues } from '@sanity/color';
import { Box, Flex } from '@sanity/ui';
import styled, { css } from 'styled-components';
import { TEXT_BULLET_MARKERS, TEXT_NUMBER_FORMATS } from './constants';
import { createListName } from './helpers';

function textBlockStyle(props) {
  var _color$selectable;

  const {
    $level,
    theme
  } = props;
  const {
    color,
    fonts,
    radius,
    space
  } = theme.sanity;
  const numberMarker = TEXT_NUMBER_FORMATS[($level - 1) % TEXT_NUMBER_FORMATS.length];
  const bulletMarker = TEXT_BULLET_MARKERS[($level - 1) % TEXT_BULLET_MARKERS.length];
  return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    --marker-bg-color: transparent;\n\n    mix-blend-mode: ", ";\n    position: relative;\n\n    & > [data-ui='TextBlock_inner'] {\n      position: relative;\n      flex: 1;\n    }\n\n    & > div:before {\n      content: '';\n      position: absolute;\n      top: -", "px;\n      bottom: -", "px;\n      left: -", "px;\n      right: -", "px;\n      border-radius: ", "px;\n      background-color: var(--marker-bg-color);\n    }\n\n    &[data-custom-markers] {\n      --marker-bg-color: ", ";\n    }\n\n    &[data-warning] {\n      --card-border-color: ", ";\n      --marker-bg-color: ", ";\n    }\n\n    &[data-error] {\n      --card-border-color: ", ";\n      --marker-bg-color: ", ";\n    }\n\n    & [data-list-prefix] {\n      position: absolute;\n      margin-left: -4.5rem;\n      width: 3.75rem;\n      text-align: right;\n      box-sizing: border-box;\n    }\n\n    &[data-list-item='number'] [data-list-prefix] {\n      font-variant-numeric: tabular-nums;\n\n      & > span:before {\n        content: counter(", ") '.';\n        content: counter(", ", ", ") '.';\n      }\n    }\n\n    &[data-list-item='bullet'] [data-list-prefix] {\n      & > span {\n        position: relative;\n        top: -0.1875em;\n\n        &:before {\n          content: '", "';\n          font-size: 0.46666em;\n        }\n      }\n    }\n\n    & [data-text] {\n      overflow-wrap: anywhere;\n      text-transform: none;\n      white-space: pre-wrap;\n      font-family: ", ";\n      flex: 1;\n\n      *::selection {\n        background-color: ", ";\n      }\n    }\n  "])), color.dark ? 'screen' : 'multiply', space[1], space[1], space[1], space[1], radius[2], color.dark ? hues.purple[950].hex : hues.purple[50].hex, color.muted.caution.enabled.border, color.muted.caution.hovered.bg, color.muted.critical.enabled.border, color.muted.critical.hovered.bg, createListName($level), createListName($level), numberMarker, bulletMarker, fonts.text.family, (_color$selectable = color.selectable) === null || _color$selectable === void 0 ? void 0 : _color$selectable.primary.pressed.bg);
}

export const TextRoot = styled.div(textBlockStyle);
export const TextBlockFlexWrapper = styled(Flex)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: relative;\n"])));
export const ListPrefixWrapper = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  user-select: none;\n  white-space: nowrap;\n"])));
export const BlockExtrasContainer = styled(Box)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  user-select: none;\n"])));
export const BlockActionsOuter = styled(Box)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  line-height: 0;\n  width: 25px;\n  position: relative;\n"])));
export const BlockActionsInner = styled(Flex)(_ref => {
  let {
    theme
  } = _ref;
  const {
    fonts,
    space
  } = theme.sanity;
  const textSize1 = fonts.text.sizes[1];
  const textSize2 = fonts.text.sizes[2];
  const capHeight1 = textSize1.lineHeight - textSize1.ascenderHeight - textSize1.descenderHeight;
  const capHeight2 = textSize2.lineHeight - textSize2.ascenderHeight - textSize2.descenderHeight;
  const buttonHeight = capHeight1 + space[2] + space[2]; // This calculates the following:
  // > var buttonHeight = 25px
  // > var capHeight2 = 11px
  // > 0 - (buttonHeight - capHeight2) / 2 = -7px

  const negativeTop = 0 - (buttonHeight - capHeight2) / 2;
  return css(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n    user-select: none;\n    position: absolute;\n    right: 0;\n    top: ", "px;\n  "])), negativeTop);
});
export const TooltipBox = styled(Box)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  max-width: 250px;\n"])));
export const TextFlex = styled(Flex)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  position: relative;\n  padding-left: ", "px;\n"])), _ref2 => {
  let {
    $level
  } = _ref2;
  return $level ? $level * 32 : 0;
});
export const ChangeIndicatorWrapper = styled.div(_ref3 => {
  let {
    theme,
    $hasChanges
  } = _ref3;
  const {
    space
  } = theme.sanity;
  return css(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n      position: absolute;\n      width: ", "px;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      padding-left: ", "px;\n      user-select: none;\n\n      ", "\n    "])), space[2], space[1], !$hasChanges && css(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n        display: none;\n      "]))));
});