import { Card, Code, PortalProvider, Stack, Text, usePortal } from '@sanity/ui';
import { useAction, useBoolean, useSelect } from '@sanity/ui-workshop';
import React, { useMemo } from 'react';
import { useSource } from '../../../../../studio';
import { createPatchChannel } from '../../../../patch/PatchChannel';
import { EMPTY_ARRAY } from '../../../../utils/empty'; // import {EditObject} from '../../object'

// import {resolveInputComponent, resolvePreviewComponent} from './formBuilder'
import { schema } from './schemaType';
const TYPE_OPTIONS = {
  Annotation: 'annotation',
  'Object block': 'blockObject',
  'Inline object': 'inlineObject'
};
const TYPE_DATA = {
  annotation: {
    editorPath: [{
      _key: '1'
    }, 'children', {
      _key: '1-2'
    }],
    focusPath: [{
      _key: '1'
    }, 'markDefs', {
      _key: 'm1'
    }]
  },
  blockObject: {
    editorPath: undefined,
    focusPath: [{
      _key: '2'
    }]
  },
  inlineObject: {
    editorPath: undefined,
    focusPath: [{
      _key: '1'
    }, 'children', {
      _key: '1-3'
    }]
  }
};
export function EditObjectsStory() {
  const open = useBoolean('Open', false);
  const kind = useSelect('Kind', TYPE_OPTIONS, 'annotation') || 'annotation';
  const portal = usePortal();
  const {
    form
  } = useSource();
  const {
    editorPath,
    focusPath
  } = useMemo(() => {
    var _TYPE_DATA$kind, _TYPE_DATA$kind2, _TYPE_DATA$kind3;

    if (!open) {
      return {
        editorPath: EMPTY_ARRAY,
        focusPath: EMPTY_ARRAY
      };
    }

    return {
      editorPath: ((_TYPE_DATA$kind = TYPE_DATA[kind]) === null || _TYPE_DATA$kind === void 0 ? void 0 : _TYPE_DATA$kind.editorPath) || ((_TYPE_DATA$kind2 = TYPE_DATA[kind]) === null || _TYPE_DATA$kind2 === void 0 ? void 0 : _TYPE_DATA$kind2.focusPath) || EMPTY_ARRAY,
      focusPath: ((_TYPE_DATA$kind3 = TYPE_DATA[kind]) === null || _TYPE_DATA$kind3 === void 0 ? void 0 : _TYPE_DATA$kind3.focusPath) || EMPTY_ARRAY
    };
  }, [kind, open]);
  const markers = useMemo(() => [], []);
  const presence = useMemo(() => [], []);
  const readOnly = false;
  const value = useMemo(() => [{
    _type: 'block',
    _key: '1',
    children: [{
      _type: 'span',
      _key: '1-1',
      text: 'test'
    }, {
      _type: 'span',
      _key: '1-2',
      text: 'annotation',
      marks: ['m1']
    }, {
      _type: 'myInlineObject',
      _key: '1-3',
      title: 'The inline object'
    }],
    markDefs: [{
      _type: 'link',
      _key: 'm1',
      url: 'test'
    }]
  }, {
    _type: 'myObjectBlock',
    _key: '2'
  }], []);
  const objectEditData = useMemo(() => ({
    editorPath,
    formBuilderPath: focusPath,
    kind: kind,
    returnToSelection: null
  }), [editorPath, focusPath, kind]);
  const handleBlur = useAction('onBlur');
  const handleChange = useAction('onChange');
  const handleClose = useAction('onClose');
  const handleFocus = useAction('onFocus');
  const patchChannel = useMemo(() => createPatchChannel(), []);
  const type = schema.get('body');

  if (!type) {
    return /*#__PURE__*/React.createElement(Card, {
      height: "fill",
      overflow: "auto",
      tone: "critical"
    }, /*#__PURE__*/React.createElement(Stack, {
      padding: 4,
      space: 4
    }, /*#__PURE__*/React.createElement(Text, {
      weight: "bold"
    }, "\"body\" type not found"), /*#__PURE__*/React.createElement(Code, {
      language: "json",
      size: 1
    }, JSON.stringify({
      schema: schema._original,
      schemaErrors: schema._validation
    }, null, 2))));
  }

  return /*#__PURE__*/React.createElement(PortalProvider, {
    __unstable_elements: {
      default: portal.element
    }
  });
}