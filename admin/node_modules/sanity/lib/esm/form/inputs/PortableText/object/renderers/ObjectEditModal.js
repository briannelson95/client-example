import { PortableTextEditor, usePortableTextEditor } from '@sanity/portable-text-editor';
import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import { _getModalOption } from '../helpers';
import { DefaultEditDialog } from './DefaultEditDialog';
import { PopoverEditDialog } from './PopoverEditDialog';
export function ObjectEditModal(props) {
  const {
    memberItem,
    onClose,
    scrollElement,
    kind
  } = props;
  const {
    schemaType
  } = memberItem.node;
  const modalOption = useMemo(() => _getModalOption({
    schemaType
  }), [schemaType]);
  const modalType = useMemo(() => {
    if (modalOption.type) return modalOption.type; // If the object is inline or an annotation, then default to "popover"

    if (kind === 'inlineObject' || kind === 'annotation') return 'popover';
    return 'dialog';
  }, [kind, modalOption]);
  const [firstField, setFirstField] = useState(null);
  const editor = usePortableTextEditor();
  const initialSelection = useRef(PortableTextEditor.getSelection(editor));
  const handleClose = useCallback(() => {
    onClose(); // Force a new selection here as the selection is a callback dep. for showing the popup

    PortableTextEditor.select(editor, null);
    PortableTextEditor.focus(editor);
    PortableTextEditor.select(editor, initialSelection.current);
  }, [editor, onClose]);
  const title = /*#__PURE__*/React.createElement(React.Fragment, null, "Edit ", memberItem.node.schemaType.title); // Set focus on the first field

  useEffect(() => {
    if (firstField) {
      return;
    }

    const firstFieldMember = memberItem.node.members.find(m => m.kind === 'field');

    if (firstFieldMember && firstFieldMember.kind === 'field') {
      const firstFieldElm = document.getElementById(firstFieldMember.field.id);

      if (firstFieldElm) {
        setFirstField(firstFieldElm);
        firstFieldElm.focus();
      }
    }
  }, [firstField, memberItem]);

  if (modalType === 'popover') {
    return /*#__PURE__*/React.createElement(PopoverEditDialog, {
      elementRef: memberItem.elementRef,
      onClose: handleClose,
      scrollElement: scrollElement,
      title: title
    }, props.children);
  }

  return /*#__PURE__*/React.createElement(DefaultEditDialog, {
    title: title,
    onClose: handleClose
  }, props.children);
}