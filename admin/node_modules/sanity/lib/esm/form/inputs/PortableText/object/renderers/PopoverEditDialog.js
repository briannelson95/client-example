var _templateObject, _templateObject2, _templateObject3, _templateObject4;

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/* eslint-disable react/no-unused-prop-types */
import { CloseIcon } from '@sanity/icons';
import { Box, Button, Container, Flex, Popover, PortalProvider, Text, useBoundaryElement, useClickOutside, useElementRect, useGlobalKeyDown, usePortal } from '@sanity/ui';
import React, { useCallback, useEffect, useMemo, useState } from 'react';
import styled from 'styled-components';
import { PresenceOverlay } from '../../../../../presence';
import { debugElement } from './debug';
const RootPopover = styled(Popover)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  &[data-popper-reference-hidden='true'] {\n    visibility: hidden;\n    pointer-events: none;\n  }\n\n  & > div {\n    overflow: hidden;\n  }\n"])));
const ContentContainer = styled(Container)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  &:not([hidden]) {\n    display: flex;\n  }\n  direction: column;\n"])));
const ContentScrollerBox = styled(Box)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  /* Prevent overflow caused by change indicator */\n  overflow-x: hidden;\n  overflow-y: auto;\n"])));
const ContentHeaderBox = styled(Box)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  background-color: var(--card-bg-color);\n  box-shadow: 0 1px 0 var(--card-shadow-outline-color);\n  position: relative;\n  z-index: 10;\n  min-height: auto;\n"])));
const POPOVER_FALLBACK_PLACEMENTS = ['top', 'bottom'];
export function PopoverEditDialog(props) {
  const {
    width,
    elementRef,
    onClose,
    scrollElement
  } = props;
  useGlobalKeyDown(useCallback(event => {
    if (event.key === 'Escape') {
      onClose();
    }
  }, [onClose]));
  const [forceUpdate, setForceUpdate] = useState(0);
  const virtualElement = useMemo(() => {
    var _elementRef$current;

    if (!(elementRef !== null && elementRef !== void 0 && (_elementRef$current = elementRef.current) !== null && _elementRef$current !== void 0 && _elementRef$current.getBoundingClientRect())) {
      return null;
    }

    return {
      contextElement: elementRef.current || undefined,
      getBoundingClientRect: () => {
        var _elementRef$current2;

        return ((_elementRef$current2 = elementRef.current) === null || _elementRef$current2 === void 0 ? void 0 : _elementRef$current2.getBoundingClientRect()) || null;
      }
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [elementRef === null || elementRef === void 0 ? void 0 : elementRef.current, forceUpdate]);
  const [rootElement, setRootElement] = useState(null);
  const boundaryElement = useBoundaryElement();
  const boundaryElementRect = useElementRect(boundaryElement.element);
  const contentStyle = useMemo(() => ({
    opacity: boundaryElementRect ? undefined : 0,
    width: boundaryElementRect ? "".concat(boundaryElementRect.width - 16, "px") : undefined
  }), [boundaryElementRect]);
  const handleScrollOrResize = useCallback(() => {
    setForceUpdate(forceUpdate + 1);
  }, [forceUpdate]);
  useEffect(() => {
    if (scrollElement) {
      scrollElement.addEventListener('scroll', handleScrollOrResize, true);
    }

    return () => {
      if (scrollElement) {
        scrollElement.removeEventListener('scroll', handleScrollOrResize, true);
      }
    };
  }, [handleScrollOrResize, scrollElement]);
  return /*#__PURE__*/React.createElement(RootPopover, {
    constrainSize: true,
    content: /*#__PURE__*/React.createElement(Content, _extends({}, props, {
      rootElement: rootElement,
      style: contentStyle,
      width: width
    })),
    fallbackPlacements: POPOVER_FALLBACK_PLACEMENTS,
    placement: "bottom",
    open: true,
    portal: "default",
    ref: setRootElement,
    referenceElement: virtualElement || debugElement
  });
}

function Content(props) {
  var _portal$elements;

  const {
    onClose,
    rootElement,
    style,
    width = 0,
    title
  } = props;
  const {
    element: boundaryElement
  } = useBoundaryElement();
  const portal = usePortal();
  useClickOutside(onClose, [rootElement], boundaryElement);
  return /*#__PURE__*/React.createElement(ContentContainer, {
    style: style,
    width: width
  }, /*#__PURE__*/React.createElement(Flex, {
    direction: "column",
    flex: 1
  }, /*#__PURE__*/React.createElement(ContentHeaderBox, {
    padding: 1
  }, /*#__PURE__*/React.createElement(Flex, {
    align: "center"
  }, /*#__PURE__*/React.createElement(Box, {
    flex: 1,
    padding: 2
  }, /*#__PURE__*/React.createElement(Text, {
    weight: "semibold"
  }, title)), /*#__PURE__*/React.createElement(Button, {
    icon: CloseIcon,
    mode: "bleed",
    onClick: onClose,
    padding: 2
  }))), /*#__PURE__*/React.createElement(ContentScrollerBox, {
    flex: 1
  }, /*#__PURE__*/React.createElement(PresenceOverlay, {
    margins: [0, 0, 1, 0]
  }, /*#__PURE__*/React.createElement(Box, {
    padding: 3
  }, /*#__PURE__*/React.createElement(PortalProvider, {
    element: (_portal$elements = portal.elements) === null || _portal$elements === void 0 ? void 0 : _portal$elements.default
  }, props.children))))));
}