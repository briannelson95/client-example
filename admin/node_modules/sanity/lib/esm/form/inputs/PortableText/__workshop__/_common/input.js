var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { TextArea } from '@sanity/ui';
import React, { forwardRef, useImperativeHandle, useRef } from 'react';
import styled, { css } from 'styled-components';
import { PortableTextInput } from '../../PortableTextInput';
import { defaultResolveInputComponent } from '../../../../studio/inputResolver/inputResolver';
const DebugTextArea = styled(TextArea)(_ref => {
  let {
    theme
  } = _ref;
  return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    font-family: ", ";\n  "])), theme.sanity.fonts.code.family);
});
const DebugInput = /*#__PURE__*/forwardRef(function DebugInput(props, ref) {
  const rootRef = useRef(null);
  useImperativeHandle(ref, () => ({
    blur: () => {
      var _rootRef$current;

      return (_rootRef$current = rootRef.current) === null || _rootRef$current === void 0 ? void 0 : _rootRef$current.blur();
    },
    focus: () => {
      var _rootRef$current2;

      return (_rootRef$current2 = rootRef.current) === null || _rootRef$current2 === void 0 ? void 0 : _rootRef$current2.focus();
    }
  }));
  return /*#__PURE__*/React.createElement(DebugTextArea, {
    padding: 3,
    radius: 1,
    readOnly: true,
    ref: rootRef,
    rows: 10,
    value: JSON.stringify(props.value, null, 2)
  });
});
export function inputResolver(input, form) {
  if (!input.type) {
    throw new Error('inputResolver: missing subtype');
  }

  if (input.type.name === 'block') {
    return PortableTextInput;
  } // if (input.type.name === 'document') {
  //   // @TODO: remove this mutation
  //   input.type.name = 'object'
  // }


  return defaultResolveInputComponent(input.type) || DebugInput;
}