var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { ErrorOutlineIcon, InfoOutlineIcon, WarningOutlineIcon } from '@sanity/icons';
import { Box, Flex, Stack, Text } from '@sanity/ui';
import React from 'react';
import styled, { css } from 'styled-components';
import { useFormBuilder } from '../../../useFormBuilder';

const getIcon = level => {
  if (level === 'error') {
    return /*#__PURE__*/React.createElement(ErrorOutlineIcon, null);
  }

  if (level === 'warning') {
    return /*#__PURE__*/React.createElement(WarningOutlineIcon, null);
  }

  return /*#__PURE__*/React.createElement(InfoOutlineIcon, null);
};

const IconText = styled(Text)(_ref => {
  let {
    theme
  } = _ref;
  return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    &[data-info] {\n      color: ", ";\n    }\n\n    &[data-warning] {\n      color: ", ";\n    }\n\n    &[data-error] {\n      color: ", ";\n    }\n  "])), theme.sanity.color.muted.primary.enabled.fg, theme.sanity.color.muted.caution.enabled.fg, theme.sanity.color.muted.critical.enabled.fg);
});
export function DefaultMarkers(props) {
  const {
    markers,
    validation,
    renderCustomMarkers
  } = props;

  const {
    CustomMarkers
  } = useFormBuilder().__internal.components;

  if (markers.length === 0 && validation.length === 0) {
    return null;
  }

  return /*#__PURE__*/React.createElement(Stack, {
    space: 1
  }, validation.length > 0 && validation.map((_ref2, index) => {
    let {
      message,
      level
    } = _ref2;
    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/no-array-index-key
      React.createElement(Flex, {
        key: "validationItem-".concat(index)
      }, /*#__PURE__*/React.createElement(Box, {
        marginRight: 2,
        marginBottom: index + 1 === validation.length ? 0 : 2
      }, /*#__PURE__*/React.createElement(IconText, {
        size: 1,
        "data-error": level === 'error' ? '' : undefined,
        "data-warning": level === 'warning' ? '' : undefined,
        "data-info": level === 'info' ? '' : undefined
      }, getIcon(level))), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
        size: 1
      }, message || 'Error')))
    );
  }), markers.length > 0 && /*#__PURE__*/React.createElement(Box, {
    marginTop: validation.length > 0 ? 3 : 0
  }, renderCustomMarkers && renderCustomMarkers(markers), !renderCustomMarkers && /*#__PURE__*/React.createElement(CustomMarkers, {
    markers: markers
  })));
}