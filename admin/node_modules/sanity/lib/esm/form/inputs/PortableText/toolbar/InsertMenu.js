import React, { memo, useCallback, useMemo } from 'react';
import { AddIcon } from '@sanity/icons';
import { Button } from '@sanity/ui';
import { PortableTextEditor, usePortableTextEditor } from '@sanity/portable-text-editor';
import { CollapseMenu, CollapseMenuButton } from '../../../../components/collapseMenu';
import { useFeatures, useFocusBlock } from './hooks';
const CollapseMenuMemo = /*#__PURE__*/memo(CollapseMenu);
const MENU_POPOVER_PROPS = {
  constrainSize: true,
  portal: true
};
export const InsertMenu = /*#__PURE__*/memo(function InsertMenu(props) {
  const {
    disabled,
    items,
    isFullscreen,
    collapsed
  } = props;
  const features = useFeatures();
  const focusBlock = useFocusBlock();
  const editor = usePortableTextEditor();
  const isVoidFocus = focusBlock && focusBlock._type !== features.types.block.name;
  const handleMenuClose = useCallback(() => {
    PortableTextEditor.focus(editor);
  }, [editor]);
  const children = useMemo(() => {
    return items.map(item => {
      var _item$type$type;

      const title = item.type.title || ((_item$type$type = item.type.type) === null || _item$type$type === void 0 ? void 0 : _item$type$type.name);
      return /*#__PURE__*/React.createElement(CollapseMenuButton, {
        "aria-label": "Insert ".concat(title).concat(item.inline ? ' (inline)' : ' (block)'),
        padding: 2,
        mode: "bleed",
        disabled: disabled || isVoidFocus && item.inline === true,
        icon: item.icon,
        key: item.key // eslint-disable-next-line react/jsx-no-bind, react/jsx-handler-names
        ,
        onClick: item.handle,
        text: title,
        tooltipText: "Insert ".concat(title),
        tooltipProps: {
          disabled,
          placement: isFullscreen ? 'bottom' : 'top',
          portal: 'default'
        }
      });
    });
  }, [items, disabled, isVoidFocus, isFullscreen]);
  const menuButtonProps = useMemo(() => ({
    button: /*#__PURE__*/React.createElement(Button, {
      icon: AddIcon,
      mode: "bleed",
      padding: 2,
      disabled: disabled
    }),
    popover: MENU_POPOVER_PROPS
  }), [disabled]);
  return /*#__PURE__*/React.createElement(CollapseMenuMemo, {
    collapsed: collapsed,
    collapseText: false,
    disableRestoreFocusOnClose: true,
    gap: 1,
    menuButtonProps: menuButtonProps,
    onMenuClose: handleMenuClose
  }, children);
});