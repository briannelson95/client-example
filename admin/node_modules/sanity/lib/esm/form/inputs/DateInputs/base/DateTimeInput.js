function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useCallback, useRef, useState } from 'react';
import FocusLock from 'react-focus-lock';
import { Box, Button, LayerProvider, Popover, useClickOutside, useForwardedRef } from '@sanity/ui';
import { CalendarIcon } from '@sanity/icons';
import { DatePicker } from './DatePicker';
import { LazyTextInput } from './LazyTextInput';
export const DateTimeInput = /*#__PURE__*/forwardRef(function DateTimeInput(props, ref) {
  const {
    value,
    inputValue,
    onInputChange,
    onChange,
    selectTime,
    timeStep,
    ...rest
  } = props;
  const [popoverRef, setPopoverRef] = useState(null);
  const forwardedRef = useForwardedRef(ref);
  const buttonRef = useRef(null);
  const [isPickerOpen, setPickerOpen] = useState(false);
  useClickOutside(() => setPickerOpen(false), [popoverRef]);
  const handleDeactivation = useCallback(() => {
    var _forwardedRef$current, _forwardedRef$current2;

    (_forwardedRef$current = forwardedRef.current) === null || _forwardedRef$current === void 0 ? void 0 : _forwardedRef$current.focus();
    (_forwardedRef$current2 = forwardedRef.current) === null || _forwardedRef$current2 === void 0 ? void 0 : _forwardedRef$current2.select();
  }, [forwardedRef]);
  const handleKeyUp = useCallback(e => {
    if (e.key === 'Escape') {
      setPickerOpen(false);
    }
  }, []);
  const handleClick = useCallback(() => setPickerOpen(true), []);
  const suffix = /*#__PURE__*/React.createElement(Box, {
    padding: 1
  }, /*#__PURE__*/React.createElement(Button, {
    ref: buttonRef,
    icon: CalendarIcon,
    mode: "bleed",
    padding: 2,
    onClick: handleClick,
    style: {
      display: 'block'
    },
    "data-testid": "select-date-button"
  }));
  return /*#__PURE__*/React.createElement(LazyTextInput, _extends({
    ref: forwardedRef
  }, rest, {
    value: inputValue,
    onChange: onInputChange,
    suffix: isPickerOpen ?
    /*#__PURE__*/
    // Note: we're conditionally inserting the popover here due to an
    // issue with popovers rendering incorrectly on subsequent renders
    // see https://github.com/sanity-io/design/issues/519
    React.createElement(LayerProvider, {
      zOffset: 1000
    }, /*#__PURE__*/React.createElement(Popover, {
      constrainSize: true,
      "data-testid": "date-input-dialog",
      portal: true,
      content: /*#__PURE__*/React.createElement(Box, {
        overflow: "auto"
      }, /*#__PURE__*/React.createElement(FocusLock, {
        onDeactivation: handleDeactivation
      }, /*#__PURE__*/React.createElement(DatePicker, {
        selectTime: selectTime,
        timeStep: timeStep,
        onKeyUp: handleKeyUp,
        value: value,
        onChange: onChange
      }))),
      open: true,
      placement: "bottom-end",
      ref: setPopoverRef,
      radius: 2
    }, suffix)) : suffix
  }));
});