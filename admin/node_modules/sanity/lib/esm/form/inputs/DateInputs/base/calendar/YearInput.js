function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { LazyTextInput } from '../LazyTextInput';
export const YearInput = _ref => {
  let {
    onChange,
    ...props
  } = _ref;
  const handleChange = React.useCallback(event => {
    const numericValue = parseInt(event.currentTarget.value, 10);

    if (!isNaN(numericValue)) {
      onChange(numericValue);
    }
  }, [onChange]);
  return /*#__PURE__*/React.createElement(LazyTextInput, _extends({}, props, {
    onChange: handleChange,
    inputMode: "numeric"
  }));
};