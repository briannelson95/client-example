function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { TextInput } from '@sanity/ui';

/**
 * A TextInput that only emit onChange when it has to
 * By default it will only emit onChange when: 1) user hits enter or 2) user leaves the
 * field (e.g. onBlur) and the input value at this time is different from the given `value` prop
 */
export const LazyTextInput = /*#__PURE__*/React.forwardRef(function LazyTextInput(_ref, forwardedRef) {
  let {
    onChange,
    onBlur,
    onKeyPress,
    value,
    ...rest
  } = _ref;
  const [inputValue, setInputValue] = React.useState();
  const handleChange = React.useCallback(event => {
    setInputValue(event.currentTarget.value);
  }, []);
  const checkEvent = React.useCallback(event => {
    const currentValue = event.currentTarget.value;

    if (currentValue !== "".concat(value)) {
      if (onChange) {
        onChange(event);
      }
    }

    setInputValue(undefined);
  }, [onChange, value]);
  const handleBlur = React.useCallback(e => {
    checkEvent(e);

    if (onBlur) {
      onBlur(e);
    }
  }, [checkEvent, onBlur]);
  const handleKeyPress = React.useCallback(e => {
    if (e.key === 'Enter') {
      checkEvent(e);
    }

    if (onKeyPress) {
      onKeyPress(e);
    }
  }, [checkEvent, onKeyPress]);
  return /*#__PURE__*/React.createElement(TextInput, _extends({}, rest, {
    "data-testid": "date-input",
    ref: forwardedRef,
    value: inputValue === undefined ? value : inputValue,
    onChange: handleChange,
    onBlur: handleBlur,
    onKeyPress: handleKeyPress
  }));
});