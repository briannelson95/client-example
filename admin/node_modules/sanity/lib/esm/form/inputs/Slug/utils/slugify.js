import speakingurl from 'speakingurl';

// Fallback slugify function if not defined in field options
const defaultSlugify = (value, type) => {
  var _type$options;

  const maxLength = (_type$options = type.options) === null || _type$options === void 0 ? void 0 : _type$options.maxLength;
  const slugifyOpts = {
    truncate: typeof maxLength === 'number' ? maxLength : 200,
    symbols: true
  };
  return value ? speakingurl(value, slugifyOpts) : '';
};

export function slugify(sourceValue, type) {
  var _type$options2;

  if (!sourceValue) {
    return Promise.resolve(sourceValue);
  }

  const slugifier = ((_type$options2 = type.options) === null || _type$options2 === void 0 ? void 0 : _type$options2.slugify) || defaultSlugify;
  return Promise.resolve(slugifier(sourceValue, type));
}