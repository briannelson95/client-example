import * as is from '../../utils/is';
import { OptionsArrayInput as OptionsArray } from '../../inputs/arrays/OptionsArrayInput';
import { PortableTextInput } from '../../inputs/PortableText/PortableTextInput';
import { TagsArrayInput } from '../../inputs/TagsArrayInput';
import { StudioArrayInput, StudioArrayOfPrimitivesInput } from '../inputs/StudioArrayInput';
const PRIMITIVES = ['string', 'number', 'boolean'];
export function isArrayOfPrimitives(type) {
  return type.of.every(ofType => PRIMITIVES.includes(ofType.jsonType));
}

function isStringArray(type) {
  return type.of.length === 1 && is.type('string', type.of[0]);
}

function isTagsArray(type) {
  var _type$options;

  return ((_type$options = type.options) === null || _type$options === void 0 ? void 0 : _type$options.layout) === 'tags';
}

function isPortableText(type) {
  // TODO: better testing here, not only for type 'block' !
  return type.of.some(memberType => is.type('block', memberType));
}

export function hasOptionsList(type) {
  var _type$options2;

  return Boolean((_type$options2 = type.options) === null || _type$options2 === void 0 ? void 0 : _type$options2.list);
}
export function resolveArrayInput(type) {
  // Schema provides predefines list
  if (hasOptionsList(type)) {
    return OptionsArray;
  }

  if (isStringArray(type) && isTagsArray(type)) {
    return TagsArrayInput;
  } // Special component for array of primitive values


  if (isArrayOfPrimitives(type)) {
    return StudioArrayOfPrimitivesInput;
  } // Use Portable Text editor if portable text.


  if (isPortableText(type)) {
    return PortableTextInput;
  } // use default


  return StudioArrayInput;
}