import { useMemoObservable } from 'react-rx';
import { map, startWith } from 'rxjs/operators';
import { useCrossProjectTokenStore, useDocumentPreviewStore } from '../../../../../datastores';
import { isRecord } from '../../../../../util';
export function useCrossProjectToken(client, _ref) {
  let {
    projectId,
    tokenId
  } = _ref;
  const documentPreviewStore = useDocumentPreviewStore();
  const crossProjectTokenStore = useCrossProjectTokenStore();
  return useMemoObservable(() => {
    return documentPreviewStore.observePaths({
      _type: 'reference',
      _ref: crossProjectTokenStore.getTokenDocumentId({
        projectId,
        tokenId
      })
    }, ['token']).pipe(map(documentValue => {
      const value = isRecord(documentValue) ? documentValue : undefined;
      return {
        status: 'loaded',
        result: typeof (value === null || value === void 0 ? void 0 : value.token) === 'string' ? value === null || value === void 0 ? void 0 : value.token : undefined
      };
    }), startWith({
      status: 'loading'
    }));
  }, [client, crossProjectTokenStore, documentPreviewStore, projectId, tokenId]);
}