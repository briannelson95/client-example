function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as PathUtils from '@sanity/util/paths';
import { get } from '@sanity/util/paths';
import React, { forwardRef, useCallback, useMemo, useRef } from 'react';
import { from, throwError } from 'rxjs';
import { catchError, mergeMap } from 'rxjs/operators';
import { isNonNullable } from '../../../../util';
import * as adapter from '../client-adapters/reference';
import { ReferenceInput } from '../../../inputs/ReferenceInput/ReferenceInput';
import { useDocumentPreviewStore } from '../../../../datastores';
import { useClient, useSchema } from '../../../../hooks';
import { useReferenceInputOptions } from '../../contexts';
import { useFormValue } from '../../../useFormValue'; // eslint-disable-next-line require-await

async function resolveUserDefinedFilter(options, document, valuePath) {
  if (!options) {
    return {};
  }

  if (typeof options.filter === 'function') {
    const parentPath = valuePath.slice(0, -1);
    const parent = get(document, parentPath);
    return options.filter({
      document,
      parentPath,
      parent
    });
  }

  return {
    filter: options.filter,
    params: 'filterParams' in options ? options.filterParams : undefined
  };
}

function useValueRef(value) {
  const ref = useRef(value);
  ref.current = value;
  return ref;
}

export function StudioReferenceInput(props) {
  var _documentRef$current, _schemaType$options, _props$value, _props$value$_strengt;

  const client = useClient();
  const schema = useSchema();
  const documentPreviewStore = useDocumentPreviewStore();
  const searchClient = useMemo(() => client.withConfig({
    apiVersion: '2021-03-25'
  }), [client]);
  const {
    path,
    schemaType
  } = props;
  const {
    EditReferenceLinkComponent,
    onEditReference,
    activePath,
    initialValueTemplateItems
  } = useReferenceInputOptions();
  const documentValue = useFormValue([]);
  const documentRef = useValueRef(documentValue);
  const documentTypeName = (_documentRef$current = documentRef.current) === null || _documentRef$current === void 0 ? void 0 : _documentRef$current._type;
  const refType = schema.get(documentTypeName);
  const isDocumentLiveEdit = useMemo(() => refType === null || refType === void 0 ? void 0 : refType.liveEdit, [refType]);
  const disableNew = ((_schemaType$options = schemaType.options) === null || _schemaType$options === void 0 ? void 0 : _schemaType$options.disableNew) === true;
  const handleSearch = useCallback(searchString => from(resolveUserDefinedFilter(schemaType.options, documentRef.current, path)).pipe(mergeMap(_ref => {
    let {
      filter,
      params
    } = _ref;
    return adapter.referenceSearch(searchClient, searchString, schemaType, { ...schemaType.options,
      filter,
      params,
      tag: 'search.reference'
    });
  }), catchError(err => {
    var _schemaType$options2;

    const isQueryError = err.details && err.details.type === 'queryParseError';

    if ((_schemaType$options2 = schemaType.options) !== null && _schemaType$options2 !== void 0 && _schemaType$options2.filter && isQueryError) {
      err.message = "Invalid reference filter, please check the custom \"filter\" option";
    }

    return throwError(err);
  })), [documentRef, path, searchClient, schemaType]);
  const template = (_props$value = props.value) === null || _props$value === void 0 ? void 0 : (_props$value$_strengt = _props$value._strengthenOnPublish) === null || _props$value$_strengt === void 0 ? void 0 : _props$value$_strengt.template;
  const EditReferenceLink = useMemo(() => /*#__PURE__*/forwardRef(function EditReferenceLink_(_props, forwardedRef) {
    return EditReferenceLinkComponent ? /*#__PURE__*/React.createElement(EditReferenceLinkComponent, _extends({}, _props, {
      ref: forwardedRef,
      parentRefPath: path,
      template: template
    })) : null;
  }), [EditReferenceLinkComponent, path, template]);
  const handleEditReference = useCallback(event => {
    onEditReference === null || onEditReference === void 0 ? void 0 : onEditReference({
      parentRefPath: path,
      id: event.id,
      type: event.type,
      template: event.template
    });
  }, [onEditReference, path]);
  const selectedState = PathUtils.startsWith(path, (activePath === null || activePath === void 0 ? void 0 : activePath.path) || []) ? activePath === null || activePath === void 0 ? void 0 : activePath.state : 'none';
  const createOptions = useMemo(() => {
    if (disableNew) {
      return [];
    }

    return (initialValueTemplateItems || [] // eslint-disable-next-line max-nested-callbacks
    ).filter(i => {
      return schemaType.to.some(_refType => {
        var _i$template;

        return _refType.name === ((_i$template = i.template) === null || _i$template === void 0 ? void 0 : _i$template.schemaType);
      });
    }).map(item => {
      var _item$template, _item$template2, _item$template3;

      return (_item$template = item.template) !== null && _item$template !== void 0 && _item$template.schemaType ? {
        id: item.id,
        title: item.title || "".concat(item.template.schemaType, " from template ").concat((_item$template2 = item.template) === null || _item$template2 === void 0 ? void 0 : _item$template2.id),
        type: item.template.schemaType,
        icon: item.icon,
        template: {
          id: (_item$template3 = item.template) === null || _item$template3 === void 0 ? void 0 : _item$template3.id,
          params: item.parameters
        },
        permission: {
          granted: item.granted,
          reason: item.reason
        }
      } : undefined;
    }).filter(isNonNullable);
  }, [disableNew, initialValueTemplateItems, schemaType.to]);
  const getReferenceInfo = useCallback((id, _type) => adapter.getReferenceInfo(documentPreviewStore, id, _type), [documentPreviewStore]);
  return /*#__PURE__*/React.createElement(ReferenceInput, _extends({}, props, {
    onSearch: handleSearch,
    liveEdit: isDocumentLiveEdit,
    getReferenceInfo: getReferenceInfo,
    selectedState: selectedState,
    editReferenceLinkComponent: EditReferenceLink,
    createOptions: createOptions,
    onEditReference: handleEditReference
  }));
}