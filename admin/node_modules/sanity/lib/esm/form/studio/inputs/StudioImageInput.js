function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useCallback, useMemo } from 'react';
import imageUrlBuilder from '@sanity/image-url';
import { ImageInput } from '../../inputs/files/ImageInput';
import { useFormBuilder } from '../../useFormBuilder';
import { useDocumentPreviewStore } from '../../../datastores';
import { useClient } from '../../../hooks';
import { resolveUploader as defaultResolveUploader } from '../uploads/resolveUploader';
import { observeImageAsset } from './client-adapters/assets';
export function StudioImageInput(props) {
  var _props$schemaType$opt;

  const sourcesFromSchema = (_props$schemaType$opt = props.schemaType.options) === null || _props$schemaType$opt === void 0 ? void 0 : _props$schemaType$opt.sources;

  const {
    image
  } = useFormBuilder().__internal;

  const documentPreviewStore = useDocumentPreviewStore();
  const client = useClient();
  const versionedClient = useMemo(() => client.withConfig({
    apiVersion: '1'
  }), [client]);
  const formBuilder = useFormBuilder();
  const supportsImageUploads = formBuilder.__internal.image.directUploads;
  const resolveUploader = useCallback((type, file) => {
    if (!supportsImageUploads) {
      return null;
    }

    return defaultResolveUploader(type, file);
  }, [supportsImageUploads]); // note: type.options.sources may be an empty array and in that case we're
  // disabling selecting images from asset source  (it's a feature, not a bug)

  const assetSources = React.useMemo(() => sourcesFromSchema || image.assetSources, [image, sourcesFromSchema]);
  const builder = React.useMemo(() => imageUrlBuilder(versionedClient), [versionedClient]);
  const observeAsset = useCallback(id => observeImageAsset(documentPreviewStore, id), [documentPreviewStore]);
  return /*#__PURE__*/React.createElement(ImageInput, _extends({}, props, {
    client: client,
    assetSources: assetSources,
    directUploads: image.directUploads,
    imageUrlBuilder: builder,
    observeAsset: observeAsset,
    resolveUploader: resolveUploader
  }));
}