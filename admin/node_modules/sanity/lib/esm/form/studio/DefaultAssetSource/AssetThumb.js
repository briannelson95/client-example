var _templateObject, _templateObject2, _templateObject3, _templateObject4;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import styled from 'styled-components';
import { Button, useToast } from '@sanity/ui';
import { useClient } from '../../../hooks';
import { FullscreenSpinner } from '../../components/FullscreenSpinner';
import { Checkerboard } from '../../components/Checkerboard';
import { AssetUsageDialog } from './AssetUsageDialog';
import { AssetMenu } from './AssetMenu';
// Get pixel density of the current device
const DPI = typeof window === 'undefined' || !window.devicePixelRatio ? 1 : Math.round(window.devicePixelRatio);
const Image = styled.img(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: absolute;\n  z-index: 1;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: block;\n  object-fit: contain;\n"])));
const Container = styled(Checkerboard)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: relative;\n  z-index: 1;\n  padding-bottom: 100%;\n"])));
const Root = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  position: relative;\n  display: inherit;\n"])));
const MenuContainer = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  box-sizing: border-box;\n  position: absolute;\n  z-index: 2;\n  display: none;\n  top: 3px;\n  right: 3px;\n\n  ", ":hover & {\n    display: block;\n  }\n"])), Root);
export const AssetThumb = /*#__PURE__*/React.memo(function AssetThumb(props) {
  const client = useClient();
  const versionedClient = useMemo(() => client.withConfig({
    apiVersion: '1'
  }), [client]);
  const toast = useToast();
  const deleteRef$ = useRef();
  const {
    asset,
    onClick,
    onKeyPress,
    onDeleteFinished,
    isSelected
  } = props;
  const [showUsageDialog, setShowUsageDialog] = useState(false);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  useEffect(() => {
    return () => {
      if (deleteRef$.current) {
        deleteRef$.current.unsubscribe();
      }
    };
  }, []);
  const handleConfirmDelete = useCallback(() => {
    setShowDeleteDialog(true);
  }, [setShowDeleteDialog]);
  const handleDialogClose = useCallback(() => {
    setShowUsageDialog(false);
    setShowDeleteDialog(false);
  }, [setShowUsageDialog, setShowDeleteDialog]);
  const handleToggleUsageDialog = useCallback(() => {
    setShowUsageDialog(true);
  }, [setShowUsageDialog]);
  const handleDeleteError = useCallback(error => {
    toast.push({
      closable: true,
      status: 'error',
      title: 'Image could not be deleted',
      description: error.message
    });
  }, [toast]);
  const handleDeleteSuccess = useCallback(() => {
    toast.push({
      status: 'success',
      title: 'Image was deleted'
    });
  }, [toast]);
  const handleDeleteAsset = useCallback(() => {
    setIsDeleting(true);
    deleteRef$.current = versionedClient.observable.delete(asset._id).subscribe({
      next: () => {
        setIsDeleting(false);
        onDeleteFinished(asset._id);
        setShowDeleteDialog(false);
        handleDeleteSuccess();
      },
      error: err => {
        setIsDeleting(false);
        handleDeleteError(err); // eslint-disable-next-line no-console

        console.error('Could not delete asset', err);
      }
    });
  }, [asset._id, handleDeleteError, handleDeleteSuccess, onDeleteFinished]);
  const handleMenuAction = useCallback(action => {
    if (action.type === 'delete') {
      handleConfirmDelete();
    }

    if (action.type === 'showUsage') {
      handleToggleUsageDialog();
    }
  }, [handleConfirmDelete, handleToggleUsageDialog]); // const {asset, onClick, onKeyPress, isSelected} = props

  const {
    originalFilename,
    _id,
    url
  } = asset;
  const imgH = 200 * Math.max(1, DPI); // Mead can't convert gifs, so we might end up with large gifs that will cause the source window to use a lot of CPU
  // We instead force them to display as jpgs

  const imageUrl = url.includes('.gif') ? "".concat(url, "?h=").concat(imgH, "&fit=max&fm=jpg") : "".concat(url, "?h=").concat(imgH, "&fit=max");
  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement(Button, {
    tone: "primary",
    selected: isSelected,
    tabIndex: 0,
    "data-id": _id,
    mode: "ghost",
    onKeyPress: onKeyPress,
    padding: 0,
    style: {
      padding: 2
    }
  }, /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Image, {
    alt: originalFilename,
    src: imageUrl,
    onClick: onClick,
    "data-id": _id
  }), isDeleting && /*#__PURE__*/React.createElement(FullscreenSpinner, null))), /*#__PURE__*/React.createElement(MenuContainer, null, /*#__PURE__*/React.createElement(AssetMenu, {
    isSelected: isSelected,
    onAction: handleMenuAction
  })), (showUsageDialog || showDeleteDialog) && /*#__PURE__*/React.createElement(AssetUsageDialog, {
    asset: asset,
    mode: showDeleteDialog ? 'confirmDelete' : 'listUsage',
    onClose: handleDialogClose,
    onDelete: handleDeleteAsset,
    isDeleting: isDeleting
  }));
});