var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React, { useMemo, useRef, useState } from 'react';
import styled, { css } from 'styled-components';
import { Button, Box, Card, Flex, Stack, Label, Text, Tooltip, Grid, useToast } from '@sanity/ui';
import { DocumentIcon, ChevronUpIcon, ChevronDownIcon, LinkIcon, TrashIcon } from '@sanity/icons';
import { useClient, useTimeAgo } from '../../../hooks';
import { prettyBytes } from './prettyBytes';
import { AssetUsageDialog } from './AssetUsageDialog';
import { AssetMenu } from './AssetMenu';
import { formatMimeType } from './utils/mimeType';
const CardIconWrapper = styled.span(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  background-color: transparent;\n  flex-shrink: 0;\n"]))); // These are here because using vanilla UI components caused a type issue inside of styled-components

const CustomFlex = styled(Flex)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([""])));
const CustomText = styled(Text)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([""])));
const CustomCard = styled(Card)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  &:hover-within ", " {\n    --card-muted-fg-color: var(--card-muted-fg-color);\n    --card-fg-color: var(--card-fg-color);\n  }\n\n  ", "\n"])), CustomText, props => props.isSelected && css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n      --card-muted-fg-color: var(--card-bg-color);\n      --card-fg-color: var(--card-bg-color);\n    "]))));
const RowButton = styled(Button)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  box-shadow: none;\n  min-width: 0;\n  cursor: pointer;\n  position: initial;\n\n  &:before,\n  &:after {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 2;\n  }\n\n  &:before {\n    z-index: 0;\n    pointer-events: none;\n    border-radius: 0.1875rem;\n  }\n\n  ", "\n\n  ", "\n"])), props => props.isSelected && css(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n      --card-muted-fg-color: var(--card-bg-color);\n      --card-fg-color: var(--card-bg-color);\n\n      &:before {\n        background-color: var(--card-focus-ring-color);\n      }\n\n      ", " {\n        --card-muted-fg-color: var(--card-bg-color);\n      }\n\n      ", " {\n        --card-muted-fg-color: var(--card-bg-color);\n        --card-fg-color: var(--card-bg-color);\n      }\n    "])), CardIconWrapper, CustomFlex), props => !props.isSelected && css(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n      &:hover:before {\n        background-color: var(--card-bg-color);\n      }\n\n      &:focus:before {\n        background-color: var(--card-code-bg-color);\n      }\n\n      &:focus-within:before {\n        background-color: var(--card-bg-color);\n      }\n    "]))));
const STYLES_ROW_CARD = {
  position: 'relative'
};
const STYLES_ICON_CARD = {
  flexShrink: 0
};
const STYLES_BUTTON_TEXT = {
  minWidth: 0
};
const STYLES_ASSETMENU_WRAPPER = {
  zIndex: 3,
  marginTop: '-0.5rem',
  marginBottom: '-0.5rem'
};
const DISABLED_DELETE_TITLE = 'Cannot delete current file';
export const AssetRow = props => {
  const client = useClient();
  const versionedClient = useMemo(() => client.withConfig({
    apiVersion: '1'
  }), [client]);
  const toast = useToast();
  const deleteRef$ = useRef();
  const [showUsageDialog, setShowUsageDialog] = useState(false);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const {
    asset,
    onClick,
    onKeyPress,
    onDeleteFinished,
    isSelected,
    isMobile
  } = props;
  const {
    originalFilename,
    _id,
    mimeType,
    size,
    _createdAt
  } = asset;
  const formattedTime = useTimeAgo(_createdAt, {
    agoSuffix: true
  });
  const formattedMimeType = formatMimeType(mimeType);
  const formattedSize = prettyBytes(size);
  const showTooltip = (originalFilename || '').length > 37;

  const handleConfirmDelete = () => {
    setShowDeleteDialog(true);
  };

  const handleDeleteError = error => {
    toast.push({
      closable: true,
      status: 'error',
      title: 'File could not be deleted',
      description: error.message
    });
  };

  const handleDeleteSuccess = () => {
    toast.push({
      status: 'success',
      title: 'File was deleted'
    });
  };

  const handleDeleteAsset = () => {
    setIsDeleting(true);
    deleteRef$.current = versionedClient.observable.delete(asset._id).subscribe({
      next: () => {
        setIsDeleting(false);
        onDeleteFinished === null || onDeleteFinished === void 0 ? void 0 : onDeleteFinished(asset._id);
        setShowDeleteDialog(false);
        handleDeleteSuccess();
      },
      error: err => {
        setIsDeleting(false);
        handleDeleteError(err); // eslint-disable-next-line no-console

        console.error('Could not delete asset', err);
      }
    });
  };

  const handleDialogClose = () => {
    setShowUsageDialog(false);
    setShowDeleteDialog(false);
  };

  const handleToggleUsageDialog = () => {
    setShowUsageDialog(true);
  };

  const handleToggleOpen = () => {
    setIsOpen(!isOpen);
  };

  const handleMenuAction = action => {
    if (action.type === 'delete') {
      handleConfirmDelete();
    }

    if (action.type === 'showUsage') {
      handleToggleUsageDialog();
    }
  };

  if (isMobile) {
    return /*#__PURE__*/React.createElement(Card, {
      paddingBottom: 2,
      style: STYLES_ROW_CARD
    }, /*#__PURE__*/React.createElement(Grid, {
      columns: 4,
      gap: 1,
      style: {
        position: 'relative',
        gridTemplateColumns: '1fr 30px',
        opacity: isDeleting ? 0.5 : 1
      }
    }, /*#__PURE__*/React.createElement(RowButton, {
      asset: asset,
      mode: "bleed",
      padding: 0,
      "data-id": _id,
      onClick: onClick,
      paddingY: 1
    }, /*#__PURE__*/React.createElement(Flex, {
      gap: 2,
      flex: 2,
      align: "center"
    }, /*#__PURE__*/React.createElement(Card, {
      as: CardIconWrapper,
      padding: 2,
      tone: "transparent",
      radius: 2
    }, /*#__PURE__*/React.createElement(Text, {
      muted: true,
      size: 2,
      style: STYLES_ICON_CARD
    }, /*#__PURE__*/React.createElement(DocumentIcon, null))), /*#__PURE__*/React.createElement(Text, {
      size: 1,
      align: "left",
      textOverflow: "ellipsis",
      style: STYLES_BUTTON_TEXT
    }, originalFilename))), /*#__PURE__*/React.createElement(Flex, {
      justify: "flex-end",
      align: "center",
      paddingRight: 1,
      style: STYLES_ASSETMENU_WRAPPER
    }, /*#__PURE__*/React.createElement(Button, {
      mode: "bleed",
      fontSize: 1,
      padding: 2,
      onClick: handleToggleOpen,
      icon: isOpen ? ChevronUpIcon : ChevronDownIcon
    }))), isOpen && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {
      marginTop: 3,
      columns: 3,
      gap: 1
    }, /*#__PURE__*/React.createElement(Stack, {
      space: 2
    }, /*#__PURE__*/React.createElement(Label, {
      size: 1,
      muted: true
    }, "Size"), /*#__PURE__*/React.createElement(Text, {
      size: 1,
      muted: true
    }, formattedSize)), /*#__PURE__*/React.createElement(Stack, {
      space: 2
    }, /*#__PURE__*/React.createElement(Label, {
      size: 1,
      muted: true
    }, "Type"), /*#__PURE__*/React.createElement(Text, {
      size: 1,
      muted: true
    }, formattedMimeType)), /*#__PURE__*/React.createElement(Stack, {
      space: 2
    }, /*#__PURE__*/React.createElement(Label, {
      size: 1,
      muted: true
    }, "Date added"), /*#__PURE__*/React.createElement(Text, {
      size: 1,
      muted: true
    }, formattedTime))), /*#__PURE__*/React.createElement(Stack, {
      space: 2,
      marginTop: 3
    }, /*#__PURE__*/React.createElement(Button, {
      fontSize: 1,
      tone: "default",
      mode: "ghost",
      text: "Show uses",
      onClick: handleToggleUsageDialog,
      icon: LinkIcon
    }), /*#__PURE__*/React.createElement(Button, {
      fontSize: 1,
      tone: "critical",
      mode: "ghost",
      text: "Delete",
      icon: TrashIcon,
      disabled: isSelected,
      title: isSelected ? DISABLED_DELETE_TITLE : 'Delete file',
      onClick: handleConfirmDelete
    }))), (showUsageDialog || showDeleteDialog) && /*#__PURE__*/React.createElement(AssetUsageDialog, {
      assetType: "file",
      asset: asset,
      mode: showDeleteDialog ? 'confirmDelete' : 'listUsage',
      onClose: handleDialogClose,
      onDelete: handleDeleteAsset,
      isDeleting: isDeleting
    }));
  }

  return /*#__PURE__*/React.createElement(CustomCard, {
    asset: asset,
    paddingBottom: 1,
    style: STYLES_ROW_CARD,
    radius: 0,
    overflow: 'hidden',
    isSelected: isSelected,
    "aria-selected": "true"
  }, /*#__PURE__*/React.createElement(Grid, {
    columns: 4,
    gap: 1,
    "data-id": _id,
    paddingY: 1,
    style: {
      position: 'relative',
      gridTemplateColumns: '3fr 1fr 1fr 2fr 30px',
      opacity: isDeleting ? 0.5 : 1
    }
  }, /*#__PURE__*/React.createElement(RowButton, {
    asset: asset,
    mode: "bleed",
    "data-id": _id,
    onClick: onClick,
    padding: 0,
    onKeyPress: onKeyPress,
    title: "Select the file ".concat(originalFilename),
    isSelected: isSelected
  }, /*#__PURE__*/React.createElement(CustomFlex, {
    gap: 2,
    flex: 2,
    paddingRight: 1,
    align: "center",
    onClick: onClick,
    onKeyPress: onKeyPress,
    "data-id": _id,
    title: "Select the file ".concat(originalFilename)
  }, /*#__PURE__*/React.createElement(Card, {
    as: CardIconWrapper,
    padding: 2,
    tone: "transparent",
    radius: 2,
    style: STYLES_ICON_CARD
  }, /*#__PURE__*/React.createElement(Text, {
    muted: true,
    size: 2
  }, /*#__PURE__*/React.createElement(DocumentIcon, null))), showTooltip && /*#__PURE__*/React.createElement(Tooltip, {
    content: /*#__PURE__*/React.createElement(Box, {
      padding: 2
    }, /*#__PURE__*/React.createElement(Text, {
      size: 1
    }, originalFilename)),
    fallbackPlacements: ['right', 'left'],
    placement: "top",
    portal: true
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1,
    align: "left",
    textOverflow: "ellipsis",
    style: STYLES_BUTTON_TEXT
  }, originalFilename)), !showTooltip && /*#__PURE__*/React.createElement(Text, {
    size: 1,
    align: "left",
    textOverflow: "ellipsis",
    style: STYLES_BUTTON_TEXT
  }, originalFilename))), /*#__PURE__*/React.createElement(CustomFlex, {
    align: "center"
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1,
    muted: true
  }, formattedSize)), /*#__PURE__*/React.createElement(CustomFlex, {
    align: "center"
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1,
    muted: true
  }, formattedMimeType)), /*#__PURE__*/React.createElement(CustomFlex, {
    align: "center"
  }, /*#__PURE__*/React.createElement(Text, {
    as: "time",
    size: 1,
    muted: true,
    dateTime: _createdAt
  }, formattedTime)), /*#__PURE__*/React.createElement(CustomFlex, {
    justify: "flex-end",
    align: "center",
    paddingX: 1,
    paddingY: 1,
    style: STYLES_ASSETMENU_WRAPPER
  }, /*#__PURE__*/React.createElement(AssetMenu, {
    border: false,
    isSelected: false,
    onAction: handleMenuAction
  }))), (showUsageDialog || showDeleteDialog) && /*#__PURE__*/React.createElement(AssetUsageDialog, {
    assetType: "file",
    asset: asset,
    mode: showDeleteDialog ? 'confirmDelete' : 'listUsage',
    onClose: handleDialogClose,
    onDelete: handleDeleteAsset,
    isDeleting: isDeleting
  }));
};