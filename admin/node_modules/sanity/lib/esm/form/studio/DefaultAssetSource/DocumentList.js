function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useCallback } from 'react';
import { Card, Text, Flex } from '@sanity/ui';
import { SanityPreview } from '../../../preview';
import { IntentLink } from '../../../router';
import { useSchema } from '../../../hooks';
export const DocumentList = _ref => {
  let {
    asset,
    assetType,
    referringDocuments
  } = _ref;
  const count = referringDocuments.length;
  const hasResults = count > 0;
  const filenamePlaceholder = asset.originalFilename ? /*#__PURE__*/React.createElement("strong", null, asset.originalFilename) : "this ".concat(assetType);

  if (!hasResults) {
    return /*#__PURE__*/React.createElement(Text, {
      size: [1, 1, 2, 2],
      as: "h2",
      weight: "regular"
    }, "No documents are using ", filenamePlaceholder);
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {
    borderBottom: true,
    marginTop: 2,
    paddingBottom: 2,
    marginBottom: 1
  }, /*#__PURE__*/React.createElement(Text, {
    as: "h2",
    size: [1, 1, 2, 2],
    weight: "regular",
    textOverflow: "ellipsis"
  }, count, " ", count === 1 ? "document is" : "documents are", " using ", filenamePlaceholder)), referringDocuments.map(document => /*#__PURE__*/React.createElement(DocumentLink, {
    key: document._id,
    document: document
  })));
};

const DocumentLink = _ref2 => {
  let {
    document
  } = _ref2;
  const schema = useSchema();
  const LinkComponent = useCallback(linkProps => /*#__PURE__*/React.createElement(IntentLink, _extends({}, linkProps, {
    params: {
      id: document._id,
      type: document._type
    },
    intent: "edit"
  })), [document]);
  return /*#__PURE__*/React.createElement(Card, {
    as: LinkComponent,
    paddingY: 2,
    paddingX: 1,
    radius: 2,
    key: document._id,
    "data-as": "a",
    tabIndex: 0
  }, /*#__PURE__*/React.createElement(Flex, {
    align: "center",
    gap: 2
  }, /*#__PURE__*/React.createElement(SanityPreview, {
    layout: "default",
    value: {
      _type: 'reference',
      _ref: document._id
    },
    schemaType: schema.get(document._type)
  })));
};