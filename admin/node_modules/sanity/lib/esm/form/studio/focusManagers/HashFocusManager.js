function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable react/no-unused-prop-types */
import React from 'react';
import { decodePath, encodePath } from '../../utils/path';

function getHash() {
  return decodeURIComponent(document.location.hash.substring(1));
}

function getPathFromHash() {
  const hash = getHash();
  return hash ? decodePath(hash) : [];
}
/**
 * An example of how to sync focus path through document.location.hash
 */


export class HashFocusManager extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      focusPath: getPathFromHash()
    });

    _defineProperty(this, "handleHashChange", () => {
      this.setState({
        focusPath: getPathFromHash()
      });
    });

    _defineProperty(this, "handleFocus", focusPath => {
      document.location.hash = encodePath(focusPath);
    });

    _defineProperty(this, "handleBlur", () => {// this.setState({focusPath: []})
    });
  }

  componentDidMount() {
    window.addEventListener('hashchange', this.handleHashChange, false);
  }

  componentWillUnmount() {
    window.removeEventListener('hashchange', this.handleHashChange, false);
  }

  render() {
    return this.props.children({
      onBlur: this.handleBlur,
      onFocus: this.handleFocus,
      focusPath: this.state.focusPath
    });
  }

}