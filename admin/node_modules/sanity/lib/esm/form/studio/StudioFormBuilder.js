/* eslint-disable camelcase */

/* eslint-disable react/jsx-handler-names */
import React, { useCallback, useRef } from 'react';
import { PatchEvent } from '../patch';
import { EMPTY_ARRAY } from '../utils/empty';
import { useFormBuilder } from '../useFormBuilder';
import { StudioFormBuilderProvider } from './StudioFormBuilderProvider';
import { useFormCallbacks } from './contexts/FormCallbacks';
/**
 * @alpha
 */

/**
 * @alpha
 */
export function StudioFormBuilder(props) {
  const {
    __internal_patchChannel: patchChannel,
    autoFocus,
    changesOpen,
    collapsedFieldSets,
    collapsedPaths,
    focusPath,
    focused,
    groups,
    id,
    members,
    onChange,
    onPathBlur,
    onPathFocus,
    onPathOpen,
    onFieldGroupSelect,
    onSetFieldSetCollapsed,
    onSetPathCollapsed,
    presence,
    readOnly,
    schemaType,
    validation,
    value
  } = props;
  return /*#__PURE__*/React.createElement(StudioFormBuilderProvider, {
    __internal_patchChannel: patchChannel,
    autoFocus: autoFocus,
    changesOpen: changesOpen,
    collapsedFieldSets: collapsedFieldSets,
    collapsedPaths: collapsedPaths,
    focusPath: focusPath,
    focused: focused,
    groups: groups,
    id: id,
    members: members,
    onChange: onChange,
    onPathBlur: onPathBlur,
    onPathFocus: onPathFocus,
    onPathOpen: onPathOpen,
    onFieldGroupSelect: onFieldGroupSelect,
    onSetPathCollapsed: onSetPathCollapsed,
    onSetFieldSetCollapsed: onSetFieldSetCollapsed,
    presence: presence,
    validation: validation,
    readOnly: readOnly,
    schemaType: schemaType,
    value: value
  }, /*#__PURE__*/React.createElement(RootInput, null));
}

function RootInput() {
  const {
    focusPath,
    focused,
    groups,
    id,
    members,
    readOnly,
    renderField,
    renderInput,
    renderItem,
    renderPreview,
    schemaType,
    value
  } = useFormBuilder();
  const {
    onChange,
    onFieldGroupSelect,
    onPathBlur,
    onPathFocus,
    onPathOpen,
    onSetFieldSetCollapsed,
    onSetPathCollapsed
  } = useFormCallbacks();
  const handleCollapseField = useCallback(fieldName => onSetPathCollapsed([fieldName], true), [onSetPathCollapsed]);
  const handleExpandField = useCallback(fieldName => onSetPathCollapsed([fieldName], false), [onSetPathCollapsed]);
  const handleBlur = useCallback(() => onPathBlur(EMPTY_ARRAY), [onPathBlur]);
  const handleFocus = useCallback(() => onPathFocus(EMPTY_ARRAY), [onPathFocus]);
  const handleChange = useCallback(patch => onChange(PatchEvent.from(patch)), [onChange]);
  const focusRef = useRef(null);
  const handleSelectFieldGroup = useCallback(groupName => onFieldGroupSelect(EMPTY_ARRAY, groupName), [onFieldGroupSelect]);
  const handleOpenField = useCallback(fieldName => onPathOpen([fieldName]), [onPathOpen]);
  const handleCloseField = useCallback(() => onPathOpen([]), [onPathOpen]);
  const handleCollapseFieldSet = useCallback(fieldSetName => onSetFieldSetCollapsed([fieldSetName], true), [onSetFieldSetCollapsed]);
  const handleExpandFieldSet = useCallback(fieldSetName => onSetFieldSetCollapsed([fieldSetName], false), [onSetFieldSetCollapsed]);
  const rootInputProps = {
    focusPath,
    focusRef,
    changed: members.some(m => m.kind === 'field' && m.field.changed),
    focused,
    groups,
    id,
    level: 0,
    members,
    onBlur: handleBlur,
    onChange: handleChange,
    onCloseField: handleCloseField,
    onCollapseField: handleCollapseField,
    onCollapseFieldSet: handleCollapseFieldSet,
    onExpandField: handleExpandField,
    onExpandFieldSet: handleExpandFieldSet,
    onFocus: handleFocus,
    onFocusPath: onPathFocus,
    onOpenField: handleOpenField,
    onFieldGroupSelect: handleSelectFieldGroup,
    path: EMPTY_ARRAY,
    presence: EMPTY_ARRAY,
    readOnly,
    renderField,
    renderInput,
    renderItem,
    renderPreview,
    schemaType,
    validation: EMPTY_ARRAY,
    value
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, renderInput(rootInputProps));
}