import React, { memo } from 'react';
import { ArrayOfObjectsField } from './fields/ArrayOfObjectsField';
import { PrimitiveField } from './fields/PrimitiveField';
import { ObjectField } from './fields/ObjectField';
import { ArrayOfPrimitivesField } from './fields/ArrayOfPrimitivesField';
import { isMemberArrayOfObjects, isMemberArrayOfPrimitives, isMemberObject } from './fields/asserters';
export const MemberField = /*#__PURE__*/memo(function MemberField(props) {
  const {
    member,
    renderField,
    renderInput,
    renderItem,
    renderPreview
  } = props;

  if (isMemberObject(member)) {
    // this field is of an object type
    return /*#__PURE__*/React.createElement(ObjectField, {
      member: member,
      renderField: renderField,
      renderInput: renderInput,
      renderItem: renderItem,
      renderPreview: renderPreview
    });
  }

  if (isMemberArrayOfPrimitives(member)) {
    return /*#__PURE__*/React.createElement(ArrayOfPrimitivesField, {
      member: member,
      renderField: renderField,
      renderInput: renderInput // todo: these have different signatures, so renderItem for a primitive input should not be the same as renderItem in array of object inputs
      ,
      renderItem: renderItem,
      renderPreview: renderPreview
    });
  }

  if (isMemberArrayOfObjects(member)) {
    return /*#__PURE__*/React.createElement(ArrayOfObjectsField, {
      member: member,
      renderField: renderField,
      renderInput: renderInput,
      renderItem: renderItem,
      renderPreview: renderPreview
    });
  }

  return /*#__PURE__*/React.createElement(PrimitiveField, {
    member: member,
    renderField: renderField,
    renderInput: renderInput
  });
});