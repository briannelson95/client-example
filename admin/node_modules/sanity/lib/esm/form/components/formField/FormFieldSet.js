var _templateObject, _templateObject2;

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/* eslint-disable camelcase */
import { Box, Flex, Grid, rem, Stack, Text, useForwardedRef } from '@sanity/ui';
import React, { forwardRef, useCallback, useMemo } from 'react';
import styled, { css } from 'styled-components';
import { FieldPresence } from '../../../presence';
import { FormFieldValidationStatus } from './FormFieldValidationStatus';
import { FormFieldSetLegend } from './FormFieldSetLegend';
import { focusRingStyle } from './styles';

function getChildren(children) {
  return typeof children === 'function' ? children() : children;
}

const Root = styled(Box).attrs({
  forwardedAs: 'fieldset'
})(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  border: none;\n\n  /* See: https://thatemil.com/blog/2015/01/03/reset-your-fieldset/ */\n  body:not(:-moz-handler-blocked) & {\n    display: table-cell;\n  }\n"])));
const Content = styled(Box)(props => {
  const {
    $borderLeft,
    theme
  } = props;
  const {
    focusRing,
    radius
  } = theme.sanity;
  const {
    base
  } = theme.sanity.color;
  return css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    outline: none;\n    border-left: ", ";\n    border-radius: ", ";\n\n    &:focus {\n      box-shadow: ", ";\n    }\n\n    &:focus:not(:focus-visible) {\n      box-shadow: none;\n    }\n  "])), $borderLeft ? '1px solid var(--card-border-color)' : undefined, rem(radius[1]), focusRingStyle({
    base,
    focusRing: { ...focusRing,
      offset: 2
    }
  }));
});
const EMPTY_ARRAY = [];
export const FormFieldSet = /*#__PURE__*/forwardRef(function FormFieldSet(props, ref) {
  const {
    validation = EMPTY_ARRAY,
    __unstable_presence: presence = EMPTY_ARRAY,
    children,
    collapsible,
    columns,
    description,
    level = 0,
    onFocus,
    onCollapse,
    onExpand,
    collapsed,
    tabIndex,
    title,
    ...restProps
  } = props;
  const hasValidationMarkers = validation.length > 0;
  const forwardedRef = useForwardedRef(ref);
  const handleFocus = useCallback(event => {
    const element = forwardedRef.current;

    if (element === event.target) {
      if (onFocus) onFocus(event);
    }
  }, [forwardedRef, onFocus]);
  const handleToggle = useCallback(() => collapsed ? onExpand === null || onExpand === void 0 ? void 0 : onExpand() : onCollapse === null || onCollapse === void 0 ? void 0 : onCollapse(), [collapsed, onCollapse, onExpand]);
  const content = useMemo(() => {
    if (collapsed) {
      return null;
    }

    return /*#__PURE__*/React.createElement(Grid, {
      columns: columns,
      gapX: 4,
      gapY: 5
    }, getChildren(children));
  }, [children, collapsed, columns]);
  return /*#__PURE__*/React.createElement(Root, _extends({
    "data-level": level
  }, restProps), title && /*#__PURE__*/React.createElement(Flex, {
    align: "flex-end"
  }, /*#__PURE__*/React.createElement(Box, {
    flex: 1,
    paddingY: 2
  }, /*#__PURE__*/React.createElement(Stack, {
    space: 2
  }, /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(FormFieldSetLegend, {
    collapsed: Boolean(collapsed),
    collapsible: collapsible,
    onClick: collapsible ? handleToggle : undefined,
    title: title
  }), hasValidationMarkers && /*#__PURE__*/React.createElement(Box, {
    marginLeft: 2
  }, /*#__PURE__*/React.createElement(FormFieldValidationStatus, {
    fontSize: 1,
    validation: validation
  }))), description && /*#__PURE__*/React.createElement(Text, {
    muted: true,
    size: 1
  }, description))), presence.length > 0 && /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(FieldPresence, {
    maxAvatars: 4,
    presence: presence
  }))), /*#__PURE__*/React.createElement(Content, {
    $borderLeft: level > 0,
    hidden: collapsed,
    marginTop: 1,
    paddingLeft: level === 0 ? 0 : 3,
    onFocus: typeof tabIndex === 'number' && tabIndex > -1 ? handleFocus : undefined,
    ref: forwardedRef,
    tabIndex: tabIndex
  }, !collapsed && content));
});