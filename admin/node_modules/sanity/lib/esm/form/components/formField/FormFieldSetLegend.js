var _templateObject, _templateObject2, _templateObject3;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { Box, Flex, rem, Text } from '@sanity/ui';
import React, { memo } from 'react';
import { ToggleArrowRightIcon } from '@sanity/icons';
import styled, { css } from 'styled-components';
import { focusRingStyle } from './styles';
const Root = styled.legend(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  /* See: https://thatemil.com/blog/2015/01/03/reset-your-fieldset/ */\n  padding: 0;\n  display: table;\n"])));
const ToggleButton = styled(Flex).attrs({
  forwardedAs: 'button'
})(props => {
  const {
    theme
  } = props;
  const {
    focusRing,
    radius
  } = theme.sanity;
  const {
    base
  } = theme.sanity.color;
  return css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    appearance: none;\n    border: 0;\n    background: none;\n    color: inherit;\n    -webkit-font-smoothing: inherit;\n    font: inherit;\n    outline: none;\n    border-radius: ", ";\n\n    &:not([hidden]) {\n      display: flex;\n    }\n\n    &:focus {\n      box-shadow: ", ";\n    }\n\n    &:focus:not(:focus-visible) {\n      box-shadow: none;\n    }\n  "])), rem(radius[1]), focusRingStyle({
    base,
    focusRing
  }));
});
const ToggleIconBox = styled(Box)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  width: 9px;\n  height: 9px;\n  margin-right: 3px;\n\n  & svg {\n    transition: transform 100ms;\n  }\n"])));
export const FormFieldSetLegend = /*#__PURE__*/memo(function FormFieldSetLegend(props) {
  const {
    collapsed,
    collapsible,
    onClick,
    title
  } = props;
  const text = /*#__PURE__*/React.createElement(Text, {
    weight: "semibold",
    size: 1
  }, title || /*#__PURE__*/React.createElement("span", {
    style: {
      color: 'var(--card-muted-fg-color)'
    }
  }, "Untitled"));

  if (!collapsible) {
    return /*#__PURE__*/React.createElement(Root, null, text);
  }

  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement(ToggleButton, {
    type: "button",
    onClick: onClick
  }, /*#__PURE__*/React.createElement(ToggleIconBox, null, /*#__PURE__*/React.createElement(Text, {
    muted: true,
    size: 1
  }, /*#__PURE__*/React.createElement(ToggleArrowRightIcon, {
    style: {
      transform: "rotate(".concat(collapsed ? '0' : '90deg', ") translate3d(0, 0, 0)")
    }
  }))), text));
});