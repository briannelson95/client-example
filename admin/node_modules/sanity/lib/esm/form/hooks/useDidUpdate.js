import { useEffect, useRef } from 'react';
import shallowEquals from 'shallow-equals';
import { usePrevious } from './usePrevious';
/**
 * A hook for doing side effects as a response to a change in a hook value between renders
 *
 * @example
 * ```ts
 * useDidUpdate(hasFocus, (hadFocus, hasFocus) => {
 *  if (hasFocus) {
 *    scrollIntoView(elementRef.current)
 *   }
 * })
 * ```
 */

export function useDidUpdate(current, didUpdate) {
  let compare = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : shallowEquals;
  const previous = usePrevious(current);
  const initial = useRef(true);
  useEffect(() => {
    if (initial.current) {
      initial.current = false;
      return;
    }

    if (!compare(previous, current)) {
      didUpdate(previous, current);
    }
  }, [didUpdate, current, previous, compare]);
}