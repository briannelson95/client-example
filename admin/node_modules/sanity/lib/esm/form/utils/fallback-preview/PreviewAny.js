function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { PreviewPrimitive } from './PreviewPrimitive';
import { PreviewObject } from './PreviewObject';
import { PreviewArray } from './PreviewArray';
const NO_VALUE = /*#__PURE__*/React.createElement(PreviewPrimitive, {
  value: "<no value>"
});
export function PreviewAny(props) {
  const {
    value,
    ...rest
  } = props;

  switch (typeof value) {
    case 'number':
    case 'boolean':
    case 'string':
      {
        return /*#__PURE__*/React.createElement(PreviewPrimitive, _extends({}, rest, {
          value: value
        }));
      }

    case 'undefined':
      {
        return NO_VALUE;
      }

    case 'object':
      {
        if (value === null) {
          return NO_VALUE;
        }

        if (Array.isArray(value)) {
          return /*#__PURE__*/React.createElement(PreviewArray, _extends({}, rest, {
            value: value
          }));
        }

        return /*#__PURE__*/React.createElement(PreviewObject, _extends({}, rest, {
          value: value
        }));
      }

    default:
      {
        return /*#__PURE__*/React.createElement("span", null, '<unknown>');
      }
  }
}