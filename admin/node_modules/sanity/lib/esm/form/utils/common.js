import React, { useMemo } from 'react';
export function isThenable(value) {
  return typeof (value === null || value === void 0 ? void 0 : value.then) === 'function';
}
const warningMap = new Map();
export function isTrueIsh(checkProperty, checkPropertyName, _ref) {
  let {
    document,
    parent,
    value,
    currentUser
  } = _ref;
  let result = false;

  if (typeof checkProperty === 'boolean' || !checkProperty) {
    return checkProperty;
  }

  try {
    result = checkProperty({
      document,
      parent,
      value,
      currentUser
    });
  } catch (err) {
    console.error("An error occurred while running the callback from `".concat(checkPropertyName, "`: ").concat(err.message));
    return false;
  }

  if (isThenable(result) && !warningMap.has(checkPropertyName)) {
    warningMap.set(checkPropertyName, true);
    console.warn("The `".concat(checkPropertyName, "` option is either a promise or a promise returning function. Async callbacks for `").concat(checkPropertyName, "` option is not currently supported."));
    return false;
  }

  if (typeof result === 'undefined' && !warningMap.has(checkPropertyName)) {
    warningMap.set(checkPropertyName, true);
    console.warn("The `".concat(checkPropertyName, "` option is either a promise or a promise returning function. Async callbacks for `").concat(checkPropertyName, "` option is not currently supported."));
  }

  return result;
}
export function omitDeprecatedRole(user) {
  if (user !== null && user !== void 0 && user.role) {
    const {
      role,
      ...rest
    } = user;
    return rest;
  }

  return user;
}
export function useCheckCondition(checkProperty, checkPropertyName, context) {
  return useMemo(() => {
    return isTrueIsh(checkProperty, checkPropertyName, context);
  }, [checkProperty, checkPropertyName, context]);
}
export function mappedChildren(_ref2) {
  let {
    children,
    childProps
  } = _ref2;

  if (!Array.isArray(children)) {
    children = [children];
  }

  return React.Children.map(children, function (child) {
    if ( /*#__PURE__*/React.isValidElement(child)) {
      return /*#__PURE__*/React.cloneElement(child, childProps);
    }

    return child;
  });
}