import { AUTO_COLLAPSE_DEPTH } from '../constants';

/**
 * Takes an option object that can optionally have a 'collapsed' property
 * (`{collapsed?: boolean, collapsible?: boolean}`)
 * and returns a resolved collapsed state based on configuration and whether it's below a certain nesting level threshold
 - collapsible: boolean - whether the field can be collapsed
 - collapsed: boolean - whether the field is initially collapsed
 * NOTE: If a field is configured with ´collapsed: true´, ignore any ´collapsible´ configuration and make it collapsible no matter what, otherwise it will be left forever collapsed.
 *
 * If the nesting level is deeper than or equal to AUTO_COLLAPSE_DEPTH, the default for the field/fieldset becomes "collapsed"
 *
 * @param options - Whether the field or fieldset should be collapsed
 * @param level - Nesting level
 */
export function getCollapsedWithDefaults() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let level = arguments.length > 1 ? arguments[1] : undefined;

  if ((options === null || options === void 0 ? void 0 : options.collapsible) === false || (options === null || options === void 0 ? void 0 : options.collapsable) === false) {
    return {
      collapsible: false,
      collapsed: false
    };
  }

  const collapsed = typeof (options === null || options === void 0 ? void 0 : options.collapsed) === 'boolean' ? options.collapsed : level >= AUTO_COLLAPSE_DEPTH;
  const collapsible = collapsed || (options === null || options === void 0 ? void 0 : options.collapsible) === true || (options === null || options === void 0 ? void 0 : options.collapsable) === true;
  return {
    collapsible,
    collapsed
  };
}