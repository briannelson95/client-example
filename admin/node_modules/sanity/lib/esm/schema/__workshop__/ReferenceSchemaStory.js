import { Box, Card, Code, Flex, Label } from '@sanity/ui';
import React, { useMemo } from 'react';
import { createSchema } from '..';
export default function ReferenceSchemaStory() {
  const authorTypeDef = useMemo(() => ({
    type: 'document',
    name: 'author',
    title: 'Author',
    fields: [{
      type: 'string',
      name: 'name'
    }]
  }), []);
  const testTypeDef = useMemo(() => ({
    type: 'reference',
    name: 'test',
    title: 'Test',
    to: [{
      type: 'author'
    }]
  }), []);
  const schemaDef = useMemo(() => ({
    name: 'test',
    types: [authorTypeDef, testTypeDef]
  }), [authorTypeDef, testTypeDef]);
  const schema = useMemo(() => createSchema(schemaDef), [schemaDef]);
  return /*#__PURE__*/React.createElement(Card, {
    height: "fill"
  }, /*#__PURE__*/React.createElement(Flex, {
    height: "fill"
  }, /*#__PURE__*/React.createElement(Card, {
    flex: 1,
    overflow: "auto",
    padding: 4
  }, /*#__PURE__*/React.createElement(Label, {
    size: 1
  }, "Schema definitions"), /*#__PURE__*/React.createElement(Box, {
    paddingTop: 4
  }), /*#__PURE__*/React.createElement(Code, {
    language: "json",
    size: 1
  }, JSON.stringify(schemaDef.types, null, 2))), /*#__PURE__*/React.createElement(Card, {
    borderLeft: true,
    flex: 1,
    overflow: "auto",
    padding: 4
  }, /*#__PURE__*/React.createElement(Label, {
    size: 1
  }, "Schema types"), /*#__PURE__*/React.createElement(Box, {
    paddingTop: 4
  }), /*#__PURE__*/React.createElement(Code, {
    language: "json",
    size: 1
  }, JSON.stringify([schemaTypeToJSON(schema.get('author')), schemaTypeToJSON(schema.get('test'))], null, 2)))));
}

function schemaTypeToJSON(schemaType) {
  if (!schemaType) {
    return null;
  }

  if (!schemaType.type) {
    return {
      name: schemaType.name
    }; // return schemaType.name
  }

  const obj = {
    type: schemaTypeToJSON(schemaType.type),
    name: schemaType.name,
    title: schemaType.title
  };

  if ('fields' in schemaType) {
    obj.fields = schemaType.fields.map(f => schemaTypeToJSON(f));
  }

  if ('to' in schemaType) {
    obj.to = schemaType.to.map(f => schemaTypeToJSON(f));
  }

  return obj;
}