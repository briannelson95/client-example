import React, { createContext, useContext, useEffect, useMemo, useState } from 'react';
import { studioTheme, ThemeProvider, usePrefersDark } from '@sanity/ui';
const ColorSchemeContext = /*#__PURE__*/createContext(null);
export function ColorSchemeProvider(_ref) {
  let {
    children,
    onSchemeChange,
    scheme: schemeProp
  } = _ref;
  const prefersDark = usePrefersDark();
  const [scheme, setScheme] = useState(schemeProp || 'light'); // if the preferred color scheme changes, then react to this change

  useEffect(() => {
    const nextScheme = prefersDark ? 'dark' : 'light';
    setScheme(nextScheme);
    onSchemeChange === null || onSchemeChange === void 0 ? void 0 : onSchemeChange(nextScheme);
  }, [onSchemeChange, prefersDark]);
  const colorScheme = useMemo(() => ({
    scheme,
    setScheme
  }), [scheme]);
  return /*#__PURE__*/React.createElement(ColorSchemeContext.Provider, {
    value: colorScheme
  }, /*#__PURE__*/React.createElement(ThemeProvider, {
    scheme: scheme,
    theme: studioTheme
  }, children));
}
export function useColorScheme() {
  const value = useContext(ColorSchemeContext);
  if (!value) throw new Error('Could not find `colorScheme` context');
  return value;
}