import _capitalize from "lodash/capitalize";

var _templateObject, _templateObject2;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { ErrorOutlineIcon, WarningOutlineIcon } from '@sanity/icons';
import { Box, Breadcrumbs, Card, Flex, Stack, Text } from '@sanity/ui';
import { generateHelpUrl } from '@sanity/generate-help-url';
import React, { useMemo } from 'react';
import styled from 'styled-components';
const TONES = {
  error: 'critical',
  warning: 'caution'
};
const SegmentSpan = styled.code(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  && {\n    background: none;\n    color: inherit;\n  }\n"])));
const ErrorMessageText = styled(Text)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  white-space: pre-line;\n"])));
export function SchemaProblemGroups(props) {
  const {
    problemGroups
  } = props;
  const items = useMemo(() => {
    const ret = [];

    for (const problemGroup of problemGroups) {
      for (const problem of problemGroup.problems) {
        ret.push({
          group: problemGroup,
          problem
        });
      }
    }

    return ret;
  }, [problemGroups]);
  return /*#__PURE__*/React.createElement(Stack, {
    as: "ul",
    space: 4
  }, items.map((_ref, i) => {
    let {
      group,
      problem
    } = _ref;
    const isError = problem.severity === 'error';
    const isWarning = problem.severity === 'warning';
    const schemaType = getTypeInfo(group);
    return /*#__PURE__*/React.createElement(Card, {
      border: true,
      key: i,
      padding: 4,
      radius: 2,
      tone: TONES[problem.severity]
    }, /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(Box, {
      marginRight: 3
    }, /*#__PURE__*/React.createElement(Text, {
      muted: true,
      size: 1
    }, isError && /*#__PURE__*/React.createElement(ErrorOutlineIcon, null), isWarning && /*#__PURE__*/React.createElement(WarningOutlineIcon, null))), /*#__PURE__*/React.createElement(Box, {
      flex: 1
    }, /*#__PURE__*/React.createElement(Text, {
      size: 1,
      weight: "semibold"
    }, schemaType ? /*#__PURE__*/React.createElement(React.Fragment, null, _capitalize(schemaType.type), " type \"", schemaType.name, "\"") : null))), /*#__PURE__*/React.createElement(Box, {
      marginTop: 4
    }, /*#__PURE__*/React.createElement(Card, {
      border: true,
      overflow: "auto",
      padding: 2,
      tone: "inherit"
    }, /*#__PURE__*/React.createElement(Breadcrumbs, {
      separator: /*#__PURE__*/React.createElement(Text, {
        muted: true,
        size: 1
      }, "\u2192")
    }, group.path.map((segment, j) => {
      if (segment.kind === 'type') {
        return /*#__PURE__*/React.createElement(Text, {
          key: j,
          size: 1
        }, /*#__PURE__*/React.createElement(SegmentSpan, null, "".concat(_renderSegmentName(segment.name), ":").concat(segment.type)));
      }

      if (segment.kind === 'property') {
        return /*#__PURE__*/React.createElement(Text, {
          key: j,
          size: 1
        }, /*#__PURE__*/React.createElement(SegmentSpan, null, segment.name));
      }

      return null;
    })))), /*#__PURE__*/React.createElement(Box, {
      as: "ul",
      marginTop: 4
    }, /*#__PURE__*/React.createElement(Box, {
      as: "li"
    }, /*#__PURE__*/React.createElement(Stack, {
      space: 3
    }, /*#__PURE__*/React.createElement(ErrorMessageText, {
      muted: true,
      size: 1
    }, problem.message), problem.helpId && /*#__PURE__*/React.createElement(Text, {
      muted: true,
      size: 1
    }, /*#__PURE__*/React.createElement("a", {
      href: generateHelpUrl(problem.helpId),
      target: "_blank",
      rel: "noopener noreferrer"
    }, "View documentation \u2192"))))));
  }));
}

function getTypeInfo(problem) {
  // note: unsure if the first segment here can ever be anything else than a type
  // a possible API improvement is to add schemaType info to the problem group interface itself
  const first = problem.path[0];

  if (first.kind === 'type') {
    return {
      name: first.name,
      type: first.type
    };
  }

  return null;
}

function _renderSegmentName(str) {
  if (str.startsWith('<unnamed_type_@_index')) {
    const parts = str.slice(1, -1).split('_');
    return "[".concat(parts[4], "]");
  }

  return str;
}