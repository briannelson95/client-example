import React, { createContext, useContext } from 'react';
import { useWorkspace } from './workspace';
const SourceContext = /*#__PURE__*/createContext(null);
export function SourceProvider(_ref) {
  let {
    children,
    ...props
  } = _ref;
  const parentSource = useContext(SourceContext);
  const {
    unstable_sources: sources
  } = useWorkspace();

  if ('source' in props) {
    const {
      source
    } = props;
    return /*#__PURE__*/React.createElement(SourceContext.Provider, {
      value: source
    }, children);
  }

  if ('name' in props) {
    const {
      name
    } = props;
    const source = sources.find(s => s.name === name);

    if (!source) {
      throw new Error("Could not find source with name `".concat(name, "` in current workspace"));
    }

    if (parentSource === source) return /*#__PURE__*/React.createElement(React.Fragment, null, children);
    return /*#__PURE__*/React.createElement(SourceContext.Provider, {
      value: source
    }, children);
  }

  throw new Error('Invalid props passed into SourceProvider. A `name` or a `source` object is required.');
}
/**
 * @deprecated INTERNAL USE ONLY
 */

export function useSource() {
  const source = useContext(SourceContext);
  if (!source) throw new Error('Could not find `source` context');
  return source;
}