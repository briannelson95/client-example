import React, { useEffect, useState } from 'react';
import { LoadingScreen, AuthenticateScreen, NotAuthenticatedScreen } from './screens';
import { useActiveWorkspace } from './activeWorkspaceMatcher';
export function AuthBoundary(_ref) {
  let {
    children,
    AuthenticateComponent = AuthenticateScreen,
    LoadingComponent = LoadingScreen,
    NotAuthenticatedComponent = NotAuthenticatedScreen
  } = _ref;
  const [error, handleError] = useState(null);
  if (error) throw error;
  const [loggedIn, setLoggedIn] = useState('loading');
  const {
    activeWorkspace
  } = useActiveWorkspace();
  useEffect(() => {
    var _activeWorkspace$auth, _activeWorkspace$auth2;

    (_activeWorkspace$auth = (_activeWorkspace$auth2 = activeWorkspace.auth).handleCallbackUrl) === null || _activeWorkspace$auth === void 0 ? void 0 : _activeWorkspace$auth.call(_activeWorkspace$auth2).catch(handleError);
  }, [activeWorkspace.auth]);
  useEffect(() => {
    const subscription = activeWorkspace.auth.state.subscribe({
      next: _ref2 => {
        var _currentUser$roles;

        let {
          authenticated,
          currentUser
        } = _ref2;

        if ((currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$roles = currentUser.roles) === null || _currentUser$roles === void 0 ? void 0 : _currentUser$roles.length) === 0) {
          setLoggedIn('unauthorized');
          return;
        }

        setLoggedIn(authenticated ? 'logged-in' : 'logged-out');
      },
      error: handleError
    });
    return () => {
      subscription.unsubscribe();
    };
  }, [activeWorkspace]);
  if (loggedIn === 'loading') return /*#__PURE__*/React.createElement(LoadingComponent, null);
  if (loggedIn === 'unauthorized') return /*#__PURE__*/React.createElement(NotAuthenticatedComponent, null); // NOTE: there is currently a bug where the `AuthenticateComponent` will
  // flash after the first login with cookieless mode. See `createAuthStore`
  // for details

  if (loggedIn === 'logged-out') return /*#__PURE__*/React.createElement(AuthenticateComponent, null);
  return /*#__PURE__*/React.createElement(React.Fragment, null, children);
}