import _startCase from "lodash/startCase";

var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { Box, Button, Card, Code, ErrorBoundary, Flex, Heading, Spinner } from '@sanity/ui';
import React, { createElement, Suspense, useCallback, useEffect, useMemo, useState } from 'react';
import styled from 'styled-components';
import { RouteScope, useRouter } from '../router';
import { Navbar } from './components';
import { NoToolsScreen } from './screens/NoToolsScreen';
import { ToolNotFoundScreen } from './screens/ToolNotFoundScreen';
import { useWorkspace } from './workspace';
const SearchFullscreenPortalCard = styled(Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  min-height: 100%;\n  flex: 1;\n"])));
export function StudioLayout() {
  const {
    state: routerState
  } = useRouter();
  const {
    name,
    title,
    tools
  } = useWorkspace();
  const activeToolName = typeof routerState.tool === 'string' ? routerState.tool : undefined;
  const activeTool = tools.find(tool => tool.name === activeToolName);
  const [toolError, setToolError] = useState(null);
  const [searchOpen, setSearchOpen] = useState(false);
  const [fullscreenSearchPortalEl, setFullscreenSearchPortalEl] = useState(null);
  const documentTitle = useMemo(() => {
    const mainTitle = title || _startCase(name);

    if (activeToolName) {
      return "".concat(mainTitle, " \u2013 ").concat(_startCase(activeToolName));
    }

    return mainTitle;
  }, [activeToolName, name, title]);
  useEffect(() => {
    document.title = documentTitle;
  }, [documentTitle]);
  const handleSearchOpenChange = useCallback(open => {
    setSearchOpen(open);
  }, []);
  useEffect(() => {
    setToolError(null);
  }, [activeToolName]);
  const handleToolRetry = useCallback(() => {
    setToolError(null);
  }, []);
  return /*#__PURE__*/React.createElement(Flex, {
    "data-ui": "ToolScreen",
    direction: "column",
    height: "fill"
  }, /*#__PURE__*/React.createElement(Navbar, {
    onSearchOpenChange: handleSearchOpenChange,
    fullscreenSearchPortalEl: fullscreenSearchPortalEl
  }), tools.length === 0 && /*#__PURE__*/React.createElement(NoToolsScreen, null), tools.length > 0 && !activeTool && activeToolName && /*#__PURE__*/React.createElement(ToolNotFoundScreen, {
    toolName: activeToolName
  }), toolError && activeTool && /*#__PURE__*/React.createElement(Card, {
    flex: 1,
    overflow: "auto",
    padding: 4
  }, /*#__PURE__*/React.createElement(Heading, {
    as: "h1"
  }, "The ", /*#__PURE__*/React.createElement("code", null, activeToolName), " tool crashed"), /*#__PURE__*/React.createElement(Box, {
    marginTop: 4
  }, /*#__PURE__*/React.createElement(Button, {
    onClick: handleToolRetry,
    text: "Retry"
  })), /*#__PURE__*/React.createElement(Card, {
    marginTop: 4,
    overflow: "auto",
    padding: 3,
    tone: "critical"
  }, /*#__PURE__*/React.createElement(Code, {
    size: 1
  }, toolError.error.stack)), /*#__PURE__*/React.createElement(Card, {
    marginTop: 4,
    overflow: "auto",
    padding: 3,
    tone: "critical"
  }, /*#__PURE__*/React.createElement(Code, {
    size: 1
  }, toolError.info.componentStack))), searchOpen && /*#__PURE__*/React.createElement(SearchFullscreenPortalCard, {
    ref: setFullscreenSearchPortalEl,
    overflow: "auto"
  }), /*#__PURE__*/React.createElement(Card, {
    flex: 1,
    hidden: searchOpen
  }, !toolError && activeTool && activeToolName && /*#__PURE__*/React.createElement(RouteScope, {
    scope: activeToolName
  }, /*#__PURE__*/React.createElement(ErrorBoundary, {
    onCatch: setToolError
  }, /*#__PURE__*/React.createElement(Suspense, {
    fallback: /*#__PURE__*/React.createElement(LoadingTool, null)
  }, /*#__PURE__*/createElement(activeTool.component, {
    tool: activeTool
  }))))));
}

function LoadingTool() {
  return /*#__PURE__*/React.createElement(Flex, {
    align: "center",
    height: "fill",
    justify: "center"
  }, /*#__PURE__*/React.createElement(Spinner, {
    muted: true
  }));
}