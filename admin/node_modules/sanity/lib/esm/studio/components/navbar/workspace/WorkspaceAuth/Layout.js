var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { SanityLogo } from '@sanity/logos';
import { Box, Card, Flex, Heading, Stack, Text } from '@sanity/ui';
import React from 'react';
import styled from 'styled-components';
const LINKS = [{
  url: 'https://slack.sanity.io/',
  title: 'Community'
}, {
  url: 'https://www.sanity.io/docs',
  title: 'Docs'
}, {
  url: 'https://www.sanity.io/legal/privacy',
  title: 'Privacy'
}, {
  url: 'https://www.sanity.io',
  title: 'sanity.io'
}];
const StyledText = styled(Text)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  a {\n    color: inherit;\n  }\n"])));
export function Layout(props) {
  const {
    children,
    footer,
    header
  } = props;
  return /*#__PURE__*/React.createElement(Stack, {
    space: 6
  }, /*#__PURE__*/React.createElement(Card, {
    border: true,
    radius: 3,
    overflow: "auto"
  }, /*#__PURE__*/React.createElement(Stack, null, typeof header === 'object' && /*#__PURE__*/React.createElement(Box, null, header), typeof header === 'string' && /*#__PURE__*/React.createElement(Box, {
    paddingY: 4
  }, /*#__PURE__*/React.createElement(Heading, {
    align: "center",
    size: 1
  }, header)), /*#__PURE__*/React.createElement(Box, {
    paddingX: 1
  }, /*#__PURE__*/React.createElement(Card, {
    borderTop: Boolean(header),
    borderBottom: Boolean(footer)
  }, children)), footer && /*#__PURE__*/React.createElement(Box, null, footer))), /*#__PURE__*/React.createElement(Flex, {
    direction: "column",
    gap: 4,
    justify: "center",
    align: "center"
  }, /*#__PURE__*/React.createElement(Text, {
    size: 3
  }, /*#__PURE__*/React.createElement(SanityLogo, null)), /*#__PURE__*/React.createElement(Flex, {
    align: "center",
    gap: 2
  }, LINKS.map((link, index) => /*#__PURE__*/React.createElement(React.Fragment, {
    key: link.title
  }, /*#__PURE__*/React.createElement(StyledText, {
    muted: true,
    size: 1
  }, /*#__PURE__*/React.createElement("a", {
    href: link.url,
    target: "_blank",
    rel: "noopener noreferrer"
  }, link.title)), index < LINKS.length - 1 && /*#__PURE__*/React.createElement(Text, {
    size: 1,
    muted: true
  }, "\u2022"))))));
}