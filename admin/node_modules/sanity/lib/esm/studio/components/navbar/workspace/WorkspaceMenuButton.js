var _templateObject, _templateObject2;

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { AddIcon, SelectIcon } from '@sanity/icons';
import { Button, MenuButton, MenuItem, Menu, Box, Card, Label } from '@sanity/ui';
import React, { useMemo } from 'react';
import styled from 'styled-components';
import { useActiveWorkspace } from '../../..';
import { useRouter } from '../../../../router';
import { useColorScheme } from '../../../colorScheme';
import { useWorkspaces } from '../../../workspaces';
import { workspacesDocsUrl } from './constants';
import { useWorkspaceAuthStates } from './hooks';
import { WorkspacePreview } from './WorkspacePreview';
const StyledMenu = styled(Menu)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  max-width: 350px;\n  min-width: 250px;\n"])));
const FooterCard = styled(Card)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: sticky;\n  bottom: 0;\n"])));
export function WorkspaceMenuButton(props) {
  const {
    scheme
  } = useColorScheme();
  const workspaces = useWorkspaces();
  const {
    activeWorkspace,
    setActiveWorkspace
  } = useActiveWorkspace();
  const [authStates] = useWorkspaceAuthStates(workspaces);
  const {
    navigateUrl
  } = useRouter();
  const popoverProps = useMemo(() => ({
    constrainSize: true,
    scheme,
    portal: true
  }), [scheme]);
  return /*#__PURE__*/React.createElement(MenuButton, {
    button: /*#__PURE__*/React.createElement(Button, _extends({
      icon: SelectIcon,
      mode: "bleed"
    }, props, {
      disabled: !authStates
    })),
    id: "workspace-menu",
    menu: /*#__PURE__*/React.createElement(StyledMenu, {
      paddingBottom: 0
    }, /*#__PURE__*/React.createElement(Box, {
      paddingX: 3,
      paddingY: 3
    }, /*#__PURE__*/React.createElement(Label, {
      size: 1,
      muted: true
    }, "Workspaces")), authStates && workspaces.map(workspace => {
      const authState = authStates[workspace.name]; // eslint-disable-next-line no-nested-ternary

      const state = authState.authenticated ? 'logged-in' : workspace.auth.LoginComponent ? 'logged-out' : 'no-access';

      const handleSelectWorkspace = () => {
        if (state === 'logged-in' && workspace.name !== activeWorkspace.name) {
          setActiveWorkspace(workspace.name);
        } // Navigate to the base path of the workspace to authenticate


        if (state === 'logged-out') {
          navigateUrl({
            path: workspace.basePath
          });
        }
      };

      return /*#__PURE__*/React.createElement(MenuItem, {
        key: workspace.name // eslint-disable-next-line react/jsx-no-bind
        ,
        onClick: handleSelectWorkspace,
        padding: 2,
        pressed: workspace.name === activeWorkspace.name
      }, /*#__PURE__*/React.createElement(WorkspacePreview, {
        icon: workspace === null || workspace === void 0 ? void 0 : workspace.icon,
        selected: workspace.name === activeWorkspace.name,
        state: state,
        subtitle: workspace.dataset,
        title: (workspace === null || workspace === void 0 ? void 0 : workspace.title) || workspace.name
      }));
    }), /*#__PURE__*/React.createElement(FooterCard, {
      borderTop: true,
      paddingY: 1
    }, /*#__PURE__*/React.createElement(MenuItem, {
      as: "a",
      href: workspacesDocsUrl,
      icon: AddIcon,
      rel: "noopener noreferrer",
      target: "__blank",
      text: "Add workspace"
    }))),
    popover: popoverProps
  });
}