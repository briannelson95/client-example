var _templateObject, _templateObject2, _templateObject3;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { CogIcon, UsersIcon } from '@sanity/icons';
import { AvatarStack, Box, Button, Card, Menu, MenuButton, MenuDivider, MenuItem, Stack, Text } from '@sanity/ui';
import React, { useMemo } from 'react';
import styled from 'styled-components';
import { UserAvatar } from '../../../../components/UserAvatar';
import { useGlobalPresence } from '../../../../datastores';
import { useColorScheme } from '../../../colorScheme';
import { useWorkspace } from '../../../workspace';
import { StatusButton } from '../../StatusButton';
import { PresenceMenuItem } from './PresenceMenuItem';
const MAX_AVATARS = 4;
const AvatarStackCard = styled(Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  background: transparent;\n"])));
const StyledMenu = styled(Menu)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  max-width: 350px;\n  min-width: 250px;\n"])));
const FooterStack = styled(Stack)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  position: sticky;\n  bottom: 0;\n"])));
export function PresenceMenu(props) {
  const {
    collapse
  } = props;
  const presence = useGlobalPresence();
  const {
    projectId
  } = useWorkspace();
  const hasPresence = presence.length > 0;
  const {
    scheme
  } = useColorScheme();
  const button = useMemo(() => {
    if (collapse) {
      return /*#__PURE__*/React.createElement(StatusButton, {
        icon: UsersIcon,
        mode: "bleed",
        active: hasPresence,
        statusTone: "positive"
      });
    }

    return /*#__PURE__*/React.createElement(Button, {
      mode: "bleed",
      padding: 1
    }, /*#__PURE__*/React.createElement(AvatarStackCard, null, /*#__PURE__*/React.createElement(AvatarStack, {
      maxLength: MAX_AVATARS
    }, presence.map(item => /*#__PURE__*/React.createElement(UserAvatar, {
      key: item.user.id,
      user: item.user
    })))));
  }, [collapse, hasPresence, presence]);
  const popoverProps = useMemo(() => ({
    constrainSize: true,
    portal: true,
    scheme: scheme
  }), [scheme]);
  return /*#__PURE__*/React.createElement(MenuButton, {
    id: "global-presence-menu",
    button: button,
    menu: /*#__PURE__*/React.createElement(StyledMenu, {
      padding: 1
    }, hasPresence && /*#__PURE__*/React.createElement(Stack, {
      space: 2
    }, presence.map(item => /*#__PURE__*/React.createElement(PresenceMenuItem, {
      key: item.user.id,
      presence: item
    }))), !hasPresence && /*#__PURE__*/React.createElement(Box, {
      paddingX: 3,
      paddingY: 4
    }, /*#__PURE__*/React.createElement(Stack, {
      space: 3
    }, /*#__PURE__*/React.createElement(Text, {
      weight: "semibold",
      size: 2
    }, "No one else is here"), /*#__PURE__*/React.createElement(Text, {
      size: 1,
      muted: true
    }, "Invite people to the project to see their online status."))), /*#__PURE__*/React.createElement(FooterStack, {
      space: 1
    }, /*#__PURE__*/React.createElement(MenuDivider, null), /*#__PURE__*/React.createElement(MenuItem, {
      as: "a",
      href: "https://sanity.io/manage/project/".concat(projectId),
      iconRight: CogIcon,
      paddingY: 4,
      rel: "noopener noreferrer",
      target: "_blank",
      text: "Manage members"
    }))),
    popover: popoverProps
  });
}