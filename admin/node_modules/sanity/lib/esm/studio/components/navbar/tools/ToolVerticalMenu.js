import _startCase from "lodash/startCase";

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useMemo } from 'react';
import { Button, Stack } from '@sanity/ui';
import { PlugIcon } from '@sanity/icons';
import { ToolLink } from './ToolLink';
export function ToolVerticalMenu(props) {
  const {
    activeToolName,
    isVisible,
    tools
  } = props;
  return useMemo(() => /*#__PURE__*/React.createElement(Stack, {
    as: "ul",
    space: [1, 2]
  }, tools.map(tool => {
    const title = (tool === null || tool === void 0 ? void 0 : tool.title) || _startCase(tool.name) || undefined;
    const Link = /*#__PURE__*/forwardRef(function Link(linkProps, ref) {
      return /*#__PURE__*/React.createElement(ToolLink, _extends({}, linkProps, {
        ref: ref,
        name: tool.name
      }));
    });
    return /*#__PURE__*/React.createElement(Stack, {
      as: "li",
      key: tool.name
    }, /*#__PURE__*/React.createElement(Button, {
      as: Link,
      icon: tool.icon || PlugIcon,
      justify: "flex-start",
      mode: "bleed",
      selected: activeToolName === tool.name,
      tabIndex: isVisible ? 0 : -1,
      text: title
    }));
  })), [activeToolName, isVisible, tools]);
}