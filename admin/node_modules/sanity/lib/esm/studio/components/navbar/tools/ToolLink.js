function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useMemo } from 'react';
import { StateLink, useRouterState } from '../../../../router';
export const ToolLink = /*#__PURE__*/forwardRef(function ToolLink(props, ref) {
  const {
    name,
    ...rest
  } = props;
  const routerState = useRouterState();
  const state = useMemo(() => ({ ...routerState,
    tool: name,
    [name]: undefined
  }), [routerState, name]);
  return /*#__PURE__*/React.createElement(StateLink, _extends({
    state: state
  }, rest, {
    ref: ref
  }));
});