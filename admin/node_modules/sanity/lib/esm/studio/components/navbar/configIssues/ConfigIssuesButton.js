import React, { useCallback, useState } from 'react';
import { Box, Button, Dialog, Heading, Stack, Text, Tooltip } from '@sanity/ui';
import { WarningOutlineIcon } from '@sanity/icons';
import { useId } from '@reach/auto-id';
import { useSchema } from '../../../../hooks';
import { SchemaProblemGroups } from '../../../screens/schemaErrors/SchemaProblemGroups';
import { useColorScheme } from '../../../colorScheme';
export function ConfigIssuesButton() {
  var _schema$_validation;

  const schema = useSchema();
  const groupsWithWarnings = ((_schema$_validation = schema._validation) === null || _schema$_validation === void 0 ? void 0 : _schema$_validation.filter(group => group.problems.some(problem => problem.severity === 'warning'))) || []; // get root scheme

  const {
    scheme
  } = useColorScheme();
  const dialogId = useId() || 'config-issues-dialog';
  const [isDialogOpen, setDialogOpen] = useState(false);
  const [buttonElement, setButtonElement] = useState(null);
  const handleOpen = useCallback(() => setDialogOpen(true), []);
  const handleClose = useCallback(() => {
    setDialogOpen(false);

    if (buttonElement) {
      buttonElement.focus();
    }
  }, [buttonElement]);

  if (groupsWithWarnings.length === 0) {
    return null;
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tooltip, {
    content: /*#__PURE__*/React.createElement(Box, {
      padding: 2
    }, /*#__PURE__*/React.createElement(Text, {
      size: 1
    }, "Found configuration issues")),
    placement: "bottom",
    portal: true,
    scheme: scheme
  }, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Button, {
    icon: WarningOutlineIcon,
    mode: "bleed",
    tone: "caution",
    onClick: handleOpen,
    ref: setButtonElement,
    selected: isDialogOpen
  }))), isDialogOpen && /*#__PURE__*/React.createElement(Dialog, {
    header: /*#__PURE__*/React.createElement(Stack, {
      space: 3
    }, /*#__PURE__*/React.createElement(Text, {
      weight: "semibold"
    }, "Configuration issues"), /*#__PURE__*/React.createElement(Text, {
      muted: true,
      size: 1
    }, "Configuration checks are only performed during development and will not be visible in production builds")),
    width: 2,
    onClickOutside: handleClose,
    onClose: handleClose // force root scheme here to "break out" of the navbar's dark scheme
    ,
    scheme: scheme,
    id: dialogId
  }, /*#__PURE__*/React.createElement(Stack, {
    space: 4,
    padding: 4
  }, /*#__PURE__*/React.createElement(Heading, {
    as: "h2",
    size: 1
  }, "Found ", groupsWithWarnings.length, " schema warnings"), /*#__PURE__*/React.createElement(SchemaProblemGroups, {
    problemGroups: groupsWithWarnings
  }))));
}