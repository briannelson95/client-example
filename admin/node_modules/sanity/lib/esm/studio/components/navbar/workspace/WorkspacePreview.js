var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { CheckmarkIcon } from '@sanity/icons';
import { Flex, Stack, Box, Text, Card } from '@sanity/ui';
import React, { createElement, isValidElement, useMemo } from 'react';
import { isValidElementType } from 'react-is';
import styled from 'styled-components';
const STATE_TITLES = {
  'logged-in': '',
  'logged-out': 'Signed out',
  'no-access': ''
};
export const MediaCard = styled(Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  width: 35px;\n  height: 35px;\n\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n"])));

const createIcon = icon => {
  if (isValidElementType(icon)) return /*#__PURE__*/createElement(icon);
  if ( /*#__PURE__*/isValidElement(icon)) return icon;
  return undefined;
};

export function WorkspacePreview(props) {
  const {
    state,
    subtitle,
    selected,
    title,
    icon,
    iconRight
  } = props;
  const iconComponent = useMemo(() => createIcon(icon), [icon]);
  const iconRightComponent = useMemo(() => createIcon(iconRight), [iconRight]);
  return /*#__PURE__*/React.createElement(Flex, {
    align: "center",
    flex: "none",
    gap: 3
  }, /*#__PURE__*/React.createElement(MediaCard, {
    radius: 2,
    tone: "transparent"
  }, iconComponent), /*#__PURE__*/React.createElement(Stack, {
    flex: 1,
    space: 2
  }, /*#__PURE__*/React.createElement(Text, {
    textOverflow: "ellipsis",
    weight: "medium"
  }, title), subtitle && /*#__PURE__*/React.createElement(Text, {
    muted: true,
    size: 1,
    textOverflow: "ellipsis"
  }, subtitle)), state && STATE_TITLES[state] && /*#__PURE__*/React.createElement(Box, {
    paddingLeft: 1
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1,
    muted: true,
    textOverflow: "ellipsis"
  }, STATE_TITLES[state])), (selected || iconRightComponent) && /*#__PURE__*/React.createElement(Flex, {
    align: "center",
    gap: 4,
    paddingLeft: 3,
    paddingRight: 2
  }, selected && /*#__PURE__*/React.createElement(Text, {
    size: 1,
    muted: true
  }, /*#__PURE__*/React.createElement(CheckmarkIcon, null)), iconRightComponent && /*#__PURE__*/React.createElement(Text, {
    size: 1,
    muted: true
  }, iconRightComponent)));
}