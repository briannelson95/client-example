var _templateObject, _templateObject2, _templateObject3;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { Layer, Card, Flex, Text, Box, Button, Stack, useGlobalKeyDown } from '@sanity/ui';
import { CloseIcon, LeaveIcon } from '@sanity/icons';
import React, { memo, useEffect, useState } from 'react';
import styled from 'styled-components';
import { UserAvatar } from '../../../components/UserAvatar';
import { useWorkspace } from '../../workspace';
import { useRovingFocus } from '../../../components/rovingFocus';
import { ToolMenu as DefaultToolMenu } from './tools/ToolMenu';
import { WorkspaceMenuButton } from './workspace';
const Root = styled(Layer)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n"])));
const Backdrop = styled(Card)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: var(--card-shadow-penumbra-color);\n  transition: 200ms opacity ease-in-out;\n  pointer-events: none;\n  opacity: 0;\n\n  &[data-open='true'] {\n    opacity: 1;\n    pointer-events: all;\n  }\n"])));
const InnerCard = styled(Card)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  position: relative;\n  pointer-events: all;\n  flex-direction: column;\n  min-width: 200px;\n  max-width: 280px;\n  transition: 200ms transform ease-in-out;\n  transform: translate3d(calc(-100% - 1px), 0, 0);\n\n  &[data-open='true'] {\n    transform: translate3d(0, 0, 0);\n  }\n"])));
export const NavDrawer = /*#__PURE__*/memo(function NavDrawer(props) {
  const {
    activeToolName,
    isOpen,
    onClose,
    tools
  } = props;
  const [closeButtonElement, setCloseButtonElement] = useState(null);
  const [innerCardElement, setInnerCardElement] = useState(null);
  const tabIndex = isOpen ? 0 : -1;
  const {
    currentUser,
    navbar,
    auth
  } = useWorkspace();
  const {
    ToolMenu = DefaultToolMenu
  } = (navbar === null || navbar === void 0 ? void 0 : navbar.components) || {};
  useRovingFocus({
    rootElement: innerCardElement,
    navigation: ['tab']
  });
  useGlobalKeyDown(e => {
    if (e.key === 'Escape' && isOpen) {
      onClose();
    }
  });
  useEffect(() => {
    if (isOpen) {
      closeButtonElement === null || closeButtonElement === void 0 ? void 0 : closeButtonElement.focus();
    }
  }, [closeButtonElement, isOpen]);
  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement(Backdrop, {
    "data-open": isOpen,
    onClick: onClose
  }), /*#__PURE__*/React.createElement(InnerCard, {
    display: "flex",
    height: "fill",
    "data-open": isOpen,
    shadow: 1,
    ref: setInnerCardElement
  }, /*#__PURE__*/React.createElement(Card, {
    borderBottom: true
  }, /*#__PURE__*/React.createElement(Stack, {
    space: 3,
    padding: [3, 3, 4]
  }, /*#__PURE__*/React.createElement(Flex, {
    align: "center"
  }, /*#__PURE__*/React.createElement(Flex, {
    flex: 1,
    align: "center",
    paddingRight: 2
  }, /*#__PURE__*/React.createElement(Flex, {
    flex: 1,
    align: "center"
  }, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(UserAvatar, {
    size: 1,
    user: "me"
  })), /*#__PURE__*/React.createElement(Box, {
    flex: 1,
    marginLeft: 2,
    title: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.name) || (currentUser === null || currentUser === void 0 ? void 0 : currentUser.email)
  }, /*#__PURE__*/React.createElement(Text, {
    textOverflow: "ellipsis"
  }, (currentUser === null || currentUser === void 0 ? void 0 : currentUser.name) || (currentUser === null || currentUser === void 0 ? void 0 : currentUser.email))))), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Button, {
    icon: CloseIcon,
    mode: "bleed",
    onClick: onClose,
    ref: setCloseButtonElement,
    tabIndex: tabIndex,
    title: "Close menu"
  }))), /*#__PURE__*/React.createElement(WorkspaceMenuButton, {
    text: "Select workspace",
    justify: "flex-start"
  }))), /*#__PURE__*/React.createElement(Box, {
    flex: "auto",
    overflow: "auto",
    padding: [3, 3, 4]
  }, /*#__PURE__*/React.createElement(ToolMenu, {
    activeToolName: activeToolName,
    closeDrawer: onClose,
    context: "drawer",
    isDrawerOpen: isOpen,
    tools: tools
  })), auth.logout && /*#__PURE__*/React.createElement(Card, {
    flex: "none",
    padding: [3, 3, 4],
    borderTop: true
  }, /*#__PURE__*/React.createElement(Stack, null, /*#__PURE__*/React.createElement(Button, {
    iconRight: LeaveIcon,
    justify: "flex-start",
    mode: "bleed" // eslint-disable-next-line react/jsx-handler-names
    ,
    onClick: auth.logout,
    tabIndex: tabIndex,
    text: "Sign out"
  })))));
});