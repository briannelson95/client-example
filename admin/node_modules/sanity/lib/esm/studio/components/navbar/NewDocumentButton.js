var _templateObject, _templateObject2, _templateObject3;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React, { useCallback, useMemo, useState } from 'react';
import { Dialog, Grid, Button, Flex, Box, Tooltip, Spinner, Text } from '@sanity/ui';
import styled from 'styled-components';
import { ComposeIcon } from '@sanity/icons';
import { DefaultPreview } from '../../../components/previews';
import { InsufficientPermissionsMessage } from '../../../components/InsufficientPermissionsMessage';
import { useTemplatePermissions } from '../../../datastores';
import { IntentLink } from '../../../router';
import { useSource } from '../../source';
import { useColorScheme } from '../../colorScheme';
const DocumentButton = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  text-decoration: none;\n"])));
const TooltipContentBox = styled(Box)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  max-width: 300px;\n"])));
const DisabledButtonWrapper = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  & > * {\n    width: 100%;\n  }\n"])));
export function NewDocumentButton() {
  const [newDocumentButtonEl, setNewDocumentButtonEl] = useState(null);
  const [open, setOpen] = useState(false);
  const {
    scheme
  } = useColorScheme();
  const {
    __internal: {
      staticInitialValueTemplateItems
    },
    currentUser
  } = useSource();
  const [permissions, loading] = useTemplatePermissions({
    templateItems: staticInitialValueTemplateItems
  });
  const keyedPermissions = useMemo(() => {
    if (!permissions) return {};
    return permissions.reduce((acc, next) => {
      acc[next.id] = next;
      return acc;
    }, {});
  }, [permissions]);
  const hasNewDocumentOptions = staticInitialValueTemplateItems.length > 0;
  const canCreateDocument = staticInitialValueTemplateItems.some(t => {
    var _keyedPermissions$t$i;

    return (_keyedPermissions$t$i = keyedPermissions[t.id]) === null || _keyedPermissions$t$i === void 0 ? void 0 : _keyedPermissions$t$i.granted;
  });
  const tooltipContent = useMemo(() => {
    if (!hasNewDocumentOptions) {
      return /*#__PURE__*/React.createElement(Text, {
        size: 1
      }, "No document types");
    }

    if (canCreateDocument) {
      return /*#__PURE__*/React.createElement(Text, {
        size: 1
      }, "New document...");
    }

    return /*#__PURE__*/React.createElement(InsufficientPermissionsMessage, {
      currentUser: currentUser,
      operationLabel: "create any document"
    });
  }, [canCreateDocument, currentUser, hasNewDocumentOptions]);
  const handleOpen = useCallback(() => {
    setOpen(true);
  }, []);
  const handleClose = useCallback(() => {
    setOpen(false);
    newDocumentButtonEl === null || newDocumentButtonEl === void 0 ? void 0 : newDocumentButtonEl.focus();
  }, [newDocumentButtonEl]);
  const handleLinkClick = useCallback(() => {
    setOpen(false);
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tooltip, {
    content: /*#__PURE__*/React.createElement(TooltipContentBox, {
      padding: 2
    }, tooltipContent),
    disabled: loading,
    placement: "bottom",
    portal: true,
    scheme: scheme
  }, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Button, {
    "aria-label": "New document\u2026",
    disabled: !canCreateDocument || !hasNewDocumentOptions || loading,
    icon: ComposeIcon,
    mode: "bleed",
    onClick: handleOpen,
    ref: setNewDocumentButtonEl,
    style: {
      cursor: !canCreateDocument || !hasNewDocumentOptions ? 'not-allowed' : undefined
    }
  }))), open && /*#__PURE__*/React.createElement(Dialog, {
    header: "New document",
    id: "new-document-dialog",
    onClickOutside: handleClose,
    onClose: handleClose,
    scheme: scheme,
    width: 2
  }, loading && /*#__PURE__*/React.createElement(Flex, {
    padding: 4,
    align: "center",
    justify: "center"
  }, /*#__PURE__*/React.createElement(Spinner, {
    muted: true,
    "aria-label": "Loading\u2026"
  })), !loading && /*#__PURE__*/React.createElement(Grid, {
    padding: 4,
    columns: [1, 1, 2, 3],
    gap: 3
  }, staticInitialValueTemplateItems.map(template => {
    var _keyedPermissions$tem;

    if ((_keyedPermissions$tem = keyedPermissions[template.id]) !== null && _keyedPermissions$tem !== void 0 && _keyedPermissions$tem.granted) {
      return /*#__PURE__*/React.createElement(DocumentButton, {
        forwardedAs: IntentLink,
        intent: "create",
        key: template.id,
        mode: "ghost",
        onClick: handleLinkClick,
        padding: 2,
        params: {
          template: template.templateId,
          type: template.schemaType
        }
      }, /*#__PURE__*/React.createElement(DefaultPreview, {
        media: template.icon,
        subtitle: template.subtitle,
        title: template.title
      }));
    }

    return /*#__PURE__*/React.createElement(Tooltip, {
      key: template.id,
      content: /*#__PURE__*/React.createElement(TooltipContentBox, {
        padding: 2
      }, /*#__PURE__*/React.createElement(InsufficientPermissionsMessage, {
        currentUser: currentUser,
        operationLabel: "create this document"
      }))
    }, /*#__PURE__*/React.createElement(DisabledButtonWrapper, null, /*#__PURE__*/React.createElement(DocumentButton, {
      key: template.id,
      mode: "ghost",
      padding: 2,
      disabled: true
    }, /*#__PURE__*/React.createElement(DefaultPreview, {
      media: template.icon,
      subtitle: template.subtitle,
      title: template.title
    }))));
  }))));
}