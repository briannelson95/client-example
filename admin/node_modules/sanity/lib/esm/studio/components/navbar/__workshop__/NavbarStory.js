var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { CogIcon, DashboardIcon, DocumentsIcon, EyeOpenIcon, IceCreamIcon, MasterDetailIcon } from '@sanity/icons';
import { Card } from '@sanity/ui';
import { useBoolean, useString } from '@sanity/ui-workshop';
import React, { useMemo, useState } from 'react';
import styled from 'styled-components';
import { createConfig } from '../../../../config';
import { isNonNullable } from '../../../../util/isNonNullable';
import { isTruthy } from '../../../../util/isTruthy';
import { Navbar } from '..';
import { StudioProvider } from '../../../StudioProvider';
const SearchFullscreenPortalCard = styled(Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  min-height: 100%;\n  flex: 1;\n"])));

const ExampleTool = () => /*#__PURE__*/React.createElement("div", null, "Tool");

const noop = () => null; // const mockClient = createMockClient()


export default function NavbarStory() {
  const projectName = useString('Project name', undefined);
  const [portalEl, setPortalEl] = useState(null); // Create configuration

  const tools = useTools();
  const config = useMemo(() => createConfig({
    // The same id as in the test-studio sanity.config.ts
    projectId: 'ppsg7ml5',
    dataset: 'production',
    name: 'default',
    title: projectName,
    tools
  }), [projectName, tools]);
  return /*#__PURE__*/React.createElement(StudioProvider, {
    config: config
  }, /*#__PURE__*/React.createElement(Navbar, {
    onSearchOpenChange: noop,
    fullscreenSearchPortalEl: portalEl
  }), /*#__PURE__*/React.createElement(SearchFullscreenPortalCard, {
    ref: setPortalEl
  }));
}

function useTools() {
  const toggledTools = {
    dashboard: useBoolean('Dashboard'),
    content: useBoolean('Content'),
    settings: useBoolean('Settings'),
    vision: useBoolean('Vision'),
    schema: useBoolean('Schema'),
    arcade: useBoolean('Arcade')
  };
  return useMemo(() => [toggledTools.dashboard && {
    name: 'dashboard',
    title: 'Dashboard',
    icon: DashboardIcon,
    component: ExampleTool,
    options: {}
  }, toggledTools.content && {
    name: 'content',
    title: 'Content',
    icon: MasterDetailIcon,
    component: ExampleTool,
    options: {}
  }, toggledTools.settings && {
    name: 'settings',
    title: 'Settings',
    icon: CogIcon,
    component: ExampleTool,
    options: {}
  }, toggledTools.vision && {
    name: 'vision',
    title: 'Vision',
    icon: EyeOpenIcon,
    component: ExampleTool,
    options: {}
  }, toggledTools.schema && {
    name: 'schema',
    title: 'Schema',
    icon: DocumentsIcon,
    component: ExampleTool,
    options: {}
  }, toggledTools.arcade && {
    name: 'arcade',
    title: 'Arcade',
    icon: IceCreamIcon,
    component: ExampleTool,
    options: {}
  }].filter(isTruthy).filter(isNonNullable), [toggledTools.arcade, toggledTools.content, toggledTools.dashboard, toggledTools.schema, toggledTools.settings, toggledTools.vision]);
}