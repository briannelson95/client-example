var _templateObject, _templateObject2;

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { SunIcon, MoonIcon, LeaveIcon, ChevronDownIcon, CogIcon } from '@sanity/icons';
import { Box, Button, Card, Flex, Label, Menu, MenuButton, MenuDivider, MenuItem, Stack, Text, Tooltip } from '@sanity/ui';
import React, { useCallback, useMemo } from 'react';
import styled from 'styled-components';
import { UserAvatar } from '../../../../components/UserAvatar';
import { getProviderTitle } from '../../../../datastores/authStore/providerTitle';
import { useColorScheme } from '../../../colorScheme';
import { useWorkspace } from '../../../workspace';
import { LoginProviderLogo } from './LoginProviderLogo';
const StyledMenu = styled(Menu)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  min-width: 125px;\n  max-width: 350px;\n"])));
const AvatarBox = styled(Box)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: relative;\n"])));
export function UserMenu() {
  const {
    currentUser,
    projectId,
    auth
  } = useWorkspace();
  const {
    scheme,
    setScheme
  } = useColorScheme();
  const providerTitle = getProviderTitle(currentUser === null || currentUser === void 0 ? void 0 : currentUser.provider);
  const popoverProps = useMemo(() => ({
    placement: 'bottom-end',
    portal: true,
    preventOverflow: true,
    scheme: scheme
  }), [scheme]);
  const handleToggleScheme = useCallback(() => {
    setScheme(scheme === 'dark' ? 'light' : 'dark');
  }, [scheme, setScheme]);
  return /*#__PURE__*/React.createElement(MenuButton, {
    button: /*#__PURE__*/React.createElement(Button, {
      mode: "bleed",
      padding: 0,
      paddingX: 1
    }, /*#__PURE__*/React.createElement(Flex, {
      align: "center",
      gap: 1
    }, /*#__PURE__*/React.createElement(UserAvatar, {
      user: "me",
      size: 1
    }), /*#__PURE__*/React.createElement(Text, {
      size: 1,
      muted: true
    }, /*#__PURE__*/React.createElement(ChevronDownIcon, null)))),
    id: "user-menu",
    menu: /*#__PURE__*/React.createElement(StyledMenu, null, /*#__PURE__*/React.createElement(Card, {
      padding: 2
    }, /*#__PURE__*/React.createElement(Box, {
      marginBottom: 3
    }, /*#__PURE__*/React.createElement(Label, {
      size: 1,
      muted: true
    }, "Signed in as")), /*#__PURE__*/React.createElement(Flex, {
      align: "center"
    }, /*#__PURE__*/React.createElement(Tooltip, {
      disabled: !providerTitle,
      portal: true,
      content: providerTitle && /*#__PURE__*/React.createElement(Box, {
        padding: 2
      }, /*#__PURE__*/React.createElement(Text, {
        size: 1
      }, "Signed in with ", providerTitle))
    }, /*#__PURE__*/React.createElement(AvatarBox, {
      marginRight: 3
    }, /*#__PURE__*/React.createElement(UserAvatar, {
      size: 1,
      user: "me"
    }), (currentUser === null || currentUser === void 0 ? void 0 : currentUser.provider) && /*#__PURE__*/React.createElement(LoginProviderLogo, {
      provider: currentUser.provider
    }))), /*#__PURE__*/React.createElement(Stack, {
      space: 2,
      flex: 1
    }, /*#__PURE__*/React.createElement(Text, {
      size: 1,
      weight: "semibold",
      textOverflow: "ellipsis"
    }, currentUser === null || currentUser === void 0 ? void 0 : currentUser.name), /*#__PURE__*/React.createElement(Text, {
      size: 1,
      muted: true,
      textOverflow: "ellipsis"
    }, currentUser === null || currentUser === void 0 ? void 0 : currentUser.email)))), /*#__PURE__*/React.createElement(MenuDivider, null), /*#__PURE__*/React.createElement(MenuItem, {
      icon: scheme === 'dark' ? SunIcon : MoonIcon,
      onClick: handleToggleScheme,
      text: scheme === 'dark' ? 'Switch to light mode' : 'Switch to dark mode'
    }), /*#__PURE__*/React.createElement(MenuDivider, null), /*#__PURE__*/React.createElement(MenuItem, {
      as: "a",
      href: "https://sanity.io/manage/project/".concat(projectId),
      target: "_blank",
      text: "Manage project",
      icon: CogIcon
    }), auth.logout && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MenuDivider, null), /*#__PURE__*/React.createElement(MenuItem, _extends({
      iconRight: LeaveIcon,
      text: "Sign out",
      disabled: !auth.logout
    }, auth.logout && {
      onClick: auth.logout
    })))),
    popover: popoverProps
  });
}