import _startCase from "lodash/startCase";

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { UnknownIcon } from '@sanity/icons';
import React, { forwardRef, useMemo, useState } from 'react';
import { CollapseMenu, CollapseMenuButton } from '../../../../components/collapseMenu';
import { useRovingFocus } from '../../../../components/rovingFocus';
import { useColorScheme } from '../../../colorScheme';
import { ToolLink } from './ToolLink';
export function ToolCollapseMenu(props) {
  const {
    activeToolName,
    tools
  } = props;
  const {
    scheme
  } = useColorScheme();
  const [collapseMenuEl, setCollapseMenuEl] = useState(null);
  useRovingFocus({
    rootElement: collapseMenuEl,
    navigation: ['arrows']
  });
  const menuButtonProps = useMemo(() => ({
    popover: {
      constrainSize: true,
      portal: true,
      scheme: scheme
    }
  }), [scheme]);
  const children = useMemo(() => tools.map((tool, index) => {
    const title = (tool === null || tool === void 0 ? void 0 : tool.title) || _startCase(tool.name) || undefined;
    const Link = /*#__PURE__*/forwardRef(function Link(linkProps, ref) {
      return /*#__PURE__*/React.createElement(ToolLink, _extends({}, linkProps, {
        ref: ref,
        name: tool.name
      }));
    });
    return /*#__PURE__*/React.createElement(CollapseMenuButton, {
      as: Link,
      collapsedProps: {
        tooltipText: tool.title
      },
      icon: tool.icon || UnknownIcon // eslint-disable-next-line react/no-array-index-key
      ,
      key: "".concat(tool.name, "-").concat(index),
      mode: "bleed",
      selected: activeToolName === tool.name,
      text: title,
      tooltipProps: {
        scheme: scheme
      }
    });
  }), [activeToolName, scheme, tools]);
  return /*#__PURE__*/React.createElement(CollapseMenu, {
    gap: 1,
    menuButtonProps: menuButtonProps,
    ref: setCollapseMenuEl
  }, children);
}