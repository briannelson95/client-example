import _startCase from "lodash/startCase";

var _templateObject, _templateObject2, _templateObject3;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { CloseIcon, MenuIcon, SearchIcon } from '@sanity/icons';
import { Box, Button, Card, Flex, Layer, Text, Tooltip, useGlobalKeyDown, useMediaIndex } from '@sanity/ui';
import React, { createElement, useCallback, useState, isValidElement, useMemo, useEffect, useRef } from 'react';
import { isValidElementType } from 'react-is';
import styled from 'styled-components';
import { useWorkspace } from '../../workspace';
import { useColorScheme } from '../../colorScheme';
import { useRouterState, useStateLink } from '../../../router';
import { useWorkspaces } from '../../workspaces';
import { isDev } from '../../../environment';
import { UserMenu } from './userMenu';
import { NewDocumentButton } from './NewDocumentButton';
import { PresenceMenu } from './presence';
import { NavDrawer } from './NavDrawer';
import { SearchField } from './search';
import { ToolMenu as DefaultToolMenu } from './tools/ToolMenu';
import { ChangelogButton } from './changelog';
import { WorkspaceMenuButton } from './workspace';
import { ConfigIssuesButton } from './configIssues/ConfigIssuesButton';
const RootLayer = styled(Layer)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  min-height: auto;\n  position: relative;\n\n  &[data-search-open='true'] {\n    top: 0;\n    position: sticky;\n  }\n"])));
const SearchCard = styled(Card)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  z-index: 1;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n\n  &[data-fullscreen='true'] {\n    position: absolute;\n  }\n\n  &[data-fullscreen='false'] {\n    min-width: 253px;\n    max-width: 350px;\n  }\n"])));
const LeftFlex = styled(Flex)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  width: max-content;\n"])));
export function Navbar(props) {
  var _navbar$components;

  const {
    fullscreenSearchPortalEl,
    onSearchOpenChange
  } = props;
  const {
    name,
    logo,
    navbar,
    tools,
    ...workspace
  } = useWorkspace();
  const workspaces = useWorkspaces();
  const routerState = useRouterState();
  const ToolMenu = (navbar === null || navbar === void 0 ? void 0 : (_navbar$components = navbar.components) === null || _navbar$components === void 0 ? void 0 : _navbar$components.ToolMenu) || DefaultToolMenu;
  const {
    scheme
  } = useColorScheme();
  const rootLink = useStateLink({
    state: {}
  });
  const mediaIndex = useMediaIndex();
  const activeToolName = typeof routerState.tool === 'string' ? routerState.tool : undefined;
  const [searchOpen, setSearchOpen] = useState(false);
  const [drawerOpen, setDrawerOpen] = useState(false);
  const routerStateRef = useRef(routerState);
  const workspaceNameRef = useRef(name); // Close the NavDrawer when changing tool or workspace

  useEffect(() => {
    if (routerStateRef.current.tool !== routerState.tool || name !== workspaceNameRef.current) {
      setDrawerOpen(false);
    }

    routerStateRef.current = routerState;
    workspaceNameRef.current = name;
  }, [name, routerState]);
  const [drawerButtonEl, setDrawerButtonEl] = useState(null);
  const [searchInputElement, setSearchInputElement] = useState(null);
  const [searchOpenButtonEl, setSearchOpenButtonEl] = useState(null);
  const [searchCloseButtonEl, setSearchCloseButtonEl] = useState(null);
  const shouldRender = useMemo(() => ({
    brandingCenter: mediaIndex <= 1,
    changelog: mediaIndex > 1,
    collapsedPresenceMenu: mediaIndex <= 1,
    loginStatus: mediaIndex > 1,
    searchFullscreen: mediaIndex <= 1,
    configIssues: mediaIndex > 1 && isDev,
    workspaces: mediaIndex >= 3 && workspaces.length > 1,
    tools: mediaIndex >= 3
  }), [mediaIndex, workspaces.length]);
  const formattedName = typeof name === 'string' && name !== 'root' ? _startCase(name) : null;
  const title = workspace.title || formattedName || 'Studio';
  useEffect(() => {
    onSearchOpenChange(searchOpen);
    if (searchOpen) searchInputElement === null || searchInputElement === void 0 ? void 0 : searchInputElement.focus();
  }, [searchOpen, searchInputElement, onSearchOpenChange]);
  useGlobalKeyDown(e => {
    if (e.key === 'Escape' && searchOpen) {
      handleCloseSearch();
    }
  });
  const handleOpenSearch = useCallback(() => {
    setSearchOpen(true);
  }, []);
  const handleCloseSearch = useCallback(() => {
    setSearchOpen(false);
    searchOpenButtonEl === null || searchOpenButtonEl === void 0 ? void 0 : searchOpenButtonEl.focus();
  }, [searchOpenButtonEl]);
  const handleCloseDrawer = useCallback(() => {
    setDrawerOpen(false);
    drawerButtonEl === null || drawerButtonEl === void 0 ? void 0 : drawerButtonEl.focus();
  }, [drawerButtonEl]);
  const handleOpenDrawer = useCallback(() => {
    setDrawerOpen(true);
  }, []);

  const rootLinkContent = (() => {
    if (isValidElementType(logo)) return /*#__PURE__*/createElement(logo);
    if ( /*#__PURE__*/isValidElement(logo)) return logo;
    return /*#__PURE__*/React.createElement(Text, {
      weight: "bold"
    }, title);
  })();

  const brandingComponent = useMemo(() => /*#__PURE__*/React.createElement(Button, {
    "aria-label": title,
    as: "a",
    href: rootLink.href,
    mode: "bleed",
    onClick: rootLink.handleClick,
    padding: 3
  }, rootLinkContent), [rootLink.handleClick, rootLink.href, rootLinkContent, title]); // The HTML elements that are part of the search view (i.e. the "close" button that is visible
  // when in fullscreen mode on narrow devices) needs to be passed to `<Autocomplete />` so it knows
  // how to make the search experience work properly for non-sighted users.
  // Specifically – without passing `relatedElements`, the listbox with results will close when you
  // TAB to focus the "close" button, and that‘s not a good experience for anyone.

  const searchRelatedElements = useMemo(() => [searchCloseButtonEl].filter(Boolean), [searchCloseButtonEl]);
  return /*#__PURE__*/React.createElement(RootLayer, {
    zOffset: 100,
    "data-search-open": searchOpen
  }, /*#__PURE__*/React.createElement(Card, {
    scheme: "dark",
    shadow: scheme === 'dark' ? 1 : undefined,
    style: {
      lineHeight: 0
    },
    padding: 2,
    sizing: "border",
    "data-ui": "Navbar"
  }, /*#__PURE__*/React.createElement(Flex, {
    align: "center",
    justify: "space-between"
  }, /*#__PURE__*/React.createElement(LeftFlex, {
    align: "center",
    flex: shouldRender.brandingCenter ? undefined : 1
  }, !shouldRender.tools && /*#__PURE__*/React.createElement(Box, {
    marginRight: 1
  }, /*#__PURE__*/React.createElement(Button, {
    mode: "bleed",
    icon: MenuIcon,
    onClick: handleOpenDrawer,
    ref: setDrawerButtonEl
  })), !shouldRender.brandingCenter && /*#__PURE__*/React.createElement(Box, {
    marginRight: 1
  }, brandingComponent), shouldRender.workspaces && /*#__PURE__*/React.createElement(Box, {
    marginRight: 2
  }, /*#__PURE__*/React.createElement(Tooltip, {
    content: /*#__PURE__*/React.createElement(Box, {
      padding: 2
    }, /*#__PURE__*/React.createElement(Text, {
      size: 1
    }, "Select workspace")),
    placement: "bottom",
    portal: true,
    scheme: scheme
  }, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(WorkspaceMenuButton, null)))), /*#__PURE__*/React.createElement(Box, {
    marginRight: shouldRender.brandingCenter ? undefined : 2
  }, /*#__PURE__*/React.createElement(NewDocumentButton, null)), (searchOpen || !shouldRender.searchFullscreen) && /*#__PURE__*/React.createElement(SearchCard, {
    "data-fullscreen": shouldRender.searchFullscreen,
    "data-ui": "SearchRoot",
    flex: 1,
    padding: shouldRender.searchFullscreen ? 2 : undefined,
    scheme: shouldRender.searchFullscreen ? 'light' : undefined,
    shadow: shouldRender.searchFullscreen ? 1 : undefined
  }, /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(Box, {
    flex: 1,
    marginRight: shouldRender.tools ? undefined : [1, 1, 2]
  }, /*#__PURE__*/React.createElement(SearchField, {
    fullScreen: shouldRender.searchFullscreen,
    onSearchItemClick: handleCloseSearch,
    portalElement: fullscreenSearchPortalEl,
    setSearchInputElement: setSearchInputElement,
    relatedElements: searchRelatedElements
  })), shouldRender.searchFullscreen && /*#__PURE__*/React.createElement(Button, {
    "aria-label": "Close search",
    icon: CloseIcon,
    mode: "bleed",
    onClick: handleCloseSearch,
    ref: setSearchCloseButtonEl
  }))), shouldRender.tools && /*#__PURE__*/React.createElement(Card, {
    borderRight: true,
    flex: 1,
    marginX: 2,
    overflow: "visible",
    paddingRight: 1
  }, /*#__PURE__*/React.createElement(ToolMenu, {
    activeToolName: activeToolName,
    context: "topbar",
    isDrawerOpen: false,
    tools: tools,
    closeDrawer: handleCloseDrawer
  }))), shouldRender.brandingCenter && /*#__PURE__*/React.createElement(Box, {
    marginX: 1
  }, brandingComponent), /*#__PURE__*/React.createElement(Flex, {
    align: "center"
  }, shouldRender.changelog && /*#__PURE__*/React.createElement(Box, {
    marginRight: 1
  }, /*#__PURE__*/React.createElement(ChangelogButton, null)), shouldRender.configIssues && /*#__PURE__*/React.createElement(Box, {
    marginRight: 2
  }, /*#__PURE__*/React.createElement(ConfigIssuesButton, null)), /*#__PURE__*/React.createElement(Box, {
    marginRight: 1
  }, /*#__PURE__*/React.createElement(PresenceMenu, {
    collapse: shouldRender.collapsedPresenceMenu
  })), shouldRender.tools && /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(UserMenu, null)), shouldRender.searchFullscreen && /*#__PURE__*/React.createElement(Button, {
    "aria-label": "Open search",
    icon: SearchIcon,
    mode: "bleed",
    onClick: handleOpenSearch,
    ref: setSearchOpenButtonEl
  })))), !shouldRender.tools && /*#__PURE__*/React.createElement(NavDrawer, {
    activeToolName: activeToolName,
    isOpen: drawerOpen,
    onClose: handleCloseDrawer,
    tools: tools
  }));
}