import _omit from "lodash/omit";

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { Box, Button, Card, Flex, Stack } from '@sanity/ui';
import React, { useCallback, useState } from 'react';
import { AddIcon, ArrowLeftIcon, ChevronRightIcon } from '@sanity/icons';
import { useActiveWorkspace } from '../../../../activeWorkspaceMatcher';
import { useWorkspaces } from '../../../../workspaces';
import { WorkspacePreview } from '../WorkspacePreview';
import { useWorkspaceAuthStates } from '../hooks';
import { LoadingScreen } from '../../../../screens';
import { workspacesDocsUrl } from '../constants';
import { Layout } from './Layout';
export function WorkspaceAuth() {
  var _selectedWorkspace$au;

  const workspaces = useWorkspaces();
  const {
    activeWorkspace,
    setActiveWorkspace
  } = useActiveWorkspace();
  const [authStates] = useWorkspaceAuthStates(workspaces);
  const [selectedWorkspaceName, setSelectedWorkspaceName] = useState((activeWorkspace === null || activeWorkspace === void 0 ? void 0 : activeWorkspace.name) || null);
  const selectedWorkspace = workspaces.length === 1 ? workspaces[0] : workspaces.find(workspace => workspace.name === selectedWorkspaceName);
  const LoginComponent = selectedWorkspace === null || selectedWorkspace === void 0 ? void 0 : (_selectedWorkspace$au = selectedWorkspace.auth) === null || _selectedWorkspace$au === void 0 ? void 0 : _selectedWorkspace$au.LoginComponent;
  const handleBack = useCallback(() => setSelectedWorkspaceName(null), []);
  if (!authStates) return /*#__PURE__*/React.createElement(LoadingScreen, null);

  if (LoginComponent && selectedWorkspace) {
    return /*#__PURE__*/React.createElement(Stack, {
      space: 2
    }, workspaces.length > 1 && /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(Button, {
      fontSize: 1,
      icon: ArrowLeftIcon,
      mode: "bleed",
      onClick: handleBack,
      padding: 2,
      text: "Choose another workspace"
    })), /*#__PURE__*/React.createElement(Layout, {
      header: /*#__PURE__*/React.createElement(Box, {
        padding: 3
      }, /*#__PURE__*/React.createElement(WorkspacePreview, {
        icon: selectedWorkspace.icon,
        title: selectedWorkspace.title,
        subtitle: selectedWorkspace.dataset
      }))
    }, /*#__PURE__*/React.createElement(Stack, {
      padding: 2,
      paddingBottom: 3,
      paddingTop: 4
    }, /*#__PURE__*/React.createElement(LoginComponent, _extends({}, _omit(selectedWorkspace, ['type', '__internal']), {
      key: selectedWorkspaceName
    })))));
  }

  return /*#__PURE__*/React.createElement(Layout, {
    header: "Choose your workspace",
    footer: /*#__PURE__*/React.createElement(Stack, {
      padding: 1
    }, /*#__PURE__*/React.createElement(Button, {
      as: "a",
      href: workspacesDocsUrl,
      icon: AddIcon,
      justify: "flex-start",
      mode: "bleed",
      rel: "noopener noreferrer",
      target: "__blank",
      text: "Add workspace"
    }))
  }, /*#__PURE__*/React.createElement(Stack, {
    space: 1,
    paddingX: 1,
    paddingY: 2
  }, workspaces.map(workspace => {
    const authState = authStates[workspace.name]; // eslint-disable-next-line no-nested-ternary

    const state = authState.authenticated ? 'logged-in' : workspace.auth.LoginComponent ? 'logged-out' : 'no-access';

    const handleSelectWorkspace = () => {
      if (state === 'logged-in' && workspace.name !== activeWorkspace.name) {
        setActiveWorkspace(workspace.name);
      }

      if (state === 'logged-out') {
        setSelectedWorkspaceName(workspace.name);
      }
    };

    return /*#__PURE__*/React.createElement(Card, {
      as: "button",
      radius: 2,
      key: workspace.name,
      padding: 2 // eslint-disable-next-line react/jsx-no-bind
      ,
      onClick: handleSelectWorkspace
    }, /*#__PURE__*/React.createElement(WorkspacePreview, {
      icon: workspace === null || workspace === void 0 ? void 0 : workspace.icon,
      iconRight: ChevronRightIcon,
      state: state,
      subtitle: workspace.dataset,
      title: (workspace === null || workspace === void 0 ? void 0 : workspace.title) || workspace.name
    }));
  })));
}