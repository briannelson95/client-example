import React, { Fragment, useMemo } from 'react';
import Refractor from 'react-refractor';
import bash from 'refractor/lang/bash';
import javascript from 'refractor/lang/javascript';
import json from 'refractor/lang/json';
import jsx from 'refractor/lang/jsx';
import typescript from 'refractor/lang/typescript';
import { ToastProvider } from '@sanity/ui';
import { UserColorManagerProvider } from '../user-color';
import { ResourceCacheProvider } from '../datastores/ResourceCacheProvider';
import { ColorSchemeProvider } from './colorScheme';
import { ActiveWorkspaceMatcher } from './activeWorkspaceMatcher';
import { StudioThemeProvider } from './StudioThemeProvider';
import { StudioErrorBoundary } from './StudioErrorBoundary';
import { WorkspaceLoader } from './workspaceLoader';
import { ConfigErrorsScreen, LoadingScreen, AuthenticateScreen, NotFoundScreen, NotAuthenticatedScreen } from './screens';
import { WorkspacesProvider } from './workspaces';
import { AuthBoundary } from './AuthBoundary';
import { Z_OFFSET } from './constants';
Refractor.registerLanguage(bash);
Refractor.registerLanguage(javascript);
Refractor.registerLanguage(json);
Refractor.registerLanguage(jsx);
Refractor.registerLanguage(typescript);
export function StudioProvider(_ref) {
  let {
    children,
    config,
    onSchemeChange,
    scheme,
    unstable_history: history,
    unstable_noAuthBoundary: noAuthBoundary
  } = _ref;
  const ConditionalAuthBoundary = useMemo(() => noAuthBoundary ? Fragment : AuthBoundary, [noAuthBoundary]);
  return /*#__PURE__*/React.createElement(ColorSchemeProvider, {
    onSchemeChange: onSchemeChange,
    scheme: scheme
  }, /*#__PURE__*/React.createElement(ToastProvider, {
    paddingY: 7,
    zOffset: Z_OFFSET.toast
  }, /*#__PURE__*/React.createElement(StudioErrorBoundary, null, /*#__PURE__*/React.createElement(WorkspacesProvider, {
    config: config
  }, /*#__PURE__*/React.createElement(ActiveWorkspaceMatcher, {
    unstable_history: history,
    NotFoundComponent: NotFoundScreen,
    LoadingComponent: LoadingScreen
  }, /*#__PURE__*/React.createElement(StudioThemeProvider, null, /*#__PURE__*/React.createElement(UserColorManagerProvider, null, /*#__PURE__*/React.createElement(ConditionalAuthBoundary, {
    LoadingComponent: LoadingScreen,
    AuthenticateComponent: AuthenticateScreen,
    NotAuthenticatedComponent: NotAuthenticatedScreen
  }, /*#__PURE__*/React.createElement(WorkspaceLoader, {
    LoadingComponent: LoadingScreen,
    ConfigErrorsComponent: ConfigErrorsScreen
  }, /*#__PURE__*/React.createElement(ResourceCacheProvider, null, children))))))))));
}