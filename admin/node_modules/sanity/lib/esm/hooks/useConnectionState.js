import { distinctUntilChanged, map, mapTo, startWith, switchMap } from 'rxjs/operators';
import { of, timer } from 'rxjs';
import { useMemoObservable } from 'react-rx';
import { useDocumentStore } from '../datastores';
const INITIAL = 'connecting';
export function useConnectionState(publishedDocId, docTypeName) {
  const documentStore = useDocumentStore();
  return useMemoObservable(() => documentStore.pair.documentEvents(publishedDocId, docTypeName).pipe(map(ev => ev.type), map(eventType => eventType !== 'reconnect'), switchMap(isConnected => isConnected ? of('connected') : timer(200).pipe(mapTo('reconnecting'))), startWith(INITIAL), distinctUntilChanged()), [publishedDocId, docTypeName], INITIAL);
}