import { useEffect, useState } from 'react';
import { format, differenceInSeconds, differenceInMinutes, differenceInHours, differenceInDays, differenceInWeeks, differenceInMonths, differenceInYears } from 'date-fns';
import pluralize from 'pluralize-esm';
const FIVE_SECONDS = 1000 * 5;
const TWENTY_SECONDS = 1000 * 20;
const ONE_MINUTE = 1000 * 60;
const ONE_HOUR = ONE_MINUTE * 60;
export function useTimeAgo(time) {
  let {
    minimal,
    agoSuffix
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const [resolved, setResolved] = useState(() => formatRelativeTime(time, {
    minimal,
    agoSuffix
  }));
  useEffect(() => {
    setResolved(formatRelativeTime(time, {
      minimal,
      agoSuffix
    }));
  }, [time, minimal, agoSuffix]);
  useEffect(() => {
    const id = Number.isFinite(resolved.refreshInterval) ? window.setInterval(() => setResolved(formatRelativeTime(time, {
      minimal,
      agoSuffix
    })), resolved.refreshInterval) : undefined;
    return () => clearInterval(id);
  }, [time, minimal, resolved.refreshInterval, agoSuffix]);
  return resolved.timestamp;
}

function formatRelativeTime(date) {
  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const now = Date.now();
  const parsedDate = date instanceof Date ? date : new Date(date);
  const diffMonths = differenceInMonths(now, parsedDate);
  const diffYears = differenceInYears(now, parsedDate);

  if (diffMonths || diffYears) {
    if (opts.minimal && diffYears === 0) {
      // same year
      return {
        timestamp: format(parsedDate, 'MMM d'),
        refreshInterval: +Infinity
      };
    }

    if (opts.minimal) {
      return {
        timestamp: format(parsedDate, 'MMM d, yyyy'),
        refreshInterval: +Infinity
      };
    }

    return {
      timestamp: format(parsedDate, 'MMM d, yyyy, hh:mm a'),
      refreshInterval: +Infinity
    };
  }

  const diffWeeks = differenceInWeeks(now, parsedDate);
  const weekSuffix = pluralize('week', diffWeeks);

  if (diffWeeks) {
    if (opts.minimal) {
      return {
        timestamp: opts.agoSuffix ? "".concat(diffWeeks, "w ago") : "".concat(diffWeeks, "w"),
        refreshInterval: ONE_HOUR
      };
    }

    return {
      timestamp: opts.agoSuffix ? "".concat(diffWeeks, " ").concat(weekSuffix, " ago") : "".concat(diffWeeks, " ").concat(weekSuffix),
      refreshInterval: ONE_HOUR
    };
  }

  const diffDays = differenceInDays(now, parsedDate);
  const daysSuffix = pluralize('days', diffDays);

  if (diffDays) {
    if (opts.minimal) {
      const daysSince = opts.agoSuffix ? "".concat(diffDays, "d ago") : "".concat(diffDays, "d");
      return {
        timestamp: diffDays === 1 ? 'yesterday' : daysSince,
        refreshInterval: ONE_HOUR
      };
    }

    const daysSince = opts.agoSuffix ? "".concat(diffDays, " ").concat(daysSuffix, " ago") : "".concat(diffDays, " ").concat(daysSuffix);
    return {
      timestamp: diffDays === 1 ? 'yesterday' : daysSince,
      refreshInterval: ONE_HOUR
    };
  }

  const diffHours = differenceInHours(now, parsedDate);
  const hoursSuffix = pluralize('hour', diffHours);

  if (diffHours) {
    if (opts.minimal) {
      return {
        timestamp: opts.agoSuffix ? "".concat(diffHours, "h ago") : "".concat(diffHours, "h"),
        refreshInterval: ONE_MINUTE
      };
    }

    return {
      timestamp: opts.agoSuffix ? "".concat(diffHours, " ").concat(hoursSuffix, " ago") : "".concat(diffHours, " ").concat(hoursSuffix),
      refreshInterval: ONE_MINUTE
    };
  }

  const diffMins = differenceInMinutes(now, parsedDate);
  const minsSuffix = pluralize('minute', diffMins);

  if (diffMins) {
    if (opts.minimal) {
      return {
        timestamp: opts.agoSuffix ? "".concat(diffMins, "m ago") : "".concat(diffMins, "m"),
        refreshInterval: TWENTY_SECONDS
      };
    }

    return {
      timestamp: opts.agoSuffix ? "".concat(diffMins, " ").concat(minsSuffix, " ago") : "".concat(diffMins, " ").concat(minsSuffix),
      refreshInterval: TWENTY_SECONDS
    };
  }

  const diffSeconds = differenceInSeconds(now, parsedDate);
  const secsSuffix = pluralize('second', diffSeconds);

  if (diffSeconds > 10) {
    if (opts.minimal) {
      return {
        timestamp: opts.agoSuffix ? "".concat(diffSeconds, "s ago") : "".concat(diffSeconds, "s"),
        refreshInterval: FIVE_SECONDS
      };
    }

    return {
      timestamp: opts.agoSuffix ? "".concat(diffSeconds, " ").concat(secsSuffix, " ago") : "".concat(diffSeconds, " ").concat(secsSuffix),
      refreshInterval: FIVE_SECONDS
    };
  }

  return {
    timestamp: 'just now',
    refreshInterval: FIVE_SECONDS
  };
}