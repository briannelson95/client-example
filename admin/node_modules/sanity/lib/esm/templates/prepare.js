import { isBuilder } from './resolve';
import { validateTemplates } from './validate';

function maybeSerialize(template) {
  return isBuilder(template) ? template.serialize() : template;
}

function isNonNullable(t) {
  return !!t;
}

export function prepareTemplates(schema, initialValueTemplates) {
  const serialized = initialValueTemplates.map(maybeSerialize);
  return validateTemplates(schema, serialized);
}
export function defaultTemplateForType(schemaType) {
  return {
    id: schemaType.name,
    schemaType: schemaType.name,
    title: schemaType.title || schemaType.name,
    icon: schemaType.icon,
    value: schemaType.initialValue || {
      _type: schemaType.name
    }
  };
}
export function defaultTemplatesForSchema(schema) {
  const schemaTypes = schema.getTypeNames().filter(typeName => !/^sanity\./.test(typeName)).map(typeName => schema.get(typeName)).filter(isNonNullable).filter(schemaType => {
    var _schemaType$type;

    return ((_schemaType$type = schemaType.type) === null || _schemaType$type === void 0 ? void 0 : _schemaType$type.name) === 'document';
  });
  return prepareTemplates(schema, schemaTypes.map(schemaType => defaultTemplateForType(schemaType)));
}