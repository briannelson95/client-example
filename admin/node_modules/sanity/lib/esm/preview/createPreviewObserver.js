import _isPlainObject from "lodash/isPlainObject";
import { of as observableOf } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { isCrossDatasetReference, isCrossDatasetReferenceSchemaType, isReferenceSchemaType } from '@sanity/types';
import { invokePrepare, prepareForPreview } from './utils/prepareForPreview';
import { getPreviewPaths } from './utils/getPreviewPaths';
export function isRecord(value) {
  return _isPlainObject(value);
}
export function isReference(value) {
  return _isPlainObject(value);
} // Takes a value and its type and prepares a snapshot for it that can be passed to a preview component

export function createPreviewObserver(context) {
  const {
    observeDocumentTypeFromId,
    observePaths
  } = context;
  return function observeForPreview(value, type, viewOptions, apiConfig) {
    if (isCrossDatasetReferenceSchemaType(type)) {
      // if the value is of type crossDatasetReference, but has no _ref property, we cannot prepare any value for the preview
      // and the most appropriate thing to do is to return `undefined` for snapshot
      if (!isCrossDatasetReference(value)) {
        return observableOf({
          snapshot: undefined
        });
      }

      const refApiConfig = {
        projectId: value._projectId,
        dataset: value._dataset
      };
      return observeDocumentTypeFromId(value._ref, refApiConfig).pipe(switchMap(typeName => {
        if (typeName) {
          const refType = type.to.find(toType => toType.type === typeName);
          return observeForPreview(value, refType, {}, refApiConfig);
        }

        return observableOf({
          snapshot: undefined
        });
      }));
    }

    if (isReferenceSchemaType(type)) {
      // if the value is of type reference, but has no _ref property, we cannot prepare any value for the preview
      // and the most appropriate thing to do is to return `undefined` for snapshot
      if (!isReference(value)) {
        return observableOf({
          snapshot: undefined
        });
      } // Previewing references actually means getting the referenced value,
      // and preview using the preview config of its type
      // todo: We need a way of knowing the type of the referenced value by looking at the reference record alone


      return observeDocumentTypeFromId(value._ref).pipe(switchMap(typeName => {
        if (typeName) {
          const refType = type.to.find(toType => toType.name === typeName);
          return observeForPreview(value, refType);
        } // todo: in case we can't read the document type, we can figure out the reason why e.g. whether it's because
        //  the document doesn't exist or it's not readable due to lack of permission.
        //  We can use the "observeDocumentAvailability" function
        //  for this, but currently not sure if needed


        return observableOf({
          snapshot: undefined
        });
      }));
    }

    const paths = getPreviewPaths(type.preview);

    if (paths) {
      return observePaths(value, paths, apiConfig).pipe(map(snapshot => ({
        type: type,
        snapshot: snapshot && prepareForPreview(snapshot, type, viewOptions)
      })));
    } // Note: this case is typically rare (or non-existent) and occurs only if
    // the SchemaType doesn't have a `select` field. The schema compiler
    // provides a default `preview` implementation for `object`s, `image`s,
    // `file`s, and `document`s


    return observableOf({
      type,
      snapshot: value && isRecord(value) ? invokePrepare(type, value, viewOptions).returnValue : null
    });
  };
}