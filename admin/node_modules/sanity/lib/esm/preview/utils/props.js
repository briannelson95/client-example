import { Observable, of as observableOf, from as observableFrom, isObservable } from 'rxjs';
import { map, mergeAll, combineAll, switchMap, scan } from 'rxjs/operators';
import { keysOf } from './keysOf';

function setKey(source, key, value) {
  return { ...source,
    [key]: value
  };
}

export function props() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return source => {
    return new Observable(observer => source.subscribe(observer)).pipe(switchMap(object => {
      const keyObservables = keysOf(object).map(key => {
        const value = object[key];
        return isObservable(value) ? observableFrom(value).pipe(map(val => [key, val])) : observableOf([key, value]);
      });
      return options.wait ? observableFrom(keyObservables).pipe(combineAll(), map(pairs => pairs.reduce((acc, _ref) => {
        let [key, value] = _ref;
        return setKey(acc, key, value);
      }, {}))) : observableFrom(keyObservables).pipe(mergeAll(), scan((acc, _ref2) => {
        let [key, value] = _ref2;
        return setKey(acc, key, value);
      }, {}));
    }));
  };
}