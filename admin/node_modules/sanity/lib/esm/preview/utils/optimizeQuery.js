import _values from "lodash/values";
import _sortBy from "lodash/sortBy";
import _identity from "lodash/identity";
import { escapeField, fieldNeedsEscape } from '../../util/searchUtils';
import { INCLUDE_FIELDS_QUERY } from '../constants';
export function combineSelections(selections) {
  return _values(selections.reduce((output, _ref, index) => {
    let [id, fields] = _ref;

    const key = _sortBy(fields.join(','), _identity).join('.');

    if (!output[key]) {
      output[key] = {
        fields: fields,
        ids: [],
        map: []
      };
    }

    const idx = output[key].ids.length;
    output[key].ids[idx] = id;
    output[key].map[idx] = index;
    return output;
  }, {}));
}

function stringifyId(id) {
  return JSON.stringify(id);
}

const maybeEscape = fieldName => fieldNeedsEscape(fieldName) ? "\"".concat(fieldName, "\": @").concat(escapeField(fieldName)) : fieldName;

function toSubQuery(_ref2) {
  let {
    ids,
    fields
  } = _ref2;
  const allFields = [...INCLUDE_FIELDS_QUERY, ...fields];
  return "*[_id in [".concat(ids.map(stringifyId).join(','), "]][0...").concat(ids.length, "]{").concat(allFields.map(maybeEscape).join(','), "}");
}

export function toQuery(combinedSelections) {
  return "[".concat(combinedSelections.map(toSubQuery).join(','), "][0...").concat(combinedSelections.length, "]");
}
export function reassemble(queryResult, combinedSelections) {
  return queryResult.reduce((reprojected, subResult, index) => {
    const map = combinedSelections[index].map;
    map.forEach((resultIdx, i) => {
      const id = combinedSelections[index].ids[i];
      const found = subResult.find(doc => doc._id === id);
      reprojected[resultIdx] = found || null;
    });
    return reprojected;
  }, []);
}