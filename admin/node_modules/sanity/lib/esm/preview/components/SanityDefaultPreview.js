import { DocumentIcon } from '@sanity/icons';
import imageUrlBuilder from '@sanity/image-url';
import { isImage, isReference } from '@sanity/types';
import React, { createElement, isValidElement, useCallback, useMemo } from 'react';
import { useClient } from '../../hooks';
import { isRecord, isString } from '../../util';
import { _extractUploadState } from './_extractUploadState';
import { _previewComponents } from './_previewComponents';

function FallbackIcon() {
  return /*#__PURE__*/React.createElement(DocumentIcon, {
    className: "sanity-studio__preview-fallback-icon"
  });
}

export function SanityDefaultPreview(props) {
  const {
    description: descriptionProp,
    icon,
    layout,
    media: mediaProp,
    subtitle: subtitleProp,
    title: titleProp,
    value: valueProp,
    ...restProps
  } = props;
  const client = useClient();
  const imageBuilder = useMemo(() => imageUrlBuilder(client), [client]);
  const component = _previewComponents[layout || 'default'] || _previewComponents.default;
  const {
    _upload,
    value
  } = useMemo(() => {
    return valueProp ? _extractUploadState(valueProp) : {
      _upload: undefined,
      value: undefined
    };
  }, [valueProp]);
  const description = descriptionProp || (isRecord(value) && value !== null && value !== void 0 && value.description ? String(value === null || value === void 0 ? void 0 : value.description) : undefined);
  const title = titleProp || (isRecord(value) && value !== null && value !== void 0 && value.title ? String(value === null || value === void 0 ? void 0 : value.title) : undefined);
  const subtitle = subtitleProp || (isRecord(value) && value !== null && value !== void 0 && value.subtitle ? String(value === null || value === void 0 ? void 0 : value.subtitle) : undefined); // NOTE: This function exists because the previews provides options
  // for the rendering of the media (dimensions)

  const renderMedia = useCallback(options => {
    if (!isImage(mediaProp)) {
      return null;
    }

    const {
      dimensions
    } = options; // Handle sanity image

    return /*#__PURE__*/React.createElement("img", {
      alt: isString(title) ? title : undefined,
      referrerPolicy: "strict-origin-when-cross-origin",
      src: imageBuilder.image(mediaProp).width(dimensions.width || 100).height(dimensions.height || 100).fit(dimensions.fit).dpr(dimensions.dpr || 1).url() || ''
    });
  }, [imageBuilder, mediaProp, title]);
  const renderIcon = useCallback(() => {
    return /*#__PURE__*/createElement(icon || FallbackIcon);
  }, [icon]);
  const media = useMemo(() => {
    if (icon === false) {
      // Explicitly disabled
      return false;
    }

    if (typeof mediaProp === 'function') {
      return mediaProp;
    }

    if ( /*#__PURE__*/isValidElement(mediaProp)) {
      return mediaProp;
    } // If the asset is on media


    if (isReference(mediaProp) && mediaProp._type === 'reference') {
      return renderMedia;
    } // Handle sanity image


    if (isImage(mediaProp)) {
      return renderMedia;
    } // Render fallback icon


    return renderIcon;
  }, [icon, mediaProp, renderIcon, renderMedia]);
  return /*#__PURE__*/createElement(component, {
    imageUrl: _upload === null || _upload === void 0 ? void 0 : _upload.previewImage,
    progress: _upload === null || _upload === void 0 ? void 0 : _upload.progress,
    ...restProps,
    media,
    description,
    title,
    subtitle,
    value
  });
}