import { isImage } from '@sanity/types';
import React, { createElement, useCallback, useMemo, useState } from 'react';
import { unstable_useDocumentPreview as useDocumentPreview } from '../useDocumentPreview';
import { useVisibility } from '../useVisibility';
import { _HIDE_DELAY } from './_constants';
import { _resolvePreviewComponent } from './_resolvePreviewComponent';
export function SanityPreview(props) {
  const {
    layout = 'default',
    ordering,
    schemaType,
    style: styleProp,
    value: valueProp,
    ...restProps
  } = props;

  const component = _resolvePreviewComponent(schemaType);

  const [element, setElement] = useState(null);
  const isPTE = ['inline', 'block', 'blockImage'].includes(layout); // Subscribe to visiblity

  const visibility = useVisibility({
    // NOTE: disable when PTE preview
    element: isPTE ? null : element,
    hideDelay: _HIDE_DELAY
  }); // Subscribe document preview value

  const {
    error,
    value
  } = useDocumentPreview({
    enabled: isPTE || visibility,
    ordering,
    schemaType,
    value: valueProp
  });
  const setRef = useCallback(refValue => {
    setElement(refValue);
  }, []);
  const style = useMemo(() => ({ ...styleProp,
    minWidth: (styleProp === null || styleProp === void 0 ? void 0 : styleProp.minWidth) || 1,
    minHeight: (styleProp === null || styleProp === void 0 ? void 0 : styleProp.minHeight) || 1
  }), [styleProp]);
  return /*#__PURE__*/React.createElement("div", {
    ref: setRef,
    style: style
  }, /*#__PURE__*/createElement(component, { ...restProps,
    description: value === null || value === void 0 ? void 0 : value.description,
    error,
    isPlaceholder: !value,
    layout,
    media: isImage(valueProp) ? valueProp : value === null || value === void 0 ? void 0 : value.media,
    schemaType,
    subtitle: value === null || value === void 0 ? void 0 : value.subtitle,
    title: value === null || value === void 0 ? void 0 : value.title,
    value
  }));
}