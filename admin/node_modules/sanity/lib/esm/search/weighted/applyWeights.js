import _toLower from "lodash/toLower";
import _keyBy from "lodash/keyBy";
import _intersection from "lodash/intersection";
import _union from "lodash/union";
import _compact from "lodash/compact";
import _uniq from "lodash/uniq";
import _words from "lodash/words";
// takes a set of terms and a value and returns a [score, story] pair where score is a value between 0, 1 and story is the explanation
export const calculateScore = (searchTerms, value) => {
  const uniqueValueTerms = _uniq(_compact(_words(_toLower(value))));

  const uniqueSearchTerms = _uniq(searchTerms.map(_toLower));

  const matches = _intersection(uniqueSearchTerms, uniqueValueTerms);

  const all = _union(uniqueValueTerms, uniqueSearchTerms);

  const fieldScore = matches.length / all.length;
  return fieldScore === 1 ? [1, 'Exact match'] : [fieldScore / 2, "Matched ".concat(matches.length, " of ").concat(all.length, " terms: [").concat(matches.join(', '), "]")];
};

const stringify = value => typeof value === 'string' ? value : JSON.stringify(value);

export function applyWeights(searchSpec, hits) {
  let terms = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  const specByType = _keyBy(searchSpec, spec => spec.typeName);

  return hits.map((hit, index) => {
    var _typeSpec$paths;

    const typeSpec = specByType[hit._type];
    const stories = ((_typeSpec$paths = typeSpec.paths) === null || _typeSpec$paths === void 0 ? void 0 : _typeSpec$paths.map((pathSpec, idx) => {
      const value = stringify(hit["w".concat(idx)]);

      if (!value) {
        return {
          path: pathSpec.path,
          score: 0,
          why: 'No match'
        };
      }

      const [score, why] = calculateScore(terms, value);
      return {
        path: pathSpec.path,
        score: score * pathSpec.weight,
        why: "".concat(why, " (*").concat(pathSpec.weight, ")")
      };
    })) || [];
    const totalScore = stories.reduce((acc, rank) => acc + rank.score, 0);
    return {
      hit,
      resultIndex: hits.length - index,
      score: totalScore,
      stories: stories
    };
  });
}