function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { isRecord } from '../util';
export class ConfigPropertyError extends Error {
  constructor(_ref) {
    let {
      propertyName,
      path,
      cause
    } = _ref;
    const message = isRecord(cause) && typeof (cause === null || cause === void 0 ? void 0 : cause.message) === 'string' ? ": ".concat(cause.message) : '';
    super("An error occurred while resolving `".concat(propertyName, "` from ").concat(path.join(' > ')).concat(message));

    _defineProperty(this, "propertyName", void 0);

    _defineProperty(this, "path", void 0);

    _defineProperty(this, "cause", void 0);

    this.propertyName = propertyName;
    this.cause = cause;
    this.path = path;
  }

}