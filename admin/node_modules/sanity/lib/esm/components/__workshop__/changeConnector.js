var _templateObject, _templateObject2;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { Card, Container, Flex, LayerProvider, Stack, Text } from '@sanity/ui';
import React, { useCallback, useState } from 'react';
import styled from 'styled-components';
import { ScrollContainer } from '../scroll';
import { ChangeFieldWrapper } from '../changeIndicators/ChangeFieldWrapper';
import { ChangeIndicator } from '../changeIndicators/ChangeIndicator';
import { ChangeConnectorRoot } from '../changeIndicators/overlay/ChangeConnectorRoot';
const TestContainer = styled(Container).attrs({
  height: 'fill',
  width: 1
})(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  max-height: 320px;\n"])));
const Root = styled(ChangeConnectorRoot)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  height: 100%;\n  outline: 1px solid var(--card-border-color);\n  position: relative;\n"])));
export default function ChangeConnectorStory() {
  const isReviewChangesOpen = true;
  const onOpenReviewChanges = useCallback(() => undefined, []);
  const onSetFocus = useCallback(() => undefined, []);
  const [focusPath, setFocusPath] = useState([]);
  return /*#__PURE__*/React.createElement(LayerProvider, null, /*#__PURE__*/React.createElement(Card, {
    height: "fill",
    tone: "transparent"
  }, /*#__PURE__*/React.createElement(Flex, {
    align: "center",
    height: "fill",
    justify: "center",
    padding: 4,
    sizing: "border"
  }, /*#__PURE__*/React.createElement(TestContainer, null, /*#__PURE__*/React.createElement(Root, {
    isReviewChangesOpen: isReviewChangesOpen,
    onOpenReviewChanges: onOpenReviewChanges,
    onSetFocus: onSetFocus
  }, /*#__PURE__*/React.createElement(Flex, {
    height: "fill"
  }, /*#__PURE__*/React.createElement(Card, {
    as: ScrollContainer,
    "data-ui": "ScrollContainer",
    flex: 1,
    overflow: "auto",
    padding: 5,
    style: {
      position: 'relative'
    }
  }, /*#__PURE__*/React.createElement(Stack, {
    space: 9
  }, /*#__PURE__*/React.createElement(DebugFormField, {
    path: ['a'],
    focusPath: focusPath,
    setFocusPath: setFocusPath,
    value: "A",
    compareValue: "B"
  }, /*#__PURE__*/React.createElement(Text, null, "Field A")), /*#__PURE__*/React.createElement(DebugFormField, {
    path: ['b'],
    focusPath: focusPath,
    setFocusPath: setFocusPath,
    value: "B",
    compareValue: "C"
  }, /*#__PURE__*/React.createElement(Text, null, "Field B")), /*#__PURE__*/React.createElement(DebugFormField, {
    path: ['c'],
    focusPath: focusPath,
    setFocusPath: setFocusPath,
    value: "C",
    compareValue: "D"
  }, /*#__PURE__*/React.createElement(Text, null, "Field C")))), /*#__PURE__*/React.createElement(Card, {
    as: ScrollContainer,
    "data-ui": "ScrollContainer",
    borderLeft: true,
    flex: 1,
    overflow: "auto",
    padding: 5,
    style: {
      position: 'relative'
    }
  }, /*#__PURE__*/React.createElement(Stack, {
    flex: 1,
    space: 9
  }, /*#__PURE__*/React.createElement(DebugDiffField, {
    path: ['a']
  }, /*#__PURE__*/React.createElement(Text, null, "Diff A")), /*#__PURE__*/React.createElement(DebugDiffField, {
    path: ['b']
  }, /*#__PURE__*/React.createElement(Text, null, "Diff B")), /*#__PURE__*/React.createElement(DebugDiffField, {
    path: ['c']
  }, /*#__PURE__*/React.createElement(Text, null, "Diff C"))))))))));
}

function DebugFormField(props) {
  const {
    children,
    focusPath,
    path,
    value,
    compareValue,
    setFocusPath
  } = props;
  const handleBlur = useCallback(() => setFocusPath([]), [setFocusPath]);
  const handleFocus = useCallback(() => setFocusPath(path), [path, setFocusPath]);
  return /*#__PURE__*/React.createElement(ChangeIndicator, {
    hasFocus: false,
    path: path,
    isChanged: false
  }, /*#__PURE__*/React.createElement(Card, {
    border: true,
    onBlur: handleBlur,
    onFocus: handleFocus,
    padding: 3,
    radius: 1,
    tabIndex: 0
  }, children));
}

function DebugDiffField(props) {
  const {
    children,
    path
  } = props;
  const [hovered, setHovered] = useState(false);
  const handleMouseEnter = useCallback(() => setHovered(true), []);
  const handleMouseLeave = useCallback(() => setHovered(false), []);
  return /*#__PURE__*/React.createElement(ChangeFieldWrapper, {
    hasHover: hovered,
    path: path
  }, /*#__PURE__*/React.createElement(Card, {
    borderLeft: true,
    padding: 3,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }, children));
}