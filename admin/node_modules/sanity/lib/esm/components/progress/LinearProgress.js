var _templateObject, _templateObject2;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { hues } from '@sanity/color';
import { Card } from '@sanity/ui';
import React from 'react';
import styled, { css } from 'styled-components';
const STROKE_WIDTH = 0.5;
const Root = styled(Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  overflow: hidden;\n"])));
const Bar = styled(Card)(_ref => {
  let {
    theme
  } = _ref;
  const {
    color
  } = theme.sanity;
  return css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    height: ", "rem;\n    background: ", ";\n    transition: transform 75ms;\n  "])), STROKE_WIDTH, hues.blue[color.dark ? 400 : 500].hex);
});
export function LinearProgress(props) {
  const {
    value
  } = props;
  return /*#__PURE__*/React.createElement(Root, {
    radius: 5
  }, /*#__PURE__*/React.createElement(Bar, {
    radius: 5,
    style: {
      transform: "translate3d(".concat(value - 100, "%, 0, 0)")
    }
  }));
}