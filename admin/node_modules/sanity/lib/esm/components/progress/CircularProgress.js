var _templateObject, _templateObject2, _templateObject3;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { hues } from '@sanity/color';
import React from 'react';
import styled, { css } from 'styled-components';
const SIZE = 43;
const STROKE_WIDTH = 3;
const Root = styled.svg(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  width: ", "px;\n  height: ", "px;\n  transform: rotate(-90deg);\n"])), SIZE, SIZE);
const BgCircle = styled.circle(_ref => {
  let {
    theme
  } = _ref;
  const {
    color
  } = theme.sanity;
  return css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    fill: none;\n    stroke: ", ";\n    stroke-width: ", "px;\n  "])), hues.gray[color.dark ? 900 : 100].hex, STROKE_WIDTH);
});
const ProgressCircle = styled.circle(_ref2 => {
  let {
    theme
  } = _ref2;
  const {
    color
  } = theme.sanity;
  return css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n    fill: none;\n    stroke: ", ";\n    stroke-width: ", "px;\n    transition: stroke-dashoffset 75ms;\n  "])), hues.blue[color.dark ? 400 : 500].hex, STROKE_WIDTH);
});
export function CircularProgress(props) {
  const {
    value: valueProp
  } = props;
  const value = Math.min(Math.max(valueProp, 0), 100);
  const radius = SIZE / 2 - STROKE_WIDTH / 2;
  const circ = 2 * Math.PI * radius;
  const offset = (100 - value) / 100 * circ;
  const viewBox = "".concat(SIZE / 2, " ").concat(SIZE / 2, " ").concat(SIZE, " ").concat(SIZE);
  return /*#__PURE__*/React.createElement(Root, {
    viewBox: viewBox
  }, /*#__PURE__*/React.createElement(BgCircle, {
    cx: SIZE,
    cy: SIZE,
    r: radius
  }), /*#__PURE__*/React.createElement(ProgressCircle, {
    cx: SIZE,
    cy: SIZE,
    r: radius,
    style: {
      strokeDasharray: circ,
      strokeDashoffset: "".concat(offset, "px")
    }
  }));
}