var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import styled, { css } from 'styled-components';
const animationSpeed = 250;
export const ChangeBarWrapper = styled.div(_ref => {
  let {
    changed,
    disabled,
    isReviewChangeOpen
  } = _ref;
  if (disabled) return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      ", " {\n        display: none;\n      }\n    "])), ChangeBar);
  return css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    --change-bar-offset: 2px;\n\n    display: flex;\n    position: relative;\n\n    @media (hover: hover) {\n      &:hover {\n        z-index: 10;\n      }\n    }\n\n    /* hide when field is not changed */\n    ", "\n\n    /* hide hover effect when review changes is open */\n    ", "\n  "])), !changed && css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n      ", " {\n        opacity: 0;\n        pointer-events: none;\n      }\n    "])), ChangeBar), isReviewChangeOpen && css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n      ", " {\n        opacity: 0;\n      }\n    "])), ChangeBarButton));
});
export const FieldWrapper = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  flex-grow: 1;\n  min-width: 0;\n"])));
export const ChangeBar = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  position: relative;\n  opacity: 1;\n  transition: opacity 100ms;\n  z-index: ", ";\n"])), _ref2 => {
  let {
    $zIndex
  } = _ref2;
  return $zIndex;
});
export const ChangeBarMarker = styled.div(_ref3 => {
  let {
    theme
  } = _ref3;

  /* these colours aren't freely available on the current theme */
  const notSelectedColor = theme.sanity.color.spot.yellow;
  const screenMedium = theme.sanity.media[0];
  return css(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n    position: absolute;\n    top: 0;\n    left: var(--change-bar-offset);\n    width: 2px;\n    bottom: 0;\n    background-color: ", ";\n    border-radius: 1px;\n\n    @media (min-width: ", "px) {\n      display: unset;\n    }\n  "])), notSelectedColor, screenMedium);
});
export const ChangeBarButton = styled.button(_ref4 => {
  let {
    theme,
    $withHoverEffect
  } = _ref4;

  /* these colours aren't freely available on the current theme */
  const notSelectedColor = theme.sanity.color.spot.yellow;
  return css(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n      appearance: none;\n      border: 0;\n      outline: 0;\n      display: block;\n      padding: 0;\n      background: transparent;\n      opacity: 0;\n      position: absolute;\n      height: 100%;\n      cursor: pointer;\n      pointer-events: all;\n      left: calc(-0.25rem + var(--change-bar-offset));\n      width: 1rem;\n      transition: opacity ", "ms;\n\n      &:focus {\n        border: 0;\n        outline: 0;\n      }\n\n      &:after {\n        content: '';\n        width: 16px;\n        height: calc(100% + 14px);\n        display: block;\n        position: absolute;\n        top: -7px;\n        left: -3px;\n        border-radius: 8px;\n        background: ", ";\n      }\n\n      &:focus {\n        border: 0;\n        outline: 0;\n      }\n\n      ", "\n    "])), animationSpeed, notSelectedColor, $withHoverEffect && css(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n        @media (hover: hover) {\n          &:hover {\n            opacity: 0.2;\n          }\n        }\n      "]))));
});