var _templateObject, _templateObject2, _templateObject3, _templateObject4;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import styled, { css } from 'styled-components';
import { ClampedRect } from './ClampedRect';
export const DebugRect = styled.rect(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  stroke: #ccc;\n  fill: none;\n  pointer-events: none;\n  stroke-linecap: round;\n"])));
export const ConnectorPath = styled.path(_ref => {
  let {
    theme
  } = _ref;

  /* these colours aren't freely available on the current theme */
  const strokeColor = theme.sanity.color.spot.yellow;
  return css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    fill: none;\n    pointer-events: none;\n    stroke-linecap: round;\n    stroke-linejoin: round;\n    stroke: ", ";\n  "])), strokeColor);
});
export const InteractivePath = styled.path(_ref2 => {
  let {
    theme
  } = _ref2;

  /* these colours aren't freely available on the current theme */
  const strokeColor = theme.sanity.color.spot.yellow;
  return css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n    fill: none;\n    pointer-events: stroke;\n    stroke: ", ";\n    cursor: pointer;\n    stroke-linecap: round;\n    stroke-linejoin: round;\n    opacity: 0;\n\n    &:hover {\n      opacity: 0.2;\n    }\n  "])), strokeColor);
});
export const RightBarWrapper = styled(ClampedRect)(_ref3 => {
  let {
    theme
  } = _ref3;

  /* these colours aren't freely available on the current theme */
  const strokeColor = theme.sanity.color.spot.yellow;
  return css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n    stroke: none;\n    pointer-events: none;\n    fill: ", ";\n  "])), strokeColor);
});