import React, { memo } from 'react';
import { ARROW_MARGIN_X, ARROW_MARGIN_Y, ARROW_THRESHOLD, DEBUG, INTERACTIVE_STROKE_WIDTH, STROKE_WIDTH } from '../constants';
import { arrowPath, generateConnectorPath } from './connectorPath';
import { mapConnectorToLine } from './mapConnectorToLine';
import { DebugRect, ConnectorPath, InteractivePath, RightBarWrapper } from './Connector.styled';
export const Connector = /*#__PURE__*/memo(function Connector(_ref) {
  let {
    from,
    to
  } = _ref;
  const line = mapConnectorToLine({
    from,
    to
  }); // If both ends of the connector are out of bounds, then do not render

  if (line.from.outOfBounds && line.to.outOfBounds) {
    return null;
  }

  const linePathDescription = generateConnectorPath(line);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InteractivePath, {
    d: linePathDescription,
    strokeWidth: INTERACTIVE_STROKE_WIDTH
  }), /*#__PURE__*/React.createElement(ConnectorPath, {
    d: linePathDescription,
    strokeWidth: STROKE_WIDTH
  }), /*#__PURE__*/React.createElement(RightBarWrapper, {
    top: to.rect.top,
    left: to.rect.left,
    height: to.rect.height,
    width: STROKE_WIDTH,
    bounds: to.bounds
  }), line.from.isAbove && /*#__PURE__*/React.createElement(ConnectorPath, {
    d: arrowPath(line.from.left + ARROW_MARGIN_X, line.from.bounds.top - ARROW_THRESHOLD + ARROW_MARGIN_Y, -1),
    strokeWidth: STROKE_WIDTH
  }), line.from.isBelow && /*#__PURE__*/React.createElement(ConnectorPath, {
    d: arrowPath(line.from.left + ARROW_MARGIN_X, line.from.bounds.top + line.from.bounds.height + ARROW_THRESHOLD - ARROW_MARGIN_Y, 1),
    strokeWidth: STROKE_WIDTH
  }), line.to.isAbove && /*#__PURE__*/React.createElement(ConnectorPath, {
    d: arrowPath(line.to.bounds.left + ARROW_MARGIN_X, line.to.bounds.top - ARROW_THRESHOLD + ARROW_MARGIN_Y, -1),
    strokeWidth: STROKE_WIDTH
  }), line.to.isBelow && /*#__PURE__*/React.createElement(ConnectorPath, {
    d: arrowPath(line.to.bounds.left + ARROW_MARGIN_X, line.to.bounds.top + line.to.bounds.height + ARROW_THRESHOLD - ARROW_MARGIN_Y, 1),
    strokeWidth: STROKE_WIDTH
  }), DEBUG && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DebugRect, {
    x: line.from.bounds.left,
    y: line.from.bounds.top,
    width: line.from.bounds.width,
    height: line.from.bounds.height,
    stroke: "green"
  }), /*#__PURE__*/React.createElement(DebugRect, {
    x: line.to.bounds.left,
    y: line.to.bounds.top,
    width: line.to.bounds.width,
    height: line.to.bounds.height,
    stroke: "yellow"
  }), !line.from.outOfBounds && /*#__PURE__*/React.createElement("g", {
    transform: "translate(".concat(line.from.bounds.left, " ").concat(line.from.bounds.top, ")")
  }, /*#__PURE__*/React.createElement(DebugRect, {
    width: line.from.bounds.width,
    height: line.from.bounds.height,
    strokeWidth: STROKE_WIDTH,
    stroke: "green"
  })), !line.to.outOfBounds && /*#__PURE__*/React.createElement("g", {
    transform: "translate(".concat(line.to.bounds.left, " ").concat(line.to.bounds.top, ")")
  }, /*#__PURE__*/React.createElement(DebugRect, {
    width: line.to.bounds.width,
    height: line.to.bounds.height,
    strokeWidth: STROKE_WIDTH,
    stroke: "red"
  }))));
});