function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import createImageUrlBuilder from '@sanity/image-url';
import React, { forwardRef, useMemo } from 'react';
import { useClient } from '../../hooks';
export const Image = /*#__PURE__*/forwardRef(function Image(props, ref) {
  const {
    dpr,
    fit,
    height,
    source,
    width,
    ...restProps
  } = props;
  const client = useClient();
  const imageUrlBuilder = useMemo(() => createImageUrlBuilder(client), [client]);
  const image = useMemo(() => imageUrlBuilder.image(source), [imageUrlBuilder, source]);
  const url = useMemo(() => {
    let b = image;
    if (dpr) b = b.dpr(dpr);
    if (fit) b = b.fit(fit);
    if (width) b = b.width(width);
    if (height) b = b.height(height);
    return b.url();
  }, [dpr, fit, height, image, width]);
  return /*#__PURE__*/React.createElement("img", _extends({}, restProps, {
    ref: ref,
    src: url
  }));
});