var _templateObject;

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import styled, { css } from 'styled-components';
import { Text } from '@sanity/ui';
import React from 'react';
export const TextWithToneStyle = styled(Text)(_ref => {
  let {
    $tone,
    theme
  } = _ref;
  const tone = theme.sanity.color.muted[$tone];
  return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      &:not([data-muted]) {\n        --card-fg-color: ", ";\n      }\n\n      &[data-dimmed] {\n        opacity: 0.3;\n      }\n    "])), tone ? tone.enabled.fg : undefined);
});
export const TextWithTone = /*#__PURE__*/React.forwardRef(function TextWithTone(props, ref) {
  const {
    tone,
    dimmed,
    muted,
    ...rest
  } = props;
  return /*#__PURE__*/React.createElement(TextWithToneStyle, _extends({
    "data-ui": "TextWithTone",
    "data-dimmed": dimmed ? '' : undefined,
    "data-muted": muted ? '' : undefined,
    $tone: tone,
    muted: muted,
    ref: ref
  }, rest));
});