var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React, { useCallback } from 'react';
import { WarningOutlineIcon, ErrorOutlineIcon, InfoOutlineIcon } from '@sanity/icons';
import { Box, Text, MenuItem, Stack, Flex } from '@sanity/ui';
import styled from 'styled-components';
const StyledText = styled(Text)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  white-space: initial;\n"])));
const MENU_ITEM_TONES = {
  error: 'critical',
  warning: 'caution',
  info: 'primary'
};
export function ListItem(props) {
  const {
    marker,
    onClick,
    path,
    truncate
  } = props;
  const handleClick = useCallback(() => {
    if (onClick) {
      onClick(marker.path);
    }
  }, [marker.path, onClick]);
  const menuItemTone = MENU_ITEM_TONES[marker === null || marker === void 0 ? void 0 : marker.level] || undefined;
  const children = /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
    size: 1
  }, marker.level === 'error' && /*#__PURE__*/React.createElement(ErrorOutlineIcon, null), marker.level === 'warning' && /*#__PURE__*/React.createElement(WarningOutlineIcon, null), marker.level === 'info' && /*#__PURE__*/React.createElement(InfoOutlineIcon, null))), /*#__PURE__*/React.createElement(Stack, {
    space: 2,
    flex: 1,
    paddingLeft: 3
  }, path && /*#__PURE__*/React.createElement(StyledText, {
    size: 1,
    weight: "semibold"
  }, path), marker.item.message && /*#__PURE__*/React.createElement(StyledText, {
    muted: true,
    size: 1,
    textOverflow: truncate ? 'ellipsis' : undefined
  }, marker.item.message)));
  return /*#__PURE__*/React.createElement(MenuItem, {
    padding: 1,
    onClick: handleClick,
    radius: 2,
    tone: menuItemTone
  }, /*#__PURE__*/React.createElement(Box, {
    padding: 2
  }, children));
}