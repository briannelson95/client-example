var _templateObject, _templateObject2, _templateObject3, _templateObject4;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React from 'react';
import { Box, Flex, rem, Stack, Text, TextSkeleton } from '@sanity/ui';
import styled from 'styled-components';
import { getDevicePixelRatio } from 'use-device-pixel-ratio';
import { Media } from '../_common/Media';
import { PREVIEW_MEDIA_SIZE } from '../constants';
const DEFAULT_MEDIA_DIMENSION = { ...PREVIEW_MEDIA_SIZE.default,
  aspect: 1,
  fit: 'crop',
  dpr: getDevicePixelRatio()
};
const Root = styled(Box)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  height: 100%;\n\n  a {\n    color: currentColor;\n    text-decoration: none;\n  }\n\n  svg[data-sanity-icon] {\n    margin: 0;\n  }\n"])));
const HeaderFlex = styled(Flex).attrs({
  align: 'center'
})(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  height: ", ";\n"])), rem(PREVIEW_MEDIA_SIZE.default.height));
const TitleSkeleton = styled(TextSkeleton).attrs({
  animated: true,
  radius: 1
})(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  max-width: ", ";\n  width: 80%;\n"])), rem(160));
const SubtitleSkeleton = styled(TextSkeleton).attrs({
  animated: true,
  radius: 1,
  size: 1
})(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  max-width: ", ";\n  width: 60%;\n"])), rem(120));
export function TemplatePreview(props) {
  const {
    description,
    isPlaceholder,
    media,
    mediaDimensions = DEFAULT_MEDIA_DIMENSION,
    subtitle,
    title = 'Untitled'
  } = props;

  if (isPlaceholder) {
    return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement(HeaderFlex, null, /*#__PURE__*/React.createElement(Stack, {
      flex: 1,
      space: 2
    }, /*#__PURE__*/React.createElement(TitleSkeleton, null), /*#__PURE__*/React.createElement(SubtitleSkeleton, null))));
  }

  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement(HeaderFlex, null, /*#__PURE__*/React.createElement(Stack, {
    flex: 1,
    space: 2
  }, /*#__PURE__*/React.createElement(Text, {
    textOverflow: "ellipsis"
  }, typeof title !== 'function' && title, typeof title === 'function' && title({
    layout: 'default'
  })), subtitle && /*#__PURE__*/React.createElement(Text, {
    muted: true,
    size: 1,
    textOverflow: "ellipsis"
  }, typeof subtitle === 'function' && subtitle({
    layout: 'default'
  }) || subtitle)), media && /*#__PURE__*/React.createElement(Flex, {
    align: "flex-start",
    paddingLeft: 2
  }, /*#__PURE__*/React.createElement(Media, {
    dimensions: mediaDimensions,
    layout: "default",
    media: media
  }))), description && /*#__PURE__*/React.createElement(Box, {
    marginTop: 3
  }, /*#__PURE__*/React.createElement(Text, {
    muted: true,
    size: 1,
    style: {
      whiteSpace: 'break-spaces'
    }
  }, description)));
}