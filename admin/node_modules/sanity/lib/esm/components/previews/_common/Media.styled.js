var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { rem } from '@sanity/ui';
import styled, { css } from 'styled-components';
import { PREVIEW_ICON_SIZE } from '../constants';
export const MediaWrapper = styled.span(props => {
  const {
    $dimensions,
    $layout,
    $radius,
    $responsive
  } = props;
  const width = $dimensions.width || 0;
  const height = $dimensions.width || 0;
  const iconSize = PREVIEW_ICON_SIZE[$layout];
  return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    position: relative;\n    width: ", ";\n    height: ", ";\n    min-width: ", ";\n    border-radius: ", ";\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    & img {\n      position: absolute;\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n      object-fit: contain;\n      border-radius: inherit;\n    }\n\n    & svg {\n      display: block;\n      font-size: calc(21 / 16 * 1em);\n    }\n\n    & [data-sanity-icon] {\n      display: block;\n      font-size: calc(", " / 16 * 1em);\n    }\n\n    /*\n      NOTE on why we can\u2019t use the \":after\" pseudo-element:\n      The thing is we only want the shadow when then <MediaWrapper> contains\n      something else than <svg> \u2013 icons should not have the shadow.\n      This is why we use the \"*:not(svg) + span\" selector to target only that\n      situation to render the shadow.\n    */\n    & *:not(svg) + span {\n      display: block;\n      position: absolute;\n      left: 0;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      box-shadow: inset 0 0 0 1px var(--card-fg-color);\n      opacity: 0.2;\n      border-radius: inherit;\n    }\n  "])), $responsive ? '100%' : rem(width), $responsive ? '100%' : rem(height), $responsive ? undefined : rem(width), _ref => {
    let {
      theme
    } = _ref;
    return rem(theme.sanity.radius[$radius]);
  }, iconSize);
});
MediaWrapper.displayName = 'MediaWrapper';