var _templateObject, _templateObject2, _templateObject3;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React from 'react';
import { Box, Flex, Stack, Text, Skeleton, TextSkeleton, rem } from '@sanity/ui';
import classNames from 'classnames';
import styled from 'styled-components';
import { getDevicePixelRatio } from 'use-device-pixel-ratio';
import { Media } from '../_common/Media';
import { PREVIEW_MEDIA_SIZE } from '../constants';
import { renderPreviewNode } from '../helpers';
const DEFAULT_MEDIA_DIMENSIONS = { ...PREVIEW_MEDIA_SIZE.default,
  aspect: 1,
  fit: 'crop',
  dpr: getDevicePixelRatio()
};
const Root = styled(Flex)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  height: ", ";\n"])), rem(PREVIEW_MEDIA_SIZE.default.height));
const TitleSkeleton = styled(TextSkeleton).attrs({
  animated: true,
  radius: 1
})(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  max-width: ", ";\n  width: 80%;\n"])), rem(160));
const SubtitleSkeleton = styled(TextSkeleton).attrs({
  animated: true,
  radius: 1,
  size: 1
})(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  max-width: ", ";\n  width: 60%;\n"])), rem(120));
export function DefaultPreview(props) {
  const {
    title,
    subtitle,
    media,
    status,
    isPlaceholder,
    children,
    styles
  } = props;
  const rootClassName = classNames(styles === null || styles === void 0 ? void 0 : styles.root, Boolean(subtitle) && (styles === null || styles === void 0 ? void 0 : styles.hasSubtitle));
  const statusNode = status && /*#__PURE__*/React.createElement(Box, {
    className: styles === null || styles === void 0 ? void 0 : styles.status,
    "data-testid": "default-preview__status",
    paddingLeft: 3,
    paddingRight: 1
  }, renderPreviewNode(status, 'default'));

  if (isPlaceholder) {
    return /*#__PURE__*/React.createElement(Root, {
      align: "center",
      className: styles === null || styles === void 0 ? void 0 : styles.placeholder,
      "data-testid": "default-preview"
    }, media !== false && /*#__PURE__*/React.createElement(Skeleton, {
      animated: true,
      marginRight: 2,
      radius: 2,
      style: PREVIEW_MEDIA_SIZE.default
    }), /*#__PURE__*/React.createElement(Stack, {
      "data-testid": "default-preview__heading",
      flex: 1,
      paddingLeft: media === false ? 1 : 2,
      paddingRight: status ? 0 : 1,
      space: 2
    }, /*#__PURE__*/React.createElement(TitleSkeleton, null), /*#__PURE__*/React.createElement(SubtitleSkeleton, null)), statusNode);
  }

  return /*#__PURE__*/React.createElement(Root, {
    align: "center",
    className: rootClassName,
    "data-testid": "default-preview"
  }, media !== false && media !== undefined && /*#__PURE__*/React.createElement(Media, {
    dimensions: DEFAULT_MEDIA_DIMENSIONS,
    layout: "default",
    media: media,
    styles: styles
  }), /*#__PURE__*/React.createElement(Stack, {
    className: styles === null || styles === void 0 ? void 0 : styles.heading,
    "data-testid": "default-preview__header",
    flex: 1,
    paddingLeft: media ? 2 : 1,
    paddingRight: status ? 0 : 1,
    space: 2
  }, /*#__PURE__*/React.createElement(Text, {
    className: styles === null || styles === void 0 ? void 0 : styles.title,
    style: {
      color: 'inherit'
    },
    textOverflow: "ellipsis"
  }, title && renderPreviewNode(title, 'default'), !title && /*#__PURE__*/React.createElement("span", {
    style: {
      color: 'var(--card-muted-fg-color)'
    }
  }, "Untitled")), subtitle && /*#__PURE__*/React.createElement(Text, {
    muted: true,
    size: 1,
    textOverflow: "ellipsis",
    className: styles === null || styles === void 0 ? void 0 : styles.subtitle
  }, renderPreviewNode(subtitle, 'default')), children && /*#__PURE__*/React.createElement("div", {
    className: styles === null || styles === void 0 ? void 0 : styles.children
  }, children)), statusNode);
}