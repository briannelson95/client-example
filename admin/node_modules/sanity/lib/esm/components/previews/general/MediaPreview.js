import React, { useMemo } from 'react';
import { getDevicePixelRatio } from 'use-device-pixel-ratio';
import { Text, Tooltip } from '@sanity/ui';
import { CircularProgress } from '../../progress';
import { Media } from '../_common/Media';
import { PREVIEW_MEDIA_SIZE } from '../constants';
import { renderPreviewNode } from '../helpers';
import { MediaSkeleton, MediaFlex, ProgressFlex, RootBox, TooltipContentStack } from './MediaPreview.styled';
const DEFAULT_MEDIA_DIMENSIONS = { ...PREVIEW_MEDIA_SIZE.media,
  aspect: 1,
  fit: 'crop',
  dpr: getDevicePixelRatio()
};
export function MediaPreview(props) {
  const {
    media,
    mediaDimensions = DEFAULT_MEDIA_DIMENSIONS,
    children,
    isPlaceholder,
    progress = -1,
    subtitle,
    title,
    withBorder = true,
    withRadius = true
  } = props;
  const aspect = mediaDimensions.aspect || 1;
  const STYLES_PADDER = useMemo(() => ({
    paddingBottom: "".concat(100 / aspect, "%")
  }), [aspect]);
  const tooltipContent = useMemo(() => {
    if (!title || !subtitle) {
      return null;
    }

    return /*#__PURE__*/React.createElement(TooltipContentStack, null, title && /*#__PURE__*/React.createElement(Text, {
      align: "center",
      size: 1,
      weight: "semibold"
    }, renderPreviewNode(title, 'media')), subtitle && /*#__PURE__*/React.createElement(Text, {
      align: "center",
      muted: true,
      size: 1
    }, renderPreviewNode(subtitle, 'media')));
  }, [subtitle, title]);
  return /*#__PURE__*/React.createElement(RootBox, {
    "data-testid": "media-preview",
    overflow: "hidden",
    flex: 1
  }, /*#__PURE__*/React.createElement("div", {
    style: STYLES_PADDER
  }), /*#__PURE__*/React.createElement(Tooltip, {
    content: tooltipContent,
    disabled: !tooltipContent,
    placement: "top",
    portal: true
  }, /*#__PURE__*/React.createElement(MediaFlex, null, isPlaceholder ? /*#__PURE__*/React.createElement(MediaSkeleton, null) : /*#__PURE__*/React.createElement(Media, {
    border: withBorder,
    dimensions: mediaDimensions,
    layout: "media",
    media: media,
    radius: withRadius ? 1 : 0,
    responsive: true
  }), typeof progress === 'number' && progress > -1 && /*#__PURE__*/React.createElement(ProgressFlex, null, /*#__PURE__*/React.createElement(CircularProgress, {
    value: progress
  })))), children);
}