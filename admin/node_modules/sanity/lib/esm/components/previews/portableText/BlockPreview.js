var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { Box, Flex, rem, Stack, Text } from '@sanity/ui';
import React from 'react';
import styled from 'styled-components';
import { getDevicePixelRatio } from 'use-device-pixel-ratio';
import { Media } from '../_common/Media';
import { PREVIEW_MEDIA_SIZE } from '../constants';
import { renderPreviewNode } from '../helpers';
const DEFAULT_MEDIA_DIMENSIONS = { ...PREVIEW_MEDIA_SIZE.block,
  aspect: 1,
  fit: 'crop',
  dpr: getDevicePixelRatio()
};
const HeaderFlex = styled(Flex).attrs({
  align: 'center'
})(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  min-height: ", ";\n"])), rem(PREVIEW_MEDIA_SIZE.block.height));
export function BlockPreview(props) {
  const {
    actions,
    title,
    subtitle,
    description,
    mediaDimensions = DEFAULT_MEDIA_DIMENSIONS,
    media,
    status,
    children
  } = props;
  return /*#__PURE__*/React.createElement(Stack, {
    "data-testid": "block-preview",
    space: 1
  }, /*#__PURE__*/React.createElement(HeaderFlex, {
    "data-testid": "block-preview__header"
  }, media && /*#__PURE__*/React.createElement(Media, {
    dimensions: mediaDimensions,
    layout: "block",
    media: media
  }), /*#__PURE__*/React.createElement(Box, {
    flex: 1,
    paddingLeft: media ? 2 : 1
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1,
    textOverflow: "ellipsis",
    weight: "semibold"
  }, title && renderPreviewNode(title, 'block'), !title && /*#__PURE__*/React.createElement(React.Fragment, null, "Untitled")), subtitle && /*#__PURE__*/React.createElement(Box, {
    marginTop: 2
  }, /*#__PURE__*/React.createElement(Text, {
    muted: true,
    size: 1,
    textOverflow: "ellipsis"
  }, renderPreviewNode(subtitle, 'block'))), description && /*#__PURE__*/React.createElement(Box, {
    marginTop: 3
  }, /*#__PURE__*/React.createElement(Text, {
    muted: true,
    size: 1,
    textOverflow: "ellipsis"
  }, renderPreviewNode(description, 'block')))), /*#__PURE__*/React.createElement(Flex, {
    gap: 1,
    paddingLeft: 1
  }, status && /*#__PURE__*/React.createElement(Box, {
    paddingX: 2,
    paddingY: 3
  }, renderPreviewNode(status, 'block')), actions)), children && /*#__PURE__*/React.createElement("div", {
    "data-testid": "block-preview__children"
  }, children));
}