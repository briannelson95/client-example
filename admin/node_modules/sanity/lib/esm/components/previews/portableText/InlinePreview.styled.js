var _templateObject, _templateObject2, _templateObject3;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { rem, Text } from '@sanity/ui';
import styled, { css } from 'styled-components';
export const RootSpan = styled.span(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: inline-flex;\n  align-items: center;\n  vertical-align: top;\n  height: calc(1em - 1px);\n  max-width: 100%;\n"])));
export const MediaSpan = styled.span(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: relative;\n  display: inline-block;\n  width: calc(1em - 1px);\n  height: calc(1em - 1px);\n  min-width: calc(1em - 1px);\n\n  & img {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    border-radius: ", ";\n  }\n\n  & img + span {\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    box-shadow: inset 0 0 0 1px var(--card-fg-color);\n    opacity: 0.2;\n    border-radius: ", ";\n  }\n\n  & svg {\n    display: block;\n    font-size: calc(14 / 16 * 1em);\n    margin: 1px 0;\n\n    &[data-sanity-icon] {\n      font-size: calc(18 / 16 * 1em);\n      margin: calc(1px + (2 / 18 * -1em)) 0;\n    }\n  }\n"])), _ref => {
  let {
    theme
  } = _ref;
  return rem(theme.sanity.radius[1]);
}, _ref2 => {
  let {
    theme
  } = _ref2;
  return rem(theme.sanity.radius[1]);
});
export const TextSpan = styled(Text).attrs({
  forwardedAs: 'span'
})(_ref3 => {
  let {
    theme
  } = _ref3;
  const textFont = theme.sanity.fonts.text;
  const textSize = textFont.sizes[1];
  return css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n    font-size: calc(", " / 16 * 1em);\n    font-weight: ", ";\n    box-sizing: border-box;\n    display: inline-block;\n    vertical-align: top;\n    line-height: ", ";\n    padding-left: 0.5em;\n    padding-right: calc(0.5em - 2px);\n    min-width: 0;\n\n    & > span {\n      display: block;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  "])), textSize.fontSize, textFont.weights.medium, textSize.lineHeight / textSize.fontSize);
});