import { Box, Flex, Stack, Text } from '@sanity/ui';
import React from 'react';
import { getDevicePixelRatio } from 'use-device-pixel-ratio';
import { Media } from '../_common/Media';
import { PREVIEW_MEDIA_SIZE } from '../constants';
import { renderPreviewNode } from '../helpers';
import { HeaderFlex, MediaCard, RootBox } from './BlockImagePreview.styled';
const DEFAULT_MEDIA_DIMENSIONS = { ...PREVIEW_MEDIA_SIZE.blockImage,
  fit: 'fillmax',
  dpr: getDevicePixelRatio()
};

const getRatio = dimensions => {
  const {
    height,
    width
  } = dimensions;

  if (!height || !width) {
    return 1;
  }

  return height / width * 100;
};

export function BlockImagePreview(props) {
  const {
    actions,
    title,
    subtitle,
    description,
    fallbackTitle = 'Untitled',
    mediaDimensions = DEFAULT_MEDIA_DIMENSIONS,
    media,
    children,
    status
  } = props;
  return /*#__PURE__*/React.createElement(RootBox, null, /*#__PURE__*/React.createElement(Stack, null, /*#__PURE__*/React.createElement(HeaderFlex, {
    paddingLeft: 2,
    paddingRight: 1,
    paddingY: 1
  }, /*#__PURE__*/React.createElement(Stack, {
    flex: 1,
    space: 2
  }, /*#__PURE__*/React.createElement(Text, {
    size: 1,
    textOverflow: "ellipsis",
    weight: "semibold"
  }, title || fallbackTitle), subtitle && /*#__PURE__*/React.createElement(Text, {
    muted: true,
    size: 1,
    textOverflow: "ellipsis"
  }, renderPreviewNode(subtitle, 'block'))), /*#__PURE__*/React.createElement(Flex, {
    gap: 1,
    paddingLeft: 1
  }, status && /*#__PURE__*/React.createElement(Box, {
    paddingX: 2,
    paddingY: 3
  }, renderPreviewNode(status, 'block')), actions)), /*#__PURE__*/React.createElement(MediaCard, {
    $ratio: getRatio(mediaDimensions),
    __unstable_checkered: true,
    display: "flex",
    sizing: "border",
    tone: "inherit"
  }, /*#__PURE__*/React.createElement(Media, {
    border: false,
    dimensions: mediaDimensions,
    layout: "blockImage",
    media: media,
    radius: 0,
    responsive: true
  }))), description && /*#__PURE__*/React.createElement(Box, {
    paddingX: 2,
    paddingY: 3
  }, /*#__PURE__*/React.createElement(Text, {
    muted: true,
    size: 1
  }, renderPreviewNode(description, 'block'))), children && /*#__PURE__*/React.createElement("div", null, children));
}