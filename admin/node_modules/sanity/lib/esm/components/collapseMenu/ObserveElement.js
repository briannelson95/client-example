function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { Flex } from '@sanity/ui';
import React, { useEffect, useState } from 'react';
export function ObserveElement(props) {
  const {
    callback,
    children,
    options,
    ...rest
  } = props;
  const [el, setEl] = useState(null);
  useEffect(() => {
    if (!el) return undefined;
    const io = new IntersectionObserver(callback, options);
    io.observe(el);
    return () => {
      io.unobserve(el);
      io.disconnect();
    };
  }, [el, callback, options]);
  return /*#__PURE__*/React.createElement(Flex, _extends({
    ref: setEl
  }, rest), children);
}