var _templateObject;

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { Card } from '@sanity/ui';
import React, { createContext, forwardRef, useContext } from 'react';
import styled, { css } from 'styled-components';
export const StyledCard = styled(Card)(() => {
  return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    /* TextWithTone uses its own logic to set color, and we therefore need */\n    /* to override this logic in order to set the correct color in different states */\n    &[data-selected],\n    &[data-pressed],\n    &:active {\n      [data-ui='TextWithTone'] {\n        color: inherit;\n      }\n    }\n  "])));
});
const PreviewCardContext = /*#__PURE__*/createContext({
  selected: false
});
export function usePreviewCard() {
  const context = useContext(PreviewCardContext);

  if (!context) {
    throw new Error('PreviewCard: missing context value');
  }

  return context;
}
export const PreviewCard = /*#__PURE__*/forwardRef(function PreviewCard(props, ref) {
  const {
    children,
    selected,
    as,
    ...rest
  } = props;
  return /*#__PURE__*/React.createElement(StyledCard, _extends({
    "data-ui": "PreviewCard"
  }, rest, {
    forwardedAs: as,
    selected: selected,
    ref: ref
  }), /*#__PURE__*/React.createElement(PreviewCardContext.Provider, {
    value: {
      selected
    }
  }, children));
});