import _uniqBy from "lodash/uniqBy";
import _sortBy from "lodash/sortBy";
import React, { memo, useContext } from 'react';
import { AvatarCounter } from '@sanity/ui';
import { useId } from '@reach/auto-id';
import { UserAvatar } from '../components/UserAvatar';
import { AVATAR_DISTANCE, AVATAR_SIZE, DEFAULT_MAX_AVATARS_FIELDS, DISABLE_OVERLAY } from './constants';
import { splitRight } from './utils';
import { FlexWrapper, InnerBox } from './FieldPresence.styled';
import { FormFieldPresenceContext } from './context';
import { PresenceTooltip } from './PresenceTooltip';
import { useReporter } from './overlay/tracker';
export const FieldPresence = DISABLE_OVERLAY ? FieldPresenceWithoutOverlay : FieldPresenceWithOverlay;
export function FieldPresenceWithOverlay(props) {
  const contextPresence = useContext(FormFieldPresenceContext);
  const {
    presence = contextPresence,
    maxAvatars = DEFAULT_MAX_AVATARS_FIELDS
  } = props;
  const ref = React.useRef(null);
  useReporter(useId() || '', () => ({
    presence,
    element: ref.current,
    maxAvatars: maxAvatars
  }));
  const minWidth = -AVATAR_DISTANCE + (AVATAR_SIZE + AVATAR_DISTANCE) * props.maxAvatars;
  return /*#__PURE__*/React.createElement(FlexWrapper, {
    justify: "flex-end",
    ref: ref,
    style: {
      minWidth: minWidth,
      minHeight: AVATAR_SIZE
    }
  });
}
export function FieldPresenceWithoutOverlay(props) {
  const contextPresence = useContext(FormFieldPresenceContext);
  const {
    presence = contextPresence,
    maxAvatars = DEFAULT_MAX_AVATARS_FIELDS
  } = props;

  if (!presence.length) {
    return null;
  }

  return /*#__PURE__*/React.createElement(FieldPresenceInner, {
    presence: presence,
    maxAvatars: maxAvatars
  });
}

function calcAvatarStackWidth(len) {
  return -AVATAR_DISTANCE + (AVATAR_SIZE + AVATAR_DISTANCE) * len;
}

export const FieldPresenceInner = /*#__PURE__*/memo(function FieldPresenceInner(_ref) {
  let {
    presence,
    position = 'inside',
    animateArrowFrom = 'inside',
    maxAvatars = DEFAULT_MAX_AVATARS_FIELDS,
    stack = true
  } = _ref;

  const uniquePresence = _uniqBy(presence || [], item => item.user.id);

  const sorted = _sortBy(uniquePresence, _presence => _presence.lastActiveAt);

  const [hidden, visible] = stack ? splitRight(sorted, maxAvatars) : [[], sorted];
  const avatars = [...visible.reverse().map(_visible => ({
    key: _visible.user.id,
    element: /*#__PURE__*/React.createElement(UserAvatar, {
      animateArrowFrom: animateArrowFrom,
      position: position,
      status: "online",
      user: _visible.user
    })
  })), hidden.length >= 2 ? {
    key: 'counter',
    element: /*#__PURE__*/React.createElement(AvatarCounter, {
      count: hidden.length
    })
  } : null].filter(Boolean);
  const maxWidth = calcAvatarStackWidth(maxAvatars);
  const currWidth = Math.min(calcAvatarStackWidth(uniquePresence.length), maxWidth);
  return /*#__PURE__*/React.createElement(FlexWrapper, {
    justify: "flex-end",
    style: {
      width: maxWidth
    }
  }, /*#__PURE__*/React.createElement("div", null), /*#__PURE__*/React.createElement(PresenceTooltip, {
    items: uniquePresence
  }, /*#__PURE__*/React.createElement(InnerBox, {
    direction: "row-reverse",
    style: {
      width: currWidth
    }
  }, avatars.map((av, i) => av && /*#__PURE__*/React.createElement("div", {
    key: av.key,
    style: {
      position: 'absolute',
      transform: "translate3d(".concat(-i * (AVATAR_SIZE + AVATAR_DISTANCE), "px, 0px, 0px)"),
      transitionProperty: 'transform',
      transitionDuration: '200ms',
      transitionTimingFunction: 'cubic-bezier(0.85, 0, 0.15, 1)',
      zIndex: 100 - i
    }
  }, av.element)))));
});