var _templateObject, _templateObject2;

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { AvatarStack, Box, Card, Text, Tooltip } from '@sanity/ui';
import React, { useMemo } from 'react';
import styled, { css, useTheme } from 'styled-components';
import { usePreviewCard } from '../components/PreviewCard';
import { UserAvatar } from '../components/UserAvatar';
import { isNonNullable } from '../util/isNonNullable';
const PRESENCE_MENU_POPOVER_PROPS = {
  portal: true
};
const AvatarStackCard = styled(Card)(_ref => {
  var _color$selectable;

  let {
    theme,
    $selected
  } = _ref;
  const {
    color
  } = theme.sanity;
  return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    --card-bg-color: inherit;\n    --card-fg-color: inherit;\n    --card-hairline-hard-color: ", ";\n  "])), $selected ? (_color$selectable = color.selectable) === null || _color$selectable === void 0 ? void 0 : _color$selectable.default.pressed.border : undefined);
});
const TooltipContentBox = styled(Box)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  max-width: 150px;\n"])));

const getTooltipText = presence => {
  if (presence.length === 1) {
    return "".concat(presence[0].user.displayName, " is editing this document");
  }

  if (presence.length > 1) {
    return "".concat(presence.length, " people are editing this document right now");
  }

  return undefined;
};

export function DocumentPreviewPresence(props) {
  const {
    presence
  } = props;
  const {
    color
  } = useTheme().sanity;
  const invertedScheme = color.dark ? 'light' : 'dark';
  const {
    selected
  } = usePreviewCard();
  const uniqueUsers = useMemo(() => Array.from(new Set(presence.map(a => a.user.id))).map(id => {
    return presence.find(a => a.user.id === id);
  }).filter(isNonNullable), [presence]);
  const tooltipContent = useMemo(() => {
    return /*#__PURE__*/React.createElement(TooltipContentBox, {
      padding: 2
    }, /*#__PURE__*/React.createElement(Text, {
      align: "center",
      size: 1
    }, getTooltipText(uniqueUsers)));
  }, [uniqueUsers]);
  return /*#__PURE__*/React.createElement(Tooltip, _extends({
    content: tooltipContent
  }, PRESENCE_MENU_POPOVER_PROPS), /*#__PURE__*/React.createElement(AvatarStackCard, {
    scheme: selected ? invertedScheme : undefined,
    $selected: selected
  }, /*#__PURE__*/React.createElement(AvatarStack, {
    maxLength: 2
  }, uniqueUsers.map(item => /*#__PURE__*/React.createElement(UserAvatar, {
    key: item.user.id,
    user: item.user
  })))));
}