function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { tap } from 'rxjs/operators';
export const WithIntersection = props => {
  const {
    onIntersection,
    io,
    id,
    ...rest
  } = props;
  const element = React.useRef(null);
  React.useEffect(() => {
    const el = element.current;
    if (!el) return undefined;
    const subscription = io.observe(el).pipe(tap(entry => onIntersection(id, entry))).subscribe();
    return () => subscription.unsubscribe();
  }, [io, id, onIntersection]);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: element
  }, rest));
};