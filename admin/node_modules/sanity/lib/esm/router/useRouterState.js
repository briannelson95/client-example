import _identity from "lodash/identity";
import { useEffect, useState } from 'react';
import { useRouter } from './useRouter';
/**
 * @public
 */

/**
 * @public
 */
export function useRouterState() {
  let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _identity;
  const {
    state
  } = useRouter();
  const [selectedState, setState] = useState(() => selector(state)); // reset the state when the `selector` prop changes

  useEffect(() => setState(selector(state)), [selector, state]); // TODO
  // update the state via a subscription
  // useEffect(() => {
  //   // prevents "Can't perform a React state update on an unmounted component."
  //   const mounted = {current: true}
  //   const unsubscribe = channel.subscribe(() => {
  //     if (mounted.current) {
  //       setState(selector(state))
  //     }
  //   })
  //   return () => {
  //     mounted.current = false
  //     unsubscribe()
  //   }
  // }, [channel, selector, getState])

  return selectedState;
}