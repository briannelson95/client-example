function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef } from 'react';
import { useStateLink } from './useStateLink';
/**
 * @public
 */

/**
 * @public
 */
export const StateLink = /*#__PURE__*/forwardRef(function StateLink(props, ref) {
  const {
    onClick,
    replace,
    state,
    target,
    toIndex = false,
    ...restProps
  } = props;
  const {
    handleClick,
    href
  } = useStateLink({
    onClick,
    replace,
    state,
    target,
    toIndex
  });
  return /*#__PURE__*/React.createElement("a", _extends({}, restProps, {
    href: href,
    onClick: handleClick,
    ref: ref
  }));
});