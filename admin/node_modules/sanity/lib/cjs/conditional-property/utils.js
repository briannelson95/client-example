"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isThenable = isThenable;
exports.omitDeprecatedRole = omitDeprecatedRole;
exports.useCheckCondition = useCheckCondition;

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _react = require("react");

var _isRecord = require("../util/isRecord");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isThenable(value) {
  return (0, _isRecord.isRecord)(value) && typeof (value === null || value === void 0 ? void 0 : value.then) === 'function';
}

function omitDeprecatedRole(user) {
  return (0, _omit2.default)(user, 'role');
}

function useCheckCondition(checkProperty, checkPropertyName, context) {
  const {
    currentUser,
    document,
    parent,
    value
  } = context;
  const didWarn = (0, _react.useRef)(false);
  return (0, _react.useMemo)(() => {
    let isTrueIsh = false;

    if (typeof checkProperty === 'boolean' || checkProperty === undefined) {
      return checkProperty || false;
    }

    try {
      isTrueIsh = checkProperty({
        document,
        parent,
        value,
        currentUser
      });
    } catch (err) {
      console.error("An error occurred while running the callback from `".concat(checkPropertyName, "`: ").concat(err.message));
      return false;
    }

    if (isThenable(isTrueIsh) && !didWarn.current) {
      console.warn("The `".concat(checkPropertyName, "` option is either a promise or a promise returning function. Async callbacks for `").concat(checkPropertyName, "` option is not currently supported."));
      return false;
    }

    if (typeof isTrueIsh === 'undefined') {
      console.warn("The `".concat(checkPropertyName, "` option is or returned `undefined`. `").concat(checkPropertyName, "` should return a boolean."));
    }

    return isTrueIsh;
  }, [checkProperty, document, parent, value, currentUser, checkPropertyName]);
}