"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StudioImageInput = StudioImageInput;

var _react = _interopRequireWildcard(require("react"));

var _imageUrl = _interopRequireDefault(require("@sanity/image-url"));

var _ImageInput = require("../../inputs/files/ImageInput");

var _useFormBuilder = require("../../useFormBuilder");

var _datastores = require("../../../datastores");

var _hooks = require("../../../hooks");

var _resolveUploader = require("../uploads/resolveUploader");

var _assets = require("./client-adapters/assets");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function StudioImageInput(props) {
  var _props$schemaType$opt;

  const sourcesFromSchema = (_props$schemaType$opt = props.schemaType.options) === null || _props$schemaType$opt === void 0 ? void 0 : _props$schemaType$opt.sources;

  const {
    image
  } = (0, _useFormBuilder.useFormBuilder)().__internal;

  const documentPreviewStore = (0, _datastores.useDocumentPreviewStore)();
  const client = (0, _hooks.useClient)();
  const versionedClient = (0, _react.useMemo)(() => client.withConfig({
    apiVersion: '1'
  }), [client]);
  const formBuilder = (0, _useFormBuilder.useFormBuilder)();
  const supportsImageUploads = formBuilder.__internal.image.directUploads;
  const resolveUploader = (0, _react.useCallback)((type, file) => {
    if (!supportsImageUploads) {
      return null;
    }

    return (0, _resolveUploader.resolveUploader)(type, file);
  }, [supportsImageUploads]); // note: type.options.sources may be an empty array and in that case we're
  // disabling selecting images from asset source  (it's a feature, not a bug)

  const assetSources = _react.default.useMemo(() => sourcesFromSchema || image.assetSources, [image, sourcesFromSchema]);

  const builder = _react.default.useMemo(() => (0, _imageUrl.default)(versionedClient), [versionedClient]);

  const observeAsset = (0, _react.useCallback)(id => (0, _assets.observeImageAsset)(documentPreviewStore, id), [documentPreviewStore]);
  return /*#__PURE__*/_react.default.createElement(_ImageInput.ImageInput, _extends({}, props, {
    client: client,
    assetSources: assetSources,
    directUploads: image.directUploads,
    imageUrlBuilder: builder,
    observeAsset: observeAsset,
    resolveUploader: resolveUploader
  }));
}