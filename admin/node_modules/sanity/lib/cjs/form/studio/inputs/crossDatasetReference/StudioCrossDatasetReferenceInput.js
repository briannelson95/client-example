"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StudioCrossDatasetReferenceInput = StudioCrossDatasetReferenceInput;

var _react = _interopRequireWildcard(require("react"));

var _paths = require("@sanity/util/paths");

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _ui = require("@sanity/ui");

var _CrossDatasetReferenceInput = require("../../../inputs/CrossDatasetReferenceInput");

var _Alert = require("../../../components/Alert");

var _datastores = require("../../../../datastores");

var _hooks = require("../../../../hooks");

var _useFormValue = require("../../../useFormValue");

var _search = require("./datastores/search");

var _getReferenceInfo = require("./datastores/getReferenceInfo");

var _useCrossProjectToken = require("./datastores/useCrossProjectToken");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

// eslint-disable-next-line require-await
async function resolveUserDefinedFilter(options, document, valuePath) {
  if (!options) {
    return {};
  }

  if (typeof options.filter === 'function') {
    const parentPath = valuePath.slice(0, -1);
    const parent = (0, _paths.get)(document, parentPath);
    return options.filter({
      document,
      parentPath,
      parent
    });
  }

  return {
    filter: options.filter,
    params: 'filterParams' in options ? options.filterParams : undefined
  };
}

function useValueRef(value) {
  const ref = (0, _react.useRef)(value);
  ref.current = value;
  return ref;
}

function StudioCrossDatasetReferenceInput(props) {
  const {
    path,
    schemaType
  } = props;
  const client = (0, _hooks.useClient)();
  const projectId = (0, _hooks.useProjectId)();
  const documentPreviewStore = (0, _datastores.useDocumentPreviewStore)();
  const isCurrentProject = projectId === schemaType.projectId;
  const loadableToken = (0, _useCrossProjectToken.useCrossProjectToken)(client, {
    projectId: schemaType.projectId,
    tokenId: schemaType.tokenId
  });
  const crossDatasetClient = (0, _react.useMemo)(() => {
    const token = isCurrentProject ? undefined : (loadableToken === null || loadableToken === void 0 ? void 0 : loadableToken.status) === 'loaded' && loadableToken.result;
    return client.withConfig({
      projectId: schemaType.projectId,
      dataset: schemaType.dataset,
      apiVersion: '2022-03-07',
      token: token || undefined,
      ignoreBrowserTokenWarning: true
    }) // seems like this is required to prevent this client from sometimes magically get mutated with a new projectId and dataset
    .clone();
  }, [client, isCurrentProject, loadableToken, schemaType.projectId, schemaType.dataset]);
  const documentValue = (0, _useFormValue.useFormValue)([]);
  const documentRef = useValueRef(documentValue);
  const handleSearch = (0, _react.useCallback)(searchString => (0, _rxjs.from)(resolveUserDefinedFilter(schemaType.options, documentRef.current, path)).pipe((0, _operators.mergeMap)(_ref => {
    let {
      filter,
      params
    } = _ref;
    return (0, _search.search)(crossDatasetClient, searchString, schemaType, { ...schemaType.options,
      filter,
      params,
      tag: 'search.cross-dataset-reference'
    });
  }), (0, _operators.catchError)(err => {
    var _schemaType$options;

    const isQueryError = err.details && err.details.type === 'queryParseError';

    if ((_schemaType$options = schemaType.options) !== null && _schemaType$options !== void 0 && _schemaType$options.filter && isQueryError) {
      err.message = "Invalid reference filter, please check the custom \"filter\" option";
    }

    return (0, _rxjs.throwError)(err);
  })), [crossDatasetClient, documentRef, path, schemaType]);
  const getReferenceInfo = (0, _react.useMemo)(() => (0, _getReferenceInfo.createGetReferenceInfo)({
    client: crossDatasetClient,
    documentPreviewStore
  }), [crossDatasetClient, documentPreviewStore]);

  if ((loadableToken === null || loadableToken === void 0 ? void 0 : loadableToken.status) === 'loading') {
    return /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      padding: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.TextSkeleton, {
      style: {
        maxWidth: 320
      },
      radius: 1
    }), /*#__PURE__*/_react.default.createElement(_ui.TextSkeleton, {
      style: {
        maxWidth: 200
      },
      radius: 1,
      size: 1
    }))));
  }

  if (!isCurrentProject && (loadableToken === null || loadableToken === void 0 ? void 0 : loadableToken.status) === 'loaded' && !loadableToken.result) {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      marginY: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 1,
      weight: "semibold"
    }, schemaType.title), /*#__PURE__*/_react.default.createElement(_Alert.Alert, {
      title: "No cross dataset read token found",
      size: 1,
      muted: true
    }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 3
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 1
    }, "This cross dataset reference field requires a cross dataset token to be registered. Please configure a token", ' ', schemaType.tokenId ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "with ID ", /*#__PURE__*/_react.default.createElement("b", null, schemaType.tokenId)) : null, ' ', "for project ", /*#__PURE__*/_react.default.createElement("b", null, schemaType.projectId), " that has read access to the", ' ', /*#__PURE__*/_react.default.createElement("b", null, schemaType.dataset), "-dataset."), /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 1
    }, "See the documentation for", ' ', /*#__PURE__*/_react.default.createElement("a", {
      href: "https://www.sanity.io/docs/cross-dataset-references"
    }, "Cross Dataset References"), ' ', "for more details."))));
  }

  return /*#__PURE__*/_react.default.createElement(_CrossDatasetReferenceInput.CrossDatasetReferenceInput, _extends({}, props, {
    getReferenceInfo: getReferenceInfo,
    onSearch: handleSearch
  }));
}