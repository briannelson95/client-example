"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getReferenceInfo = getReferenceInfo;
exports.referenceSearch = referenceSearch;

var _operators = require("rxjs/operators");

var _rxjs = require("rxjs");

var _preview = require("../../../../preview");

var _search = require("../../../../search");

var _util = require("../../../../util");

const READABLE = {
  available: true,
  reason: 'READABLE'
};
const PERMISSION_DENIED = {
  available: false,
  reason: 'PERMISSION_DENIED'
};
const NOT_FOUND = {
  available: false,
  reason: 'NOT_FOUND'
};
/**
 * Takes an id and a reference schema type, returns metadata about it
 */

function getReferenceInfo(documentPreviewStore, id, referenceType) {
  const {
    publishedId,
    draftId
  } = (0, _util.getIdPair)(id);
  const pairAvailability$ = documentPreviewStore.unstable_observeDocumentPairAvailability({
    _type: 'reference',
    _ref: id
  });
  return pairAvailability$.pipe((0, _operators.switchMap)(pairAvailability => {
    if (!pairAvailability.draft.available && !pairAvailability.published.available) {
      // combine availability of draft + published
      const availability = pairAvailability.draft.reason === 'PERMISSION_DENIED' || pairAvailability.published.reason === 'PERMISSION_DENIED' ? PERMISSION_DENIED : NOT_FOUND; // short circuit, neither draft nor published is available so no point in trying to get preview

      return (0, _rxjs.of)({
        id,
        type: undefined,
        availability,
        preview: {
          draft: undefined,
          published: undefined
        }
      });
    }

    const draftRef = {
      _type: 'reference',
      _ref: draftId
    };
    const publishedRef = {
      _type: 'reference',
      _ref: publishedId
    };
    const typeName$ = (0, _rxjs.combineLatest)([documentPreviewStore.observeDocumentTypeFromId(draftId), documentPreviewStore.observeDocumentTypeFromId(publishedId)]).pipe( // assume draft + published are always same type
    (0, _operators.map)(_ref => {
      let [draftTypeName, publishedTypeName] = _ref;
      return draftTypeName || publishedTypeName;
    }));
    return typeName$.pipe((0, _operators.switchMap)(typeName => {
      if (!typeName) {
        // we have already asserted that either the draft or the published document is readable, so
        // if we get here we can't read the _type, so we're likely to be in an inconsistent state
        // waiting for an update to reach the client. Since we're in the context of a reactive stream based on
        // the _type we'll get it eventually
        return _rxjs.EMPTY;
      } // get schema type for the referenced document


      const refSchemaType = referenceType.to.find(memberType => memberType.name === typeName);

      if (!refSchemaType) {
        return _rxjs.EMPTY;
      }

      const previewPaths = [...((0, _preview.getPreviewPaths)(refSchemaType === null || refSchemaType === void 0 ? void 0 : refSchemaType.preview) || []), ['_updatedAt'], ['_createdAt']];
      const draftPreview$ = documentPreviewStore.observePaths(draftRef, previewPaths).pipe((0, _operators.map)(result => result ? {
        _id: draftId,
        ...(0, _preview.prepareForPreview)(result, refSchemaType)
      } : undefined), (0, _operators.startWith)(undefined));
      const publishedPreview$ = documentPreviewStore.observePaths(publishedRef, previewPaths).pipe((0, _operators.map)(result => result ? {
        _id: publishedId,
        ...(0, _preview.prepareForPreview)(result, refSchemaType)
      } : undefined), (0, _operators.startWith)(undefined));
      const value$ = (0, _rxjs.combineLatest)([draftPreview$, publishedPreview$]).pipe((0, _operators.map)(_ref2 => {
        let [draft, published] = _ref2;
        return {
          draft,
          published
        };
      }));
      return value$.pipe((0, _operators.map)(value => {
        const availability = // eslint-disable-next-line no-nested-ternary
        pairAvailability.draft.available || pairAvailability.published.available ? READABLE : pairAvailability.draft.reason === 'PERMISSION_DENIED' || pairAvailability.published.reason === 'PERMISSION_DENIED' ? PERMISSION_DENIED : NOT_FOUND;
        return {
          type: typeName,
          id: publishedId,
          availability,
          preview: {
            draft: (0, _util.isRecord)(value.draft) ? value.draft : undefined,
            published: (0, _util.isRecord)(value.published) ? value.published : undefined
          }
        };
      }));
    }));
  }));
}
/**
 * when we get a search result it may not include all [draft, published] id pairs for documents matching the
 * query. For example: searching for "potato" may yield a hit in the draft, but not the published (or vice versa)
 *
 * This method takes a list of collated search hits and returns an array of the missing "counterpart" ids
 */


function getCounterpartIds(collatedHits) {
  return collatedHits.filter(collatedHit => // we're interested in hits where either draft or published is missing
  !collatedHit.draft || !collatedHit.published).map(collatedHit => // if we have the draft, return the published id or vice versa
  collatedHit.draft ? collatedHit.id : (0, _util.getDraftId)(collatedHit.id));
}

function getExistingCounterparts(client, ids) {
  return ids.length === 0 ? (0, _rxjs.of)([]) : client.observable.fetch("*[_id in $ids]._id", {
    ids
  }, {
    tag: 'get-counterpart-ids'
  });
}

function referenceSearch(client, textTerm, type, options) {
  const searchWeighted = (0, _search.createWeightedSearch)(type.to, client, options);
  return searchWeighted(textTerm, {
    includeDrafts: true
  }).pipe((0, _operators.map)(results => results.map(result => result.hit)), (0, _operators.map)(_util.collate), // pick the 100 best matches
  (0, _operators.map)(collated => collated.slice(0, 100)), (0, _operators.mergeMap)(collated => {
    // Note: It might seem like this step is redundant, but it's here for a reason:
    // The list of search hits returned from here will be passed as options to the reference input's autocomplete. When
    // one of them gets selected by the user, it will then be passed as the argument to the `onChange` handler in the
    // Reference Input. This handler will then look at the passed value to determine whether to make a link to a
    // draft (using _strengthenOnPublish) or a published document.
    //
    // Without this step, in a case where both a draft and a published version exist but only the draft matches
    // the search term, we'd end up making a reference with `_strengthenOnPublish: true`, when we instead should be
    // making a normal reference to the published id
    return getExistingCounterparts(client, getCounterpartIds(collated)).pipe((0, _operators.map)(existingCounterpartIds => {
      return collated.map(entry => {
        const draftId = (0, _util.getDraftId)(entry.id);
        return {
          id: entry.id,
          type: entry.type,
          draft: entry.draft || existingCounterpartIds.includes(draftId) ? {
            _id: draftId,
            _type: entry.type
          } : undefined,
          published: entry.published || existingCounterpartIds.includes(entry.id) ? {
            _id: entry.id,
            _type: entry.type
          } : undefined
        };
      });
    }));
  }));
}