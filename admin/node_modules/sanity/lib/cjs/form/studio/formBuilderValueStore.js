"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkoutPair = checkoutPair;

var _operators = require("rxjs/operators");

var _mutationPatch = require("../utils/mutationPatch");

function prepareMutationEvent(event) {
  const patches = event.mutations.map(mut => mut.patch).filter(Boolean);
  return {
    type: 'mutation',
    document: event.document,
    mutations: event.mutations,
    patches: (0, _mutationPatch.fromMutationPatches)(event.origin, patches),
    origin: event.origin
  };
}

function prepareRebaseEvent(event) {
  const patches = [{
    id: event.document._id,
    set: event.document
  }];
  return {
    type: 'mutation',
    document: event.document,
    mutations: patches.map(patch => ({
      patch
    })),
    patches: (0, _mutationPatch.fromMutationPatches)('internal', patches),
    origin: event.origin // @todo

  };
}

function wrap(document) {
  const events$ = document.events.pipe((0, _operators.map)(event => {
    if (event.type === 'mutation') {
      return prepareMutationEvent(event);
    } else if (event.type === 'rebase') {
      return prepareRebaseEvent(event);
    }

    return event;
  }), (0, _operators.scan)((prevEvent, currentEvent) => {
    const deletedSnapshot = prevEvent && prevEvent.type === 'mutation' && prevEvent.document !== null && currentEvent.type === 'mutation' && currentEvent.document === null ? prevEvent.document : null;
    return { ...currentEvent,
      deletedSnapshot
    };
  }, null));
  return { ...document,
    events: events$,

    patch(patches) {
      document.patch((0, _mutationPatch.toMutationPatches)(patches));
    }

  };
}

let hasWarned = false;

function checkoutPair(documentStore, idPair) {
  if (!hasWarned) {
    // eslint-disable-next-line no-console
    console.warn('[deprecation] The checkout() function has been deprecated in favor of checkoutPair()');
    hasWarned = true;
  }

  const {
    draft,
    published
  } = documentStore.checkoutPair(idPair);
  return {
    draft: wrap(draft),
    published: wrap(published)
  };
}