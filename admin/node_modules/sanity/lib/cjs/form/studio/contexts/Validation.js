"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidationProvider = ValidationProvider;
exports.useChildValidation = useChildValidation;
exports.useValidationMarkers = useValidationMarkers;

var _react = _interopRequireWildcard(require("react"));

var _paths = require("@sanity/util/paths");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint-disable react/no-unused-prop-types */
const ValidationContext = /*#__PURE__*/(0, _react.createContext)([]);

function ValidationProvider(props) {
  return /*#__PURE__*/_react.default.createElement(ValidationContext.Provider, {
    value: props.validation
  }, props.children);
}

function useValidationMarkers() {
  const ctx = (0, _react.useContext)(ValidationContext);

  if (!ctx) {
    throw new Error('Form context not provided');
  }

  return ctx;
}

function useChildValidation(path) {
  const validation = useValidationMarkers();
  return (0, _react.useMemo)(() => validation.filter(item => (0, _paths.startsWith)(path, item.path)).map(marker => ({
    message: marker.item.message,
    level: marker.level,
    path: marker.path
  })), [path, validation]);
}