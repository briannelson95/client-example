"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultResolveFieldComponent = defaultResolveFieldComponent;
exports.defaultResolveInputComponent = defaultResolveInputComponent;
exports.defaultResolveItemComponent = defaultResolveItemComponent;
exports.defaultResolvePreviewComponent = defaultResolvePreviewComponent;

var _types = require("@sanity/types");

var _react = _interopRequireDefault(require("react"));

var is = _interopRequireWildcard(require("../../utils/is"));

var _formField = require("../../components/formField");

var _preview = require("../../../preview");

var _resolveReferenceInput = require("./resolveReferenceInput");

var _resolveArrayInput = require("./resolveArrayInput");

var _resolveStringInput = require("./resolveStringInput");

var _resolveNumberInput = require("./resolveNumberInput");

var _defaultInputs = require("./defaultInputs");

var _helpers = require("./helpers");

var _asserters = require("../../utils/asserters");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable react/jsx-handler-names */
function resolveComponentFromTypeVariants(type) {
  if (is.type('array', type)) {
    return (0, _resolveArrayInput.resolveArrayInput)(type);
  }

  if (is.type('reference', type)) {
    return (0, _resolveReferenceInput.resolveReferenceInput)(type);
  } // String input with a select


  if (is.type('string', type)) {
    return (0, _resolveStringInput.resolveStringInput)(type);
  }

  if (is.type('number', type)) {
    return (0, _resolveNumberInput.resolveNumberInput)(type);
  }

  return undefined;
}

function getTypeChain(type, visited) {
  if (!type) return [];
  if (visited.has(type)) return [];
  visited.add(type);
  const next = type.type ? getTypeChain(type.type, visited) : [];
  return [type, ...next];
}

function defaultResolveInputComponent(schemaType) {
  var _schemaType$component;

  if ((_schemaType$component = schemaType.components) !== null && _schemaType$component !== void 0 && _schemaType$component.input) return schemaType.components.input;
  const componentFromTypeVariants = resolveComponentFromTypeVariants(schemaType);

  if (componentFromTypeVariants) {
    return componentFromTypeVariants;
  }

  const typeChain = getTypeChain(schemaType, new Set());
  const deduped = typeChain.reduce((acc, type) => {
    acc[type.name] = type;
    return acc;
  }, {}); // using an object + Object.values to de-dupe the type chain by type name

  const subType = Object.values(deduped).find(t => _defaultInputs.defaultInputs[t.name]);

  if (subType) {
    return _defaultInputs.defaultInputs[subType.name];
  }

  throw new Error("Could not find input component for schema type `".concat(schemaType.name, "`"));
}

function NoopField(_ref) {
  let {
    children
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children);
}

function PrimitiveField(field) {
  return /*#__PURE__*/_react.default.createElement(_formField.FormField, {
    "data-testid": "field-".concat(field.inputId),
    level: field.level,
    title: field.title,
    description: field.description,
    validation: field.validation,
    __unstable_presence: field.presence
  }, field.children);
}

function ObjectOrArrayField(field) {
  const level = (0, _asserters.isObjectField)(field) ? (0, _helpers.getObjectFieldLevel)(field) : (0, _helpers.getArrayFieldLevel)(field);
  return /*#__PURE__*/_react.default.createElement(_formField.FormFieldSet, {
    "data-testid": "field-".concat(field.inputId),
    level: level,
    title: field.title,
    description: field.description,
    collapsed: field.collapsed,
    collapsible: field.collapsible,
    onCollapse: field.onCollapse,
    onExpand: field.onExpand,
    validation: field.validation,
    __unstable_presence: field.presence
  }, field.children);
}

function ImageOrFileField(field) {
  // unless the hotspot tool dialog is open we want to show whoever is in there as the field presence
  const hotspotField = field.inputProps.members.find(member => member.kind === 'field' && member.name === 'hotspot');
  const presence = hotspotField !== null && hotspotField !== void 0 && hotspotField.open ? field.presence : field.presence.concat((hotspotField === null || hotspotField === void 0 ? void 0 : hotspotField.field.presence) || []);
  const level = (0, _helpers.getObjectFieldLevel)(field);
  return /*#__PURE__*/_react.default.createElement(_formField.FormFieldSet, {
    level: level,
    title: field.title,
    description: field.description,
    collapsed: field.collapsed,
    collapsible: field.collapsible,
    onCollapse: field.onCollapse,
    onExpand: field.onExpand,
    validation: field.validation,
    __unstable_presence: presence
  }, field.children);
}

function defaultResolveFieldComponent(schemaType) {
  var _schemaType$component2;

  if ((_schemaType$component2 = schemaType.components) !== null && _schemaType$component2 !== void 0 && _schemaType$component2.field) return schemaType.components.field;

  if ((0, _types.isBooleanSchemaType)(schemaType)) {
    return NoopField;
  }

  if (getTypeChain(schemaType, new Set()).some(t => t.name === 'image' || t.name === 'file')) {
    return ImageOrFileField;
  }

  if (schemaType.jsonType !== 'object' && schemaType.jsonType !== 'array') {
    return PrimitiveField;
  }

  return ObjectOrArrayField;
}

function defaultResolveItemComponent(schemaType) {
  var _schemaType$component3;

  if ((_schemaType$component3 = schemaType.components) !== null && _schemaType$component3 !== void 0 && _schemaType$component3.item) return schemaType.components.item;
  return NoopField;
} // TODO: add PreviewProps interface


function defaultResolvePreviewComponent(schemaType) {
  var _schemaType$component4;

  if ((_schemaType$component4 = schemaType.components) !== null && _schemaType$component4 !== void 0 && _schemaType$component4.preview) return schemaType.components.preview;
  return _preview.SanityPreview; // TODO
}