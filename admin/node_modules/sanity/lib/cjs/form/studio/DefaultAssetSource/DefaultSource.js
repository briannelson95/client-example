"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultSource = void 0;

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _react = _interopRequireWildcard(require("react"));

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _hooks = require("../../../hooks");

var _AssetThumb = require("./AssetThumb");

var _TableList = require("./TableList");

var _templateObject, _templateObject2;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const PER_PAGE = 200;
const ASSET_TYPE_IMAGE = 'sanity.imageAsset';
const ASSET_TYPE_FILE = 'sanity.fileAsset';

const buildQuery = function () {
  let start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PER_PAGE;
  let assetType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ASSET_TYPE_IMAGE;
  return "\n  *[_type == \"".concat(assetType, "\"] | order(_updatedAt desc) [").concat(start, "...").concat(end, "] {\n    _id,\n    _updatedAt,\n    _createdAt,\n    url,\n    originalFilename,\n    mimeType,\n    extension,\n    size,\n    metadata {dimensions}\n  }\n");
};

const ThumbGrid = (0, _styledComponents.default)(_ui.Grid)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n"])));
const CardLoadMore = (0, _styledComponents.default)(_ui.Card)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  border-top: 1px solid var(--card-border-color);\n  position: sticky;\n  bottom: 0;\n  z-index: 200;\n"])));

const DefaultAssetSource = function DefaultAssetSource(props, ref) {
  const client = (0, _hooks.useClient)();
  const versionedClient = (0, _react.useMemo)(() => client.withConfig({
    apiVersion: '1'
  }), [client]);

  const _elementId = (0, _react.useRef)("default-asset-source-".concat((0, _uniqueId2.default)()));

  const currentPageNumber = (0, _react.useRef)(0);
  const fetch$ = (0, _react.useRef)();
  const [assets, setAssets] = (0, _react.useState)([]);
  const [isLastPage, setIsLastPage] = (0, _react.useState)(false);
  const [hasResetAutoFocus, setHasResetFocus] = (0, _react.useState)(false);
  const [isLoading, setIsLoading] = (0, _react.useState)(true);
  const {
    selectedAssets,
    assetType = 'image',
    dialogHeaderTitle = 'Select image',
    onClose,
    onSelect
  } = props;
  const fetchPage = (0, _react.useCallback)(pageNumber => {
    const start = pageNumber * PER_PAGE;
    const end = start + PER_PAGE;
    const isImageAssetType = assetType === 'image';
    const tag = isImageAssetType ? 'asset.image-list' : 'asset.file-list';
    const assetTypeParam = isImageAssetType ? ASSET_TYPE_IMAGE : ASSET_TYPE_FILE;
    setIsLoading(true);
    fetch$.current = versionedClient.observable.fetch(buildQuery(start, end, assetTypeParam), {}, {
      tag
    }).subscribe(result => {
      setIsLastPage(result.length < PER_PAGE); // eslint-disable-next-line max-nested-callbacks

      setAssets(prevState => prevState.concat(result));
      setIsLoading(false);
    });
  }, [assetType, setIsLoading, setAssets, setIsLastPage, versionedClient]);
  const handleDeleteFinished = (0, _react.useCallback)(id => {
    // eslint-disable-next-line max-nested-callbacks
    setAssets(prevState => prevState.filter(asset => asset._id !== id));
  }, [setAssets]);
  const select = (0, _react.useCallback)(id => {
    const selected = assets.find(doc => doc._id === id);

    if (selected) {
      const selectedSource = [{
        kind: 'assetDocumentId',
        value: id
      }];
      onSelect(selectedSource);
    }
  }, [assets, onSelect]);
  const handleItemClick = (0, _react.useCallback)(event => {
    event.preventDefault();
    select(event.currentTarget.getAttribute('data-id'));
  }, [select]);
  const handleItemKeyPress = (0, _react.useCallback)(event => {
    if (event.key === 'Enter') {
      event.preventDefault();
      select(event.currentTarget.getAttribute('data-id'));
    }
  }, [select]);
  const handleClose = (0, _react.useCallback)(() => {
    if (onClose) {
      onClose();
    }
  }, [onClose]);
  const handleFetchNextPage = (0, _react.useCallback)(event => {
    event.preventDefault();
    fetchPage(++currentPageNumber.current);
  }, [fetchPage]);
  (0, _react.useEffect)(() => {
    fetchPage(currentPageNumber.current);
    return () => {
      if (fetch$.current) {
        fetch$.current.unsubscribe();
      }
    };
  }, [fetchPage]);
  (0, _react.useEffect)(() => {
    // We focus on the first item after we're doing loading, but only on initial load, as
    // this will reset the scroll position to the top if we do it on the second page
    if (!isLoading && (!currentPageNumber.current || currentPageNumber.current === 0)) {
      setHasResetFocus(true);
    }
  }, [isLoading]);
  const renderedThumbView = (0, _react.useMemo)(() => {
    return /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 4
    }, /*#__PURE__*/_react.default.createElement(ThumbGrid, {
      gap: 2
    }, assets.map(asset => /*#__PURE__*/_react.default.createElement(_AssetThumb.AssetThumb, {
      key: asset._id,
      asset: asset,
      isSelected: selectedAssets.some(selected => selected._id === asset._id),
      onClick: handleItemClick,
      onKeyPress: handleItemKeyPress,
      onDeleteFinished: handleDeleteFinished
    }))), isLoading && assets.length === 0 && /*#__PURE__*/_react.default.createElement(_ui.Flex, {
      justify: "center"
    }, /*#__PURE__*/_react.default.createElement(_ui.Spinner, {
      muted: true
    })), !isLoading && assets.length === 0 && /*#__PURE__*/_react.default.createElement(_ui.Text, {
      align: "center",
      muted: true
    }, "No images"));
  }, [assets, handleDeleteFinished, handleItemClick, handleItemKeyPress, isLoading, selectedAssets]);
  const renderedTableView = (0, _react.useMemo)(() => {
    return /*#__PURE__*/_react.default.createElement(_TableList.TableList, {
      isLoading: isLoading,
      assets: assets,
      selectedAssets: selectedAssets,
      onClick: handleItemClick,
      onKeyPress: handleItemKeyPress,
      onDeleteFinished: handleDeleteFinished
    });
  }, [isLoading, assets, selectedAssets, handleItemClick, handleItemKeyPress, handleDeleteFinished]);
  return /*#__PURE__*/_react.default.createElement(_ui.Dialog, {
    ref: ref,
    id: _elementId.current,
    header: dialogHeaderTitle,
    width: 2,
    onClose: handleClose,
    __unstable_autoFocus: hasResetAutoFocus
  }, assetType === 'image' && renderedThumbView, assetType === 'file' && renderedTableView, assets.length > 0 && !isLastPage && /*#__PURE__*/_react.default.createElement(CardLoadMore, {
    tone: "default",
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    direction: "column"
  }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    type: "button",
    icon: _icons.DownloadIcon,
    loading: isLoading,
    onClick: handleFetchNextPage,
    text: "Load more",
    tone: "primary"
  }))));
};

const DefaultSource = /*#__PURE__*/_react.default.memo( /*#__PURE__*/_react.default.forwardRef(DefaultAssetSource));

exports.DefaultSource = DefaultSource;