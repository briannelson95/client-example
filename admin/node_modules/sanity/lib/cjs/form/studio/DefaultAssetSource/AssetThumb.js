"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AssetThumb = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _ui = require("@sanity/ui");

var _hooks = require("../../../hooks");

var _FullscreenSpinner = require("../../components/FullscreenSpinner");

var _Checkerboard = require("../../components/Checkerboard");

var _AssetUsageDialog = require("./AssetUsageDialog");

var _AssetMenu = require("./AssetMenu");

var _templateObject, _templateObject2, _templateObject3, _templateObject4;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

// Get pixel density of the current device
const DPI = typeof window === 'undefined' || !window.devicePixelRatio ? 1 : Math.round(window.devicePixelRatio);

const Image = _styledComponents.default.img(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: absolute;\n  z-index: 1;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: block;\n  object-fit: contain;\n"])));

const Container = (0, _styledComponents.default)(_Checkerboard.Checkerboard)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: relative;\n  z-index: 1;\n  padding-bottom: 100%;\n"])));

const Root = _styledComponents.default.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  position: relative;\n  display: inherit;\n"])));

const MenuContainer = _styledComponents.default.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  box-sizing: border-box;\n  position: absolute;\n  z-index: 2;\n  display: none;\n  top: 3px;\n  right: 3px;\n\n  ", ":hover & {\n    display: block;\n  }\n"])), Root);

const AssetThumb = /*#__PURE__*/_react.default.memo(function AssetThumb(props) {
  const client = (0, _hooks.useClient)();
  const versionedClient = (0, _react.useMemo)(() => client.withConfig({
    apiVersion: '1'
  }), [client]);
  const toast = (0, _ui.useToast)();
  const deleteRef$ = (0, _react.useRef)();
  const {
    asset,
    onClick,
    onKeyPress,
    onDeleteFinished,
    isSelected
  } = props;
  const [showUsageDialog, setShowUsageDialog] = (0, _react.useState)(false);
  const [showDeleteDialog, setShowDeleteDialog] = (0, _react.useState)(false);
  const [isDeleting, setIsDeleting] = (0, _react.useState)(false);
  (0, _react.useEffect)(() => {
    return () => {
      if (deleteRef$.current) {
        deleteRef$.current.unsubscribe();
      }
    };
  }, []);
  const handleConfirmDelete = (0, _react.useCallback)(() => {
    setShowDeleteDialog(true);
  }, [setShowDeleteDialog]);
  const handleDialogClose = (0, _react.useCallback)(() => {
    setShowUsageDialog(false);
    setShowDeleteDialog(false);
  }, [setShowUsageDialog, setShowDeleteDialog]);
  const handleToggleUsageDialog = (0, _react.useCallback)(() => {
    setShowUsageDialog(true);
  }, [setShowUsageDialog]);
  const handleDeleteError = (0, _react.useCallback)(error => {
    toast.push({
      closable: true,
      status: 'error',
      title: 'Image could not be deleted',
      description: error.message
    });
  }, [toast]);
  const handleDeleteSuccess = (0, _react.useCallback)(() => {
    toast.push({
      status: 'success',
      title: 'Image was deleted'
    });
  }, [toast]);
  const handleDeleteAsset = (0, _react.useCallback)(() => {
    setIsDeleting(true);
    deleteRef$.current = versionedClient.observable.delete(asset._id).subscribe({
      next: () => {
        setIsDeleting(false);
        onDeleteFinished(asset._id);
        setShowDeleteDialog(false);
        handleDeleteSuccess();
      },
      error: err => {
        setIsDeleting(false);
        handleDeleteError(err); // eslint-disable-next-line no-console

        console.error('Could not delete asset', err);
      }
    });
  }, [asset._id, handleDeleteError, handleDeleteSuccess, onDeleteFinished]);
  const handleMenuAction = (0, _react.useCallback)(action => {
    if (action.type === 'delete') {
      handleConfirmDelete();
    }

    if (action.type === 'showUsage') {
      handleToggleUsageDialog();
    }
  }, [handleConfirmDelete, handleToggleUsageDialog]); // const {asset, onClick, onKeyPress, isSelected} = props

  const {
    originalFilename,
    _id,
    url
  } = asset;
  const imgH = 200 * Math.max(1, DPI); // Mead can't convert gifs, so we might end up with large gifs that will cause the source window to use a lot of CPU
  // We instead force them to display as jpgs

  const imageUrl = url.includes('.gif') ? "".concat(url, "?h=").concat(imgH, "&fit=max&fm=jpg") : "".concat(url, "?h=").concat(imgH, "&fit=max");
  return /*#__PURE__*/_react.default.createElement(Root, null, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    tone: "primary",
    selected: isSelected,
    tabIndex: 0,
    "data-id": _id,
    mode: "ghost",
    onKeyPress: onKeyPress,
    padding: 0,
    style: {
      padding: 2
    }
  }, /*#__PURE__*/_react.default.createElement(Container, null, /*#__PURE__*/_react.default.createElement(Image, {
    alt: originalFilename,
    src: imageUrl,
    onClick: onClick,
    "data-id": _id
  }), isDeleting && /*#__PURE__*/_react.default.createElement(_FullscreenSpinner.FullscreenSpinner, null))), /*#__PURE__*/_react.default.createElement(MenuContainer, null, /*#__PURE__*/_react.default.createElement(_AssetMenu.AssetMenu, {
    isSelected: isSelected,
    onAction: handleMenuAction
  })), (showUsageDialog || showDeleteDialog) && /*#__PURE__*/_react.default.createElement(_AssetUsageDialog.AssetUsageDialog, {
    asset: asset,
    mode: showDeleteDialog ? 'confirmDelete' : 'listUsage',
    onClose: handleDialogClose,
    onDelete: handleDeleteAsset,
    isDeleting: isDeleting
  }));
});

exports.AssetThumb = AssetThumb;