"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadImage = uploadImage;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _patch = require("../../patch");

var _assets = require("../inputs/client-adapters/assets");

var _readExif = require("./image/readExif");

var _rotateImage = require("./image/rotateImage");

var _orient = require("./image/orient");

var _constants = require("./constants");

var _utils = require("./utils");

function uploadImage(client, file, options) {
  const upload$ = (0, _assets.uploadImageAsset)(client, file, options).pipe((0, _operators.filter)(event => event.stage !== 'download'), (0, _operators.map)(event => ({ ...event,
    progress: 2 + event.percent / 100 * 98
  })), (0, _operators.map)(event => {
    if (event.type === 'complete') {
      return (0, _utils.createUploadEvent)([(0, _patch.set)({
        _type: 'reference',
        _ref: event.asset._id
      }, ['asset']), (0, _patch.set)(100, [_constants.UPLOAD_STATUS_KEY, 'progress']), (0, _patch.set)(new Date().toISOString(), [_constants.UPLOAD_STATUS_KEY, 'updated'])]);
    }

    return (0, _utils.createUploadEvent)([(0, _patch.set)(event.percent, [_constants.UPLOAD_STATUS_KEY, 'progress']), (0, _patch.set)(new Date().toISOString(), [_constants.UPLOAD_STATUS_KEY, 'updated'])]);
  }));
  const setPreviewUrl$ = (0, _readExif.readExif)(file).pipe((0, _operators.mergeMap)(exifData => (0, _rotateImage.rotateImage)(file, exifData.orientation || _orient.DEFAULT_ORIENTATION)), (0, _operators.catchError)(error => {
    // eslint-disable-next-line no-console
    console.warn('Image preprocessing failed for "%s" with the error: %s', file.name, error.message); // something went wrong, but continue still

    return (0, _rxjs.of)(null);
  }), (0, _operators.filter)(Boolean), (0, _operators.map)(imageUrl => (0, _utils.createUploadEvent)([(0, _patch.set)(imageUrl, [_constants.UPLOAD_STATUS_KEY, 'previewImage'])])));
  return (0, _rxjs.of)((0, _utils.createInitialUploadEvent)(file)).pipe((0, _operators.concat)((0, _rxjs.from)(upload$).pipe((0, _operators.merge)(setPreviewUrl$))), (0, _operators.concat)((0, _rxjs.of)(_utils.CLEANUP_EVENT)));
}