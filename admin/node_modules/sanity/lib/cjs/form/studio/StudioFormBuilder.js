"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StudioFormBuilder = StudioFormBuilder;

var _react = _interopRequireWildcard(require("react"));

var _patch = require("../patch");

var _empty = require("../utils/empty");

var _useFormBuilder = require("../useFormBuilder");

var _StudioFormBuilderProvider = require("./StudioFormBuilderProvider");

var _FormCallbacks = require("./contexts/FormCallbacks");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint-disable camelcase */

/* eslint-disable react/jsx-handler-names */

/**
 * @alpha
 */
function StudioFormBuilder(props) {
  const {
    __internal_patchChannel: patchChannel,
    autoFocus,
    changesOpen,
    collapsedFieldSets,
    collapsedPaths,
    focusPath,
    focused,
    groups,
    id,
    members,
    onChange,
    onPathBlur,
    onPathFocus,
    onPathOpen,
    onFieldGroupSelect,
    onSetFieldSetCollapsed,
    onSetPathCollapsed,
    presence,
    readOnly,
    schemaType,
    validation,
    value
  } = props;
  return /*#__PURE__*/_react.default.createElement(_StudioFormBuilderProvider.StudioFormBuilderProvider, {
    __internal_patchChannel: patchChannel,
    autoFocus: autoFocus,
    changesOpen: changesOpen,
    collapsedFieldSets: collapsedFieldSets,
    collapsedPaths: collapsedPaths,
    focusPath: focusPath,
    focused: focused,
    groups: groups,
    id: id,
    members: members,
    onChange: onChange,
    onPathBlur: onPathBlur,
    onPathFocus: onPathFocus,
    onPathOpen: onPathOpen,
    onFieldGroupSelect: onFieldGroupSelect,
    onSetPathCollapsed: onSetPathCollapsed,
    onSetFieldSetCollapsed: onSetFieldSetCollapsed,
    presence: presence,
    validation: validation,
    readOnly: readOnly,
    schemaType: schemaType,
    value: value
  }, /*#__PURE__*/_react.default.createElement(RootInput, null));
}

function RootInput() {
  const {
    focusPath,
    focused,
    groups,
    id,
    members,
    readOnly,
    renderField,
    renderInput,
    renderItem,
    renderPreview,
    schemaType,
    value
  } = (0, _useFormBuilder.useFormBuilder)();
  const {
    onChange,
    onFieldGroupSelect,
    onPathBlur,
    onPathFocus,
    onPathOpen,
    onSetFieldSetCollapsed,
    onSetPathCollapsed
  } = (0, _FormCallbacks.useFormCallbacks)();
  const handleCollapseField = (0, _react.useCallback)(fieldName => onSetPathCollapsed([fieldName], true), [onSetPathCollapsed]);
  const handleExpandField = (0, _react.useCallback)(fieldName => onSetPathCollapsed([fieldName], false), [onSetPathCollapsed]);
  const handleBlur = (0, _react.useCallback)(() => onPathBlur(_empty.EMPTY_ARRAY), [onPathBlur]);
  const handleFocus = (0, _react.useCallback)(() => onPathFocus(_empty.EMPTY_ARRAY), [onPathFocus]);
  const handleChange = (0, _react.useCallback)(patch => onChange(_patch.PatchEvent.from(patch)), [onChange]);
  const focusRef = (0, _react.useRef)(null);
  const handleSelectFieldGroup = (0, _react.useCallback)(groupName => onFieldGroupSelect(_empty.EMPTY_ARRAY, groupName), [onFieldGroupSelect]);
  const handleOpenField = (0, _react.useCallback)(fieldName => onPathOpen([fieldName]), [onPathOpen]);
  const handleCloseField = (0, _react.useCallback)(() => onPathOpen([]), [onPathOpen]);
  const handleCollapseFieldSet = (0, _react.useCallback)(fieldSetName => onSetFieldSetCollapsed([fieldSetName], true), [onSetFieldSetCollapsed]);
  const handleExpandFieldSet = (0, _react.useCallback)(fieldSetName => onSetFieldSetCollapsed([fieldSetName], false), [onSetFieldSetCollapsed]);
  const rootInputProps = {
    focusPath,
    focusRef,
    changed: members.some(m => m.kind === 'field' && m.field.changed),
    focused,
    groups,
    id,
    level: 0,
    members,
    onBlur: handleBlur,
    onChange: handleChange,
    onCloseField: handleCloseField,
    onCollapseField: handleCollapseField,
    onCollapseFieldSet: handleCollapseFieldSet,
    onExpandField: handleExpandField,
    onExpandFieldSet: handleExpandFieldSet,
    onFocus: handleFocus,
    onFocusPath: onPathFocus,
    onOpenField: handleOpenField,
    onFieldGroupSelect: handleSelectFieldGroup,
    path: _empty.EMPTY_ARRAY,
    presence: _empty.EMPTY_ARRAY,
    readOnly,
    renderField,
    renderInput,
    renderItem,
    renderPreview,
    schemaType,
    validation: _empty.EMPTY_ARRAY,
    value
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderInput(rootInputProps));
}