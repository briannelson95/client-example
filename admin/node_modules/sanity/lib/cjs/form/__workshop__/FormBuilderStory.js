"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = FormBuilderStory;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _util = require("../../util");

var _hooks = require("../../hooks");

var _PatchChannel = require("../patch/PatchChannel");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function FormBuilderStory() {
  const documentId = '8ab96211-501c-45e3-9eb0-4ed1da1b50df';
  const documentType = 'author'; // @todo: there should be a hook for this

  const initialValue = (0, _react.useMemo)(() => ({
    loaded: true,
    value: {
      _id: documentId,
      _type: documentType
    }
  }), []);
  const schema = (0, _hooks.useSchema)();
  const schemaType = schema.get(documentType);
  const editState = (0, _hooks.useEditState)(documentId, documentType);
  const {
    patch
  } = (0, _hooks.useDocumentOperation)(documentId, documentType);
  const value = editState.draft || editState.published;
  const {
    validation: validationRaw
  } = (0, _hooks.useValidationStatus)(documentId, documentType);
  const validation = (0, _util.useUnique)(validationRaw);
  const [focusPath, setFocusPath] = (0, _react.useState)([]);
  const presence = (0, _react.useMemo)(() => [], []); // Create a patch channel

  const patchChannel = (0, _react.useMemo)(() => (0, _PatchChannel.createPatchChannel)(), []);
  const filterField = (0, _react.useCallback)(() => true, []);
  const handleBlur = (0, _react.useCallback)(() => {
    console.warn('handleBlur'); // setFocusPath([])
  }, []);
  const handleChange = (0, _react.useCallback)(patches => {
    patch.execute(patches, initialValue.value);
  }, [patch, initialValue.value]);
  const handleFocus = (0, _react.useCallback)(nextFocusPath => {
    if (Array.isArray(nextFocusPath)) {
      setFocusPath(nextFocusPath);
    }
  }, []);

  if (!schemaType) {
    return /*#__PURE__*/_react.default.createElement("div", null, "Schema type not found: ", /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, documentType));
  }

  return /*#__PURE__*/_react.default.createElement(_ui.Card, {
    paddingX: 4,
    paddingY: [4, 5, 6, 7],
    style: {
      minHeight: '100%',
      position: 'relative'
    }
  }, /*#__PURE__*/_react.default.createElement(_ui.Container, {
    width: 1
  }, "TODO"));
}