"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ExampleStory;

var _ui = require("@sanity/ui");

var _uiWorkshop = require("@sanity/ui-workshop");

var _react = _interopRequireWildcard(require("react"));

var _patch = require("../patch");

var _applyPatch = require("../patch/applyPatch");

var _presence = require("../../presence");

var _data = require("./_common/data");

var _common = require("./_common");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const patchChannel = (0, _patch.createPatchChannel)();
const EMPTY = [];

function ExampleStory() {
  const {
    setPropValue
  } = (0, _uiWorkshop.useProps)();

  const ref = _react.default.useRef(null);

  const toast = (0, _ui.useToast)();
  const isUseMutator = (0, _uiWorkshop.useBoolean)('Use Mutator', false, 'Props');
  const [, setFocused] = (0, _react.useState)(false);
  const [focusPath, setFocusPath] = (0, _react.useState)([]);
  const isReadOnly = (0, _uiWorkshop.useBoolean)('Read-only', false, 'Props');
  const isFilterFields = (0, _uiWorkshop.useBoolean)('Filter Fields', false, 'Props');
  const isHiddenGroup = (0, _uiWorkshop.useBoolean)('Hidden Group', false, 'Props');
  const isTypeTester = (0, _uiWorkshop.useBoolean)('Type Performance Tester', false, 'Props');
  const includeUnknownField = (0, _uiWorkshop.useBoolean)('Unknown Field in Value', false, 'Props');
  const isDebug = (0, _uiWorkshop.useBoolean)('Debug', false, 'Props');
  const isChangesOpen = (0, _uiWorkshop.useBoolean)('Changes Open', false, 'Props');
  const selectedSchemaKey = (0, _uiWorkshop.useSelect)('Schema', _data.schemaListOptions, Object.values(_data.schemaListOptions)[0], 'Props');
  const [documentValue, setDocumentValue] = (0, _react.useState)((0, _data.getDummyDocument)());
  const [fieldFilterSource, setFieldFilterSource] = (0, _react.useState)("");
  const [fieldFilterValue, setFieldFilterValue] = (0, _react.useState)("");
  const schema = (0, _react.useMemo)(() => {
    return (0, _data.getDummySchema)({
      schemaKey: selectedSchemaKey,
      hiddenGroup: isHiddenGroup
    });
  }, [isHiddenGroup, selectedSchemaKey]);
  const documentType = (0, _react.useMemo)(() => {
    return schema.get('dummy');
  }, [schema]);
  const handleChange = (0, _react.useCallback)(patchEvent => {
    setDocumentValue(currentDocumentValue => (0, _applyPatch.applyAll)(currentDocumentValue, patchEvent.patches));
  }, []);
  const handleChangeMutator = (0, _react.useCallback)(patchEvent => {// const patcher = new Patcher(
    //   toMutationPatches(patchEvent.patches).map((patch) => ({...patch, id: DUMMY_DOCUMENT_ID}))
    // )
    // setDocumentValue((currentDocumentValue) => patcher.apply(currentDocumentValue))
  }, []);
  const handleBlur = (0, _react.useCallback)(() => setFocused(false), []);
  const handleFocus = (0, _react.useCallback)(path => {
    setFocusPath(path);
    setFocused(true);
  }, []);
  const handleChangeFieldFilterSource = (0, _react.useCallback)(value => {
    const handledValue = value && value.length > 0 ? value : "";
    setFieldFilterSource(handledValue);
  }, []);
  const handleChangeFieldFilter = (0, _react.useCallback)(value => {
    setFieldFilterValue(value);
    toast.push({
      status: 'success',
      title: value === "" ? "Cleared field filter" : "Updated field filter"
    });
  }, [toast]);
  const memoizedFieldFilter = (0, _react.useMemo)(() => {
    if (!fieldFilterValue || fieldFilterValue.length === 0) {
      return () => true;
    }

    try {
      const body = "const [type, field] = args; const result = ".concat(fieldFilterValue, "; return result(type, field);"); // eslint-disable-next-line no-new-func

      const filter = new Function('...args', body);
      return filter;
    } catch (error) {
      // eslint-disable-next-line no-console
      console.error("Failed filtering", error);
      return () => true;
    }
  }, [fieldFilterValue]);
  const fieldFilter = (0, _react.useCallback)((type, field) => {
    return memoizedFieldFilter(type, field);
  }, [memoizedFieldFilter]); // Remove any remaining field filter if you disable the option

  (0, _react.useEffect)(() => {
    if (!isFilterFields && fieldFilterSource.length > 0) {
      setFieldFilterSource("");
      setFieldFilterValue("");
      toast.push({
        status: 'success',
        title: "Cleared field filter"
      });
    }
  }, [fieldFilterSource.length, isFilterFields, toast]);
  (0, _react.useEffect)(() => {
    if (includeUnknownField) {
      setDocumentValue(currentDocumentValue => ({ ...currentDocumentValue,
        isPublished: true
      }));
    } else {
      setDocumentValue(currentDocumentValue => {
        const newValue = { ...currentDocumentValue
        };
        delete newValue.isPublished;
        return newValue;
      });
    }
  }, [includeUnknownField]);
  (0, _react.useEffect)(() => {
    if (includeUnknownField && !(documentValue !== null && documentValue !== void 0 && documentValue.isPublished)) {
      setPropValue('Unknown Field in Value', false);
    }
  }, [documentValue]);
  return /*#__PURE__*/_react.default.createElement(_presence.PresenceOverlay, null, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Grid, {
    columns: isDebug ? [1, 1, 1, 12] : 1,
    gap: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 4,
    column: 6
  }, isFilterFields && /*#__PURE__*/_react.default.createElement(_common.FilterFieldInput, {
    value: fieldFilterSource,
    onChange: handleChangeFieldFilterSource,
    onFilter: handleChangeFieldFilter
  }), isTypeTester && /*#__PURE__*/_react.default.createElement(_common.TypeTester, {
    readOnly: isReadOnly
  }), /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "TODO")), isDebug && /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 4,
    column: 6
  }, /*#__PURE__*/_react.default.createElement(_common.FormDebugger, {
    value: documentValue,
    focusPath: focusPath
  })))));
}