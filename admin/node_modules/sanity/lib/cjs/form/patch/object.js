"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._objectApply = _objectApply;

var _isObject2 = _interopRequireDefault(require("lodash/isObject"));

var _clone2 = _interopRequireDefault(require("lodash/clone"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _applyPatch = require("./applyPatch");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectApply(value, patch) {
  const nextValue = (0, _clone2.default)(value);

  if (patch.path.length === 0) {
    // its directed to me
    if (patch.type === 'set') {
      if (!(0, _isObject2.default)(patch.value)) {
        // eslint-disable-line max-depth
        throw new Error('Cannot set value of an object to a non-object');
      }

      return patch.value;
    } else if (patch.type === 'unset') {
      return undefined;
    } else if (patch.type === 'setIfMissing') {
      // console.log('IS IT missing?', value)
      return value === undefined ? patch.value : value;
    }

    throw new Error("Invalid object operation: ".concat(patch.type));
  } // The patch is not directed to me


  const [head, ...tail] = patch.path;

  if (typeof head !== 'string') {
    throw new Error("Expected field name to be a string, instad got: ".concat(head));
  }

  if (tail.length === 0 && patch.type === 'unset') {
    return (0, _omit2.default)(nextValue, head);
  }

  nextValue[head] = (0, _applyPatch.applyPatch)(nextValue[head], { ...patch,
    path: tail
  });
  return nextValue;
}