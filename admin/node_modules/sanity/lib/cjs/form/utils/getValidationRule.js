"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getValidationRule = getValidationRule;

const normalizeRules = (validation, type) => {
  if (typeof validation === 'function') {
    throw new Error("Schema type \"".concat((type === null || type === void 0 ? void 0 : type.name) || '<not-found>', "\"'s `validation` was not run though `inferFromSchema`"));
  }

  if (!validation) return [];
  if (Array.isArray(validation)) return validation;
  return [validation];
};
/**
 * Finds the first matching validation rule spec from a Rule class instance.
 *
 * @internal
 * Note: This accesses private fields of the rule.
 */


function getValidationRule(type, ruleName) {
  for (const rule of normalizeRules(type === null || type === void 0 ? void 0 : type.validation, type)) {
    for (const ruleSpec of rule._rules) {
      if (ruleSpec.flag === ruleName) {
        return ruleSpec;
      }
    }
  }

  return null;
}