"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArrayOfObjectsMembers = ArrayOfObjectsMembers;

var _react = _interopRequireDefault(require("react"));

var _MemberItem = require("./MemberItem");

var _MemberItemError = require("./MemberItemError");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ArrayOfObjectsMembers(props) {
  const {
    members,
    renderInput,
    renderField,
    renderItem,
    renderPreview
  } = props;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, members.map(member => {
    if (member.kind === 'item') {
      return /*#__PURE__*/_react.default.createElement(_MemberItem.MemberItem, {
        key: member.key,
        member: member,
        renderInput: renderInput,
        renderField: renderField,
        renderItem: renderItem,
        renderPreview: renderPreview
      });
    }

    if (member.kind === 'error') {
      return /*#__PURE__*/_react.default.createElement(_MemberItemError.MemberItemError, {
        key: member.key,
        member: member
      });
    } //@ts-expect-error The branching above should cover all possible cases


    console.warn(new Error("Unhandled member kind ".concat(member.kind)));
    return null;
  }));
}