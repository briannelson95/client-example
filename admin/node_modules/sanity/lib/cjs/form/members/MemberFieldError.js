"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MemberFieldError = MemberFieldError;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _FormCallbacks = require("../studio/contexts/FormCallbacks");

var _patch = require("../patch");

var _InvalidValueInput = require("../inputs/InvalidValueInput");

var _MissingKeysAlert = require("../inputs/arrays/errors/MissingKeysAlert");

var _DuplicateKeysAlert = require("../inputs/arrays/errors/DuplicateKeysAlert");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function MemberFieldError(props) {
  const {
    member
  } = props;
  const {
    onChange
  } = (0, _FormCallbacks.useFormCallbacks)();
  const handleChange = (0, _react.useCallback)(event => {
    onChange(_patch.PatchEvent.from(event).prefixAll(member.fieldName));
  }, [onChange, member.fieldName]);

  if (member.error.type === 'INCOMPATIBLE_TYPE') {
    return /*#__PURE__*/_react.default.createElement(_InvalidValueInput.InvalidValueInput, {
      value: member.error.value,
      onChange: handleChange,
      actualType: member.error.resolvedValueType,
      validTypes: [member.error.expectedSchemaType.name]
    });
  }

  if (member.error.type === 'MISSING_KEYS') {
    return /*#__PURE__*/_react.default.createElement(_MissingKeysAlert.MissingKeysAlert, {
      error: member.error,
      onChange: handleChange
    });
  }

  if (member.error.type === 'DUPLICATE_KEYS') {
    return /*#__PURE__*/_react.default.createElement(_DuplicateKeysAlert.DuplicateKeysAlert, {
      error: member.error,
      onChange: handleChange
    });
  }

  return /*#__PURE__*/_react.default.createElement(_ui.Box, null, "Unexpected error: ", props.member.error.type);
}