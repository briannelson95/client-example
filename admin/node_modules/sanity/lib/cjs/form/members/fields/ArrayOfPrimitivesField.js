"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArrayOfPrimitivesField = ArrayOfPrimitivesField;

var _react = _interopRequireWildcard(require("react"));

var _FormCallbacks = require("../../studio/contexts/FormCallbacks");

var _useDidUpdate = require("../../hooks/useDidUpdate");

var _patch = require("../../patch");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function move(arr, from, to) {
  const copy = arr.slice();
  const val = copy[from];
  copy.splice(from, 1);
  copy.splice(to, 0, val);
  return copy;
}
/**
 * @example
 * Inserts "hello" at the beginning
 * ```ts
 * insertAfter(-1, ["one", "two"], "hello")
 * // => ["hello", "one", "two"]
 * ```
 */


function insertAfter(
/**
 * index to insert item after. An index of -1 will prepend the item
 */
index,
/**
 * the array to insert the item into
 */
arr,
/**
 * the item to insert
 */
items) {
  const copy = arr.slice();
  copy.splice(index + 1, 0, ...items);
  return copy;
}
/**
 * Responsible for creating inputProps and fieldProps to pass to ´renderInput´ and ´renderField´ for an array input
 * Note: "ArrayField" in this context means an object field of an array type
 * @param props - Component props
 */


function ArrayOfPrimitivesField(props) {
  const {
    onPathBlur,
    onPathFocus,
    onChange,
    onPathOpen,
    onSetPathCollapsed,
    onSetFieldSetCollapsed,
    onFieldGroupSelect
  } = (0, _FormCallbacks.useFormCallbacks)();
  const {
    member,
    renderField,
    renderInput,
    renderItem,
    renderPreview
  } = props;
  const focusRef = (0, _react.useRef)();
  (0, _useDidUpdate.useDidUpdate)(member.field.focused, (hadFocus, hasFocus) => {
    if (!hadFocus && hasFocus) {
      var _focusRef$current;

      (_focusRef$current = focusRef.current) === null || _focusRef$current === void 0 ? void 0 : _focusRef$current.focus();
    }
  });
  const handleBlur = (0, _react.useCallback)(event => {
    onPathBlur(member.field.path);
  }, [member.field.path, onPathBlur]);
  const handleFocus = (0, _react.useCallback)(event => {
    onPathFocus(member.field.path);
  }, [member.field.path, onPathFocus]);
  const handleChange = (0, _react.useCallback)(event => {
    onChange(_patch.PatchEvent.from(event).prepend((0, _patch.setIfMissing)([])).prefixAll(member.name));
  }, [onChange, member.name]);
  const handleSetCollapsed = (0, _react.useCallback)(collapsed => {
    onSetPathCollapsed(member.field.path, collapsed);
  }, [onSetPathCollapsed, member.field.path]);
  const handleCollapse = (0, _react.useCallback)(() => {
    onSetPathCollapsed(member.field.path, true);
  }, [onSetPathCollapsed, member.field.path]);
  const handleExpand = (0, _react.useCallback)(() => {
    onSetPathCollapsed(member.field.path, false);
  }, [onSetPathCollapsed, member.field.path]);
  const setValue = (0, _react.useCallback)(nextValue => {
    onChange(_patch.PatchEvent.from(nextValue.length === 0 ? (0, _patch.unset)() : (0, _patch.set)(nextValue)).prefixAll(member.name));
  }, [member.name, onChange]);
  const handleMoveItem = (0, _react.useCallback)(event => {
    const {
      value = []
    } = member.field;

    if (event.fromIndex === event.toIndex) {
      return;
    }

    setValue(move(value, event.fromIndex, event.toIndex));
  }, [member.field, setValue]);
  const handleAppend = (0, _react.useCallback)(itemValue => {
    const {
      value = []
    } = member.field;
    setValue(value.concat(itemValue));
  }, [member.field, setValue]);
  const handlePrepend = (0, _react.useCallback)(itemValue => {
    const {
      value = []
    } = member.field;
    setValue([itemValue].concat(value || []));
  }, [member.field, setValue]);
  const handleInsert = (0, _react.useCallback)(event => {
    const {
      value = []
    } = member.field;
    const insertIndex = event.referenceIndex + (event.position === 'before' ? -1 : 0);
    setValue(insertAfter(insertIndex, value, event.items));
  }, [member.field, setValue]);
  const handleRemoveItem = (0, _react.useCallback)(index => {
    onChange(_patch.PatchEvent.from([(0, _patch.unset)(member.field.path.concat(index))]));
  }, [onChange, member.field.path]);
  const handleFocusIndex = (0, _react.useCallback)(index => {
    onPathFocus(member.field.path.concat([index]));
  }, [member.field.path, onPathFocus]);
  const inputProps = (0, _react.useMemo)(() => {
    return {
      level: member.field.level,
      onBlur: handleBlur,
      members: member.field.members,
      value: member.field.value,
      readOnly: member.field.readOnly,
      onSetCollapsed: handleSetCollapsed,
      schemaType: member.field.schemaType,
      changed: member.field.changed,
      focusRef: focusRef,
      id: member.field.id,
      onFocus: handleFocus,
      path: member.field.path,
      focusPath: member.field.focusPath,
      focused: member.field.focused,
      onChange: handleChange,
      onInsert: handleInsert,
      onMoveItem: handleMoveItem,
      onRemoveItem: handleRemoveItem,
      onAppendItem: handleAppend,
      onPrependItem: handlePrepend,
      validation: member.field.validation,
      presence: member.field.presence,
      renderInput,
      renderItem,
      onFocusIndex: handleFocusIndex,
      renderPreview
    };
  }, [member.field.level, member.field.members, member.field.value, member.field.readOnly, member.field.schemaType, member.field.changed, member.field.id, member.field.path, member.field.focusPath, member.field.focused, member.field.validation, member.field.presence, handleBlur, handleSetCollapsed, handleFocus, handleChange, handleInsert, handleMoveItem, handleRemoveItem, handleAppend, handlePrepend, renderInput, renderItem, handleFocusIndex, renderPreview]);
  const renderedInput = (0, _react.useMemo)(() => renderInput(inputProps), [inputProps, renderInput]);
  const fieldProps = (0, _react.useMemo)(() => {
    return {
      name: member.name,
      index: member.index,
      level: member.field.level,
      value: member.field.value,
      title: member.field.schemaType.title,
      description: member.field.schemaType.description,
      collapsible: member.collapsible,
      collapsed: member.collapsed,
      onExpand: handleExpand,
      changed: member.field.changed,
      onCollapse: handleCollapse,
      schemaType: member.field.schemaType,
      inputId: member.field.id,
      path: member.field.path,
      presence: member.field.presence,
      validation: member.field.validation,
      children: renderedInput,
      inputProps
    };
  }, [member.name, member.index, member.field.level, member.field.value, member.field.schemaType, member.field.id, member.field.path, member.field.presence, member.field.validation, member.collapsible, member.collapsed, member.field.changed, handleExpand, handleCollapse, renderedInput, inputProps]);
  return /*#__PURE__*/_react.default.createElement(_FormCallbacks.FormCallbacksProvider, {
    onFieldGroupSelect: onFieldGroupSelect,
    onChange: handleChange,
    onPathOpen: onPathOpen,
    onSetFieldSetCollapsed: onSetFieldSetCollapsed,
    onSetPathCollapsed: onSetPathCollapsed,
    onPathBlur: onPathBlur,
    onPathFocus: onPathFocus
  }, (0, _react.useMemo)(() => renderField(fieldProps), [fieldProps, renderField]));
}