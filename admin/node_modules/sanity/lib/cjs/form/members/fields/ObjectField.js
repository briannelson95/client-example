"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObjectField = void 0;

var _react = _interopRequireWildcard(require("react"));

var _useDidUpdate = require("../../hooks/useDidUpdate");

var _patch = require("../../patch");

var _FormCallbacks = require("../../studio/contexts/FormCallbacks");

var _createProtoValue = require("../../utils/createProtoValue");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Responsible for creating inputProps and fieldProps to pass to ´renderInput´ and ´renderField´ for an object input
 * Note: "ObjectField" in this context means an object field of an object type (not "a field of an object")
 * @param props - Component props
 */
const ObjectField = function ObjectField(props) {
  const {
    onPathBlur,
    onPathFocus,
    onChange,
    onPathOpen,
    onSetPathCollapsed,
    onSetFieldSetCollapsed,
    onFieldGroupSelect
  } = (0, _FormCallbacks.useFormCallbacks)();
  const {
    member,
    renderField,
    renderInput,
    renderItem,
    renderPreview
  } = props;
  const focusRef = (0, _react.useRef)();
  (0, _useDidUpdate.useDidUpdate)(member.field.focused, (hadFocus, hasFocus) => {
    if (!hadFocus && hasFocus) {
      var _focusRef$current;

      (_focusRef$current = focusRef.current) === null || _focusRef$current === void 0 ? void 0 : _focusRef$current.focus();
    }
  });
  const handleBlur = (0, _react.useCallback)(() => {
    onPathBlur(member.field.path);
  }, [member.field.path, onPathBlur]);
  const handleFocus = (0, _react.useCallback)(() => {
    onPathFocus(member.field.path);
  }, [member.field.path, onPathFocus]);
  const handleFocusChildPath = (0, _react.useCallback)(path => {
    onPathFocus(member.field.path.concat(path));
  }, [member.field.path, onPathFocus]);
  const handleChange = (0, _react.useCallback)(event => {
    onChange(_patch.PatchEvent.from(event).prepend((0, _patch.setIfMissing)((0, _createProtoValue.createProtoValue)(member.field.schemaType))).prefixAll(member.name));
  }, [onChange, member.field.schemaType, member.name]);
  const handleCollapse = (0, _react.useCallback)(() => {
    onSetPathCollapsed(member.field.path, true);
  }, [onSetPathCollapsed, member.field.path]);
  const handleExpand = (0, _react.useCallback)(() => {
    onSetPathCollapsed(member.field.path, false);
  }, [onSetPathCollapsed, member.field.path]);
  const handleCollapseField = (0, _react.useCallback)(fieldName => {
    onSetPathCollapsed(member.field.path.concat(fieldName), true);
  }, [onSetPathCollapsed, member.field.path]);
  const handleExpandField = (0, _react.useCallback)(fieldName => {
    onSetPathCollapsed(member.field.path.concat(fieldName), false);
  }, [onSetPathCollapsed, member.field.path]);
  const handleOpenField = (0, _react.useCallback)(fieldName => {
    onPathOpen(member.field.path.concat(fieldName));
  }, [onPathOpen, member.field.path]);
  const handleCloseField = (0, _react.useCallback)(() => {
    onPathOpen(member.field.path);
  }, [onPathOpen, member.field.path]);
  const handleExpandFieldSet = (0, _react.useCallback)(fieldsetName => {
    onSetFieldSetCollapsed(member.field.path.concat(fieldsetName), false);
  }, [onSetFieldSetCollapsed, member.field.path]);
  const handleCollapseFieldSet = (0, _react.useCallback)(fieldsetName => {
    onSetFieldSetCollapsed(member.field.path.concat(fieldsetName), true);
  }, [onSetFieldSetCollapsed, member.field.path]);
  const handleOpen = (0, _react.useCallback)(() => {
    onPathOpen(member.field.path);
  }, [onPathOpen, member.field.path]);
  const handleClose = (0, _react.useCallback)(() => {
    onPathOpen(member.field.path.slice(0, -1));
  }, [onPathOpen, member.field.path]);
  const handleSelectFieldGroup = (0, _react.useCallback)(groupName => {
    onFieldGroupSelect(member.field.path, groupName);
  }, [onFieldGroupSelect, member.field.path]);
  const inputProps = (0, _react.useMemo)(() => {
    return {
      level: member.field.level,
      onBlur: handleBlur,
      members: member.field.members,
      value: member.field.value,
      readOnly: member.field.readOnly,
      validation: member.field.validation,
      presence: member.field.presence,
      schemaType: member.field.schemaType,
      changed: member.field.changed,
      focusRef: focusRef,
      id: member.field.id,
      onFieldGroupSelect: handleSelectFieldGroup,
      onOpenField: handleOpenField,
      onCloseField: handleCloseField,
      onCollapseField: handleCollapseField,
      onExpandField: handleExpandField,
      onExpandFieldSet: handleExpandFieldSet,
      onCollapseFieldSet: handleCollapseFieldSet,
      onFocus: handleFocus,
      onFocusPath: handleFocusChildPath,
      path: member.field.path,
      focusPath: member.field.focusPath,
      focused: member.field.focused,
      groups: member.field.groups,
      onChange: handleChange,
      renderField,
      renderInput,
      renderItem,
      renderPreview
    };
  }, [member.field.level, member.field.members, member.field.value, member.field.readOnly, member.field.validation, member.field.presence, member.field.schemaType, member.field.changed, member.field.id, member.field.path, member.field.focusPath, member.field.focused, member.field.groups, handleBlur, handleSelectFieldGroup, handleOpenField, handleCloseField, handleCollapseField, handleExpandField, handleExpandFieldSet, handleCollapseFieldSet, handleFocus, handleFocusChildPath, handleChange, renderField, renderInput, renderItem, renderPreview]);
  const renderedInput = (0, _react.useMemo)(() => renderInput(inputProps), [inputProps, renderInput]);
  const fieldProps = (0, _react.useMemo)(() => {
    return {
      name: member.name,
      index: member.index,
      level: member.field.level,
      value: member.field.value,
      validation: member.field.validation,
      presence: member.field.presence,
      title: member.field.schemaType.title,
      description: member.field.schemaType.description,
      collapsible: member.collapsible,
      collapsed: member.collapsed,
      onCollapse: handleCollapse,
      onExpand: handleExpand,
      open: member.open,
      changed: member.field.changed,
      onOpen: handleOpen,
      onClose: handleClose,
      schemaType: member.field.schemaType,
      inputId: member.field.id,
      path: member.field.path,
      children: renderedInput,
      inputProps
    };
  }, [member.name, member.index, member.field.changed, member.field.level, member.field.value, member.field.validation, member.field.presence, member.field.schemaType, member.field.id, member.field.path, member.collapsible, member.collapsed, member.open, handleCollapse, handleExpand, handleOpen, handleClose, renderedInput, inputProps]);
  return /*#__PURE__*/_react.default.createElement(_FormCallbacks.FormCallbacksProvider, {
    onFieldGroupSelect: onFieldGroupSelect,
    onChange: handleChange,
    onSetFieldSetCollapsed: onSetFieldSetCollapsed,
    onPathOpen: onPathOpen,
    onSetPathCollapsed: onSetPathCollapsed,
    onPathBlur: onPathBlur,
    onPathFocus: onPathFocus
  }, (0, _react.useMemo)(() => renderField(fieldProps), [fieldProps, renderField]));
};

exports.ObjectField = ObjectField;