"use strict";

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _react = _interopRequireDefault(require("react"));

var _renderStringInput = require("../../../test/form/renderStringInput");

var _StringInput = require("./StringInput");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

describe('StringInput', () => {
  it('renders input value', async () => {
    const {
      result
    } = await (0, _renderStringInput.renderStringInput)({
      render: inputProps => /*#__PURE__*/_react.default.createElement(_StringInput.StringInput, _extends({}, inputProps, {
        value: "test"
      })),
      fieldDefinition: {
        type: 'string',
        name: 'string',
        title: 'String'
      }
    });
    const input = result.container.querySelector('input');
    expect(input === null || input === void 0 ? void 0 : input.value).toBe('test');
  });
  it('emits onFocus', async () => {
    const {
      onFocus,
      result
    } = await (0, _renderStringInput.renderStringInput)({
      render: inputProps => /*#__PURE__*/_react.default.createElement(_StringInput.StringInput, _extends({}, inputProps, {
        value: "test"
      })),
      fieldDefinition: {
        type: 'string',
        name: 'string',
        title: 'String'
      }
    });
    const input = result.container.querySelector('input');
    input === null || input === void 0 ? void 0 : input.focus();
    expect(onFocus.mock.calls).toHaveLength(1);
  });
  it('emits `set` patch', async () => {
    const {
      onChange,
      result
    } = await (0, _renderStringInput.renderStringInput)({
      render: inputProps => /*#__PURE__*/_react.default.createElement(_StringInput.StringInput, _extends({}, inputProps, {
        value: "tes"
      })),
      fieldDefinition: {
        type: 'string',
        name: 'string',
        title: 'String'
      }
    });
    const input = result.container.querySelector('input');

    _userEvent.default.type(input, 't');

    expect(onChange.mock.calls).toEqual([[{
      type: 'set',
      path: [],
      value: 'test'
    }]]);
  });
  it('emits `unset` patch', async () => {
    const {
      onChange,
      result
    } = await (0, _renderStringInput.renderStringInput)({
      render: inputProps => /*#__PURE__*/_react.default.createElement(_StringInput.StringInput, _extends({}, inputProps, {
        value: "t"
      })),
      fieldDefinition: {
        type: 'string',
        name: 'string',
        title: 'String'
      }
    });
    const input = result.container.querySelector('input');

    _userEvent.default.click(input);

    _userEvent.default.keyboard('[Backspace]');

    expect(onChange.mock.calls).toEqual([[{
      type: 'unset',
      path: []
    }]]);
  });
});