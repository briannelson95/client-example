"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UntypedValueInput = UntypedValueInput;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _hooks = require("../../../hooks");

var _patch = require("../../patch");

var _Alert = require("../../components/Alert");

var _Details = require("../../components/Details");

var _environment = require("../../../environment");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function SetMissingTypeButton(_ref) {
  let {
    value,
    targetType,
    onChange
  } = _ref;
  const itemValue = (0, _react.useMemo)(() => ({ ...value,
    _type: targetType
  }), [targetType, value]);
  const handleClick = (0, _react.useCallback)(() => onChange(_patch.PatchEvent.from((0, _patch.setIfMissing)(targetType, ['_type'])), itemValue), [itemValue, onChange, targetType]);
  return /*#__PURE__*/_react.default.createElement(_ui.Button, {
    onClick: handleClick,
    text: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Convert to ", /*#__PURE__*/_react.default.createElement("code", null, targetType))
  });
}

function UnsetItemButton(_ref2) {
  let {
    value,
    onChange,
    validTypes
  } = _ref2;
  // Doesn't matter which `_type` we use as long as it's allowed by the array
  const itemValue = (0, _react.useMemo)(() => ({ ...value,
    _type: validTypes[0]
  }), [validTypes, value]);
  const handleClick = (0, _react.useCallback)(() => onChange(_patch.PatchEvent.from((0, _patch.unset)()), itemValue), [itemValue, onChange]);
  return /*#__PURE__*/_react.default.createElement(_ui.Button, {
    onClick: handleClick,
    tone: "critical",
    text: "Unset value"
  });
}
/**
 * When the value does not have an `_type` property,
 * but the schema has a named type
 */


function UntypedValueInput(_ref3) {
  let {
    validTypes,
    value,
    onChange
  } = _ref3;
  const schema = (0, _hooks.useSchema)();
  const isSingleValidType = validTypes.length === 1;
  const isHoistedType = schema.has(validTypes[0]);
  return /*#__PURE__*/_react.default.createElement(_Alert.Alert, {
    status: "warning",
    title: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Property value missing ", /*#__PURE__*/_react.default.createElement("code", null, "_type"))
  }, /*#__PURE__*/_react.default.createElement(_Details.Details, {
    open: _environment.isDev,
    title: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Developer info")
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    as: "p",
    muted: true,
    size: 1
  }, "Encountered an object value without a ", /*#__PURE__*/_react.default.createElement("code", null, "_type"), " property."), isSingleValidType && !isHoistedType && /*#__PURE__*/_react.default.createElement(_ui.Text, {
    as: "p",
    muted: true,
    size: 1
  }, "Either remove the ", /*#__PURE__*/_react.default.createElement("code", null, "name"), " property of the object declaration, or set", ' ', /*#__PURE__*/_react.default.createElement("code", null, "_type"), " property on items."), !isSingleValidType && /*#__PURE__*/_react.default.createElement(_ui.Text, {
    as: "p",
    muted: true,
    size: 1
  }, "The following types are valid here according to schema:"), !isSingleValidType && /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    as: "ul",
    space: 2
  }, validTypes.map(validType => /*#__PURE__*/_react.default.createElement(_ui.Text, {
    as: "li",
    key: validType,
    muted: true,
    size: 1
  }, /*#__PURE__*/_react.default.createElement("code", null, validType)))), /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    as: "h4",
    weight: "semibold",
    size: 1
  }, "Current value (", /*#__PURE__*/_react.default.createElement("code", null, "object"), "):"), /*#__PURE__*/_react.default.createElement(_ui.Card, {
    border: true,
    overflow: "auto",
    padding: 2,
    radius: 2,
    tone: "inherit"
  }, /*#__PURE__*/_react.default.createElement(_ui.Code, {
    language: "json"
  }, JSON.stringify(value, null, 2)))), /*#__PURE__*/_react.default.createElement(_ui.Grid, {
    columns: [1, 2, 2],
    gap: 1
  }, isSingleValidType && /*#__PURE__*/_react.default.createElement(SetMissingTypeButton, {
    onChange: onChange,
    targetType: validTypes[0],
    value: value
  }), /*#__PURE__*/_react.default.createElement(UnsetItemButton, {
    onChange: onChange,
    validTypes: validTypes,
    value: value
  })))));
}