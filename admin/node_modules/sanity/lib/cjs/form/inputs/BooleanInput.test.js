"use strict";

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _types = require("@sanity/types");

var _react = _interopRequireDefault(require("react"));

var _renderBooleanInput = require("../../../test/form/renderBooleanInput");

var _BooleanInput = require("./BooleanInput");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const defs = {
  booleanTest: (0, _types.defineType)({
    name: 'booleanTest',
    title: 'Switch',
    type: 'boolean'
  }),
  booleanReadOnly: (0, _types.defineType)({
    name: 'booleanReadOnly',
    title: 'Read-only',
    type: 'boolean',
    readOnly: true
  }),
  readOnlyCallback: (0, _types.defineType)({
    name: 'readOnlyCallback',
    title: 'Boolean with callback',
    type: 'boolean',
    readOnly: () => false
  }),
  readOnlyWithDocument: (0, _types.defineType)({
    name: 'readOnlyWithDocument',
    title: 'Boolean read-only with document',
    type: 'boolean',
    readOnly: context => {
      var _context$document;

      return ((_context$document = context.document) === null || _context$document === void 0 ? void 0 : _context$document.title) === 'Hello world';
    }
  }),
  booleanHidden: {
    name: 'booleanHidden',
    title: 'Hidden',
    type: 'boolean',
    hidden: true
  },
  hiddenCallback: {
    name: 'hiddenCallback',
    title: 'Boolean with callback',
    type: 'boolean',
    hidden: () => false
  },
  hiddenWithDocument: {
    name: 'hiddenWithDocument',
    title: 'Boolean hidden with document',
    type: 'boolean',
    hidden: _ref => {
      let {
        document
      } = _ref;
      return document.title === 'Hello world';
    }
  }
};
it('renders the boolean input field', async () => {
  const {
    result
  } = await (0, _renderBooleanInput.renderBooleanInput)({
    fieldDefinition: defs.booleanTest,
    render: inputProps => /*#__PURE__*/_react.default.createElement(_BooleanInput.BooleanInput, inputProps)
  });
  const input = result.container.querySelector('input[id="booleanTest"]');
  expect(input).toBeDefined();
  expect(input).toHaveAttribute('type', 'checkbox');
  expect(input).toBePartiallyChecked();
});
describe('Mouse accessibility', () => {
  it('emits onFocus when clicked', async () => {
    const {
      onFocus,
      result
    } = await (0, _renderBooleanInput.renderBooleanInput)({
      fieldDefinition: defs.booleanTest,
      render: inputProps => /*#__PURE__*/_react.default.createElement(_BooleanInput.BooleanInput, inputProps)
    });
    const input = result.container.querySelector('input[id="booleanTest"]');

    _userEvent.default.click(input);

    expect(onFocus).toBeCalled();
  });
  it('emits onChange when clicked', async () => {
    const {
      onChange,
      result
    } = await (0, _renderBooleanInput.renderBooleanInput)({
      fieldDefinition: defs.booleanTest,
      render: inputProps => /*#__PURE__*/_react.default.createElement(_BooleanInput.BooleanInput, inputProps)
    });
    const input = result.container.querySelector('input[id="booleanTest"]');

    _userEvent.default.click(input);

    expect(onChange).toBeCalled();
  });
});
describe('Keyboard accessibility', () => {
  it('emits onFocus when tabbing to input', async () => {
    const {
      onFocus,
      result
    } = await (0, _renderBooleanInput.renderBooleanInput)({
      fieldDefinition: defs.booleanTest,
      render: inputProps => /*#__PURE__*/_react.default.createElement(_BooleanInput.BooleanInput, inputProps)
    });
    const input = result.container.querySelector('input[id="booleanTest"]');

    _userEvent.default.tab({
      focusTrap: result.container
    });

    expect(input).toHaveFocus();
    expect(onFocus).toBeCalled();
  });
  it('emits onChange when pressing enter', async () => {
    const {
      onChange,
      result
    } = await (0, _renderBooleanInput.renderBooleanInput)({
      fieldDefinition: defs.booleanTest,
      render: inputProps => /*#__PURE__*/_react.default.createElement(_BooleanInput.BooleanInput, inputProps)
    });

    _userEvent.default.tab({
      focusTrap: result.container
    });

    _userEvent.default.keyboard('{space}');

    expect(onChange).toBeCalled();
  });
  it('emits onBlur when navigating away from field', async () => {
    const {
      onBlur,
      result
    } = await (0, _renderBooleanInput.renderBooleanInput)({
      fieldDefinition: defs.booleanTest,
      render: inputProps => /*#__PURE__*/_react.default.createElement(_BooleanInput.BooleanInput, inputProps)
    });
    const input = result.container.querySelector('input[id="booleanTest"]');

    _userEvent.default.tab({
      focusTrap: result.container
    });

    _userEvent.default.tab();

    expect(input).not.toHaveFocus();
    expect(onBlur).toBeCalled();
  });
});
describe('Layout options', () => {
  it('renders a switch (default)', async () => {
    const {
      result
    } = await (0, _renderBooleanInput.renderBooleanInput)({
      fieldDefinition: defs.booleanTest,
      render: inputProps => /*#__PURE__*/_react.default.createElement(_BooleanInput.BooleanInput, inputProps)
    });
    const input = result.container.querySelector('input[id="booleanTest"][data-ui="Switch"]');
    expect(input).toBeDefined();
  });
  it('renders a checkbox', async () => {
    const {
      result
    } = await (0, _renderBooleanInput.renderBooleanInput)({
      fieldDefinition: defs.booleanTest,
      render: inputProps => /*#__PURE__*/_react.default.createElement(_BooleanInput.BooleanInput, inputProps)
    });
    const input = result.container.querySelector('input[id="booleanTest"][data-ui="Checkbox"]');
    expect(input).toBeDefined();
  });
});
describe('readOnly property', () => {
  it('makes field read-only', async () => {
    const {
      onChange,
      result
    } = await (0, _renderBooleanInput.renderBooleanInput)({
      fieldDefinition: defs.booleanReadOnly,
      render: inputProps => /*#__PURE__*/_react.default.createElement(_BooleanInput.BooleanInput, _extends({}, inputProps, {
        readOnly: true
      }))
    });
    const input = result.container.querySelector('input[id="booleanReadOnly"]');
    expect(input).toBeDisabled(); // Mouse event

    _userEvent.default.click(input); // expect(input).toHaveFocus()


    expect(onChange).not.toBeCalled(); // Keyboard event

    _userEvent.default.tab({
      focusTrap: result.container
    });

    expect(input).not.toHaveFocus();
  });
  it('does not make field read-only with callback', async () => {
    const {
      onChange,
      result
    } = await (0, _renderBooleanInput.renderBooleanInput)({
      fieldDefinition: defs.readOnlyCallback,
      render: inputProps => /*#__PURE__*/_react.default.createElement(_BooleanInput.BooleanInput, inputProps)
    });
    const input = result.container.querySelector('input[id="readOnlyCallback"]');
    expect(input).not.toBeDisabled(); // Mouse event

    _userEvent.default.click(input);

    expect(onChange).toBeCalled(); // Keyboard event

    _userEvent.default.tab({
      shift: true
    });

    _userEvent.default.tab({
      focusTrap: result.container
    });

    _userEvent.default.keyboard('{space}');

    expect(onChange).toBeCalled();
  });
  it.skip('makes field read-only based on value in document', async () => {
    const {
      onChange,
      result
    } = await (0, _renderBooleanInput.renderBooleanInput)({
      fieldDefinition: defs.readOnlyWithDocument,
      props: {
        documentValue: {
          title: 'Hello, world'
        }
      },
      render: inputProps => /*#__PURE__*/_react.default.createElement(_BooleanInput.BooleanInput, inputProps)
    });
    const input = result.container.querySelector('input[id="readOnlyWithDocument"]');
    expect(input).toBeDisabled(); // Mouse event

    _userEvent.default.click(input);

    expect(onChange).not.toBeCalled(); // Keyboard event

    _userEvent.default.tab({
      focusTrap: result.container
    });

    expect(input).not.toHaveFocus();
  });
});