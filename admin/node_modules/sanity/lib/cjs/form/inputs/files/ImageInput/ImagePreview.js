"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImagePreview = ImagePreview;

var _react = _interopRequireWildcard(require("react"));

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _ImagePreview = require("./ImagePreview.styled");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
  Used for setting the initial image height - specifically for images
  that are small and so can take less space in the document
*/
const getImageSize = src => {
  const imageUrlParams = new URLSearchParams(src.split('?')[1]);
  const rect = imageUrlParams.get('rect');

  if (rect) {
    return [rect.split(',')[2], rect.split(',')[3]].map(Number);
  }

  return src.split('-')[1].split('.')[0].split('x').map(Number);
};

function ImagePreview(props) {
  const {
    drag,
    readOnly,
    isRejected,
    src,
    ...rest
  } = props;
  const [isLoaded, setLoaded] = (0, _react.useState)(false);
  const [rootElement, setRootElement] = (0, _react.useState)(null);
  const rootRect = (0, _ui.useElementRect)(rootElement);
  const rootWidth = (rootRect === null || rootRect === void 0 ? void 0 : rootRect.width) || 0;
  const acceptTone = isRejected || readOnly ? 'critical' : 'primary';
  const tone = drag ? acceptTone : 'default';
  const maxHeightToPx = _ImagePreview.MAX_DEFAULT_HEIGHT * document.documentElement.clientHeight / 100; // convert from vh to px, max height of the input

  const [imageWidth, imageHeight] = getImageSize(src);
  const imageRatio = imageWidth / imageHeight; // is the image wider than root? if so calculate the resized height

  const renderedImageHeight = imageWidth > rootWidth ? rootWidth / imageRatio : imageHeight;
  /*
    if the rendered image is smaller than the max height then it doesn't require a height set
    otherwise, set the max height (to prevent a large image in the document)
  */

  const rootHeight = renderedImageHeight < maxHeightToPx ? null : "".concat(_ImagePreview.MAX_DEFAULT_HEIGHT, "vh");
  (0, _react.useEffect)(() => {
    /* set for when the src is being switched when the image input already had a image src
    - meaning it already had an asset */
    setLoaded(false);
  }, [src]);
  const onLoadChange = (0, _react.useCallback)(() => {
    setLoaded(true);
  }, []);
  return /*#__PURE__*/_react.default.createElement(_ImagePreview.RatioBox, _extends({}, rest, {
    ref: setRootElement,
    style: {
      height: rootHeight
    },
    tone: "transparent"
  }), /*#__PURE__*/_react.default.createElement(_ui.Card, {
    "data-container": true,
    tone: "inherit"
  }, !isLoaded && /*#__PURE__*/_react.default.createElement(OverlayComponent, {
    cardTone: "transparent",
    drag: true,
    content: /*#__PURE__*/_react.default.createElement(_ImagePreview.SpinnerWrapper, null)
  }), /*#__PURE__*/_react.default.createElement("img", {
    src: src,
    "data-testid": "hotspot-image-input",
    alt: props.alt,
    onLoad: onLoadChange,
    referrerPolicy: "strict-origin-when-cross-origin"
  })), drag && /*#__PURE__*/_react.default.createElement(OverlayComponent, {
    cardTone: tone,
    drag: drag,
    content: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ui.Box, {
      marginBottom: 3
    }, /*#__PURE__*/_react.default.createElement(_ui.Heading, null, /*#__PURE__*/_react.default.createElement(HoverIcon, {
      isRejected: isRejected,
      readOnly: readOnly
    }))), /*#__PURE__*/_react.default.createElement(HoverText, {
      isRejected: isRejected,
      readOnly: readOnly
    }))
  }));
}

function HoverIcon(_ref) {
  let {
    isRejected,
    readOnly
  } = _ref;

  if (isRejected) {
    return /*#__PURE__*/_react.default.createElement(_icons.AccessDeniedIcon, null);
  }

  if (readOnly) {
    return /*#__PURE__*/_react.default.createElement(_icons.ReadOnlyIcon, null);
  }

  return /*#__PURE__*/_react.default.createElement(_icons.ImageIcon, null);
}

function HoverText(_ref2) {
  let {
    isRejected,
    readOnly
  } = _ref2;
  let message = 'Drop image to upload';

  if (isRejected) {
    message = 'Cannot upload this file here';
  }

  if (readOnly) {
    message = 'This field is read only';
  }

  return /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 1
  }, message);
}

function OverlayComponent(_ref3) {
  let {
    cardTone,
    drag,
    content
  } = _ref3;
  return /*#__PURE__*/_react.default.createElement(_ImagePreview.Overlay, {
    justify: "flex-end",
    padding: 3,
    tone: cardTone,
    drag: drag
  }, /*#__PURE__*/_react.default.createElement(_ImagePreview.FlexOverlay, {
    direction: "column",
    align: "center",
    justify: "center"
  }, content));
}