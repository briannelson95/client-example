"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImageToolInput = ImageToolInput;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _changeIndicators = require("../../../../components/changeIndicators");

var _formField = require("../../../components/formField");

var _patch = require("../../../patch");

var _Checkerboard = require("../../../components/Checkerboard");

var _withFocusRing = require("../../../components/withFocusRing");

var _RatioBox = require("../common/RatioBox");

var _empty = require("../../../utils/empty");

var _useDidUpdate = require("../../../hooks/useDidUpdate");

var _imagetool = require("./imagetool");

var _useLoadImage = require("./useLoadImage");

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const HOTSPOT_PATH = ['hotspot'];
const PREVIEW_ASPECT_RATIOS = [['3:4', 3 / 4], ['Square', 1 / 1], ['16:9', 16 / 9], ['Panorama', 4 / 1]];
const DEFAULT_VALUE = {
  crop: _imagetool.DEFAULT_CROP,
  hotspot: _imagetool.DEFAULT_HOTSPOT
};
const CheckerboardWithFocusRing = (0, _withFocusRing.withFocusRing)(_Checkerboard.Checkerboard);

const Placeholder = _styledComponents.default.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  min-height: 6em;\n"])));

function LoadStatus(props) {
  return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    justify: "center",
    padding: 4,
    style: {
      overflowWrap: 'break-word'
    }
  }, props.children);
}

function ImageToolInput(props) {
  const {
    imageUrl,
    value,
    changed,
    level,
    path,
    focusPath = _empty.EMPTY_ARRAY,
    presence,
    onChange,
    schemaType,
    onFocusPath,
    readOnly,
    focusRef
  } = props;
  const [localValue, setLocalValue] = (0, _react.useState)(value || DEFAULT_VALUE);
  const {
    image,
    isLoading: isImageLoading,
    error: imageLoadError
  } = (0, _useLoadImage.useLoadImage)(imageUrl);
  const forwardedRef = (0, _ui.useForwardedRef)(focusRef);
  const handleFocus = (0, _react.useCallback)(() => {
    onFocusPath(HOTSPOT_PATH);
  }, [onFocusPath]);
  (0, _react.useEffect)(() => {
    setLocalValue(value || DEFAULT_VALUE);
  }, [value]);
  const hasFocus = focusPath[0] === 'hotspot';
  (0, _useDidUpdate.useDidUpdate)(hasFocus, hadFocus => {
    if (!hadFocus && hasFocus) {
      var _forwardedRef$current;

      (_forwardedRef$current = forwardedRef.current) === null || _forwardedRef$current === void 0 ? void 0 : _forwardedRef$current.focus();
    }
  });
  const handleChangeEnd = (0, _react.useCallback)(finalValue => {
    if (readOnly) {
      return;
    } // For backwards compatibility, where hotspot/crop might not have a named type yet


    const cropField = schemaType.fields.find(field => field.name === 'crop' && field.type.name !== 'object');
    const hotspotField = schemaType.fields.find(field => field.type.name !== 'object' && field.name === 'hotspot'); // Note: when either hotspot or crop change we fill in the default if the other is missing
    // (we can't have one without the other)

    const crop = cropField ? {
      _type: cropField.type.name,
      ...(finalValue.crop || _imagetool.DEFAULT_CROP)
    } : finalValue.crop;
    const hotspot = hotspotField ? {
      _type: hotspotField.type.name,
      ...(finalValue.hotspot || _imagetool.DEFAULT_HOTSPOT)
    } : finalValue.hotspot;
    onChange([(0, _patch.set)(crop, ['crop']), (0, _patch.set)(hotspot, ['hotspot'])]);
  }, [onChange, readOnly, schemaType.fields]);
  return /*#__PURE__*/_react.default.createElement(_formField.FormField, {
    title: "Hotspot & crop",
    level: level,
    description: "Adjust the rectangle to crop image. Adjust the circle to specify the area that should always be visible.",
    __unstable_presence: presence
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(CheckerboardWithFocusRing, {
    tabIndex: 0,
    ref: forwardedRef,
    onFocus: handleFocus
  }, /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicator, {
    path: path.concat(HOTSPOT_PATH),
    hasFocus: focusPath[0] === 'hotspot',
    isChanged: changed
  }, /*#__PURE__*/_react.default.createElement(_RatioBox.RatioBox, {
    ratio: 3 / 2
  }, (isImageLoading || imageLoadError) && /*#__PURE__*/_react.default.createElement(LoadStatus, null, imageLoadError ? /*#__PURE__*/_react.default.createElement(_ui.Card, {
    padding: 4,
    radius: 2,
    tone: "critical",
    border: true
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "Error: ", imageLoadError.message)) : /*#__PURE__*/_react.default.createElement(_ui.Text, {
    muted: true
  }, "Loading image\u2026 ")), !isImageLoading && image && /*#__PURE__*/_react.default.createElement(_ui.Box, {
    margin: 1
  }, /*#__PURE__*/_react.default.createElement(_imagetool.ImageTool, {
    value: localValue,
    src: image.src,
    readOnly: Boolean(readOnly),
    onChangeEnd: handleChangeEnd,
    onChange: setLocalValue
  }))))), /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginTop: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Grid, {
    columns: PREVIEW_ASPECT_RATIOS.length,
    gap: 1
  }, PREVIEW_ASPECT_RATIOS.map(_ref => {
    let [title, ratio] = _ref;
    return /*#__PURE__*/_react.default.createElement("div", {
      key: ratio
    }, /*#__PURE__*/_react.default.createElement(_ui.Heading, {
      as: "h4",
      size: 0
    }, title), /*#__PURE__*/_react.default.createElement(_ui.Box, {
      marginTop: 2
    }, /*#__PURE__*/_react.default.createElement(_RatioBox.RatioBox, {
      ratio: ratio
    }, /*#__PURE__*/_react.default.createElement(_Checkerboard.Checkerboard, null, !isImageLoading && image ? /*#__PURE__*/_react.default.createElement(_imagetool.HotspotImage, {
      aspectRatio: ratio,
      src: image.src,
      srcAspectRatio: image.width / image.height,
      hotspot: localValue.hotspot || _imagetool.DEFAULT_HOTSPOT,
      crop: localValue.crop || _imagetool.DEFAULT_CROP
    }) : /*#__PURE__*/_react.default.createElement(Placeholder, null)))));
  })))));
}