"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleSelectAssetFromSource = handleSelectAssetFromSource;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _patch = require("../../../patch");

var _image = require("../ImageInput/utils/image");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function handleSelectAssetFromSource(_ref) {
  let {
    assetFromSource,
    onChange,
    type,
    resolveUploader,
    uploadWith,
    isImage
  } = _ref;

  // const {onChange, type, resolveUploader} = this.props
  if (!assetFromSource) {
    throw new Error('No asset given');
  }

  if (!Array.isArray(assetFromSource) || assetFromSource.length === 0) {
    throw new Error('Returned value must be an array with at least one item (asset)');
  }

  const firstAsset = assetFromSource[0];
  const originalFilename = (0, _get2.default)(firstAsset, 'assetDocumentProps.originalFilename');
  const label = (0, _get2.default)(firstAsset, 'assetDocumentProps.label');
  const title = (0, _get2.default)(firstAsset, 'assetDocumentProps.title');
  const description = (0, _get2.default)(firstAsset, 'assetDocumentProps.description');
  const creditLine = (0, _get2.default)(firstAsset, 'assetDocumentProps.creditLine');
  const source = (0, _get2.default)(firstAsset, 'assetDocumentProps.source');
  const imagePatches = isImage ? [(0, _patch.unset)(['hotspot']), (0, _patch.unset)(['crop'])] : [];

  switch (firstAsset.kind) {
    case 'assetDocumentId':
      onChange([(0, _patch.setIfMissing)({
        _type: type.name
      }), ...imagePatches, (0, _patch.set)({
        _type: 'reference',
        _ref: firstAsset.value
      }, ['asset'])]);
      break;

    case 'file':
      {
        const uploader = resolveUploader(type, firstAsset.value);

        if (uploader) {
          uploadWith(uploader, firstAsset.value, {
            label,
            title,
            description,
            creditLine,
            source
          });
        }

        break;
      }

    case 'base64':
      (0, _image.base64ToFile)(firstAsset.value, originalFilename).then(file => {
        const uploader = resolveUploader(type, file);

        if (uploader) {
          uploadWith(uploader, file, {
            label,
            title,
            description,
            creditLine,
            source
          });
        }
      });
      break;

    case 'url':
      (0, _image.urlToFile)(firstAsset.value, originalFilename).then(file => {
        const uploader = resolveUploader(type, file);

        if (uploader) {
          uploadWith(uploader, file, {
            label,
            title,
            description,
            creditLine,
            source
          });
        }
      });
      break;

    default:
      {
        throw new Error('Invalid value returned from asset source plugin');
      }
  }
}