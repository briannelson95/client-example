"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Resize = void 0;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Resize extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_canvas", null);
  }

  componentWillUnmount() {
    if (this._canvas) {
      document.body.removeChild(this._canvas);
    }
  }

  getCanvas() {
    if (!this._canvas) {
      this._canvas = document.createElement('canvas');
      document.body.appendChild(this._canvas);
      this._canvas.style.display = 'none';
    }

    return this._canvas;
  }

  resize(image, maxHeight, maxWidth) {
    const canvas = this.getCanvas();
    const ratio = image.width / image.height;
    const width = Math.min(image.width, maxWidth);
    const height = Math.min(image.height, maxHeight);
    const landscape = image.width > image.height;
    const targetWidth = landscape ? width : height * ratio;
    const targetHeight = landscape ? width / ratio : height;
    canvas.width = targetWidth;
    canvas.height = targetHeight;
    const ctx = canvas.getContext('2d');

    if (ctx) {
      ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, targetWidth, targetHeight);
    }

    return canvas;
  }

  render() {
    const {
      image,
      maxHeight,
      maxWidth,
      children
    } = this.props;
    return children(this.resize(image, maxHeight, maxWidth));
  }

}

exports.Resize = Resize;