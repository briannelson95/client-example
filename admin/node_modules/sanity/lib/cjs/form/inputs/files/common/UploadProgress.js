"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UploadProgress = UploadProgress;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _progress = require("../../../../components/progress");

var _UploadProgress = require("./UploadProgress.styled");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// If it's more than this amount of milliseconds since last time upload state was reported,
// the upload will be marked as stale/interrupted.
const STALE_UPLOAD_MS = 1000 * 60 * 2; // 2 minutes

const elapsedMs = date => new Date().getTime() - new Date(date).getTime();

function UploadProgress(_ref) {
  let {
    uploadState,
    onCancel,
    onStale,
    height
  } = _ref;
  const filename = uploadState.file.name;
  (0, _react.useEffect)(() => {
    if (elapsedMs(uploadState.updated) > STALE_UPLOAD_MS) {
      onStale === null || onStale === void 0 ? void 0 : onStale();
    }
  }, [uploadState.updated, onStale]);
  return /*#__PURE__*/_react.default.createElement(_UploadProgress.CardWrapper, {
    tone: "primary",
    padding: 4,
    border: true,
    style: {
      height: "".concat(height, "px")
    }
  }, /*#__PURE__*/_react.default.createElement(_UploadProgress.FlexWrapper, {
    align: "center",
    justify: "space-between",
    height: "fill",
    direction: "row",
    gap: 2
  }, /*#__PURE__*/_react.default.createElement(_UploadProgress.LeftSection, null, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    justify: "center",
    gap: [3, 3, 2, 2],
    direction: ['column', 'column', 'row']
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Inline, {
    space: 2
  }, "Uploading", /*#__PURE__*/_react.default.createElement(_UploadProgress.CodeWrapper, {
    size: 1
  }, filename ? filename : '...')))), /*#__PURE__*/_react.default.createElement(_ui.Card, {
    marginTop: 3,
    radius: 5,
    shadow: 1
  }, /*#__PURE__*/_react.default.createElement(_progress.LinearProgress, {
    value: uploadState.progress
  }))), onCancel ? /*#__PURE__*/_react.default.createElement(_ui.Button, {
    fontSize: 2,
    text: "Cancel upload",
    mode: "ghost",
    tone: "critical",
    onClick: onCancel
  }) : null));
}