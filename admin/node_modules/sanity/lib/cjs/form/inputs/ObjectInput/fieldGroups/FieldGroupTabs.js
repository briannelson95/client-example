"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FieldGroupTabs = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _GroupTab = require("./GroupTab");

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const Root = (0, _styledComponents.default)(_ui.ElementQuery)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  /* Hide on small screens */\n  &[data-eq-max~='0'] [data-ui='TabList'] {\n    display: none;\n  }\n\n  /* Hide on medium to large screens */\n  [data-ui='Select'] {\n    display: none;\n  }\n\n  /* Show on small screens */\n  &[data-eq-max~='0'] [data-ui='Select'] {\n    display: block;\n  }\n"])));
/* For medium to large screens, use TabList and Tab from Sanity UI  */

const GroupTabs = _ref => {
  let {
    inputId,
    groups,
    onClick,
    shouldAutoFocus = true,
    disabled
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(_ui.TabList, {
    space: 2,
    "data-testid": "field-group-tabs"
  }, groups.map(group => {
    return /*#__PURE__*/_react.default.createElement(_GroupTab.GroupTab, {
      "aria-controls": "".concat(inputId, "-field-group-fields"),
      autoFocus: shouldAutoFocus && group.selected,
      disabled: disabled,
      icon: group === null || group === void 0 ? void 0 : group.icon,
      key: "".concat(inputId, "-").concat(group.name, "-tab"),
      name: group.name,
      onClick: onClick,
      selected: Boolean(group.selected),
      title: group.title || group.name
    });
  }).filter(Boolean));
};
/* For small screens, use Select from Sanity UI  */


const GroupSelect = _ref2 => {
  var _groups$find;

  let {
    groups,
    inputId,
    onSelect,
    shouldAutoFocus = true,
    disabled
  } = _ref2;
  const handleSelect = (0, _react.useCallback)(event => {
    onSelect(event.currentTarget.value);
  }, [onSelect]);
  return /*#__PURE__*/_react.default.createElement(_ui.Select, {
    fontSize: 2,
    onChange: handleSelect,
    muted: true,
    "data-testid": "field-group-select",
    "aria-label": "Field groups",
    autoFocus: shouldAutoFocus,
    disabled: disabled,
    value: (_groups$find = groups.find(g => g.selected)) === null || _groups$find === void 0 ? void 0 : _groups$find.name
  }, groups.map(group => {
    // Separate hidden in order to resolve it to a boolean type
    return /*#__PURE__*/_react.default.createElement(_GroupTab.GroupOption, {
      key: "".concat(inputId, "-").concat(group.name, "-tab"),
      "aria-controls": "".concat(inputId, "-field-group-fields"),
      selected: Boolean(group.selected),
      disabled: group.disabled,
      name: group.name,
      title: group.title || group.name
    });
  }));
};

const FieldGroupTabs = /*#__PURE__*/_react.default.memo(function FieldGroupTabs(_ref3) {
  let {
    onClick,
    disabled = false,
    ...props
  } = _ref3;
  const handleClick = (0, _react.useCallback)(groupName => {
    onClick === null || onClick === void 0 ? void 0 : onClick(groupName);
  }, [onClick]);
  return /*#__PURE__*/_react.default.createElement(Root, {
    "data-testid": "field-group-root"
  }, /*#__PURE__*/_react.default.createElement(GroupTabs, _extends({}, props, {
    disabled: disabled,
    onClick: handleClick
  })), /*#__PURE__*/_react.default.createElement(GroupSelect, _extends({}, props, {
    disabled: disabled,
    onSelect: handleClick
  })));
});

exports.FieldGroupTabs = FieldGroupTabs;