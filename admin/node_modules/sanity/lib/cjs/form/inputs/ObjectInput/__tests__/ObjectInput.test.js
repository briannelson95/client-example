"use strict";

var _types = require("@sanity/types");

var _react = _interopRequireDefault(require("react"));

var _ObjectInput = require("../ObjectInput");

var _schema = require("../../../../schema");

var _FormCallbacks = require("../../../studio/contexts/FormCallbacks");

var _testUtils = require("./test-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const defs = {
  basic: (0, _types.defineType)({
    title: 'very basic object',
    name: 'basic',
    type: 'object',
    fields: [{
      name: 'first',
      type: 'string'
    }]
  }),
  collapsibleTest: (0, _types.defineType)({
    title: 'Collapsible test',
    name: 'collapsibleTest',
    type: 'object',
    fields: [{
      name: 'collapsibleAndCollapsedByDefault',
      type: 'object',
      options: {
        collapsible: true,
        collapsed: true
      },
      fields: [{
        name: 'field1',
        type: 'string'
      }]
    }]
  }),
  focusTest: (0, _types.defineType)({
    title: 'Focus test',
    name: 'focusTest',
    type: 'object',
    fields: [{
      name: 'title',
      type: 'string'
    }, {
      name: 'focusTest',
      type: 'object',
      fields: [{
        name: 'field1',
        type: 'string'
      }]
    }]
  }),
  hiddenTest: (0, _types.defineType)({
    title: 'Hidden test',
    name: 'hiddenTest',
    type: 'object',
    fields: [{
      name: 'thisIsVisible',
      type: 'string'
    }, {
      name: 'thisIsHidden',
      type: 'string',
      hidden: true
    }, {
      name: 'thisMayBeVisible',
      type: 'string'
    }]
  })
};

function getTestSchema(name) {
  return (0, _schema.createSchema)({
    name: 'test',
    types: [defs[name]]
  }).get(name);
} // eslint-disable-next-line @typescript-eslint/no-empty-function


function noop() {}

function returnNull() {
  return null;
}

const noopProps = {
  groups: [],
  onChange: noop,
  onCollapseField: noop,
  onExpandField: noop,
  onCollapseFieldSet: noop,
  onExpandFieldSet: noop,
  onFieldGroupSelect: noop,
  onFocusPath: noop,
  onOpenField: noop,
  onCloseField: noop,
  renderInput: returnNull,
  renderField: returnNull,
  renderItem: returnNull,
  renderPreview: returnNull,
  members: [],
  focusPath: [],
  id: 'test',
  level: 0,
  path: [],
  presence: [],
  validation: [],
  value: {},
  changed: false,
  focusRef: {
    current: undefined
  },
  onFocus: noop,
  onBlur: noop
};
describe('basic examples', () => {
  it('renders as empty if given no members', () => {
    const {
      container
    } = (0, _testUtils.render)( /*#__PURE__*/_react.default.createElement(_ObjectInput.ObjectInput, _extends({}, noopProps, {
      schemaType: getTestSchema('basic')
    })));
    expect(container).toBeEmptyDOMElement();
  });
  it('calls renderField and renderInput for each member', () => {
    const schemaType = getTestSchema('collapsibleTest');
    const renderField = jest.fn().mockImplementationOnce(props => /*#__PURE__*/_react.default.createElement("div", {
      "data-testid": "field-".concat(props.inputId)
    }, props.children));
    const renderInput = jest.fn().mockImplementationOnce(props => /*#__PURE__*/_react.default.createElement("div", {
      "data-testid": "input-".concat(props.id)
    }));
    const {
      queryByTestId
    } = (0, _testUtils.render)( /*#__PURE__*/_react.default.createElement(_FormCallbacks.FormCallbacksProvider, {
      onFieldGroupSelect: noop,
      onChange: noop,
      onSetFieldSetCollapsed: noop,
      onSetPathCollapsed: noop,
      onPathFocus: noop,
      onPathBlur: noop,
      onPathOpen: noop
    }, /*#__PURE__*/_react.default.createElement(_ObjectInput.ObjectInput, _extends({}, noopProps, {
      members: [{
        kind: 'field',
        collapsed: true,
        name: 'first',
        open: false,
        collapsible: true,
        key: 'first-field',
        index: 0,
        field: {
          schemaType,
          validation: [],
          level: 0,
          path: ['first'],
          presence: [],
          value: 'something',
          changed: false,
          focused: false,
          id: 'first-field',
          readOnly: false
        }
      }],
      schemaType: schemaType,
      renderInput: renderInput,
      renderField: renderField
    }))));
    expect(queryByTestId('field-first-field')).toBeInTheDocument();
    expect(queryByTestId('input-first-field')).toBeInTheDocument();
    expect(renderField.mock.calls.length).toBe(1);
    expect(renderInput.mock.calls.length).toBe(1);
  });
});