"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GroupTab = exports.GroupOption = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const GroupTab = /*#__PURE__*/(0, _react.forwardRef)(function GroupTab(props, ref) {
  // Separate props for resolving conditional hidden groups
  const {
    onClick
  } = props; // Here goes the content of our component

  const handleClick = _react.default.useCallback(() => {
    onClick === null || onClick === void 0 ? void 0 : onClick(props.name);
  }, [props.name, onClick]);

  return /*#__PURE__*/_react.default.createElement(_ui.Tab, _extends({
    "data-testid": "group-tab-".concat(name),
    size: 1,
    id: "".concat(props.name, "-tab"),
    label: props.title,
    ref: ref
  }, props, {
    onClick: handleClick
  }));
});
exports.GroupTab = GroupTab;

const GroupOption = props => {
  const {
    name,
    title,
    ...rest
  } = props;
  const {
    selected
  } = props;
  return /*#__PURE__*/_react.default.createElement("option", {
    title: title,
    value: name,
    id: "".concat(name, "-tab"),
    "aria-controls": rest['aria-controls'],
    "data-testid": "group-select-".concat(name),
    "aria-selected": selected ? 'true' : 'false'
  }, title || name);
};

exports.GroupOption = GroupOption;