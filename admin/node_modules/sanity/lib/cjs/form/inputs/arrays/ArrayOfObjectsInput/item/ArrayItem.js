"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArrayItem = void 0;

var _types = require("@sanity/types");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _changeIndicators = require("../../../../../components/changeIndicators");

var _useScrollIntoViewOnFocusWithin = require("../../../../hooks/useScrollIntoViewOnFocusWithin");

var _useDidUpdate = require("../../../../hooks/useDidUpdate");

var _Presence = require("../../../../studio/contexts/Presence");

var _RowItem = require("./RowItem");

var _CellItem = require("./CellItem");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint-disable camelcase */
// This renders the item / preview of unexpanded array items
const ArrayItem = /*#__PURE__*/(0, _react.memo)(function ArrayItem(props) {
  const {
    changed,
    value,
    insertableTypes,
    schemaType,
    index,
    open,
    path,
    onClick,
    layout,
    readOnly,
    presence = [],
    validation = [],
    focused,
    onRemove,
    onInsert,
    onFocus,
    children,
    renderPreview
  } = props;
  const innerElementRef = (0, _react.useRef)(null); // this is here to make sure the item is visible if it's being edited behind a modal

  (0, _useScrollIntoViewOnFocusWithin.useScrollIntoViewOnFocusWithin)(innerElementRef, open);
  (0, _useDidUpdate.useDidUpdate)(focused, (hadFocus, hasFocus) => {
    if (!hadFocus && hasFocus && innerElementRef.current) {
      var _innerElementRef$curr;

      // Note: if editing an inline item, focus is handled by the item input itself and no ref is being set
      (_innerElementRef$curr = innerElementRef.current) === null || _innerElementRef$curr === void 0 ? void 0 : _innerElementRef$curr.focus();
    }
  });
  const childPresence = (0, _Presence.useChildPresence)(path);
  const handleRemove = (0, _react.useCallback)(() => onRemove(value), [onRemove, value]);
  const options = schemaType.options || {};
  const isSortable = !readOnly && options.sortable !== false;
  const isGrid = layout === 'grid';
  const ItemComponent = isGrid ? _CellItem.CellItem : _RowItem.RowItem;
  const isReference = schemaType && (0, _types.isReferenceSchemaType)(schemaType);

  const item = /*#__PURE__*/_react.default.createElement(ItemComponent, {
    "aria-selected": open,
    index: index,
    onFocus: onFocus,
    value: value,
    readOnly: readOnly,
    type: schemaType,
    insertableTypes: insertableTypes,
    presence: open ? presence : childPresence,
    validation: validation,
    isSortable: isSortable,
    onInsert: onInsert,
    onClick: onClick,
    onRemove: handleRemove,
    ref: innerElementRef,
    renderPreview: renderPreview
  });

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicator, {
    path: path,
    disabled: open && !isReference,
    isChanged: changed,
    hasFocus: !!focused
  }, isGrid ? // grid should be rendered without a margin
  item : /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginX: 1
  }, item)), children);
});
exports.ArrayItem = ArrayItem;