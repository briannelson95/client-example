"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ItemRow = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _icons = require("@sanity/icons");

var _autoId = require("@reach/auto-id");

var _formField = require("../../../components/formField");

var _DragHandle = require("../common/DragHandle");

var _ItemWithMissingType = require("../ArrayOfObjectsInput/item/ItemWithMissingType");

var _InsertMenu = require("../ArrayOfObjectsInput/InsertMenu");

var _getEmptyValue = require("./getEmptyValue");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const dragHandle = /*#__PURE__*/_react.default.createElement(_DragHandle.DragHandle, {
  paddingX: 1,
  paddingY: 3
});

const ItemRow = /*#__PURE__*/_react.default.forwardRef(function ItemRow(props, ref) {
  const {
    isSortable,
    value,
    index,
    onEscapeKey,
    onEnterKey,
    insertableTypes,
    onInsert,
    onRemove,
    readOnly,
    onFocus,
    validation,
    schemaType
  } = props;
  const hasError = validation.filter(item => item.level === 'error').length > 0;
  const hasWarning = validation.filter(item => item.level === 'warning').length > 0;
  const showValidationStatus = !readOnly && validation.length > 0 && !(schemaType !== null && schemaType !== void 0 && schemaType.title);
  const handleRemove = (0, _react.useCallback)(() => {
    onRemove();
  }, [onRemove]);
  const handleInsert = (0, _react.useCallback)((pos, insertType) => {
    onInsert({
      position: pos,
      items: [(0, _getEmptyValue.getEmptyValue)(insertType)]
    });
  }, [onInsert]);
  const handleDuplicate = (0, _react.useCallback)(() => {
    if (value) onInsert({
      position: 'after',
      items: [value]
    });
  }, [onInsert, value]);
  const handleKeyPress = (0, _react.useCallback)(event => {
    if (event.key === 'Enter') {
      onEnterKey(index);
    }
  }, [index, onEnterKey]);
  const handleKeyUp = (0, _react.useCallback)(event => {
    if (event.shiftKey && event.key === 'Backspace' && value === '') {
      onRemove();
    }

    if (event.key === 'Escape') {
      onEscapeKey(index);
    }
  }, [index, onEscapeKey, onRemove, value]);
  const tone = (0, _react.useMemo)(() => {
    if (hasError) {
      return 'critical';
    }

    if (hasWarning) {
      return 'caution';
    }

    return undefined;
  }, [hasError, hasWarning]);
  const id = (0, _autoId.useId)();
  return /*#__PURE__*/_react.default.createElement(_ui.Card, {
    tone: tone,
    radius: 2,
    paddingX: 1,
    paddingY: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: schemaType ? 'flex-end' : 'center',
    ref: ref
  }, schemaType ? /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "flex-end",
    flex: 1
  }, isSortable && /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginRight: 1
  }, dragHandle), /*#__PURE__*/_react.default.createElement(_ui.Box, {
    flex: 1,
    marginRight: 2
  }, props.children)) : /*#__PURE__*/_react.default.createElement(_ui.Box, {
    flex: 1
  }, /*#__PURE__*/_react.default.createElement(_ItemWithMissingType.ItemWithMissingType, {
    value: value,
    onFocus: onFocus
  })), /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    marginLeft: 2
  }, showValidationStatus && /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginRight: 3
  }, /*#__PURE__*/_react.default.createElement(_formField.FormFieldValidationStatus, {
    validation: validation
  })), !readOnly && /*#__PURE__*/_react.default.createElement(_ui.Box, {
    paddingY: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.MenuButton, {
    button: /*#__PURE__*/_react.default.createElement(_ui.Button, {
      padding: 2,
      mode: "bleed",
      icon: _icons.EllipsisVerticalIcon
    }),
    id: "".concat(id, "-menuButton"),
    portal: true,
    popover: {
      portal: true,
      tone: 'default'
    },
    menu: /*#__PURE__*/_react.default.createElement(_ui.Menu, null, /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
      text: "Remove",
      tone: "critical",
      icon: _icons.TrashIcon,
      onClick: handleRemove
    }), /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
      text: "Duplicate",
      icon: _icons.CopyIcon,
      onClick: handleDuplicate
    }), /*#__PURE__*/_react.default.createElement(_InsertMenu.InsertMenu, {
      types: insertableTypes,
      onInsert: handleInsert
    }))
  })))));
});

exports.ItemRow = ItemRow;