"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CrossDatasetReferenceInput = CrossDatasetReferenceInput;

var _react = _interopRequireWildcard(require("react"));

var _icons = require("@sanity/icons");

var _rxjs = require("rxjs");

var _autoId = require("@reach/auto-id");

var _operators = require("rxjs/operators");

var _ui = require("@sanity/ui");

var _reactRx = require("react-rx");

var _patch = require("../../patch");

var _AlertStrip = require("../../components/AlertStrip");

var _useOnClickOutside = require("../../hooks/useOnClickOutside");

var _isNonNullable = require("../../utils/isNonNullable");

var _util = require("../../../util");

var _changeIndicators = require("../../../components/changeIndicators");

var _OptionPreview = require("./OptionPreview");

var _useReferenceInfo = require("./useReferenceInfo");

var _PreviewReferenceValue = require("./PreviewReferenceValue");

var _ReferenceAutocomplete = require("./ReferenceAutocomplete");

var _PreviewCard = require("./PreviewCard");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint-disable complexity, max-nested-callbacks, no-nested-ternary */
const INITIAL_SEARCH_STATE = {
  hits: [],
  isLoading: false
};

const NO_FILTER = () => true;

const REF_PATH = ['_ref'];

function CrossDatasetReferenceInput(props) {
  var _schemaType$studioUrl, _loadableReferenceInf, _loadableReferenceInf2;

  const {
    changed,
    focused,
    focusPath,
    focusRef,
    getReferenceInfo,
    onBlur,
    onChange,
    onFocusPath,
    onSearch,
    path,
    readOnly,
    schemaType,
    validation,
    value
  } = props;
  const forwardedRef = (0, _ui.useForwardedRef)(focusRef);
  const [searchState, setSearchState] = (0, _react.useState)(INITIAL_SEARCH_STATE);
  const handleChange = (0, _react.useCallback)(id => {
    if (!id) {
      onChange((0, _patch.unset)());
      onFocusPath([]);
      return;
    }

    const hit = searchState.hits.find(h => h.id === id);

    if (!hit) {
      throw new Error('Selected an item that wasnt part of the result set');
    }

    onChange((0, _patch.set)({
      _type: schemaType.name,
      _ref: (0, _util.getPublishedId)(id),
      _projectId: schemaType.projectId,
      _dataset: schemaType.dataset,
      _weak: schemaType.weak,
      // persist _key between mutations if the value is in an array
      _key: value === null || value === void 0 ? void 0 : value._key
    }));
    onFocusPath([]);
  }, [value === null || value === void 0 ? void 0 : value._key, searchState.hits, schemaType.name, schemaType.projectId, schemaType.dataset, schemaType.weak, onChange, onFocusPath]);
  const handleClear = (0, _react.useCallback)(() => {
    onChange((0, _patch.unset)());
  }, [onChange]);
  const handleAutocompleteKeyDown = (0, _react.useCallback)(event => {
    // escape
    if (event.keyCode === 27) {
      onFocusPath === null || onFocusPath === void 0 ? void 0 : onFocusPath([]);
    }
  }, [onFocusPath]);
  const getReferenceInfoMemo = (0, _react.useCallback)(doc => getReferenceInfo(doc, schemaType), [getReferenceInfo, schemaType]);
  const refDoc = (0, _react.useMemo)(() => ({
    _id: value === null || value === void 0 ? void 0 : value._ref
  }), [value === null || value === void 0 ? void 0 : value._ref]);
  const loadableReferenceInfo = (0, _useReferenceInfo.useReferenceInfo)(refDoc, getReferenceInfoMemo);
  const autocompletePopoverReferenceElementRef = (0, _react.useRef)(null);
  const hasFocusAtRef = focusPath.length === 1 && focusPath[0] === '_ref'; // --- focus handling
  // const focusElementRef = useForwardedRef(forwardedRef)
  // useDidUpdate({hasFocusAt: hasFocusAtRef, ref: value?._ref}, (prev, current) => {
  //   const refUpdated = prev?.ref !== current.ref
  //   const focusAtUpdated = prev?.hasFocusAt !== current.hasFocusAt
  //   if ((focusAtUpdated || refUpdated) && current.hasFocusAt) {
  //     // if search mode changed and we're having focus always ensure the
  //     // ref element gets focus
  //     focusElementRef.current?.focus()
  //   }
  // })

  const weakIs = value !== null && value !== void 0 && value._weak ? 'weak' : 'strong';
  const weakShouldBe = schemaType.weak === true ? 'weak' : 'strong';
  const hasRef = Boolean(value === null || value === void 0 ? void 0 : value._ref);
  const handleFixStrengthMismatch = (0, _react.useCallback)(() => {
    onChange(schemaType.weak === true ? (0, _patch.set)(true, ['_weak']) : (0, _patch.unset)(['_weak']));
  }, [onChange, schemaType]);
  const {
    push
  } = (0, _ui.useToast)();
  const errors = (0, _react.useMemo)(() => validation.filter(item => item.level === 'error'), [validation]);
  const handleFocus = (0, _react.useCallback)(event => {
    if (onFocusPath && event.currentTarget === forwardedRef.current) {
      onFocusPath([]);
    }
  }, [forwardedRef, onFocusPath]);
  const handleAutocompleteFocus = (0, _react.useCallback)(event => {
    if (onFocusPath && event.currentTarget === forwardedRef.current) {
      onFocusPath(REF_PATH);
    }
  }, [forwardedRef, onFocusPath]);
  const handleQueryChange = (0, _reactRx.useObservableCallback)(inputValue$ => {
    return inputValue$.pipe((0, _operators.filter)(_isNonNullable.isNonNullable), (0, _operators.distinctUntilChanged)(), (0, _operators.switchMap)(searchString => (0, _rxjs.concat)((0, _rxjs.of)({
      isLoading: true
    }), onSearch(searchString).pipe((0, _operators.map)(hits => ({
      hits,
      searchString,
      isLoading: false
    })), (0, _operators.catchError)(error => {
      push({
        title: 'Reference search failed',
        description: error.message,
        status: 'error',
        id: "reference-search-fail-".concat(inputId)
      });
      console.error(error);
      return (0, _rxjs.of)({
        hits: []
      });
    })))), (0, _operators.scan)((prevState, nextState) => ({ ...prevState,
      ...nextState
    }), INITIAL_SEARCH_STATE), (0, _operators.tap)(setSearchState));
  }, []);
  const handleAutocompleteOpenButtonClick = (0, _react.useCallback)(() => {
    handleQueryChange('');
  }, [handleQueryChange]);
  const showWeakRefMismatch = !loadableReferenceInfo.isLoading && hasRef && weakIs !== weakShouldBe;
  const inputId = (0, _autoId.useId)();
  const studioUrl = (value === null || value === void 0 ? void 0 : value._ref) && ((_schemaType$studioUrl = schemaType.studioUrl) === null || _schemaType$studioUrl === void 0 ? void 0 : _schemaType$studioUrl.call(schemaType, {
    id: value === null || value === void 0 ? void 0 : value._ref,
    type: loadableReferenceInfo === null || loadableReferenceInfo === void 0 ? void 0 : (_loadableReferenceInf = loadableReferenceInfo.result) === null || _loadableReferenceInf === void 0 ? void 0 : _loadableReferenceInf.type
  })) || null;
  const renderOption = (0, _react.useCallback)(option => {
    return /*#__PURE__*/_react.default.createElement(_PreviewCard.PreviewCard, {
      forwardedAs: "button",
      type: "button",
      radius: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
      paddingX: 3,
      paddingY: 1
    }, /*#__PURE__*/_react.default.createElement(_OptionPreview.OptionPreview, {
      referenceType: schemaType,
      document: option.hit.published,
      getReferenceInfo: getReferenceInfoMemo
    })));
  }, [schemaType, getReferenceInfoMemo]);
  const preview = (_loadableReferenceInf2 = loadableReferenceInfo.result) === null || _loadableReferenceInf2 === void 0 ? void 0 : _loadableReferenceInf2.preview.published;
  const isEditing = hasFocusAtRef || !(value !== null && value !== void 0 && value._ref); // --- click outside handling

  const clickOutsideBoundaryRef = (0, _react.useRef)(null);
  const autocompletePortalRef = (0, _react.useRef)(null);
  const createButtonMenuPortalRef = (0, _react.useRef)(null);
  (0, _useOnClickOutside.useOnClickOutside)([clickOutsideBoundaryRef, autocompletePortalRef, createButtonMenuPortalRef], () => {
    if (hasFocusAtRef) {
      onFocusPath([]);
    }
  });
  return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 1,
    marginY: isEditing ? 2 : 0
  }, isEditing ? /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 2,
    ref: clickOutsideBoundaryRef
  }, /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicator, {
    path: path,
    isChanged: changed,
    hasFocus: !!focused
  }, /*#__PURE__*/_react.default.createElement("div", {
    ref: autocompletePopoverReferenceElementRef
  }, /*#__PURE__*/_react.default.createElement(_ReferenceAutocomplete.ReferenceAutocomplete, {
    "data-testid": "autocomplete",
    loading: searchState.isLoading,
    ref: forwardedRef,
    referenceElement: autocompletePopoverReferenceElementRef.current,
    portalRef: autocompletePortalRef,
    id: inputId || '',
    options: searchState.hits.map(hit => ({
      value: hit.id,
      hit: hit
    })),
    onFocus: handleAutocompleteFocus,
    onBlur: onBlur,
    radius: 1,
    placeholder: "Type to search",
    onKeyDown: handleAutocompleteKeyDown,
    readOnly: readOnly,
    disabled: loadableReferenceInfo.isLoading,
    onQueryChange: handleQueryChange,
    searchString: searchState.searchString,
    onChange: handleChange,
    filterOption: NO_FILTER,
    renderOption: renderOption,
    openButton: {
      onClick: handleAutocompleteOpenButtonClick
    }
  })))) : /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicator, {
    path: path,
    isChanged: changed,
    hasFocus: !!focused
  }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    padding: 0,
    border: true,
    radius: 1,
    tone: readOnly ? 'transparent' : loadableReferenceInfo.error || errors.length > 0 ? 'critical' : 'default'
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    padding: 1
  }, studioUrl ? /*#__PURE__*/_react.default.createElement(_PreviewCard.PreviewCard, {
    forwardedAs: "a",
    target: "_blank",
    rel: "noopener noreferrer",
    href: studioUrl,
    "data-as": "a",
    flex: 1,
    padding: 1,
    paddingRight: 3,
    radius: 2,
    tone: "inherit",
    __unstable_focusRing: true,
    tabIndex: 0,
    onFocus: handleFocus,
    ref: forwardedRef
  }, /*#__PURE__*/_react.default.createElement(_PreviewReferenceValue.PreviewReferenceValue, {
    value: value,
    referenceInfo: loadableReferenceInfo,
    showStudioUrlIcon: true,
    hasStudioUrl: !!studioUrl,
    type: schemaType
  })) : /*#__PURE__*/_react.default.createElement(_PreviewCard.PreviewCard, {
    flex: 1,
    padding: 1,
    paddingRight: 3,
    radius: 2,
    tone: "inherit",
    __unstable_focusRing: true,
    tabIndex: 0,
    onFocus: handleFocus,
    ref: forwardedRef
  }, /*#__PURE__*/_react.default.createElement(_PreviewReferenceValue.PreviewReferenceValue, {
    value: value,
    referenceInfo: loadableReferenceInfo,
    showStudioUrlIcon: true,
    type: schemaType
  })), /*#__PURE__*/_react.default.createElement(_ui.Inline, {
    paddingX: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.MenuButton, {
    button: /*#__PURE__*/_react.default.createElement(_ui.Button, {
      padding: 2,
      mode: "bleed",
      icon: _icons.EllipsisVerticalIcon,
      "data-testid": "menu-button"
    }),
    id: "".concat(inputId, "-menuButton"),
    menu: /*#__PURE__*/_react.default.createElement(_ui.Menu, null, !readOnly && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
      text: "Clear",
      tone: "critical",
      icon: _icons.ResetIcon,
      "data-testid": "menu-item-clear",
      onClick: handleClear
    }), /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
      text: "Replace",
      icon: _icons.SyncIcon,
      "data-testid": "menu-item-replace",
      onClick: () => {
        onFocusPath(REF_PATH);
      }
    }))),
    placement: "right",
    popover: {
      portal: true,
      tone: 'default'
    }
  }))), showWeakRefMismatch && /*#__PURE__*/_react.default.createElement(_AlertStrip.AlertStrip, {
    padding: 1,
    title: "Reference strength mismatch",
    status: "warning",
    "data-testid": "alert-reference-strength-mismatch"
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    as: "p",
    muted: true,
    size: 1
  }, "This reference is ", /*#__PURE__*/_react.default.createElement("em", null, weakIs), ", but according to the current schema it should be ", /*#__PURE__*/_react.default.createElement("em", null, weakShouldBe, ".")), /*#__PURE__*/_react.default.createElement(_ui.Text, {
    as: "p",
    muted: true,
    size: 1
  }, schemaType.weak ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "It will not be possible to delete the \"", preview === null || preview === void 0 ? void 0 : preview.title, "\"-document without first removing this reference.") : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "This makes it possible to delete the \"", preview === null || preview === void 0 ? void 0 : preview.title, "\"-document without first deleting this reference, leaving this field referencing a nonexisting document.")), /*#__PURE__*/_react.default.createElement(_ui.Button, {
    onClick: handleFixStrengthMismatch,
    text: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Convert to ", weakShouldBe, " reference"),
    tone: "caution"
  }))), loadableReferenceInfo.error && /*#__PURE__*/_react.default.createElement(_AlertStrip.AlertStrip, {
    padding: 1,
    title: "Unable to load reference metadata",
    status: "warning",
    "data-testid": "alert-reference-info-failed"
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    as: "p",
    muted: true,
    size: 1
  }, "Error: ", loadableReferenceInfo.error.message), /*#__PURE__*/_react.default.createElement(_ui.Button, {
    onClick: loadableReferenceInfo.retry,
    text: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Retry"),
    tone: "primary"
  }))))));
}