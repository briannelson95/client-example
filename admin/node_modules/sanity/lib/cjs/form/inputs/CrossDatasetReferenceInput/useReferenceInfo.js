"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useReferenceInfo = useReferenceInfo;

var _react = require("react");

var _operators = require("rxjs/operators");

var _rxjs = require("rxjs");

var _reactRx = require("react-rx");

var _usePrevious = require("../../hooks/usePrevious");

// eslint-disable-next-line @typescript-eslint/no-empty-function
const noop = () => {};

const INITIAL_LOADING_STATE = {
  isLoading: true,
  result: undefined,
  error: undefined,
  retry: noop
};
const EMPTY_STATE = {
  isLoading: false,
  result: undefined,
  error: undefined,
  retry: noop
};

function useReferenceInfo(doc, getReferenceInfo) {
  const [retryAttempt, setRetryAttempt] = (0, _react.useState)(0);
  const retry = (0, _react.useCallback)(() => {
    setRetryAttempt(current => current + 1);
  }, []);
  const referenceInfo = (0, _reactRx.useMemoObservable)(() => doc._id ? getReferenceInfo(doc).pipe((0, _operators.map)(result => ({
    isLoading: false,
    result,
    error: undefined,
    retry
  })), (0, _operators.startWith)(INITIAL_LOADING_STATE), (0, _operators.catchError)(err => {
    console.error(err);
    return (0, _rxjs.of)({
      isLoading: false,
      result: undefined,
      error: err,
      retry
    });
  })) : (0, _rxjs.of)(EMPTY_STATE), [retryAttempt, getReferenceInfo, doc === null || doc === void 0 ? void 0 : doc._id, doc === null || doc === void 0 ? void 0 : doc._type, retry], INITIAL_LOADING_STATE); // workaround for a "bug" with useMemoObservable that doesn't
  // return the initial value upon resubscription

  const previousId = (0, _usePrevious.usePrevious)(doc._id, doc._id);

  if (previousId !== doc._id) {
    return INITIAL_LOADING_STATE;
  }

  return referenceInfo;
}