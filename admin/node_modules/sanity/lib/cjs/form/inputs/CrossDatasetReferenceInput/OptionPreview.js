"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OptionPreview = OptionPreview;

var _react = _interopRequireDefault(require("react"));

var _ui = require("@sanity/ui");

var _Alert = require("../../components/Alert");

var _useReferenceInfo = require("./useReferenceInfo");

var _CrossDatasetReferencePreview = require("./CrossDatasetReferencePreview");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable max-nested-callbacks,no-nested-ternary */

/**
 * Used to preview a referenced type
 * Takes as props the referenced document, the reference type and a hook to subscribe to
 * in order to listen for the reference info
 * @param props
 * @constructor
 */
function OptionPreview(props) {
  var _referenceInfo$availa;

  const {
    isLoading,
    result: referenceInfo,
    error
  } = (0, _useReferenceInfo.useReferenceInfo)(props.document, props.getReferenceInfo);

  if (isLoading) {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      padding: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.TextSkeleton, {
      style: {
        maxWidth: 320
      },
      radius: 1,
      animated: true
    }), /*#__PURE__*/_react.default.createElement(_ui.TextSkeleton, {
      style: {
        maxWidth: 200
      },
      radius: 1,
      size: 1,
      animated: true
    }));
  }

  if (error) {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      padding: 1
    }, /*#__PURE__*/_react.default.createElement(_Alert.Alert, {
      title: "Failed to load referenced document"
    }, "Error: ", error.message));
  }

  if (!referenceInfo) {
    return null;
  }

  if (((_referenceInfo$availa = referenceInfo.availability) === null || _referenceInfo$availa === void 0 ? void 0 : _referenceInfo$availa.reason) === 'PERMISSION_DENIED') {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      padding: 1
    }, "Insufficient permissions to view this document");
  }

  const refType = props.referenceType.to.find(toEntry => toEntry.type === referenceInfo.type);

  if (!refType) {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      padding: 1
    }, "Search returned a type that's not valid for this reference: \"$", referenceInfo.type, "\"");
  }

  return referenceInfo && refType && /*#__PURE__*/_react.default.createElement(_CrossDatasetReferencePreview.CrossDatasetReferencePreview, {
    id: referenceInfo.id,
    availability: referenceInfo.availability,
    preview: referenceInfo.preview,
    refType: refType,
    dataset: props.referenceType.dataset,
    projectId: props.referenceType.projectId,
    showTypeLabel: props.referenceType.to.length > 1
  });
}