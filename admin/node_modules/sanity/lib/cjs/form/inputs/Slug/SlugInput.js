"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SlugInput = SlugInput;

var _react = _interopRequireWildcard(require("react"));

var PathUtils = _interopRequireWildcard(require("@sanity/util/paths"));

var _ui = require("@sanity/ui");

var _autoId = require("@reach/auto-id");

var _patch = require("../../patch");

var _useFormBuilder = require("../../useFormBuilder");

var _slugify = require("./utils/slugify");

var _useAsync = require("./utils/useAsync");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function getNewFromSource(source, valuePath, document) {
  const parentPath = valuePath.slice(0, -1);
  const parent = PathUtils.get(document, parentPath);
  return Promise.resolve(typeof source === 'function' ? source(document, {
    parentPath,
    parent
  }) : PathUtils.get(document, source));
}

function SlugInput(props) {
  var _schemaType$options;

  const {
    getDocument
  } = (0, _useFormBuilder.useFormBuilder)().__internal;

  const {
    focusRef,
    path,
    value,
    schemaType,
    validation,
    onChange,
    onFocus,
    onFocusPath,
    readOnly
  } = props;
  const sourceField = (_schemaType$options = schemaType.options) === null || _schemaType$options === void 0 ? void 0 : _schemaType$options.source;
  const inputId = (0, _autoId.useId)();
  const errors = (0, _react.useMemo)(() => validation.filter(item => item.level === 'error'), [validation]);
  const updateSlug = (0, _react.useCallback)(nextSlug => {
    if (!nextSlug) {
      onChange(_patch.PatchEvent.from((0, _patch.unset)([])));
      return;
    }

    onChange(_patch.PatchEvent.from([(0, _patch.setIfMissing)({
      _type: schemaType.name
    }), (0, _patch.set)(nextSlug, ['current'])]));
  }, [onChange, schemaType.name]);
  const [generateState, handleGenerateSlug] = (0, _useAsync.useAsync)(() => {
    if (!sourceField) {
      return Promise.reject(new Error("Source is missing. Check source on type \"".concat(schemaType.name, "\" in schema")));
    }

    return getNewFromSource(sourceField, path, getDocument() || {
      _type: schemaType.name
    }).then(newFromSource => (0, _slugify.slugify)(newFromSource || '', schemaType)).then(newSlug => updateSlug(newSlug));
  }, [path, updateSlug, document, schemaType]);
  const isUpdating = (generateState === null || generateState === void 0 ? void 0 : generateState.status) === 'pending';

  const handleChange = _react.default.useCallback(event => updateSlug(event.currentTarget.value), [updateSlug]);

  const handleFocus = _react.default.useCallback(() => onFocusPath(['current']), [onFocusPath]);

  return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, null, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    flex: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.TextInput, {
    id: inputId,
    ref: focusRef,
    customValidity: errors.length > 0 ? errors[0].message : '',
    disabled: isUpdating,
    onChange: handleChange,
    onFocus: onFocus,
    value: (value === null || value === void 0 ? void 0 : value.current) || '',
    readOnly: readOnly
  }), (generateState === null || generateState === void 0 ? void 0 : generateState.status) === 'error' && /*#__PURE__*/_react.default.createElement(_ui.Card, {
    padding: 2,
    tone: "critical"
  }, generateState.error.message)), sourceField && /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginLeft: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    mode: "ghost",
    type: "button",
    disabled: readOnly || isUpdating,
    onClick: handleGenerateSlug,
    onFocus: handleFocus,
    text: (generateState === null || generateState === void 0 ? void 0 : generateState.status) === 'pending' ? 'Generatingâ€¦' : 'Generate'
  }))));
}