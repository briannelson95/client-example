"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DateTimeInput = DateTimeInput;

var _legacyDateFormat = require("@sanity/util/legacyDateFormat");

var _dateFns = require("date-fns");

var _react = _interopRequireWildcard(require("react"));

var _changeIndicators = require("../../../components/changeIndicators");

var _patch = require("../../patch");

var _CommonDateTimeInput = require("./CommonDateTimeInput");

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const DEFAULT_DATE_FORMAT = 'YYYY-MM-DD';
const DEFAULT_TIME_FORMAT = 'HH:mm';

function parseOptions() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return {
    dateFormat: options.dateFormat || DEFAULT_DATE_FORMAT,
    timeFormat: options.timeFormat || DEFAULT_TIME_FORMAT,
    timeStep: 'timeStep' in options && Number(options.timeStep) || 1,
    calendarTodayLabel: options.calendarTodayLabel || 'Today'
  };
}

function serialize(date) {
  return date.toISOString();
}

function deserialize(isoString) {
  const deserialized = new Date(isoString);

  if ((0, _utils.isValidDate)(deserialized)) {
    return {
      isValid: true,
      date: deserialized
    };
  }

  return {
    isValid: false,
    error: "Invalid date value: \"".concat(isoString, "\"")
  };
} // enforceTimeStep takes a dateString and datetime schema options and enforces the time
// to be within the configured timeStep


function enforceTimeStep(dateString, timeStep) {
  if (!timeStep || timeStep === 1) {
    return dateString;
  }

  const date = (0, _dateFns.parseISO)(dateString);
  const minutes = (0, _dateFns.getMinutes)(date);
  const leftOver = minutes % timeStep;

  if (leftOver !== 0) {
    return serialize((0, _dateFns.setMinutes)(date, minutes - leftOver));
  }

  return serialize(date);
}

function DateTimeInput(props) {
  const {
    changed,
    focused,
    focusRef,
    id,
    onChange,
    path,
    readOnly,
    schemaType,
    value
  } = props;
  const {
    dateFormat,
    timeFormat,
    timeStep
  } = parseOptions(schemaType.options);
  const handleChange = (0, _react.useCallback)(nextDate => {
    let date = nextDate;

    if (date !== null && timeStep > 1) {
      date = enforceTimeStep(date, timeStep);
    }

    onChange(date === null ? (0, _patch.unset)() : (0, _patch.set)(date));
  }, [onChange, timeStep]);

  const formatInputValue = _react.default.useCallback(date => (0, _legacyDateFormat.format)(date, "".concat(dateFormat, " ").concat(timeFormat)), [dateFormat, timeFormat]);

  const parseInputValue = _react.default.useCallback(inputValue => (0, _legacyDateFormat.parse)(inputValue, "".concat(dateFormat, " ").concat(timeFormat)), [dateFormat, timeFormat]);

  return /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicator, {
    path: path,
    isChanged: changed,
    hasFocus: !!focused
  }, /*#__PURE__*/_react.default.createElement(_CommonDateTimeInput.CommonDateTimeInput, {
    deserialize: deserialize,
    formatInputValue: formatInputValue,
    id: id,
    onChange: handleChange,
    parseInputValue: parseInputValue,
    placeholder: schemaType.placeholder,
    readOnly: readOnly,
    ref: focusRef,
    selectTime: true,
    serialize: serialize,
    timeStep: timeStep,
    value: value
  }));
}