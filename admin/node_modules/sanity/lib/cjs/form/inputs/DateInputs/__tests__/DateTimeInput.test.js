"use strict";

var _types = require("@sanity/types");

var _react = require("@testing-library/react");

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _react2 = _interopRequireDefault(require("react"));

var _form = require("../../../../../test/form");

var _DateTimeInput = require("../DateTimeInput");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// NOTE: for the tests to be deterministic we need this to ensure tests are run in a predefined timezone
// see globalSetup in jest config for details about how this is set up
test('timezone for the test environment should be set to America/Los_Angeles', () => {
  expect(Intl.DateTimeFormat().resolvedOptions().timeZone).toBe('America/Los_Angeles');
});
test('does not emit onChange after invalid value has been typed', async () => {
  const {
    onChange,
    result
  } = await (0, _form.renderStringInput)({
    fieldDefinition: (0, _types.defineType)({
      type: 'datetime',
      name: 'test'
    }),
    render: inputProps => /*#__PURE__*/_react2.default.createElement(_DateTimeInput.DateTimeInput, inputProps)
  });
  const input = result.container.querySelector('input');

  _userEvent.default.type(input, 'this is invalid');

  expect(input.value).toBe('this is invalid');
  expect(onChange.mock.calls.length).toBe(0);

  _react.fireEvent.blur(input);

  expect(onChange.mock.calls.length).toBe(0);
});
test('emits onChange on correct format if a valid value has been typed', async () => {
  const {
    onChange,
    result
  } = await (0, _form.renderStringInput)({
    fieldDefinition: (0, _types.defineType)({
      type: 'datetime',
      name: 'test'
    }),
    render: inputProps => /*#__PURE__*/_react2.default.createElement(_DateTimeInput.DateTimeInput, inputProps)
  });
  const input = result.container.querySelector('input'); // NOTE: the date is entered and displayed in local timezone
  // (which is hardcoded to America/Los_Angeles)

  _userEvent.default.type(input, '2021-03-28 10:23');

  expect(input.value).toBe('2021-03-28 10:23');

  _react.fireEvent.blur(input); // NOTE: the date is entered and displayed in local timezone but stored in utc


  expect(onChange.mock.calls).toMatchSnapshot();
});
test('formatting of deserialized value', async () => {
  const {
    result
  } = await (0, _form.renderStringInput)({
    fieldDefinition: (0, _types.defineType)({
      type: 'datetime',
      name: 'test'
    }),
    props: {
      documentValue: {
        test: '2021-03-28T17:23:00.000Z'
      }
    },
    render: inputProps => /*#__PURE__*/_react2.default.createElement(_DateTimeInput.DateTimeInput, inputProps)
  });
  const input = result.container.querySelector('input'); // const {textInput} = renderInput({value: '2021-03-28T17:23:00.000Z'} as any)

  expect(input.value).toBe('2021-03-28 10:23');
});