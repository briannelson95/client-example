"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CommonDateTimeInput = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _DateTimeInput = require("./base/DateTimeInput");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const DEFAULT_PLACEHOLDER_TIME = new Date();

const CommonDateTimeInput = /*#__PURE__*/_react.default.forwardRef(function CommonDateTimeInput(props, ref) {
  const {
    id,
    deserialize,
    formatInputValue,
    onChange,
    parseInputValue,
    placeholder,
    readOnly,
    selectTime,
    serialize,
    timeStep,
    value,
    ...restProps
  } = props;

  const [localValue, setLocalValue] = _react.default.useState(null);

  (0, _react.useEffect)(() => {
    setLocalValue(null);
  }, [value]);

  const handleDatePickerInputChange = _react.default.useCallback(event => {
    const nextInputValue = event.currentTarget.value;
    const result = nextInputValue === '' ? null : parseInputValue(nextInputValue);

    if (result === null) {
      onChange(null); // If the field value is undefined and we are clearing the invalid value
      // the above useEffect won't trigger, so we do some extra clean up here

      if (typeof value === 'undefined' && localValue) {
        setLocalValue(null);
      }
    } else if (result.isValid) {
      onChange(serialize(result.date));
    } else {
      setLocalValue(nextInputValue);
    }
  }, [localValue, serialize, onChange, parseInputValue]);

  const handleDatePickerChange = _react.default.useCallback(nextDate => {
    onChange(nextDate ? serialize(nextDate) : null);
  }, [serialize, onChange]);

  const forwardedRef = (0, _ui.useForwardedRef)(ref);
  const parseResult = localValue ? parseInputValue(localValue) : value ? deserialize(value) : null;
  const inputValue = localValue ? localValue : parseResult !== null && parseResult !== void 0 && parseResult.isValid ? formatInputValue(parseResult.date) : value;
  return readOnly ? /*#__PURE__*/_react.default.createElement(_ui.TextInput, {
    value: inputValue,
    readOnly: true
  }) : /*#__PURE__*/_react.default.createElement(_DateTimeInput.DateTimeInput, _extends({}, restProps, {
    id: id,
    selectTime: selectTime,
    timeStep: timeStep,
    placeholder: placeholder || "e.g. ".concat(formatInputValue(DEFAULT_PLACEHOLDER_TIME)),
    ref: forwardedRef,
    value: parseResult === null || parseResult === void 0 ? void 0 : parseResult.date,
    inputValue: inputValue || '',
    readOnly: Boolean(readOnly),
    onInputChange: handleDatePickerInputChange,
    onChange: handleDatePickerChange,
    customValidity: parseResult === null || parseResult === void 0 ? void 0 : parseResult.error
  }));
});

exports.CommonDateTimeInput = CommonDateTimeInput;