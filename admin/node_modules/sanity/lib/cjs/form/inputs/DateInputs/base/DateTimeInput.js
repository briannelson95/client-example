"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DateTimeInput = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactFocusLock = _interopRequireDefault(require("react-focus-lock"));

var _ui = require("@sanity/ui");

var _icons = require("@sanity/icons");

var _DatePicker = require("./DatePicker");

var _LazyTextInput = require("./LazyTextInput");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const DateTimeInput = /*#__PURE__*/(0, _react.forwardRef)(function DateTimeInput(props, ref) {
  const {
    value,
    inputValue,
    onInputChange,
    onChange,
    selectTime,
    timeStep,
    ...rest
  } = props;
  const [popoverRef, setPopoverRef] = (0, _react.useState)(null);
  const forwardedRef = (0, _ui.useForwardedRef)(ref);
  const buttonRef = (0, _react.useRef)(null);
  const [isPickerOpen, setPickerOpen] = (0, _react.useState)(false);
  (0, _ui.useClickOutside)(() => setPickerOpen(false), [popoverRef]);
  const handleDeactivation = (0, _react.useCallback)(() => {
    var _forwardedRef$current, _forwardedRef$current2;

    (_forwardedRef$current = forwardedRef.current) === null || _forwardedRef$current === void 0 ? void 0 : _forwardedRef$current.focus();
    (_forwardedRef$current2 = forwardedRef.current) === null || _forwardedRef$current2 === void 0 ? void 0 : _forwardedRef$current2.select();
  }, [forwardedRef]);
  const handleKeyUp = (0, _react.useCallback)(e => {
    if (e.key === 'Escape') {
      setPickerOpen(false);
    }
  }, []);
  const handleClick = (0, _react.useCallback)(() => setPickerOpen(true), []);

  const suffix = /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    ref: buttonRef,
    icon: _icons.CalendarIcon,
    mode: "bleed",
    padding: 2,
    onClick: handleClick,
    style: {
      display: 'block'
    },
    "data-testid": "select-date-button"
  }));

  return /*#__PURE__*/_react.default.createElement(_LazyTextInput.LazyTextInput, _extends({
    ref: forwardedRef
  }, rest, {
    value: inputValue,
    onChange: onInputChange,
    suffix: isPickerOpen ?
    /*#__PURE__*/
    // Note: we're conditionally inserting the popover here due to an
    // issue with popovers rendering incorrectly on subsequent renders
    // see https://github.com/sanity-io/design/issues/519
    _react.default.createElement(_ui.LayerProvider, {
      zOffset: 1000
    }, /*#__PURE__*/_react.default.createElement(_ui.Popover, {
      constrainSize: true,
      "data-testid": "date-input-dialog",
      portal: true,
      content: /*#__PURE__*/_react.default.createElement(_ui.Box, {
        overflow: "auto"
      }, /*#__PURE__*/_react.default.createElement(_reactFocusLock.default, {
        onDeactivation: handleDeactivation
      }, /*#__PURE__*/_react.default.createElement(_DatePicker.DatePicker, {
        selectTime: selectTime,
        timeStep: timeStep,
        onKeyUp: handleKeyUp,
        value: value,
        onChange: onChange
      }))),
      open: true,
      placement: "bottom-end",
      ref: setPopoverRef,
      radius: 2
    }, suffix)) : suffix
  }));
});
exports.DateTimeInput = DateTimeInput;