"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LazyTextInput = void 0;

var _react = _interopRequireDefault(require("react"));

var _ui = require("@sanity/ui");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * A TextInput that only emit onChange when it has to
 * By default it will only emit onChange when: 1) user hits enter or 2) user leaves the
 * field (e.g. onBlur) and the input value at this time is different from the given `value` prop
 */
const LazyTextInput = /*#__PURE__*/_react.default.forwardRef(function LazyTextInput(_ref, forwardedRef) {
  let {
    onChange,
    onBlur,
    onKeyPress,
    value,
    ...rest
  } = _ref;

  const [inputValue, setInputValue] = _react.default.useState();

  const handleChange = _react.default.useCallback(event => {
    setInputValue(event.currentTarget.value);
  }, []);

  const checkEvent = _react.default.useCallback(event => {
    const currentValue = event.currentTarget.value;

    if (currentValue !== "".concat(value)) {
      if (onChange) {
        onChange(event);
      }
    }

    setInputValue(undefined);
  }, [onChange, value]);

  const handleBlur = _react.default.useCallback(e => {
    checkEvent(e);

    if (onBlur) {
      onBlur(e);
    }
  }, [checkEvent, onBlur]);

  const handleKeyPress = _react.default.useCallback(e => {
    if (e.key === 'Enter') {
      checkEvent(e);
    }

    if (onKeyPress) {
      onKeyPress(e);
    }
  }, [checkEvent, onKeyPress]);

  return /*#__PURE__*/_react.default.createElement(_ui.TextInput, _extends({}, rest, {
    "data-testid": "date-input",
    ref: forwardedRef,
    value: inputValue === undefined ? value : inputValue,
    onChange: handleChange,
    onBlur: handleBlur,
    onKeyPress: handleKeyPress
  }));
});

exports.LazyTextInput = LazyTextInput;