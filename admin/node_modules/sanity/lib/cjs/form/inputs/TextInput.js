"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextInput = void 0;

var _react = _interopRequireDefault(require("react"));

var _ui = require("@sanity/ui");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _patch = require("../patch");

var _changeIndicators = require("../../components/changeIndicators");

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const StyledTextArea = (0, _styledComponents.default)(_ui.TextArea)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  &[data-as='textarea'] {\n    resize: vertical;\n  }\n"])));

const TextInput = /*#__PURE__*/_react.default.forwardRef(function TextInput(props, forwardedRef) {
  const {
    changed,
    focused,
    id,
    onBlur,
    onChange,
    onFocus,
    path,
    readOnly,
    schemaType,
    validationError,
    value
  } = props;

  const handleChange = _react.default.useCallback(event => {
    const inputValue = event.currentTarget.value;
    onChange(inputValue ? (0, _patch.set)(inputValue) : (0, _patch.unset)());
  }, [onChange]);

  return /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicator, {
    path: path,
    isChanged: changed,
    hasFocus: !!focused
  }, /*#__PURE__*/_react.default.createElement(StyledTextArea, {
    id: id,
    customValidity: validationError,
    value: value || '',
    readOnly: Boolean(readOnly),
    placeholder: schemaType.placeholder,
    onChange: handleChange,
    onFocus: onFocus,
    onBlur: onBlur,
    rows: typeof schemaType.rows === 'number' ? schemaType.rows : 10,
    ref: forwardedRef
  }));
});

exports.TextInput = TextInput;