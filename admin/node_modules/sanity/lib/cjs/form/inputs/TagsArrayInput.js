"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TagsArrayInput = void 0;

var _react = _interopRequireWildcard(require("react"));

var _patch = require("../patch");

var _tagInput = require("../components/tagInput");

var _changeIndicators = require("../../components/changeIndicators");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const TagsArrayInput = /*#__PURE__*/(0, _react.forwardRef)(function TagsArrayInput(props, ref) {
  const {
    id,
    onChange,
    onFocus,
    readOnly,
    value = [],
    path,
    focused,
    changed
  } = props;
  const tagInputValue = (0, _react.useMemo)(() => value === null || value === void 0 ? void 0 : value.map(v => ({
    value: v
  })), [value]);
  const inputRef = (0, _react.useRef)(null);
  const handleChange = (0, _react.useCallback)(nextValue => {
    onChange(nextValue.length === 0 ? (0, _patch.unset)() : (0, _patch.set)(nextValue.map(v => v.value)));
  }, [onChange]);
  (0, _react.useImperativeHandle)(ref, () => ({
    focus: () => {
      var _inputRef$current;

      return (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();
    }
  }));
  return /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicator, {
    path: path,
    isChanged: changed,
    hasFocus: !!focused
  }, /*#__PURE__*/_react.default.createElement(_tagInput.TagInput, {
    id: id,
    onChange: handleChange,
    onFocus: onFocus,
    readOnly: readOnly,
    ref: inputRef,
    value: tagInputValue
  }));
});
exports.TagsArrayInput = TagsArrayInput;