"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectInput = void 0;

var _capitalize2 = _interopRequireDefault(require("lodash/capitalize"));

var _autoId = require("@reach/auto-id");

var _types = require("@sanity/types");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _changeIndicators = require("../../components/changeIndicators");

var _patch = require("../patch");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function toSelectItem(option) {
  return (0, _types.isTitledListValue)(option) ? option : {
    title: (0, _capitalize2.default)("".concat(option)),
    value: option
  };
}

const EMPTY_ITEM = {
  title: '',
  value: undefined
};

const SelectInput = /*#__PURE__*/_react.default.forwardRef(function SelectInput(props, forwardedRef) {
  var _schemaType$options2, _schemaType$options3;

  const {
    value,
    readOnly,
    validationError,
    schemaType,
    onChange,
    onFocus,
    path,
    changed,
    focused
  } = props;
  const items = (0, _react.useMemo)(() => {
    var _schemaType$options;

    return (((_schemaType$options = schemaType.options) === null || _schemaType$options === void 0 ? void 0 : _schemaType$options.list) || []).map(toSelectItem);
  }, [(_schemaType$options2 = schemaType.options) === null || _schemaType$options2 === void 0 ? void 0 : _schemaType$options2.list]);
  const currentItem = items.find(item => item.value === value);
  const isRadio = schemaType.options && schemaType.options.layout === 'radio';
  const itemFromOptionValue = (0, _react.useCallback)(optionValue => {
    const index = Number(optionValue);
    return items[index];
  }, [items]);
  const optionValueFromItem = (0, _react.useCallback)(item => {
    return String(items.indexOf(item));
  }, [items]);
  const inputId = (0, _autoId.useId)();

  const handleChange = _react.default.useCallback(nextItem => {
    onChange(_patch.PatchEvent.from(typeof (nextItem === null || nextItem === void 0 ? void 0 : nextItem.value) === 'undefined' ? (0, _patch.unset)() : (0, _patch.set)(nextItem.value)));
  }, [onChange]);

  const handleSelectChange = (0, _react.useCallback)(event => {
    const nextItem = itemFromOptionValue(event.currentTarget.value);

    if (!nextItem) {
      handleChange(EMPTY_ITEM);
      return;
    }

    handleChange(nextItem);
  }, [handleChange, itemFromOptionValue]);
  const content = isRadio ? /*#__PURE__*/_react.default.createElement(RadioSelect, {
    inputId: inputId,
    items: items,
    value: currentItem,
    onChange: handleChange,
    direction: ((_schemaType$options3 = schemaType.options) === null || _schemaType$options3 === void 0 ? void 0 : _schemaType$options3.direction) || 'vertical',
    ref: forwardedRef,
    readOnly: readOnly,
    onFocus: onFocus,
    customValidity: validationError
  }) : /*#__PURE__*/_react.default.createElement(_ui.Select, {
    onChange: handleSelectChange,
    onFocus: onFocus,
    id: inputId,
    ref: forwardedRef,
    readOnly: readOnly,
    customValidity: validationError,
    value: optionValueFromItem(currentItem)
  }, [EMPTY_ITEM, ...items].map((item, i) => /*#__PURE__*/_react.default.createElement("option", {
    key: "".concat(i - 1),
    value: i - 1
  }, item.title)));
  return /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicator, {
    path: path,
    isChanged: changed,
    hasFocus: !!focused
  }, content);
});

exports.SelectInput = SelectInput;
const RadioSelect = /*#__PURE__*/(0, _react.forwardRef)(function RadioSelect(props, ref) {
  const {
    items,
    value,
    onChange,
    onFocus,
    readOnly,
    customValidity,
    direction,
    inputId
  } = props;
  const Layout = direction === 'horizontal' ? _ui.Inline : _ui.Stack;
  return /*#__PURE__*/_react.default.createElement(_ui.Card, {
    border: true,
    padding: 3,
    radius: 1
  }, /*#__PURE__*/_react.default.createElement(Layout, {
    space: 3,
    role: "group"
  }, items.map((item, index) => /*#__PURE__*/_react.default.createElement(RadioSelectItem, {
    customValidity: customValidity,
    inputId: inputId,
    item: item,
    key: index,
    onChange: onChange,
    onFocus: onFocus,
    readOnly: readOnly,
    ref: index === 0 ? ref : null,
    value: value
  }))));
});
const RadioSelectItem = /*#__PURE__*/(0, _react.forwardRef)(function RadioSelectItem(props, ref) {
  const {
    customValidity,
    inputId,
    item,
    onChange,
    onFocus,
    readOnly,
    value
  } = props;
  const handleChange = (0, _react.useCallback)(() => {
    onChange(item);
  }, [item, onChange]);
  return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    as: "label",
    align: "center"
  }, /*#__PURE__*/_react.default.createElement(_ui.Radio, {
    ref: ref,
    checked: value === item,
    onChange: handleChange,
    onFocus: onFocus,
    readOnly: readOnly,
    customValidity: customValidity,
    name: inputId
  }), /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginLeft: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 1,
    weight: "semibold"
  }, item.title)));
});