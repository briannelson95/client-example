"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AutocompleteContainer = void 0;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _templateObject, _templateObject2;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const NARROW_LAYOUT = (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  grid-template-columns: minmax(0px, 1fr);\n"])));
const WIDE_LAYOUT = (0, _styledComponents.css)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  grid-template-columns: 1fr min-content;\n"])));
const Root = (0, _styledComponents.default)(_ui.Grid)(props => props.$narrow ? NARROW_LAYOUT : WIDE_LAYOUT);
const AutocompleteContainer = /*#__PURE__*/(0, _react.forwardRef)(function AutocompleteContainer(props, forwardedRef) {
  const [rootElement, setRootElement] = (0, _react.useState)(null);
  const handleNewRef = (0, _react.useCallback)(element => {
    // there's a bit of "double bookkeeping" here. since useElementRect needs to re-run whenever the ref updates,
    // and thus we need to keep it in the state
    setForwardedRef(forwardedRef, element);
    setRootElement(element);
  }, [forwardedRef]);
  const inputWrapperRect = (0, _ui.useElementRect)(rootElement);
  return /*#__PURE__*/_react.default.createElement(Root, {
    ref: handleNewRef,
    gap: 1,
    $narrow: ((inputWrapperRect === null || inputWrapperRect === void 0 ? void 0 : inputWrapperRect.width) || 0) < 480
  }, props.children);
});
exports.AutocompleteContainer = AutocompleteContainer;

function setForwardedRef(ref, instance) {
  if (typeof ref === 'function') {
    ref(instance);
  } else if (ref) {
    ref.current = instance;
  }
}