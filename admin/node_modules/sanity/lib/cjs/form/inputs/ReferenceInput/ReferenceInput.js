"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReferenceInput = ReferenceInput;

var _react = _interopRequireWildcard(require("react"));

var _icons = require("@sanity/icons");

var _rxjs = require("rxjs");

var _autoId = require("@reach/auto-id");

var _operators = require("rxjs/operators");

var _ui = require("@sanity/ui");

var _reactRx = require("react-rx");

var _uuid = require("@sanity/uuid");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _changeIndicators = require("../../../components/changeIndicators");

var _PreviewCard = require("../../../components/PreviewCard");

var _patch = require("../../patch");

var _empty = require("../../utils/empty");

var _isNonNullable = require("../../utils/isNonNullable");

var _AlertStrip = require("../../components/AlertStrip");

var _Alert = require("../../components/Alert");

var _useOnClickOutside = require("../../hooks/useOnClickOutside");

var _util = require("../../../util");

var _router = require("../../../router");

var _OptionPreview = require("./OptionPreview");

var _useReferenceInfo = require("./useReferenceInfo");

var _PreviewReferenceValue = require("./PreviewReferenceValue");

var _CreateButton = require("./CreateButton");

var _ReferenceAutocomplete = require("./ReferenceAutocomplete");

var _AutocompleteContainer = require("./AutocompleteContainer");

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const StyledPreviewCard = (0, _styledComponents.default)(_PreviewCard.PreviewCard)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  /* this is a hack to avoid layout jumps while previews are loading\n  there's probably better ways of solving this */\n  min-height: 36px;\n"])));
const INITIAL_SEARCH_STATE = {
  hits: [],
  isLoading: false
};

const NO_FILTER = () => true;

function nonNullable(v) {
  return v !== null;
}

const REF_PATH = ['_ref'];

function ReferenceInput(props) {
  var _loadableReferenceInf, _value$_strengthenOnP, _loadableReferenceInf2, _loadableReferenceInf3, _loadableReferenceInf4, _loadableReferenceInf5, _loadableReferenceInf6, _loadableReferenceInf7, _loadableReferenceInf8, _loadableReferenceInf9, _loadableReferenceInf10;

  const {
    createOptions,
    editReferenceLinkComponent: EditReferenceLink,
    focusPath = _empty.EMPTY_ARRAY,
    focused,
    path,
    getReferenceInfo,
    liveEdit,
    onChange,
    onEditReference,
    onSearch,
    selectedState,
    schemaType,
    onFocus,
    onBlur,
    changed,
    readOnly,
    onFocusPath,
    validation,
    focusRef,
    value,
    renderPreview
  } = props;
  const [searchState, setSearchState] = (0, _react.useState)(INITIAL_SEARCH_STATE);
  const handleCreateNew = (0, _react.useCallback)(option => {
    const id = (0, _uuid.uuid)();
    const patches = [(0, _patch.setIfMissing)({}), (0, _patch.set)(schemaType.name, ['_type']), (0, _patch.set)(id, ['_ref']), (0, _patch.set)(true, ['_weak']), (0, _patch.set)({
      type: option.type,
      weak: schemaType.weak,
      template: option.template
    }, ['_strengthenOnPublish'])].filter(_isNonNullable.isNonNullable);
    onChange(patches);
    onEditReference({
      id,
      type: option.type,
      template: option.template
    });
    onFocusPath([]);
  }, [onChange, onEditReference, onFocusPath, schemaType]);
  const handleChange = (0, _react.useCallback)(id => {
    if (!id) {
      onChange((0, _patch.unset)());
      onFocusPath([]);
      return;
    }

    const hit = searchState.hits.find(h => h.id === id);

    if (!hit) {
      throw new Error('Selected an item that wasnt part of the result set');
    } // if there's no published version of this document, set the reference to weak


    const patches = [(0, _patch.setIfMissing)({}), (0, _patch.set)(schemaType.name, ['_type']), (0, _patch.set)((0, _util.getPublishedId)(id), ['_ref']), hit.published && !schemaType.weak ? (0, _patch.unset)(['_weak']) : (0, _patch.set)(true, ['_weak']), hit.published ? (0, _patch.unset)(['_strengthenOnPublish']) : (0, _patch.set)({
      type: hit === null || hit === void 0 ? void 0 : hit.type,
      weak: schemaType.weak
    }, ['_strengthenOnPublish'])].filter(_isNonNullable.isNonNullable);
    onChange(patches);
    onFocusPath([]);
  }, [searchState.hits, schemaType.name, schemaType.weak, onChange, onFocusPath]);
  const handleClear = (0, _react.useCallback)(() => {
    onChange((0, _patch.unset)());
  }, [onChange]);
  const handlePreviewKeyPress = (0, _react.useCallback)(event => {
    if (event.key !== 'Enter' && event.key !== 'Space') {
      // enable "search for reference"-mode
      onFocusPath(['_ref']);
    }
  }, [onFocusPath]);
  const handleAutocompleteKeyDown = (0, _react.useCallback)(event => {
    // escape
    if (event.keyCode === 27) {
      onFocusPath([]);
    }
  }, [onFocusPath]);
  const getReferenceInfoMemo = (0, _react.useCallback)(id => getReferenceInfo(id, schemaType), [getReferenceInfo, schemaType]);
  const loadableReferenceInfo = (0, _useReferenceInfo.useReferenceInfo)(value === null || value === void 0 ? void 0 : value._ref, getReferenceInfoMemo);
  const refTypeName = ((_loadableReferenceInf = loadableReferenceInfo.result) === null || _loadableReferenceInf === void 0 ? void 0 : _loadableReferenceInf.type) || (value === null || value === void 0 ? void 0 : (_value$_strengthenOnP = value._strengthenOnPublish) === null || _value$_strengthenOnP === void 0 ? void 0 : _value$_strengthenOnP.type);
  const refType = refTypeName ? schemaType.to.find(toType => toType.name === refTypeName) : null;
  const autocompletePopoverReferenceElementRef = (0, _react.useRef)(null); // --- focus handling

  const hasFocusAtRef = focusPath.length === 1 && focusPath[0] === '_ref'; // todo: fixme

  const forwardedRef = (0, _ui.useForwardedRef)(focusRef); // useDidUpdate({hasFocusAt: hasFocusAtRef, ref: value?._ref}, (prev, current) => {
  //   const refUpdated = prev?.ref !== current.ref
  //   const focusAtUpdated = prev?.hasFocusAt !== current.hasFocusAt
  //   if ((focusAtUpdated || refUpdated) && current.hasFocusAt) {
  //     // if search mode changed and we're having focus always ensure the
  //     // ref element gets focus
  //     forwardedRef.current?.focus()
  //   }
  // })

  const weakIs = value !== null && value !== void 0 && value._weak ? 'weak' : 'strong';
  const weakShouldBe = schemaType.weak === true ? 'weak' : 'strong';
  const hasRef = Boolean(value === null || value === void 0 ? void 0 : value._ref); // If the reference value is marked with _strengthenOnPublish,
  // we allow weak references if the reference points to a document that has a draft but not a published
  // In all other cases we should display a "weak mismatch" warning

  const weakWarningOverride = hasRef && !loadableReferenceInfo.isLoading && (value === null || value === void 0 ? void 0 : value._strengthenOnPublish);
  const handleFixStrengthMismatch = (0, _react.useCallback)(() => {
    onChange(schemaType.weak === true ? (0, _patch.set)(true, ['_weak']) : (0, _patch.unset)(['_weak']));
  }, [onChange, schemaType]);
  const referenceExists = hasRef && ((_loadableReferenceInf2 = loadableReferenceInfo.result) === null || _loadableReferenceInf2 === void 0 ? void 0 : (_loadableReferenceInf3 = _loadableReferenceInf2.preview) === null || _loadableReferenceInf3 === void 0 ? void 0 : (_loadableReferenceInf4 = _loadableReferenceInf3.published) === null || _loadableReferenceInf4 === void 0 ? void 0 : _loadableReferenceInf4._id);
  const handleRemoveStrengthenOnPublish = (0, _react.useCallback)(() => {
    onChange([schemaType.weak === true ? (0, _patch.set)(true, ['_weak']) : (0, _patch.unset)(['_weak']), (0, _patch.unset)(['_strengthenOnPublish'])]);
  }, [onChange, schemaType]);
  const {
    push
  } = (0, _ui.useToast)();
  const errors = (0, _react.useMemo)(() => validation.filter(item => item.level === 'error'), [validation]);
  const pressed = selectedState === 'pressed';
  const selected = selectedState === 'selected';
  const handleFocus = (0, _react.useCallback)(event => {
    if (onFocus && event.currentTarget === (forwardedRef === null || forwardedRef === void 0 ? void 0 : forwardedRef.current)) {
      onFocus(event);
    }
  }, [forwardedRef, onFocus]);
  const handleAutocompleteFocus = (0, _react.useCallback)(event => {
    if (onFocus && event.currentTarget === (forwardedRef === null || forwardedRef === void 0 ? void 0 : forwardedRef.current)) {
      onFocus(event);
    }
  }, [onFocus, forwardedRef]);
  const handleQueryChange = (0, _reactRx.useObservableCallback)(inputValue$ => {
    return inputValue$.pipe((0, _operators.filter)(nonNullable), (0, _operators.distinctUntilChanged)(), (0, _operators.switchMap)(searchString => (0, _rxjs.concat)((0, _rxjs.of)({
      isLoading: true
    }), onSearch(searchString).pipe((0, _operators.map)(hits => ({
      hits,
      searchString,
      isLoading: false
    })), (0, _operators.catchError)(error => {
      push({
        title: 'Reference search failed',
        description: error.message,
        status: 'error',
        id: "reference-search-fail-".concat(inputId)
      });
      console.error(error);
      return (0, _rxjs.of)({
        hits: []
      });
    })))), (0, _operators.scan)((prevState, nextState) => ({ ...prevState,
      ...nextState
    }), INITIAL_SEARCH_STATE), (0, _operators.tap)(setSearchState));
  }, []);
  const handleAutocompleteOpenButtonClick = (0, _react.useCallback)(() => {
    handleQueryChange('');
  }, [handleQueryChange]);
  const showWeakRefMismatch = !loadableReferenceInfo.isLoading && hasRef && weakIs !== weakShouldBe && !weakWarningOverride;
  const inputId = (0, _autoId.useId)();
  const handleCreateButtonKeyDown = (0, _react.useCallback)(e => {
    if (e.key === 'Escape') {
      var _forwardedRef$current;

      forwardedRef === null || forwardedRef === void 0 ? void 0 : (_forwardedRef$current = forwardedRef.current) === null || _forwardedRef$current === void 0 ? void 0 : _forwardedRef$current.focus();
    }
  }, [forwardedRef]);
  const renderOption = (0, _react.useCallback)(option => {
    var _option$hit$draft, _option$hit$published;

    const id = ((_option$hit$draft = option.hit.draft) === null || _option$hit$draft === void 0 ? void 0 : _option$hit$draft._id) || ((_option$hit$published = option.hit.published) === null || _option$hit$published === void 0 ? void 0 : _option$hit$published._id);
    return /*#__PURE__*/_react.default.createElement(StyledPreviewCard, {
      forwardedAs: "button",
      type: "button",
      radius: 2,
      tone: "inherit"
    }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
      paddingX: 3,
      paddingY: 1
    }, /*#__PURE__*/_react.default.createElement(_OptionPreview.OptionPreview, {
      getReferenceInfo: getReferenceInfoMemo,
      id: id,
      renderPreview: renderPreview,
      type: schemaType
    })));
  }, [schemaType, getReferenceInfoMemo, renderPreview]);
  const OpenLink = (0, _react.useMemo)(() =>
  /*#__PURE__*/
  // eslint-disable-next-line @typescript-eslint/no-shadow
  (0, _react.forwardRef)(function OpenLink(restProps, _ref) {
    const template = ((value === null || value === void 0 ? void 0 : value._strengthenOnPublish) || {}).template;
    return /*#__PURE__*/_react.default.createElement(_router.IntentLink, _extends({}, restProps, {
      intent: "edit",
      params: [{
        id: value === null || value === void 0 ? void 0 : value._ref,
        type: refType === null || refType === void 0 ? void 0 : refType.name,
        template: template === null || template === void 0 ? void 0 : template.id
      }, {
        params: template === null || template === void 0 ? void 0 : template.params
      }],
      target: "_blank",
      rel: "noopener noreferrer",
      ref: _ref
    }));
  }), [refType === null || refType === void 0 ? void 0 : refType.name, value === null || value === void 0 ? void 0 : value._ref, value === null || value === void 0 ? void 0 : value._strengthenOnPublish]);
  const preview = ((_loadableReferenceInf5 = loadableReferenceInfo.result) === null || _loadableReferenceInf5 === void 0 ? void 0 : _loadableReferenceInf5.preview.draft) || ((_loadableReferenceInf6 = loadableReferenceInfo.result) === null || _loadableReferenceInf6 === void 0 ? void 0 : _loadableReferenceInf6.preview.published);
  const isWeakRefToNonexistent = (loadableReferenceInfo === null || loadableReferenceInfo === void 0 ? void 0 : (_loadableReferenceInf7 = loadableReferenceInfo.result) === null || _loadableReferenceInf7 === void 0 ? void 0 : (_loadableReferenceInf8 = _loadableReferenceInf7.availability) === null || _loadableReferenceInf8 === void 0 ? void 0 : _loadableReferenceInf8.reason) === 'NOT_FOUND' && !(value !== null && value !== void 0 && value._strengthenOnPublish) && (value === null || value === void 0 ? void 0 : value._weak);
  const isEditing = hasFocusAtRef || !(value !== null && value !== void 0 && value._ref); // --- click outside handling

  const clickOutsideBoundaryRef = (0, _react.useRef)(null);
  const autocompletePortalRef = (0, _react.useRef)(null);
  const createButtonMenuPortalRef = (0, _react.useRef)(null);
  (0, _useOnClickOutside.useOnClickOutside)([clickOutsideBoundaryRef, autocompletePortalRef, createButtonMenuPortalRef], () => {
    if (hasFocusAtRef) {
      onFocusPath([]);
    }
  });
  const handleReplaceClick = (0, _react.useCallback)(() => {
    onFocusPath(['_ref']);
  }, [onFocusPath]);
  return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 1 // marginY={isEditing ? 2 : 0}

  }, isEditing || isWeakRefToNonexistent ? /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 2,
    ref: clickOutsideBoundaryRef
  }, isWeakRefToNonexistent ? /*#__PURE__*/_react.default.createElement(_Alert.Alert, {
    "data-testid": "alert-nonexistent-document",
    title: "Nonexistent document reference",
    suffix: /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
      text: "Clear",
      onClick: handleClear
    }))
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 1
  }, "This field is currently referencing a document that doesn't exist (ID:", /*#__PURE__*/_react.default.createElement("code", null, value._ref), "). You can either remove the reference or replace it with another document.")) : null, /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicator, {
    path: REF_PATH,
    hasFocus: !!focused,
    isChanged: changed
  }, /*#__PURE__*/_react.default.createElement(_AutocompleteContainer.AutocompleteContainer, {
    ref: autocompletePopoverReferenceElementRef
  }, /*#__PURE__*/_react.default.createElement(_ReferenceAutocomplete.ReferenceAutocomplete, {
    "data-testid": "autocomplete",
    loading: searchState.isLoading,
    ref: forwardedRef,
    referenceElement: autocompletePopoverReferenceElementRef.current,
    portalRef: autocompletePortalRef,
    id: inputId || '',
    options: searchState.hits.map(hit => ({
      value: hit.id,
      hit: hit
    })),
    onFocus: handleAutocompleteFocus,
    onBlur: onBlur,
    radius: 1,
    placeholder: "Type to search",
    onKeyDown: handleAutocompleteKeyDown,
    readOnly: readOnly,
    disabled: loadableReferenceInfo.isLoading,
    onQueryChange: handleQueryChange,
    searchString: searchState.searchString,
    onChange: handleChange,
    filterOption: NO_FILTER,
    renderOption: renderOption,
    openButton: {
      onClick: handleAutocompleteOpenButtonClick
    }
  }), !readOnly && createOptions.length > 0 && /*#__PURE__*/_react.default.createElement(_CreateButton.CreateButton, {
    id: "".concat(inputId, "-selectTypeMenuButton"),
    createOptions: createOptions,
    onCreate: handleCreateNew,
    onKeyDown: handleCreateButtonKeyDown,
    menuRef: createButtonMenuPortalRef
  })))) : /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicator, {
    path: path,
    hasFocus: !!focused,
    isChanged: changed
  }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    border: true,
    radius: 1,
    tone: readOnly ? 'transparent' : loadableReferenceInfo.error || errors.length > 0 ? 'critical' : 'inherit'
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    padding: 1
  }, /*#__PURE__*/_react.default.createElement(StyledPreviewCard, {
    __unstable_focusRing: true,
    forwardedAs: EditReferenceLink // @todo: fix typing
    ,
    "data-as": "a",
    "data-pressed": pressed ? true : undefined,
    "data-selected": selected ? true : undefined,
    documentId: value === null || value === void 0 ? void 0 : value._ref,
    documentType: refType === null || refType === void 0 ? void 0 : refType.name,
    flex: 1,
    onFocus: handleFocus,
    onKeyPress: handlePreviewKeyPress,
    padding: 1,
    paddingRight: 3,
    pressed: pressed,
    radius: 2,
    ref: forwardedRef,
    selected: selected,
    tabIndex: 0,
    tone: selected ? 'default' : 'inherit'
  }, /*#__PURE__*/_react.default.createElement(_PreviewReferenceValue.PreviewReferenceValue, {
    referenceInfo: loadableReferenceInfo,
    renderPreview: renderPreview,
    type: schemaType,
    value: value
  })), /*#__PURE__*/_react.default.createElement(_ui.Inline, {
    paddingX: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.MenuButton, {
    button: /*#__PURE__*/_react.default.createElement(_ui.Button, {
      padding: 2,
      mode: "bleed",
      icon: _icons.EllipsisVerticalIcon
    }),
    id: "".concat(inputId, "-menuButton"),
    menu: /*#__PURE__*/_react.default.createElement(_ui.Menu, null, !readOnly && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
      text: "Clear",
      tone: "critical",
      icon: _icons.ResetIcon,
      onClick: handleClear
    }), /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
      text: "Replace",
      icon: _icons.SyncIcon,
      onClick: handleReplaceClick
    }), /*#__PURE__*/_react.default.createElement(_ui.MenuDivider, null)), /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
      as: OpenLink,
      "data-as": "a",
      text: "Open in new tab",
      icon: _icons.LaunchIcon
    })),
    placement: "right",
    popover: {
      portal: true,
      tone: 'default'
    }
  }))), liveEdit && referenceExists && value._strengthenOnPublish && /*#__PURE__*/_react.default.createElement(_AlertStrip.AlertStrip, {
    padding: 1,
    title: schemaType.weak ? 'Finalize reference' : 'Convert to strong reference',
    status: "info",
    "data-testid": "alert-reference-published"
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    as: "p",
    muted: true,
    size: 1
  }, /*#__PURE__*/_react.default.createElement("strong", null, (_loadableReferenceInf9 = loadableReferenceInfo.result) === null || _loadableReferenceInf9 === void 0 ? void 0 : (_loadableReferenceInf10 = _loadableReferenceInf9.preview.published) === null || _loadableReferenceInf10 === void 0 ? void 0 : _loadableReferenceInf10.title), " is published and this reference should now be", ' ', schemaType.weak ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "finalized") : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "converted to a strong reference"), "."), /*#__PURE__*/_react.default.createElement(_ui.Button, {
    onClick: handleRemoveStrengthenOnPublish,
    text: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Convert to strong reference"),
    tone: "positive"
  }))), showWeakRefMismatch && /*#__PURE__*/_react.default.createElement(_AlertStrip.AlertStrip, {
    padding: 1,
    title: "Reference strength mismatch",
    status: "warning",
    "data-testid": "alert-reference-strength-mismatch"
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    as: "p",
    muted: true,
    size: 1
  }, "This reference is ", /*#__PURE__*/_react.default.createElement("em", null, weakIs), ", but according to the current schema it should be ", /*#__PURE__*/_react.default.createElement("em", null, weakShouldBe, ".")), /*#__PURE__*/_react.default.createElement(_ui.Text, {
    as: "p",
    muted: true,
    size: 1
  }, schemaType.weak ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "It will not be possible to delete the \"", preview === null || preview === void 0 ? void 0 : preview.title, "\"-document without first removing this reference.") : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "This makes it possible to delete the \"", preview === null || preview === void 0 ? void 0 : preview.title, "\"-document without first deleting this reference, leaving this field referencing a nonexisting document.")), /*#__PURE__*/_react.default.createElement(_ui.Button, {
    onClick: handleFixStrengthMismatch,
    text: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Convert to ", weakShouldBe, " reference"),
    tone: "caution"
  }))), loadableReferenceInfo.error && /*#__PURE__*/_react.default.createElement(_AlertStrip.AlertStrip, {
    padding: 1,
    title: "Unable to load reference metadata",
    status: "warning",
    "data-testid": "alert-reference-info-failed"
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    as: "p",
    muted: true,
    size: 1
  }, "Error: ", loadableReferenceInfo.error.message), /*#__PURE__*/_react.default.createElement(_ui.Button, {
    onClick: loadableReferenceInfo.retry,
    text: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Retry"),
    tone: "primary"
  }))))));
}