"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OptionPreview = OptionPreview;

var _react = _interopRequireDefault(require("react"));

var _ui = require("@sanity/ui");

var _Alert = require("../../components/Alert");

var _useReferenceInfo = require("./useReferenceInfo");

var _ReferencePreview = require("./ReferencePreview");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable max-nested-callbacks */

/* eslint-disable no-nested-ternary */

/**
 * Used to preview a referenced type
 * Takes the reference type as props
 */
function OptionPreview(props) {
  const {
    getReferenceInfo,
    id: documentId,
    renderPreview
  } = props;
  const {
    isLoading,
    result: referenceInfo,
    error
  } = (0, _useReferenceInfo.useReferenceInfo)(documentId, getReferenceInfo);

  if (isLoading) {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      padding: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.TextSkeleton, {
      style: {
        maxWidth: 320
      },
      radius: 1,
      animated: true
    }), /*#__PURE__*/_react.default.createElement(_ui.TextSkeleton, {
      style: {
        maxWidth: 200
      },
      radius: 1,
      size: 1,
      animated: true
    }));
  }

  if (error) {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      padding: 1
    }, /*#__PURE__*/_react.default.createElement(_Alert.Alert, {
      title: "Failed to load referenced document"
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      muted: true,
      size: 1
    }, "Error: ", error.message)));
  }

  if (!referenceInfo) {
    return null;
  }

  if (referenceInfo.availability.reason === 'PERMISSION_DENIED') {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      padding: 1
    }, "Insufficient permissions to view this document");
  }

  const refType = props.type.to.find(toType => toType.name === referenceInfo.type);

  if (!refType) {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      padding: 1
    }, "Search returned a type that's not valid for this reference: \"$", referenceInfo.type, "\"");
  }

  return referenceInfo && refType && /*#__PURE__*/_react.default.createElement(_ReferencePreview.ReferencePreview, {
    availability: referenceInfo.availability,
    id: referenceInfo.id,
    layout: "default",
    preview: referenceInfo.preview,
    refType: refType,
    renderPreview: renderPreview,
    showTypeLabel: props.type.to.length > 1
  });
}