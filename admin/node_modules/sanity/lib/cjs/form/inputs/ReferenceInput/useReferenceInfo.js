"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useReferenceInfo = useReferenceInfo;

var _react = require("react");

var _operators = require("rxjs/operators");

var _rxjs = require("rxjs");

var _reactRx = require("react-rx");

var _usePrevious = require("../../hooks/usePrevious");

const noop = () => undefined;

const INITIAL_LOADING_STATE = {
  isLoading: true,
  result: undefined,
  error: undefined,
  retry: noop
};
const EMPTY_STATE = {
  isLoading: false,
  result: undefined,
  error: undefined,
  retry: noop
};

function useReferenceInfo(id, getReferenceInfo) {
  // NOTE: this is a small message queue to handle retries
  const msgSubject = (0, _react.useMemo)(() => new _rxjs.Subject(), []);
  const msg$ = (0, _react.useMemo)(() => msgSubject.asObservable(), [msgSubject]);
  const retry = (0, _react.useCallback)(() => {
    msgSubject.next({
      type: 'retry'
    });
  }, [msgSubject]);
  const stream$ = (0, _react.useMemo)(() => (0, _rxjs.concat)((0, _rxjs.of)(null), msg$).pipe((0, _operators.map)(() => id), (0, _operators.concatMap)(refId => refId ? getReferenceInfo(refId).pipe((0, _operators.map)(result => {
    return {
      isLoading: false,
      result,
      error: undefined,
      retry
    };
  }), (0, _operators.startWith)(INITIAL_LOADING_STATE), (0, _operators.catchError)(err => {
    console.error(err);
    return (0, _rxjs.of)({
      isLoading: false,
      result: undefined,
      error: err,
      retry
    });
  })) : (0, _rxjs.of)(EMPTY_STATE))), [getReferenceInfo, id, retry, msg$]);
  const referenceInfo = (0, _reactRx.useObservable)(stream$, INITIAL_LOADING_STATE); // const referenceInfo = useMemoObservable(
  //   () => stream$,
  //   [retryAttempt, getReferenceInfo, id, retry],
  //   INITIAL_LOADING_STATE
  // )
  // workaround for a "bug" with useMemoObservable that doesn't
  // return the initial value upon resubscription

  const previousId = (0, _usePrevious.usePrevious)(id, id);

  if (previousId !== id) {
    return INITIAL_LOADING_STATE;
  }

  return referenceInfo;
}