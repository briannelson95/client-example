"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InlineObject = void 0;

var _color = require("@sanity/color");

var _portableTextEditor = require("@sanity/portable-text-editor");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _ui = require("@sanity/ui");

var _useFormBuilder = require("../../../useFormBuilder");

var _usePortableTextMarkers = require("../hooks/usePortableTextMarkers");

var _useMemberValidation = require("../hooks/useMemberValidation");

var _usePortableTextMembers = require("../hooks/usePortableTextMembers");

var _paths = require("../../../../field/paths");

var _InlineObjectToolbarPopover = require("./InlineObjectToolbarPopover");

var _templateObject, _templateObject2, _templateObject3;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function rootStyle(_ref) {
  var _color$selectable, _color$selectable2, _color$selectable3;

  let {
    theme
  } = _ref;
  const {
    color,
    radius
  } = theme.sanity;
  return (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    line-height: 0;\n    border-radius: ", "px;\n    padding: 2px;\n    box-shadow: inset 0 0 0 1px var(--card-border-color);\n    height: calc(1em - 1px);\n    margin-top: 0.0625em;\n    cursor: default;\n\n    &:not([hidden]) {\n      display: inline-flex;\n      align-items: center;\n      vertical-align: top;\n    }\n\n    &[data-ready-only] {\n      cursor: default;\n    }\n\n    &[data-focused] {\n      box-shadow: inset 0 0 0 1px ", ";\n      color: ", ";\n    }\n\n    &[data-selected] {\n      background-color: ", ";\n    }\n\n    &:not([data-focused]):not([data-selected]) {\n      @media (hover: hover) {\n        &:hover {\n          --card-border-color: ", ";\n        }\n      }\n    }\n\n    &[data-markers] {\n      --card-bg-color: ", ";\n    }\n\n    &[data-warning] {\n      --card-bg-color: ", ";\n\n      @media (hover: hover) {\n        &:hover {\n          --card-border-color: ", ";\n        }\n      }\n    }\n\n    &[data-invalid] {\n      --card-bg-color: ", ";\n      --card-border-color: ", ";\n\n      @media (hover: hover) {\n        &:hover {\n          --card-border-color: ", ";\n        }\n      }\n    }\n  "])), radius[2], (_color$selectable = color.selectable) === null || _color$selectable === void 0 ? void 0 : _color$selectable.primary.selected.border, (_color$selectable2 = color.selectable) === null || _color$selectable2 === void 0 ? void 0 : _color$selectable2.primary.pressed.fg, (_color$selectable3 = color.selectable) === null || _color$selectable3 === void 0 ? void 0 : _color$selectable3.primary.pressed.bg, color.input.default.hovered.border, color.dark ? _color.hues.purple[950].hex : _color.hues.purple[50].hex, color.muted.caution.hovered.bg, color.muted.caution.hovered.border, color.input.invalid.enabled.bg, color.input.invalid.enabled.border, color.input.invalid.hovered.border);
}

const Root = (0, _styledComponents.default)(_ui.Card)(rootStyle);

const PreviewSpan = _styledComponents.default.span(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: block;\n  max-width: calc(5em + 80px);\n  position: relative;\n"])));

const TooltipBox = (0, _styledComponents.default)(_ui.Box)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  max-width: 250px;\n"])));

const InlineObject = /*#__PURE__*/_react.default.forwardRef(function InlineObject(props, forwardedRef) {
  var _memberItem$elementRe2;

  const {
    attributes: {
      focused,
      selected,
      path
    },
    onOpenItem,
    readOnly,
    renderCustomMarkers,
    renderPreview,
    scrollElement,
    type,
    value
  } = props;

  const {
    Markers
  } = (0, _useFormBuilder.useFormBuilder)().__internal.components;

  const editor = (0, _portableTextEditor.usePortableTextEditor)();
  const editorSelection = (0, _portableTextEditor.usePortableTextEditorSelection)();
  const markers = (0, _usePortableTextMarkers.usePortableTextMarkers)(path);
  const memberItem = (0, _usePortableTextMembers.usePortableTextMemberItem)((0, _paths.pathToString)(path));
  const {
    validation,
    hasError,
    hasWarning
  } = (0, _useMemberValidation.useMemberValidation)(memberItem === null || memberItem === void 0 ? void 0 : memberItem.node);
  const hasValidationMarkers = validation.length > 0;
  const [showPopover, setShowPopover] = (0, _react.useState)(false);
  const tone = (0, _react.useMemo)(() => {
    if (hasError) {
      return 'critical';
    }

    if (hasWarning) {
      return 'caution';
    }

    if (selected || focused) {
      return 'primary';
    }

    return undefined;
  }, [focused, hasError, hasWarning, selected]);
  (0, _react.useEffect)(() => {
    var _memberItem$elementRe;

    if (memberItem !== null && memberItem !== void 0 && (_memberItem$elementRe = memberItem.elementRef) !== null && _memberItem$elementRe !== void 0 && _memberItem$elementRe.current) {
      setShowPopover(!readOnly && focused && selected);
    }
  }, [focused, selected, editorSelection, memberItem === null || memberItem === void 0 ? void 0 : memberItem.elementRef, readOnly]);
  const preview = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(PreviewSpan, null, renderPreview({
    fallbackTitle: 'Click to edit',
    layout: 'inline',
    schemaType: type,
    value
  })), [renderPreview, type, value]);
  const markersToolTip = (0, _react.useMemo)(() => markers.length > 0 || validation.length > 0 ? /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    placement: "bottom",
    portal: "editor",
    content: /*#__PURE__*/_react.default.createElement(TooltipBox, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(Markers, {
      markers: markers,
      validation: validation,
      renderCustomMarkers: renderCustomMarkers
    }))
  }, preview) : undefined, [Markers, markers, validation, preview, renderCustomMarkers]);
  const handleRemoveClick = (0, _react.useCallback)(event => {
    event.preventDefault();
    event.stopPropagation();
    setShowPopover(false);
    const point = {
      path,
      offset: 0
    };
    const selection = {
      anchor: point,
      focus: point
    };

    _portableTextEditor.PortableTextEditor.delete(editor, selection, {
      mode: 'children'
    });

    _portableTextEditor.PortableTextEditor.focus(editor);
  }, [editor, path]);
  const handleEditClick = (0, _react.useCallback)(() => {
    setShowPopover(false);

    _portableTextEditor.PortableTextEditor.blur(editor);

    if (memberItem) {
      onOpenItem(memberItem.node.path);
    }
  }, [editor, memberItem, onOpenItem]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(Root, {
    "data-focused": focused || undefined,
    "data-invalid": hasError || undefined,
    "data-warning": hasWarning || undefined,
    "data-selected": selected || undefined,
    "data-read-only": readOnly || undefined,
    "data-markers": hasValidationMarkers || undefined,
    tone: tone,
    forwardedAs: "span",
    contentEditable: false,
    ref: memberItem === null || memberItem === void 0 ? void 0 : memberItem.elementRef
  }, /*#__PURE__*/_react.default.createElement("span", {
    ref: forwardedRef,
    onDoubleClick: handleEditClick
  }, markersToolTip || preview)), showPopover && /*#__PURE__*/_react.default.createElement(_InlineObjectToolbarPopover.InlineObjectToolbarPopover, {
    open: showPopover,
    setOpen: setShowPopover,
    onDelete: handleRemoveClick,
    onEdit: handleEditClick,
    referenceElement: (memberItem === null || memberItem === void 0 ? void 0 : (_memberItem$elementRe2 = memberItem.elementRef) === null || _memberItem$elementRe2 === void 0 ? void 0 : _memberItem$elementRe2.current) || null,
    scrollElement: scrollElement,
    title: (type === null || type === void 0 ? void 0 : type.title) || type.name
  }));
});

exports.InlineObject = InlineObject;