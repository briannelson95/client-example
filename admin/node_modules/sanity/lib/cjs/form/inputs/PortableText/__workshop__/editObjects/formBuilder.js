"use strict";

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _patch = require("../../../../patch");

var _templateObject;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const DebugTextArea = (0, _styledComponents.default)(_ui.TextArea)(_ref => {
  let {
    theme
  } = _ref;
  return (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    font-family: ", ";\n  "])), theme.sanity.fonts.code.family);
});

function DebugInput(props) {
  const {
    onChange,
    onBlur,
    onFocus,
    readOnly,
    focusRef
  } = props;
  const handleChange = (0, _react.useCallback)(() => {
    onChange((0, _patch.set)({}));
  }, [onChange]);
  return /*#__PURE__*/_react.default.createElement(DebugTextArea, {
    onBlur: onBlur,
    onChange: handleChange,
    onFocus: onFocus,
    padding: 3,
    radius: 1,
    readOnly: readOnly,
    ref: focusRef,
    rows: 100,
    value: JSON.stringify(props.value, null, 2)
  });
} // export const resolveInputComponent: FormInputComponentResolver = () => {
//   return DebugInput
// }
// export const resolvePreviewComponent = () => {
//   return function PreviewAny() {
//     return <div>preview</div>
//   }
// }