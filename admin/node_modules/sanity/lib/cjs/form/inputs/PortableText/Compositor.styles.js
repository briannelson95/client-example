"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Root = exports.ExpandedLayer = void 0;

var _ui = require("@sanity/ui");

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _helpers = require("../../components/withFocusRing/helpers");

var _templateObject, _templateObject2;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const Root = _styledComponents.default.div(_ref => {
  let {
    theme
  } = _ref;
  const {
    focusRing,
    input
  } = theme.sanity;
  const base = theme.sanity.color.base;
  const color = theme.sanity.color.input;
  const border = {
    color: color.default.enabled.border,
    width: input.border.width
  };
  return (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    --input-box-shadow: ", ";\n\n    position: relative;\n\n    & [data-wrapper] {\n      overflow: hidden;\n      position: relative;\n      z-index: 1;\n      padding: ", "px;\n    }\n\n    & [data-border] {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      box-shadow: var(--input-box-shadow);\n      z-index: 2;\n      border-radius: 1px;\n      pointer-events: none;\n    }\n\n    &:not([data-read-only])[data-focused] [data-border] {\n      --input-box-shadow: ", ";\n    }\n  "])), (0, _helpers.focusRingBorderStyle)(border), input.border.width, (0, _helpers.focusRingStyle)({
    base,
    border,
    focusRing
  }));
}); // This element only wraps the input when in "fullscreen" mode


exports.Root = Root;
const ExpandedLayer = (0, _styledComponents.default)(_ui.Layer)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  &:not([data-fullscreen]) {\n    position: relative;\n  }\n"])));
exports.ExpandedLayer = ExpandedLayer;