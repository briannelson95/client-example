"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockStyleSelect = void 0;

var _react = _interopRequireWildcard(require("react"));

var _portableTextEditor = require("@sanity/portable-text-editor");

var _ui = require("@sanity/ui");

var _icons = require("@sanity/icons");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _textStyles = require("../text/textStyles");

var _hooks = require("./hooks");

var _templateObject, _templateObject2;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const MenuButtonMemo = /*#__PURE__*/(0, _react.memo)(_ui.MenuButton);
const StyledMenuItem = (0, _styledComponents.default)(_ui.MenuItem)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  // Change the border color variable used by BlockQuote\n  // to make the border visible when the MenuItem is selected\n  &[data-selected] {\n    [data-option='blockquote'] {\n      --card-border-color: var(--card-muted-fg-color);\n    }\n  }\n"])));
const StyledButton = (0, _styledComponents.default)(_ui.Button)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  width: 100%;\n"])));
const MENU_POPOVER_PROPS = {
  constrainSize: true,
  placement: 'bottom-start',
  portal: 'default'
};
const TEXT_STYLE_OPTIONS = {
  h1: title => /*#__PURE__*/_react.default.createElement(_textStyles.Heading1, null, title),
  h2: title => /*#__PURE__*/_react.default.createElement(_textStyles.Heading2, null, title),
  h3: title => /*#__PURE__*/_react.default.createElement(_textStyles.Heading3, null, title),
  h4: title => /*#__PURE__*/_react.default.createElement(_textStyles.Heading4, null, title),
  h5: title => /*#__PURE__*/_react.default.createElement(_textStyles.Heading5, null, title),
  h6: title => /*#__PURE__*/_react.default.createElement(_textStyles.Heading6, null, title),
  normal: title => /*#__PURE__*/_react.default.createElement(_textStyles.Normal, null, title),
  blockquote: title => /*#__PURE__*/_react.default.createElement(_textStyles.BlockQuote, {
    "data-option": "blockquote"
  }, title)
};
const TEXT_STYLE_KEYS = Object.keys(TEXT_STYLE_OPTIONS);

const preventDefault = event => event.preventDefault();

const emptyStyle = {
  key: 'style-none',
  style: '',
  title: 'No style'
};
const BlockStyleSelect = /*#__PURE__*/(0, _react.memo)(function BlockStyleSelect(props) {
  const {
    disabled,
    items: itemsProp
  } = props;
  const editor = (0, _portableTextEditor.usePortableTextEditor)();
  const features = (0, _hooks.useFeatures)();
  const focusBlock = (0, _hooks.useFocusBlock)();
  const [changed, setChanged] = (0, _react.useState)(false);

  const _disabled = disabled || (focusBlock ? features.types.block.name !== focusBlock._type : false); // @todo: Explain what this does


  const activeKeys = (0, _hooks.useActiveStyleKeys)({
    items: itemsProp
  });
  const {
    activeItems,
    items
  } = (0, _react.useMemo)(() => {
    const _activeItems = itemsProp.filter(item => activeKeys.includes(item.style));

    let _items = itemsProp;

    if (_activeItems.length === 0 && _items.length > 1) {
      _items = _items.concat([emptyStyle]);

      _activeItems.push(emptyStyle);
    }

    return {
      activeItems: _activeItems,
      items: _items
    };
  }, [activeKeys, itemsProp]);
  const menuButtonText = (0, _react.useMemo)(() => {
    if (activeItems.length > 1) return 'Multiple';
    if (activeItems.length === 1) return activeItems[0].title;
    return emptyStyle.title;
  }, [activeItems]);
  const handleChange = (0, _react.useCallback)(item => {
    if (focusBlock && item.style !== focusBlock.style) {
      _portableTextEditor.PortableTextEditor.toggleBlockStyle(editor, item.style);
    }

    setChanged(true);
  }, [editor, focusBlock]);
  const renderOption = (0, _react.useCallback)((style, title) => {
    const hasTextStyle = TEXT_STYLE_KEYS.includes(style);
    const renderStyle = TEXT_STYLE_OPTIONS[style];

    if (hasTextStyle) {
      return renderStyle(title);
    }

    return /*#__PURE__*/_react.default.createElement(_ui.Text, null, title);
  }, []);
  const button = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(StyledButton, {
    disabled: _disabled,
    iconRight: _icons.SelectIcon,
    mode: "bleed",
    onClick: preventDefault,
    padding: 2,
    text: menuButtonText
  }), [_disabled, menuButtonText]);
  const menu = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(_ui.Menu, {
    disabled: _disabled
  }, items.map(item => {
    return /*#__PURE__*/_react.default.createElement(StyledMenuItem, {
      key: item.key,
      pressed: activeItems.includes(item) // eslint-disable-next-line react/jsx-no-bind
      ,
      onClick: _disabled ? undefined : () => handleChange(item)
    }, renderOption(item.style, (item === null || item === void 0 ? void 0 : item.title) || item.style));
  })), [_disabled, activeItems, handleChange, items, renderOption]); // Set focus back into the editor when the new value get's in
  // This must be the last registered hook or it will not be able to focus properly.

  (0, _react.useEffect)(() => {
    if (changed) {
      _portableTextEditor.PortableTextEditor.focus(editor);

      setChanged(false);
    }
  }, [activeItems, changed, editor]);
  return /*#__PURE__*/_react.default.createElement(MenuButtonMemo, {
    popover: MENU_POPOVER_PROPS,
    id: "block-style-select",
    button: button,
    menu: menu
  });
});
exports.BlockStyleSelect = BlockStyleSelect;