"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextBlock = TextBlock;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _useFormBuilder = require("../../../useFormBuilder");

var _BlockActions = require("../BlockActions");

var _common = require("../_common");

var _useMemberValidation = require("../hooks/useMemberValidation");

var _usePortableTextMarkers = require("../hooks/usePortableTextMarkers");

var _usePortableTextMembers = require("../hooks/usePortableTextMembers");

var _paths = require("../../../../field/paths");

var _constants = require("./constants");

var _TextBlock = require("./TextBlock.styles");

var _textStyles = require("./textStyles");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const DEBUG_RENDERING = false;

function getRandomColor() {
  const letters = '0123456789ABCDEF';
  let color = '#';

  for (let i = 0; i < 6; i++) {
    color += letters[Math.floor(Math.random() * 16)];
  }

  return color;
}

function TextBlock(props) {
  const {
    attributes: {
      path,
      focused
    },
    block,
    children,
    isFullscreen,
    onChange,
    readOnly,
    renderBlockActions,
    renderCustomMarkers,
    spellCheck
  } = props;

  const {
    Markers
  } = (0, _useFormBuilder.useFormBuilder)().__internal.components;

  const [reviewChangesHovered, setReviewChangesHovered] = (0, _react.useState)(false);
  const markers = (0, _usePortableTextMarkers.usePortableTextMarkers)(path);
  const memberItem = (0, _usePortableTextMembers.usePortableTextMemberItem)((0, _paths.pathToString)(path));
  const handleChangeIndicatorMouseEnter = (0, _react.useCallback)(() => setReviewChangesHovered(true), []);
  const handleChangeIndicatorMouseLeave = (0, _react.useCallback)(() => setReviewChangesHovered(false), []);
  const {
    validation,
    hasError,
    hasWarning,
    hasInfo
  } = (0, _useMemberValidation.useMemberValidation)(memberItem === null || memberItem === void 0 ? void 0 : memberItem.node);
  const hasMarkers = Boolean(renderCustomMarkers) && markers.length > 0;
  const tooltipEnabled = hasError || hasWarning || hasMarkers || hasInfo;
  const text = (0, _react.useMemo)(() => {
    const TextStyle = _textStyles.TEXT_STYLES[block.style] || _textStyles.TEXT_STYLES.normal;
    return /*#__PURE__*/_react.default.createElement(_TextBlock.TextFlex, {
      align: "flex-start",
      $level: block === null || block === void 0 ? void 0 : block.level
    }, block.listItem && /*#__PURE__*/_react.default.createElement(_TextBlock.ListPrefixWrapper, {
      contentEditable: false
    }, /*#__PURE__*/_react.default.createElement(TextStyle, {
      "data-list-prefix": ""
    })), /*#__PURE__*/_react.default.createElement(TextStyle, {
      "data-text": "",
      style: DEBUG_RENDERING ? {
        color: getRandomColor()
      } : undefined
    }, children));
  }, [block.style, block.listItem, block.level, children]);
  const innerPaddingProps = (0, _react.useMemo)(() => {
    if (isFullscreen && !renderBlockActions) {
      return {
        paddingX: 5
      };
    }

    if (isFullscreen && renderBlockActions) {
      return {
        paddingLeft: 5,
        paddingRight: 2
      };
    }

    if (renderBlockActions) {
      return {
        paddingLeft: 3,
        paddingRight: 2
      };
    }

    return {
      paddingX: 3
    };
  }, [isFullscreen, renderBlockActions]);
  const outerPaddingProps = (0, _react.useMemo)(() => {
    if (block.listItem) {
      return {
        paddingY: 2
      };
    }

    return _constants.TEXT_STYLE_PADDING[block.style] || {
      paddingY: 2
    };
  }, [block]);
  return /*#__PURE__*/_react.default.createElement(_ui.Box, _extends({
    "data-testid": "text-block"
  }, outerPaddingProps), /*#__PURE__*/_react.default.createElement(_TextBlock.TextBlockFlexWrapper, {
    "data-testid": "text-block__wrapper"
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, _extends({
    flex: 1
  }, innerPaddingProps, {
    ref: memberItem === null || memberItem === void 0 ? void 0 : memberItem.elementRef
  }), /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    placement: "top",
    portal: "editor",
    disabled: !tooltipEnabled,
    content: tooltipEnabled && /*#__PURE__*/_react.default.createElement(_TextBlock.TooltipBox, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(Markers, {
      markers: markers,
      validation: validation,
      renderCustomMarkers: renderCustomMarkers
    }))
  }, /*#__PURE__*/_react.default.createElement(_TextBlock.TextRoot, {
    $level: block.level,
    "data-error": hasError ? '' : undefined,
    "data-warning": hasWarning ? '' : undefined,
    "data-list-item": block.listItem // @todo: rename to `data-markers`
    ,
    "data-custom-markers": hasMarkers ? '' : undefined,
    "data-testid": "text-block__text",
    spellCheck: spellCheck
  }, text)), /*#__PURE__*/_react.default.createElement("div", {
    contentEditable: false
  }, /*#__PURE__*/_react.default.createElement(_TextBlock.BlockExtrasContainer, null, renderBlockActions && /*#__PURE__*/_react.default.createElement(_TextBlock.BlockActionsOuter, {
    marginRight: 1
  }, /*#__PURE__*/_react.default.createElement(_TextBlock.BlockActionsInner, null, focused && !readOnly && /*#__PURE__*/_react.default.createElement(_BlockActions.BlockActions, {
    onChange: onChange,
    block: block,
    renderBlockActions: renderBlockActions
  }))), isFullscreen && memberItem && /*#__PURE__*/_react.default.createElement(_TextBlock.ChangeIndicatorWrapper, {
    $hasChanges: memberItem.member.item.changed,
    onMouseEnter: handleChangeIndicatorMouseEnter,
    onMouseLeave: handleChangeIndicatorMouseLeave
  }, /*#__PURE__*/_react.default.createElement(_common.StyledChangeIndicatorWithProvidedFullPath, {
    hasFocus: focused,
    isChanged: memberItem.member.item.changed,
    path: memberItem.member.item.path,
    withHoverEffect: false
  }))), reviewChangesHovered && /*#__PURE__*/_react.default.createElement(_common.ReviewChangesHighlightBlock, null)))));
}