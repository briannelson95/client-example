"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Story;

var _ui = require("@sanity/ui");

var _uiWorkshop = require("@sanity/ui-workshop");

var _react = _interopRequireWildcard(require("react"));

var _mockSanityClient = require("../../../../../../test/mocks/mockSanityClient");

var _config = require("../../../../../config");

var _hooks = require("../../../../../hooks");

var _studio = require("../../../../../studio");

var _PatchChannel = require("../../../../patch/PatchChannel");

var _applyPatch = require("../../../../patch/applyPatch");

var _patch = require("../../../../patch");

var _values = require("./values");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const ptType = {
  type: 'array',
  name: 'body',
  of: [{
    type: 'block'
  }]
};
const config = (0, _config.createConfig)({
  name: 'test',
  dataset: 'test',
  projectId: 'test',
  schema: {
    types: [ptType]
  },
  unstable_clientFactory: () => (0, _mockSanityClient.createMockSanityClient)()
});

function Story() {
  return /*#__PURE__*/_react.default.createElement(_studio.StudioProvider, {
    config: config
  }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    height: "fill",
    padding: 4,
    sizing: "border"
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    height: "fill",
    justify: "center"
  }, /*#__PURE__*/_react.default.createElement(_ui.Container, {
    width: 1
  }, /*#__PURE__*/_react.default.createElement(TestForm, null)))));
}

function TestForm() {
  const schema = (0, _hooks.useSchema)(); // const readOnly = useBoolean('Read only', false)
  // const withError = useBoolean('With error', false)
  // const withWarning = useBoolean('With warning', false)

  const selectedValue = (0, _uiWorkshop.useSelect)('Values', _values.valueOptions) || 'empty';
  const [value, setValue] = (0, _react.useState)(_values.values[selectedValue]);
  const type = schema.get('body');
  const patchChannel = (0, _react.useMemo)(() => (0, _PatchChannel.createPatchChannel)(), []);
  const [focusPath, setFocusPath] = (0, _react.useState)([]);
  const changed = false;
  const focusRef = (0, _react.useRef)();
  const handleAppendItem = (0, _uiWorkshop.useAction)('onAppendItem');
  const handleBlur = (0, _uiWorkshop.useAction)('onBlur');
  const handleFocus = (0, _uiWorkshop.useAction)('onFocus');
  const handleInsert = (0, _uiWorkshop.useAction)('onInsert');
  const handleMoveItem = (0, _uiWorkshop.useAction)('onMoveItem');
  const handlePrependItem = (0, _uiWorkshop.useAction)('onPrependItem');
  const handleRemoveItem = (0, _uiWorkshop.useAction)('onRemoveItem');
  const handleOpenItem = (0, _uiWorkshop.useAction)('onOpenItem');
  const handleCloseItem = (0, _uiWorkshop.useAction)('onCloseItem');
  const handleExpand = (0, _uiWorkshop.useAction)('onExpand');
  const handleCollapse = (0, _uiWorkshop.useAction)('onCollapse');
  const handleCollapseItem = (0, _uiWorkshop.useAction)('onCollapseItem');
  const handleExpandItem = (0, _uiWorkshop.useAction)('onExpandItem');
  const members = (0, _react.useMemo)(() => [], []);
  const path = (0, _react.useMemo)(() => [], []);
  const presence = (0, _react.useMemo)(() => [], []);
  const renderField = (0, _react.useCallback)(() => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "TODO"), []);
  const renderInput = (0, _react.useCallback)(() => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "TODO"), []);
  const renderItem = (0, _react.useCallback)(() => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "TODO"), []);
  const renderPreview = (0, _react.useCallback)(() => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "TODO"), []);
  const resolveInitialValue = (0, _react.useCallback)(() => Promise.resolve({}), []);
  const validation = (0, _react.useMemo)(() => [], []);
  const handleChange = (0, _react.useCallback)(arg => {
    if (arg instanceof _patch.PatchEvent) {
      setValue(prevValue => (0, _applyPatch.applyAll)(prevValue, arg.patches));
    } else if (Array.isArray(arg)) {
      setValue(prevValue => (0, _applyPatch.applyAll)(prevValue, arg));
    } else {
      setValue(prevValue => (0, _applyPatch.applyAll)(prevValue, [arg]));
    }
  }, []);

  if (!type) {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Type not found");
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "TODO"); // return (
  //   <StudioFormBuilderProvider
  //     __internal_patchChannel={patchChannel}
  //     onChange={handleChange}
  //     value={value}
  //   >
  //     <PortableTextInput
  //       compareValue={compareValue}
  //       focusPath={focusPath}
  //       focusRef={focusRef}
  //       id="test"
  //       level={0}
  //       members={members}
  //       onAppendItem={handleAppendItem}
  //       onBlur={handleBlur}
  //       onChange={handleChange}
  //       onFocus={handleFocus}
  //       onFocusPath={setFocusPath}
  //       onInsert={handleInsert}
  //       onMoveItem={handleMoveItem}
  //       onPrependItem={handlePrependItem}
  //       onRemoveItem={handleRemoveItem}
  //       onCollapse={handleCollapse}
  //       onOpenItem={handleOpenItem}
  //       onCloseItem={handleCloseItem}
  //       onExpand={handleExpand}
  //       onCollapseItem={handleCollapseItem}
  //       onExpandItem={handleExpandItem}
  //       path={path}
  //       presence={presence}
  //       renderField={renderField}
  //       renderInput={renderInput}
  //       renderItem={renderItem}
  //       resolveInitialValue={resolveInitialValue}
  //       schemaType={type as ArraySchemaType}
  //       validation={validation}
  //       value={value}
  //     />
  //   </StudioFormBuilderProvider>
  // )
}