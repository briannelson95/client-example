"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Annotation = void 0;

var _color = require("@sanity/color");

var _portableTextEditor = require("@sanity/portable-text-editor");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _Markers = require("../_legacyDefaultParts/Markers");

var _useFormBuilder = require("../../../useFormBuilder");

var _useMemberValidation = require("../hooks/useMemberValidation");

var _usePortableTextMarkers = require("../hooks/usePortableTextMarkers");

var _usePortableTextMembers = require("../hooks/usePortableTextMembers");

var _paths = require("../../../../field/paths");

var _AnnotationToolbarPopover = require("./AnnotationToolbarPopover");

var _templateObject, _templateObject2;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const Root = _styledComponents.default.span(props => {
  var _theme$sanity$color$s, _theme$sanity$color$s2, _theme$sanity$color$s3, _theme$sanity$color$s4;

  const {
    $toneKey = 'default',
    theme
  } = props;
  return (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      text-decoration: none;\n      display: inline;\n      background-color: ", ";\n      border-bottom: 1px dashed ", ";\n      color: ", ";\n\n      &[data-link] {\n        border-bottom: 1px solid ", ";\n      }\n\n      &[data-custom-markers] {\n        background-color: ", ";\n      }\n\n      &[data-warning] {\n        background-color: ", ";\n      }\n\n      &[data-error] {\n        background-color: ", ";\n      }\n    "])), (_theme$sanity$color$s = theme.sanity.color.selectable) === null || _theme$sanity$color$s === void 0 ? void 0 : _theme$sanity$color$s[$toneKey].enabled.bg, (_theme$sanity$color$s2 = theme.sanity.color.selectable) === null || _theme$sanity$color$s2 === void 0 ? void 0 : _theme$sanity$color$s2[$toneKey].enabled.fg, (_theme$sanity$color$s3 = theme.sanity.color.selectable) === null || _theme$sanity$color$s3 === void 0 ? void 0 : _theme$sanity$color$s3[$toneKey].enabled.fg, (_theme$sanity$color$s4 = theme.sanity.color.selectable) === null || _theme$sanity$color$s4 === void 0 ? void 0 : _theme$sanity$color$s4[$toneKey].enabled.fg, theme.sanity.color.dark ? _color.hues.purple[950].hex : _color.hues.purple[50].hex, theme.sanity.color.muted.caution.hovered.bg, theme.sanity.color.muted.critical.hovered.bg);
});

const TooltipBox = (0, _styledComponents.default)(_ui.Box).attrs({
  forwardedAs: 'span'
})(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  max-width: 250px;\n"])));

const Annotation = function Annotation(props) {
  const {
    attributes: {
      focused,
      path,
      selected
    },
    children,
    onOpenItem,
    renderCustomMarkers,
    scrollElement,
    readOnly,
    type,
    value
  } = props;

  const {
    Markers = _Markers.DefaultMarkers
  } = (0, _useFormBuilder.useFormBuilder)().__internal.components;

  const annotationRef = (0, _react.useRef)(null);
  const editor = (0, _portableTextEditor.usePortableTextEditor)();
  const editorSelection = (0, _portableTextEditor.usePortableTextEditorSelection)();
  const markDefPath = (0, _react.useMemo)(() => [path[0]].concat(['markDefs', {
    _key: value._key
  }]), [path, value._key]);
  const [textElement, setTextElement] = (0, _react.useState)(null);
  const memberItem = (0, _usePortableTextMembers.usePortableTextMemberItem)((0, _paths.pathToString)(markDefPath));
  const {
    validation,
    hasError,
    hasWarning
  } = (0, _useMemberValidation.useMemberValidation)(memberItem === null || memberItem === void 0 ? void 0 : memberItem.node);
  const markers = (0, _usePortableTextMarkers.usePortableTextMarkers)(path);
  const [showPopover, setShowPopover] = (0, _react.useState)(false);
  const text = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement("span", {
    ref: setTextElement,
    "data-annotation": ""
  }, children), [children]);
  (0, _react.useEffect)(() => {
    setShowPopover(true);
  }, [editorSelection]);
  (0, _react.useEffect)(() => {
    var _memberItem$elementRe;

    if (memberItem !== null && memberItem !== void 0 && (_memberItem$elementRe = memberItem.elementRef) !== null && _memberItem$elementRe !== void 0 && _memberItem$elementRe.current) {
      setShowPopover(!readOnly && focused && selected);
    }
  }, [focused, selected, memberItem === null || memberItem === void 0 ? void 0 : memberItem.elementRef, readOnly]);
  const markersToolTip = (0, _react.useMemo)(() => validation.length > 0 || markers.length > 0 ? /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    placement: "bottom",
    portal: "default",
    content: /*#__PURE__*/_react.default.createElement(TooltipBox, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(Markers, {
      markers: markers,
      renderCustomMarkers: renderCustomMarkers,
      validation: validation
    }))
  }, /*#__PURE__*/_react.default.createElement("span", null, text)) : undefined, [Markers, markers, renderCustomMarkers, text, validation]);
  const handleEditClick = (0, _react.useCallback)(event => {
    setShowPopover(false);

    _portableTextEditor.PortableTextEditor.blur(editor);

    event.preventDefault();
    event.stopPropagation();

    if (memberItem) {
      onOpenItem(memberItem.node.path);
    }
  }, [editor, memberItem, onOpenItem]);
  const handleRemoveClick = (0, _react.useCallback)(event => {
    event.preventDefault();
    event.stopPropagation();

    _portableTextEditor.PortableTextEditor.removeAnnotation(editor, type);

    _portableTextEditor.PortableTextEditor.focus(editor);
  }, [editor, type]);
  const isLink = type.name === 'link';
  const toneKey = (0, _react.useMemo)(() => {
    if (hasError) {
      return 'critical';
    }

    if (hasWarning) {
      return 'caution';
    }

    if (isLink) {
      return 'primary';
    }

    return 'default';
  }, [isLink, hasError, hasWarning]);
  const hasCustomMarkers = markers.length > 0;
  return /*#__PURE__*/_react.default.createElement(Root, {
    $toneKey: toneKey,
    ref: annotationRef,
    "data-link": isLink ? '' : undefined,
    "data-error": hasError ? '' : undefined,
    "data-warning": hasWarning ? '' : undefined,
    "data-custom-markers": hasCustomMarkers ? '' : undefined
  }, /*#__PURE__*/_react.default.createElement("span", {
    ref: memberItem === null || memberItem === void 0 ? void 0 : memberItem.elementRef
  }, markersToolTip || text), showPopover && /*#__PURE__*/_react.default.createElement(_AnnotationToolbarPopover.AnnotationToolbarPopover, {
    focused: focused,
    textElement: textElement,
    annotationElement: annotationRef === null || annotationRef === void 0 ? void 0 : annotationRef.current,
    scrollElement: scrollElement,
    onEdit: handleEditClick,
    onDelete: handleRemoveClick,
    title: (type === null || type === void 0 ? void 0 : type.title) || type.name
  }));
};

exports.Annotation = Annotation;