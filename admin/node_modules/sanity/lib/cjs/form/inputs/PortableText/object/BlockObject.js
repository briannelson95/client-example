"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockObject = BlockObject;

var _portableTextEditor = require("@sanity/portable-text-editor");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _BlockActions = require("../BlockActions");

var _common = require("../_common");

var _useFormBuilder = require("../../../useFormBuilder");

var _useMemberValidation = require("../hooks/useMemberValidation");

var _usePortableTextMarkers = require("../hooks/usePortableTextMarkers");

var _usePortableTextMembers = require("../hooks/usePortableTextMembers");

var _paths = require("../../../../field/paths");

var _BlockObjectPreview = require("./BlockObjectPreview");

var _BlockObject = require("./BlockObject.styles");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function BlockObject(props) {
  const {
    attributes: {
      focused,
      selected,
      path
    },
    block,
    isFullscreen,
    onChange,
    onOpenItem,
    readOnly,
    renderBlockActions,
    renderCustomMarkers,
    renderPreview,
    type
  } = props;

  const {
    Markers
  } = (0, _useFormBuilder.useFormBuilder)().__internal.components;

  const elementRef = (0, _react.useRef)(null);
  const [reviewChangesHovered, setReviewChangesHovered] = (0, _react.useState)(false);
  const markers = (0, _usePortableTextMarkers.usePortableTextMarkers)(path);
  const editor = (0, _portableTextEditor.usePortableTextEditor)();
  const memberItem = (0, _usePortableTextMembers.usePortableTextMemberItem)((0, _paths.pathToString)(path));
  const handleMouseOver = (0, _react.useCallback)(() => setReviewChangesHovered(true), []);
  const handleMouseOut = (0, _react.useCallback)(() => setReviewChangesHovered(false), []);
  const handleEdit = (0, _react.useCallback)(() => {
    if (memberItem) {
      onOpenItem(memberItem.node.path);
    }
  }, [onOpenItem, memberItem]);
  const handleDoubleClickToOpen = (0, _react.useCallback)(e => {
    e.preventDefault();
    e.stopPropagation();

    _portableTextEditor.PortableTextEditor.blur(editor);

    handleEdit();
  }, [editor, handleEdit]);
  const handleDelete = (0, _react.useCallback)(e => {
    e.stopPropagation();
    e.preventDefault();
    const sel = {
      focus: {
        path,
        offset: 0
      },
      anchor: {
        path,
        offset: 0
      }
    };

    _portableTextEditor.PortableTextEditor.delete(editor, sel, {
      mode: 'blocks'
    }); // Focus will not stick unless this is done through a timeout when deleted through clicking the menu button.


    setTimeout(() => _portableTextEditor.PortableTextEditor.focus(editor));
  }, [editor, path]);
  const blockPreview = (0, _react.useMemo)(() => {
    return /*#__PURE__*/_react.default.createElement(_BlockObjectPreview.BlockObjectPreview, {
      type: type,
      focused: focused,
      value: block,
      readOnly: readOnly,
      onClickingDelete: handleDelete,
      onClickingEdit: handleEdit,
      renderPreview: renderPreview
    });
  }, [focused, type, block, readOnly, handleDelete, handleEdit, renderPreview]);
  const tone = selected || focused ? 'primary' : 'default';
  const innerPaddingProps = (0, _react.useMemo)(() => {
    if (isFullscreen && !renderBlockActions) {
      return {
        paddingX: 5
      };
    }

    if (isFullscreen && renderBlockActions) {
      return {
        paddingLeft: 5,
        paddingRight: 2
      };
    }

    if (renderBlockActions) {
      return {
        paddingLeft: 3,
        paddingRight: 2
      };
    }

    return {
      paddingX: 3
    };
  }, [isFullscreen, renderBlockActions]);
  const {
    validation,
    hasError,
    hasWarning,
    hasInfo
  } = (0, _useMemberValidation.useMemberValidation)(memberItem === null || memberItem === void 0 ? void 0 : memberItem.node);
  const hasMarkers = Boolean(markers.length > 0);
  const isImagePreview = (memberItem === null || memberItem === void 0 ? void 0 : memberItem.node.schemaType.name) === 'image';
  const tooltipEnabled = hasError || hasWarning || hasInfo || hasMarkers && renderCustomMarkers;
  return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    paddingBottom: 1,
    marginY: 3,
    contentEditable: false
  }, /*#__PURE__*/_react.default.createElement(_BlockObject.InnerFlex, {
    flex: 1
  }, /*#__PURE__*/_react.default.createElement(_BlockObject.PreviewContainer, _extends({
    flex: 1
  }, innerPaddingProps), /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    placement: "top",
    portal: "editor",
    disabled: !tooltipEnabled,
    content: tooltipEnabled && /*#__PURE__*/_react.default.createElement(_BlockObject.TooltipBox, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(Markers, {
      markers: markers,
      validation: validation,
      renderCustomMarkers: renderCustomMarkers
    }))
  }, /*#__PURE__*/_react.default.createElement(_BlockObject.Root, {
    "data-focused": focused ? '' : undefined,
    "data-image-preview": isImagePreview ? '' : undefined,
    "data-invalid": hasError ? '' : undefined,
    "data-markers": hasMarkers && renderCustomMarkers ? '' : undefined,
    "data-selected": selected ? '' : undefined,
    "data-testid": "pte-block-object",
    "data-warning": hasWarning ? '' : undefined,
    flex: 1,
    onDoubleClick: handleDoubleClickToOpen,
    padding: isImagePreview ? 0 : 1,
    ref: elementRef,
    tone: tone
  }, /*#__PURE__*/_react.default.createElement(_BlockObject.BlockPreview, {
    ref: memberItem === null || memberItem === void 0 ? void 0 : memberItem.elementRef
  }, blockPreview)))), /*#__PURE__*/_react.default.createElement(_BlockObject.BlockActionsOuter, {
    marginRight: 1
  }, /*#__PURE__*/_react.default.createElement(_BlockObject.BlockActionsInner, null, renderBlockActions && block && focused && !readOnly && /*#__PURE__*/_react.default.createElement(_BlockActions.BlockActions, {
    onChange: onChange,
    block: block,
    renderBlockActions: renderBlockActions
  }))), isFullscreen && memberItem && /*#__PURE__*/_react.default.createElement(_BlockObject.ChangeIndicatorWrapper, {
    onMouseOver: handleMouseOver,
    onMouseOut: handleMouseOut,
    $hasChanges: memberItem.member.item.changed
  }, /*#__PURE__*/_react.default.createElement(_common.StyledChangeIndicatorWithProvidedFullPath, {
    withHoverEffect: false,
    hasFocus: focused,
    path: memberItem.member.item.path,
    isChanged: memberItem.member.item.changed
  })), reviewChangesHovered && /*#__PURE__*/_react.default.createElement(_common.ReviewChangesHighlightBlock, null)));
}