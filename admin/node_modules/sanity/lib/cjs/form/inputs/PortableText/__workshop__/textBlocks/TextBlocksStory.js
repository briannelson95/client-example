"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextBlocksStory = TextBlocksStory;

var _ui = require("@sanity/ui");

var _uiWorkshop = require("@sanity/ui-workshop");

var _react = _interopRequireWildcard(require("react"));

var _studio = require("../../../../../studio");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const errorMarker = {
  level: 'error',
  path: [{
    _key: 'a'
  }],
  item: {
    message: 'There is an error with this text block'
  }
};
const customMarker = {
  type: 'test',
  path: [{
    _key: 'a'
  }],
  data: {
    message: '1 comment'
  }
};
const blockBase = {
  _type: 'myBlockType',
  _key: 'a',
  style: 'normal',
  markDefs: [],
  children: [{
    _type: 'span',
    _key: 'a1',
    text: "This is a custom portable text block above an empty image block! It's the block below. There should be a nice margin below me?",
    marks: []
  }]
};

function TextBlocksStory() {
  const hasErrors = (0, _uiWorkshop.useBoolean)('Has errors', false);
  const hasMarkers = (0, _uiWorkshop.useBoolean)('Has markers', false);
  const markers = (0, _react.useMemo)(() => hasMarkers ? [customMarker] : [], [hasMarkers]);
  const validation = (0, _react.useMemo)(() => hasErrors ? [errorMarker] : [], [hasErrors]);
  const onChange = (0, _uiWorkshop.useAction)('onChange');
  const attributes = (0, _react.useMemo)(() => ({
    focused: false,
    selected: false,
    path: []
  }), []);
  const readOnly = false;
  const {
    form
  } = (0, _studio.useSource)();
  return /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Container, {
    width: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    padding: 3,
    shadow: 1,
    overflow: "auto",
    style: {
      maxHeight: '100%'
    }
  }, "TODO")));
}