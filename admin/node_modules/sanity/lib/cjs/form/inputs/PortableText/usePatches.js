"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePatches = usePatches;

var _find2 = _interopRequireDefault(require("lodash/find"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = require("react");

var _shallowEquals = _interopRequireDefault(require("shallow-equals"));

var _util = require("../../../util");

var _useFormBuilder = require("../../useFormBuilder");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @internal
 */
function usePatches(props) {
  const {
    path
  } = props;

  const {
    patchChannel
  } = (0, _useFormBuilder.useFormBuilder)().__internal;

  const subscribe = (0, _react.useCallback)(subscriber => {
    return patchChannel.subscribe(_ref => {
      let {
        snapshot,
        patches
      } = _ref;
      const filteredPatches = patches.filter(patch => _startsWith(patch.path, path)).map(patch => ({ ...patch,
        path: patch.path.slice(path.length)
      }));

      if (filteredPatches.length) {
        subscriber({
          shouldReset: _shouldReset(path, patches),
          snapshot: (0, _util.isRecord)(snapshot) ? _getValueAtPath(snapshot, path) : {},
          patches: filteredPatches
        });
      }
    });
  }, [path, patchChannel]);
  return {
    subscribe
  };
}

function _isSegmentEqual(segment1, segment2) {
  const segment1Type = typeof segment1;

  if (segment1Type !== typeof segment2) {
    return false;
  }

  if (segment1Type === 'object') {
    return (0, _shallowEquals.default)(segment1, segment2);
  }

  return segment1 === segment2;
}

function _startsWith(subjectPath, checkPath) {
  if (subjectPath === checkPath) {
    return true;
  }

  if (!Array.isArray(subjectPath) || !Array.isArray(checkPath)) {
    return false;
  }

  if (subjectPath.length < checkPath.length) {
    return false;
  }

  for (let i = 0, len = checkPath.length; i < len; i++) {
    if (!_isSegmentEqual(checkPath[i], subjectPath[i])) {
      return false;
    }
  }

  return true;
}

function _isAncestor(path1, path2) {
  return path1.length === 0 || _startsWith(path2, path1) && !_startsWith(path1, path2);
}

function _shouldReset(path, patches) {
  return patches.some(patch => _isAncestor(patch.path, path) && (patch.type === 'set' || patch.type === 'unset'));
}

function _getValueAtPath(value, path) {
  return path.reduce((result, segment) => {
    if (typeof segment === 'object') {
      return (0, _find2.default)(result, segment);
    }

    return (0, _get2.default)(result, segment);
  }, value);
}