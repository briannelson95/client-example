"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Editor = Editor;

var _portableTextEditor = require("@sanity/portable-text-editor");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _toolbar = require("./toolbar");

var _text = require("./text");

var _Editor = require("./Editor.styles");

var _useSpellCheck = require("./hooks/useSpellCheck");

var _useScrollSelectionIntoView = require("./hooks/useScrollSelectionIntoView");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const renderDecorator = (mark, mType, attributes, defaultRender) => {
  return /*#__PURE__*/_react.default.createElement(_text.Decorator, {
    mark: mark
  }, defaultRender());
};

function Editor(props) {
  const {
    hotkeys,
    initialSelection,
    isFullscreen,
    onCopy,
    onOpenItem,
    onPaste,
    onToggleFullscreen,
    path,
    readOnly,
    renderAnnotation,
    renderBlock,
    renderChild,
    scrollElement,
    setPortalElement,
    setScrollElement
  } = props;
  const {
    isTopLayer
  } = (0, _ui.useLayer)();
  const editableRef = (0, _react.useRef)(null);
  const {
    element: boundaryElement
  } = (0, _ui.useBoundaryElement)(); // Let escape close fullscreen mode

  (0, _ui.useGlobalKeyDown)((0, _react.useCallback)(event => {
    if (!isTopLayer || !isFullscreen) {
      return;
    }

    if (event.key === 'Escape') {
      onToggleFullscreen();
    }
  }, [onToggleFullscreen, isFullscreen, isTopLayer])); // Keep the editor focused even though we are clicking on the background or the toolbar of the editor.

  const handleMouseDown = (0, _react.useCallback)(event => {
    var _editableRef$current;

    if (event.target instanceof Node && !((_editableRef$current = editableRef.current) !== null && _editableRef$current !== void 0 && _editableRef$current.contains(event.target))) {
      event.preventDefault();
      event.stopPropagation();
    }
  }, []);
  const renderPlaceholder = (0, _react.useCallback)(() => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Empty"), []);
  const spellcheck = (0, _useSpellCheck.useSpellcheck)();
  const scrollSelectionIntoView = (0, _useScrollSelectionIntoView.useScrollSelectionIntoView)(scrollElement);
  const editable = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(_portableTextEditor.PortableTextEditable, {
    hotkeys: hotkeys,
    onCopy: onCopy,
    onPaste: onPaste,
    ref: editableRef,
    readOnly: readOnly,
    renderAnnotation: renderAnnotation,
    renderBlock: renderBlock,
    renderChild: renderChild,
    renderDecorator: renderDecorator,
    renderPlaceholder: renderPlaceholder,
    scrollSelectionIntoView: scrollSelectionIntoView,
    selection: initialSelection,
    spellCheck: spellcheck
  }), [hotkeys, initialSelection, onCopy, onPaste, readOnly, renderAnnotation, renderBlock, renderChild, renderPlaceholder, scrollSelectionIntoView, spellcheck]);
  const handleToolBarOnExpand = (0, _react.useCallback)(relativePath => {
    onOpenItem(path.concat(relativePath));
  }, [onOpenItem, path]);
  return /*#__PURE__*/_react.default.createElement(_Editor.Root, {
    $fullscreen: isFullscreen,
    "data-testid": "pt-editor",
    onMouseDown: handleMouseDown
  }, !readOnly && /*#__PURE__*/_react.default.createElement(_Editor.ToolbarCard, {
    "data-testid": "pt-editor__toolbar-card",
    shadow: 1
  }, /*#__PURE__*/_react.default.createElement(_toolbar.Toolbar, {
    isFullscreen: isFullscreen,
    hotkeys: hotkeys,
    onExpand: handleToolBarOnExpand,
    readOnly: readOnly,
    onToggleFullscreen: onToggleFullscreen
  })), /*#__PURE__*/_react.default.createElement(_Editor.EditableCard, {
    flex: 1
  }, /*#__PURE__*/_react.default.createElement(_Editor.Scroller, {
    ref: setScrollElement
  }, /*#__PURE__*/_react.default.createElement(_Editor.EditableContainer, {
    padding: isFullscreen ? 2 : 0,
    sizing: "border",
    width: 1
  }, /*#__PURE__*/_react.default.createElement(_Editor.EditableWrapper, {
    $isFullscreen: isFullscreen,
    $readOnly: readOnly
  }, /*#__PURE__*/_react.default.createElement(_ui.BoundaryElementProvider, {
    element: isFullscreen ? scrollElement : boundaryElement
  }, editable)))), /*#__PURE__*/_react.default.createElement("div", {
    "data-portal": "",
    ref: setPortalElement
  })));
}