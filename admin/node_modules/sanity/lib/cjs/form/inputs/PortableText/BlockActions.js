"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockActions = BlockActions;

var _portableTextEditor = require("@sanity/portable-text-editor");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _callbacks = require("./callbacks");

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const Root = _styledComponents.default.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  pointer-events: 'all';\n"]))); // function isClassComponent(component: React.ComponentType) {
//   return typeof component === 'function' && !!component.prototype?.isReactComponent
// }
// function isFunctionComponent(component: React.ComponentType) {
//   return typeof component === 'function' && String(component).includes('return React.createElement')
// }


function BlockActions(props) {
  const editor = (0, _portableTextEditor.usePortableTextEditor)();
  const {
    block,
    onChange,
    renderBlockActions
  } = props;
  const decoratorValues = (0, _react.useMemo)(() => _portableTextEditor.PortableTextEditor.getPortableTextFeatures(editor).decorators.map(d => d.value), [editor]);
  const blockActions = (0, _react.useMemo)(() => {
    if (renderBlockActions) {
      const blockActionProps = {
        block,
        value: _portableTextEditor.PortableTextEditor.getValue(editor),
        set: (0, _callbacks.createSetCallback)({
          allowedDecorators: decoratorValues,
          block,
          onChange
        }),
        unset: (0, _callbacks.createUnsetCallback)({
          block,
          onChange
        }),
        insert: (0, _callbacks.createInsertCallback)({
          allowedDecorators: decoratorValues,
          block,
          onChange
        })
      }; // // Support returning a class component for renderBlockActions (to keep backward compatability as it was possible before)
      // if (isClassComponent(renderBlockActions) || isFunctionComponent(renderBlockActions)) {
      //   const RenderComponent = renderBlockActions
      //   return <RenderComponent {...blockActionProps} />
      // }

      return renderBlockActions(blockActionProps);
    }

    return undefined;
  }, [renderBlockActions, block, editor, onChange, decoratorValues]); // Take focus away from the editor so dealing with block actions doesn't interfere with the editor focus

  const handleClick = (0, _react.useCallback)(() => {
    _portableTextEditor.PortableTextEditor.blur(editor);
  }, [editor]); // Don't render anything if the renderBlockActions function returns null.
  // Note that if renderBlockComponent is a React class, this will never be the case.

  if (!blockActions) return null;
  return /*#__PURE__*/_react.default.createElement(Root, {
    contentEditable: false,
    onKeyDown: handleClick,
    onMouseDown: handleClick
  }, blockActions);
}