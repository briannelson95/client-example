"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NumberInput = void 0;

var _react = _interopRequireDefault(require("react"));

var _ui = require("@sanity/ui");

var _autoId = require("@reach/auto-id");

var _patch = require("../patch");

var _getValidationRule = require("../utils/getValidationRule");

var _changeIndicators = require("../../components/changeIndicators");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const NumberInput = /*#__PURE__*/_react.default.forwardRef(function NumberInput(props, forwardedRef) {
  const {
    changed,
    focused,
    onChange,
    onFocus,
    path,
    readOnly,
    schemaType,
    validationError,
    value = ''
  } = props;
  const id = (0, _autoId.useId)(); // Show numpad on mobile if only positive numbers is preferred

  const minRule = (0, _getValidationRule.getValidationRule)(schemaType, 'min');
  const onlyPositiveNumber = ((minRule === null || minRule === void 0 ? void 0 : minRule.constraint) || 0) >= 0;

  const handleChange = _react.default.useCallback(event => {
    const nextValue = event.currentTarget.value;
    onChange(nextValue === '' ? (0, _patch.unset)() : (0, _patch.set)(Number(nextValue)));
  }, [onChange]);

  return /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicator, {
    path: path,
    isChanged: changed,
    hasFocus: !!focused
  }, /*#__PURE__*/_react.default.createElement(_ui.TextInput, {
    type: "number",
    step: "any",
    inputMode: onlyPositiveNumber ? 'numeric' : 'text',
    id: id,
    customValidity: validationError,
    value: value,
    readOnly: Boolean(readOnly),
    placeholder: schemaType.placeholder,
    onChange: handleChange,
    onFocus: onFocus,
    ref: forwardedRef,
    pattern: onlyPositiveNumber ? '[d]*' : undefined
  }));
});

exports.NumberInput = NumberInput;