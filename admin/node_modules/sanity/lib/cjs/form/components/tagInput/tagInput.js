"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TagInput = void 0;

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _styles = require("./styles");

var _templateObject;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const Root = (0, _styledComponents.default)(_ui.Box)(props => {
  const {
    theme
  } = props;
  const {
    focusRing,
    input,
    radius
  } = theme.sanity;
  const color = theme.sanity.color.input;
  const space = (0, _ui.rem)(theme.sanity.space[1]);
  return {
    position: 'relative',
    borderRadius: "".concat(radius[1], "px"),
    color: color.default.enabled.fg,
    backgroundColor: color.default.enabled.bg,
    boxShadow: (0, _styles.focusRingBorderStyle)({
      color: color.default.enabled.border,
      width: input.border.width
    }),
    '& > .content': {
      position: 'relative',
      lineHeight: 0,
      margin: "-".concat(space, " 0 0 -").concat(space)
    },
    '& > .content > div': {
      display: 'inline-block',
      verticalAlign: 'top',
      padding: "".concat(space, " 0 0 ").concat(space)
    },
    // enabled
    '&:not([data-read-only])': {
      cursor: 'text'
    },
    // hovered
    '@media(hover:hover)': {
      '&:not([data-disabled]):not([data-read-only]):hover': {
        borderColor: color.default.hovered.border
      }
    },
    // focused
    '&:not([data-disabled]):not([data-read-only])[data-focused]': {
      boxShadow: (0, _styles.focusRingStyle)({
        border: {
          color: color.default.enabled.border,
          width: input.border.width
        },
        focusRing
      })
    },
    // disabled
    '*:disabled + &': {
      color: color.default.disabled.fg,
      backgroundColor: color.default.disabled.bg,
      boxShadow: (0, _styles.focusRingBorderStyle)({
        color: color.default.disabled.border,
        width: input.border.width
      })
    }
  };
});

const Input = _styledComponents.default.input(props => {
  const {
    theme
  } = props;
  const font = theme.sanity.fonts.text;
  const color = theme.sanity.color.input;
  const p = theme.sanity.space[2];
  const size = theme.sanity.fonts.text.sizes[2];
  return {
    appearance: 'none',
    background: 'none',
    border: 0,
    borderRadius: 0,
    outline: 'none',
    fontSize: (0, _ui.rem)(size.fontSize),
    lineHeight: size.lineHeight / size.fontSize,
    fontFamily: font.family,
    fontWeight: font.weights.regular,
    margin: 0,
    display: 'block',
    minWidth: '1px',
    maxWidth: '100%',
    boxSizing: 'border-box',
    paddingTop: (0, _ui.rem)(p - size.ascenderHeight),
    paddingRight: (0, _ui.rem)(p),
    paddingBottom: (0, _ui.rem)(p - size.descenderHeight),
    paddingLeft: (0, _ui.rem)(p),
    // enabled
    '&:not(:invalid):not(:disabled)': {
      color: color.default.enabled.fg
    },
    // disabled
    '&:not(:invalid):disabled': {
      color: color.default.disabled.fg
    }
  };
});

const Placeholder = (0, _styledComponents.default)(_ui.Box)(props => {
  const {
    theme
  } = props;
  const color = theme.sanity.color.input;
  return (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    pointer-events: none;\n    --card-fg-color: ", ";\n  "])), color.default.enabled.placeholder);
});
const TagInput = /*#__PURE__*/(0, _react.forwardRef)((props, ref) => {
  const {
    disabled,
    onChange,
    onFocus,
    placeholder: placeholderProp,
    readOnly,
    value = [],
    ...restProps
  } = props;
  const placeholder = (0, _react.useMemo)(() => {
    if (placeholderProp) return placeholderProp;

    if (typeof window !== 'undefined' && 'ontouchstart' in window) {
      return 'Enter tag…';
    }

    return 'Enter tag and press ENTER…';
  }, [placeholderProp]);
  const [inputValue, setInputValue] = (0, _react.useState)('');
  const enabled = !disabled && !readOnly;
  const [focused, setFocused] = (0, _react.useState)(false);
  const forwardedRef = (0, _ui.useForwardedRef)(ref);
  const rootRef = (0, _react.useRef)(null);
  const handleRootPointerDown = (0, _react.useCallback)(event => {
    const isTagElement = (0, _ui.isHTMLElement)(event.target) && event.target.closest('[data-ui="Tag"]');
    if (isTagElement) return;
    const inputElement = forwardedRef.current;

    if (inputElement) {
      setTimeout(() => inputElement.focus(), 0);
    }
  }, [forwardedRef]);
  const handleInputBlur = (0, _react.useCallback)(() => {
    setFocused(false);
  }, []);
  const handleInputChange = (0, _react.useCallback)(event => {
    setInputValue(event.currentTarget.value);
  }, []);
  const handleInputFocus = (0, _react.useCallback)(event => {
    setFocused(true);
    if (onFocus) onFocus(event);
  }, [onFocus]);
  const handleInputKeyDown = (0, _react.useCallback)(event => {
    if (event.key === 'Enter') {
      event.preventDefault();
      event.stopPropagation();

      if (onChange && inputValue) {
        const newValue = value.concat([{
          value: inputValue
        }]);
        setInputValue('');
        if (onChange) onChange(newValue);
      }
    }
  }, [inputValue, onChange, value]);
  const handleTagRemove = (0, _react.useCallback)(index => {
    if (!onChange) return;
    const newValue = value.slice(0);
    newValue.splice(index, 1);
    onChange(newValue);
  }, [onChange, value]);
  (0, _react.useEffect)(() => {
    const inputElement = forwardedRef.current;

    if (inputElement) {
      inputElement.style.width = '0';
      inputElement.style.width = "".concat(inputElement.scrollWidth, "px");
    }
  }, [forwardedRef, inputValue]);
  return /*#__PURE__*/_react.default.createElement(Root, {
    "data-disabled": disabled ? '' : undefined,
    "data-focused": focused ? '' : undefined,
    "data-read-only": readOnly ? '' : undefined,
    "data-ui": "TagInput",
    onPointerDown: handleRootPointerDown,
    padding: 1,
    ref: rootRef
  }, enabled && /*#__PURE__*/_react.default.createElement(Placeholder, {
    hidden: Boolean(inputValue || value.length),
    padding: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    textOverflow: "ellipsis"
  }, placeholder)), /*#__PURE__*/_react.default.createElement("div", {
    className: "content"
  }, value.map((tag, tagIndex) =>
  /*#__PURE__*/
  // eslint-disable-next-line react/no-array-index-key
  _react.default.createElement("div", {
    key: "tag-".concat(tagIndex)
  }, /*#__PURE__*/_react.default.createElement(Tag, {
    enabled: enabled,
    index: tagIndex,
    muted: disabled,
    onRemove: handleTagRemove,
    tag: tag
  }))), /*#__PURE__*/_react.default.createElement("div", {
    key: "tag-input"
  }, /*#__PURE__*/_react.default.createElement(Input, _extends({}, restProps, {
    disabled: !enabled,
    onBlur: handleInputBlur,
    onChange: handleInputChange,
    onFocus: handleInputFocus,
    onKeyDown: handleInputKeyDown,
    ref: forwardedRef,
    type: "text",
    value: inputValue
  })))));
});
exports.TagInput = TagInput;
TagInput.displayName = 'TagInput';

function Tag(props) {
  const {
    enabled,
    index,
    muted,
    onRemove,
    tag
  } = props;
  const handleRemoveClick = (0, _react.useCallback)(() => {
    onRemove(index);
  }, [index, onRemove]);
  return /*#__PURE__*/_react.default.createElement(_ui.Card, {
    "data-ui": "Tag",
    padding: 1,
    radius: 2,
    tone: "transparent"
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center"
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    flex: 1,
    padding: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    muted: muted
  }, tag.value)), enabled && /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginLeft: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    icon: _icons.CloseIcon,
    mode: "bleed",
    onClick: handleRemoveClick,
    padding: 1
  }))));
}