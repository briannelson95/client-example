"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormFieldValidationStatus = FormFieldValidationStatus;

var _color = require("@sanity/color");

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint-disable camelcase */
const EMPTY_ARRAY = [];
const VALIDATION_COLORS = {
  error: _color.hues.red[500].hex,
  warning: _color.hues.yellow[500].hex,
  info: _color.hues.blue[500].hex
};
const VALIDATION_ICONS = {
  error: /*#__PURE__*/_react.default.createElement(_icons.ErrorOutlineIcon, {
    "data-testid": "input-validation-icon-error"
  }),
  warning: /*#__PURE__*/_react.default.createElement(_icons.WarningOutlineIcon, {
    "data-testid": "input-validation-icon-warning"
  }),
  info: /*#__PURE__*/_react.default.createElement(_icons.InfoOutlineIcon, {
    "data-testid": "input-validation-icon-info"
  })
};

function FormFieldValidationStatus(props) {
  const {
    validation = EMPTY_ARRAY,
    __unstable_showSummary: showSummary,
    fontSize,
    placement = 'top',
    portal
  } = props;
  const errors = validation.filter(v => v.level === 'error');
  const warnings = validation.filter(v => v.level === 'warning');
  const info = validation.filter(v => v.level === 'info');
  const hasErrors = errors.length > 0;
  const hasWarnings = warnings.length > 0;
  const hasInfo = info.length > 0;
  const statusIcon = (0, _react.useMemo)(() => {
    if (hasErrors) return VALIDATION_ICONS.error;
    if (hasWarnings) return VALIDATION_ICONS.warning;
    if (hasInfo) return VALIDATION_ICONS.info;
    return undefined;
  }, [hasErrors, hasInfo, hasWarnings]);
  const statusColor = (0, _react.useMemo)(() => {
    if (hasErrors) return VALIDATION_COLORS.error;
    if (hasWarnings) return VALIDATION_COLORS.warning;
    if (hasInfo) return VALIDATION_COLORS.info;
    return undefined;
  }, [hasErrors, hasInfo, hasWarnings]);
  return /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    content: /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      padding: 3,
      space: 3
    }, showSummary && /*#__PURE__*/_react.default.createElement(FormFieldValidationSummary, {
      validation: validation
    }), !showSummary && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, validation.map((item, itemIndex) =>
    /*#__PURE__*/
    // eslint-disable-next-line react/no-array-index-key
    _react.default.createElement(FormFieldValidationStatusItem, {
      validation: item,
      key: itemIndex
    })))),
    portal: portal,
    placement: placement,
    fallbackPlacements: ['bottom', 'right', 'left']
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    muted: true,
    size: fontSize,
    weight: "semibold",
    style: {
      color: statusColor
    }
  }, statusIcon)));
}

function FormFieldValidationStatusItem(props) {
  const {
    validation
  } = props;
  const statusIcon = (0, _react.useMemo)(() => {
    if (validation.level === 'error') return VALIDATION_ICONS.error;
    if (validation.level === 'warning') return VALIDATION_ICONS.warning;
    if (validation.level === 'info') return VALIDATION_ICONS.info;
    return undefined;
  }, [validation]);
  const statusColor = (0, _react.useMemo)(() => {
    if (validation.level === 'error') return VALIDATION_COLORS.error;
    if (validation.level === 'warning') return VALIDATION_COLORS.warning;
    if (validation.level === 'info') return VALIDATION_COLORS.info;
    return undefined;
  }, [validation]);
  return /*#__PURE__*/_react.default.createElement(_ui.Flex, null, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginRight: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 1,
    style: {
      color: statusColor
    }
  }, statusIcon)), /*#__PURE__*/_react.default.createElement(_ui.Box, {
    flex: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    muted: true,
    size: 1
  }, validation.message)));
}

function FormFieldValidationSummary(_ref) {
  let {
    validation
  } = _ref;
  const errorMarkers = validation.filter(item => item.level === 'error');
  const warningMarkers = validation.filter(item => item.level === 'warning');
  const errorLen = errorMarkers.length;
  const warningLen = warningMarkers.length;
  const errorsStr = "error".concat(errorLen === 1 ? '' : 's');
  const warningsStr = "warning".concat(warningLen === 1 ? '' : 's');
  const errorText = errorLen && "".concat(errorLen, " ").concat(errorsStr);
  const warningText = warningLen && "".concat(warningLen, " ").concat(warningsStr);
  const hasErrors = errorLen > 0;
  const hasWarnings = warningLen > 0;
  const hasBoth = hasErrors && hasWarnings;
  return /*#__PURE__*/_react.default.createElement(_ui.Text, {
    muted: true,
    size: 1
  }, errorText || '', hasBoth && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, " and "), warningText || '');
}