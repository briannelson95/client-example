"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ExampleStory;

var _ui = require("@sanity/ui");

var _uiWorkshop = require("@sanity/ui-workshop");

var _react = _interopRequireWildcard(require("react"));

var _datastores = require("../../../../datastores");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const DEBUG = false;

const noop = () => undefined;

function ExampleStory() {
  const inputId = 'test';
  const validationErrors = (0, _uiWorkshop.useBoolean)('Validation errors', false, 'Props');
  const title = (0, _uiWorkshop.useString)('Title', 'Title', 'Props');
  const description = (0, _uiWorkshop.useString)('Description', 'Description', 'Props');
  const isChanged = (0, _uiWorkshop.useBoolean)('Changed', false, 'Props');
  const level = (0, _uiWorkshop.useNumber)('Level', 0, 'Props');
  const [focused, setFocused] = (0, _react.useState)(false);
  const user = (0, _datastores.useCurrentUser)();
  const presence = (0, _react.useMemo)(() => user ? [{
    user,
    path: ['title'],
    sessionId: 'foo',
    lastActiveAt: new Date().toUTCString()
  }] : [], [user]);
  const validation = (0, _react.useMemo)(() => validationErrors ? [{
    level: 'error',
    item: {
      message: 'Something is not right',
      // children?: ValidationError[]
      // operation?: 'AND' | 'OR'
      paths: [],
      cloneWithMessage: noop
    },
    path: []
  }] : [], [validationErrors]);
  const handleBlur = (0, _react.useCallback)(() => setFocused(false), []);
  const handleFocus = (0, _react.useCallback)(() => setFocused(true), []);
  return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    height: "fill",
    justify: "center",
    padding: 4,
    sizing: "border"
  }, /*#__PURE__*/_react.default.createElement(_ui.Container, {
    width: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.LayerProvider, null), DEBUG && /*#__PURE__*/_react.default.createElement(_ui.Card, {
    marginTop: 4,
    overflow: "auto",
    padding: 3,
    radius: 2,
    scheme: "dark"
  }, /*#__PURE__*/_react.default.createElement(_ui.Code, {
    language: "json",
    size: 1
  }, JSON.stringify(user, null, 2)))));
}