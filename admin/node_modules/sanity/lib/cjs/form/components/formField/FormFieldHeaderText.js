"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormFieldHeaderText = void 0;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _FormFieldValidationStatus = require("./FormFieldValidationStatus");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint-disable camelcase */
const EMPTY_ARRAY = [];
const FormFieldHeaderText = /*#__PURE__*/(0, _react.memo)(function FormFieldHeaderText(props) {
  const {
    description,
    inputId,
    title,
    validation = EMPTY_ARRAY
  } = props;
  const hasValidations = validation.length > 0;
  return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, null, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    as: "label",
    htmlFor: inputId,
    weight: "semibold",
    size: 1
  }, title || /*#__PURE__*/_react.default.createElement("span", {
    style: {
      color: 'var(--card-muted-fg-color)'
    }
  }, "Untitled")), hasValidations && /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginLeft: 2
  }, /*#__PURE__*/_react.default.createElement(_FormFieldValidationStatus.FormFieldValidationStatus, {
    fontSize: 1,
    validation: validation
  }))), description && /*#__PURE__*/_react.default.createElement(_ui.Text, {
    muted: true,
    size: 1
  }, description));
});
exports.FormFieldHeaderText = FormFieldHeaderText;