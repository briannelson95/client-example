"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createHookFromObservableFactory = createHookFromObservableFactory;

var _reactRx = require("react-rx");

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _shallowEquals = _interopRequireDefault(require("shallow-equals"));

var _useUnique = require("./useUnique");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function defaultArgsAreEqual(prev, next) {
  if (prev.length !== next.length) return false;

  for (let i = 0; i < next.length; i++) {
    if (!(0, _shallowEquals.default)(prev[i], next[i])) return false;
  }

  return true;
} // overloads to handle types where an initial value is passed


/**
 * A function that will create a hook from a function that returns an
 * observable. The parameters of the hook will be the parameters of the function
 * and the return of the hook will be a loading tuple with the value of the
 * observable at the first index and a boolean with the loading state as the
 * second index.
 *
 * The loading state will become true as soon as new incoming args are given and
 * will flip to false when the observable from the function emits the next
 * value.
 */
function createHookFromObservableFactory(observableFactory, options) {
  const {
    initialValue,
    argsAreEqual = defaultArgsAreEqual
  } = options || {};
  const initialLoadingTuple = [initialValue, true];

  const asLoadingTuple = args$ => args$.pipe((0, _operators.distinctUntilChanged)(argsAreEqual), (0, _operators.switchMap)(distinctArgs => (0, _rxjs.concat)((0, _rxjs.of)({
    type: 'loading'
  }), observableFactory(...distinctArgs).pipe((0, _operators.map)(value => ({
    type: 'value',
    value
  }))))), (0, _operators.scan)((_ref, next) => {
    let [prevValue] = _ref;
    if (next.type === 'loading') return [prevValue, true];
    return [next.value, false];
  }, initialLoadingTuple), (0, _operators.distinctUntilChanged)((_ref2, _ref3) => {
    let [prevValue, prevIsLoading] = _ref2;
    let [nextValue, nextIsLoading] = _ref3;
    if (prevValue !== nextValue) return false;
    if (prevIsLoading !== nextIsLoading) return false;
    return true;
  }), (0, _operators.map)(tuple => ({
    type: 'tuple',
    tuple
  })), (0, _operators.catchError)(error => (0, _rxjs.of)({
    type: 'error',
    error
  })));

  return function useLoadableFromCreateLoadable() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    const _args = (0, _useUnique.useUnique)(args);

    const tuple$ = (0, _reactRx.useAsObservable)(_args, asLoadingTuple);
    const result = (0, _reactRx.useObservable)(tuple$, {
      type: 'tuple',
      tuple: initialLoadingTuple
    });
    if (result.type === 'error') throw result.error;
    return result.tuple;
  };
}