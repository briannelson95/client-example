"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTimeAgo = useTimeAgo;

var _react = require("react");

var _dateFns = require("date-fns");

var _pluralizeEsm = _interopRequireDefault(require("pluralize-esm"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const FIVE_SECONDS = 1000 * 5;
const TWENTY_SECONDS = 1000 * 20;
const ONE_MINUTE = 1000 * 60;
const ONE_HOUR = ONE_MINUTE * 60;

function useTimeAgo(time) {
  let {
    minimal,
    agoSuffix
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const [resolved, setResolved] = (0, _react.useState)(() => formatRelativeTime(time, {
    minimal,
    agoSuffix
  }));
  (0, _react.useEffect)(() => {
    setResolved(formatRelativeTime(time, {
      minimal,
      agoSuffix
    }));
  }, [time, minimal, agoSuffix]);
  (0, _react.useEffect)(() => {
    const id = Number.isFinite(resolved.refreshInterval) ? window.setInterval(() => setResolved(formatRelativeTime(time, {
      minimal,
      agoSuffix
    })), resolved.refreshInterval) : undefined;
    return () => clearInterval(id);
  }, [time, minimal, resolved.refreshInterval, agoSuffix]);
  return resolved.timestamp;
}

function formatRelativeTime(date) {
  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const now = Date.now();
  const parsedDate = date instanceof Date ? date : new Date(date);
  const diffMonths = (0, _dateFns.differenceInMonths)(now, parsedDate);
  const diffYears = (0, _dateFns.differenceInYears)(now, parsedDate);

  if (diffMonths || diffYears) {
    if (opts.minimal && diffYears === 0) {
      // same year
      return {
        timestamp: (0, _dateFns.format)(parsedDate, 'MMM d'),
        refreshInterval: +Infinity
      };
    }

    if (opts.minimal) {
      return {
        timestamp: (0, _dateFns.format)(parsedDate, 'MMM d, yyyy'),
        refreshInterval: +Infinity
      };
    }

    return {
      timestamp: (0, _dateFns.format)(parsedDate, 'MMM d, yyyy, hh:mm a'),
      refreshInterval: +Infinity
    };
  }

  const diffWeeks = (0, _dateFns.differenceInWeeks)(now, parsedDate);
  const weekSuffix = (0, _pluralizeEsm.default)('week', diffWeeks);

  if (diffWeeks) {
    if (opts.minimal) {
      return {
        timestamp: opts.agoSuffix ? "".concat(diffWeeks, "w ago") : "".concat(diffWeeks, "w"),
        refreshInterval: ONE_HOUR
      };
    }

    return {
      timestamp: opts.agoSuffix ? "".concat(diffWeeks, " ").concat(weekSuffix, " ago") : "".concat(diffWeeks, " ").concat(weekSuffix),
      refreshInterval: ONE_HOUR
    };
  }

  const diffDays = (0, _dateFns.differenceInDays)(now, parsedDate);
  const daysSuffix = (0, _pluralizeEsm.default)('days', diffDays);

  if (diffDays) {
    if (opts.minimal) {
      const daysSince = opts.agoSuffix ? "".concat(diffDays, "d ago") : "".concat(diffDays, "d");
      return {
        timestamp: diffDays === 1 ? 'yesterday' : daysSince,
        refreshInterval: ONE_HOUR
      };
    }

    const daysSince = opts.agoSuffix ? "".concat(diffDays, " ").concat(daysSuffix, " ago") : "".concat(diffDays, " ").concat(daysSuffix);
    return {
      timestamp: diffDays === 1 ? 'yesterday' : daysSince,
      refreshInterval: ONE_HOUR
    };
  }

  const diffHours = (0, _dateFns.differenceInHours)(now, parsedDate);
  const hoursSuffix = (0, _pluralizeEsm.default)('hour', diffHours);

  if (diffHours) {
    if (opts.minimal) {
      return {
        timestamp: opts.agoSuffix ? "".concat(diffHours, "h ago") : "".concat(diffHours, "h"),
        refreshInterval: ONE_MINUTE
      };
    }

    return {
      timestamp: opts.agoSuffix ? "".concat(diffHours, " ").concat(hoursSuffix, " ago") : "".concat(diffHours, " ").concat(hoursSuffix),
      refreshInterval: ONE_MINUTE
    };
  }

  const diffMins = (0, _dateFns.differenceInMinutes)(now, parsedDate);
  const minsSuffix = (0, _pluralizeEsm.default)('minute', diffMins);

  if (diffMins) {
    if (opts.minimal) {
      return {
        timestamp: opts.agoSuffix ? "".concat(diffMins, "m ago") : "".concat(diffMins, "m"),
        refreshInterval: TWENTY_SECONDS
      };
    }

    return {
      timestamp: opts.agoSuffix ? "".concat(diffMins, " ").concat(minsSuffix, " ago") : "".concat(diffMins, " ").concat(minsSuffix),
      refreshInterval: TWENTY_SECONDS
    };
  }

  const diffSeconds = (0, _dateFns.differenceInSeconds)(now, parsedDate);
  const secsSuffix = (0, _pluralizeEsm.default)('second', diffSeconds);

  if (diffSeconds > 10) {
    if (opts.minimal) {
      return {
        timestamp: opts.agoSuffix ? "".concat(diffSeconds, "s ago") : "".concat(diffSeconds, "s"),
        refreshInterval: FIVE_SECONDS
      };
    }

    return {
      timestamp: opts.agoSuffix ? "".concat(diffSeconds, " ").concat(secsSuffix, " ago") : "".concat(diffSeconds, " ").concat(secsSuffix),
      refreshInterval: FIVE_SECONDS
    };
  }

  return {
    timestamp: 'just now',
    refreshInterval: FIVE_SECONDS
  };
}