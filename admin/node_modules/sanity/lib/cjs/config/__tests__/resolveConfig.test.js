"use strict";

var _client = _interopRequireDefault(require("@sanity/client"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _createMockAuthStore = require("../../datastores/authStore/createMockAuthStore");

var _resolveConfig = require("../resolveConfig");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('resolveConfig', () => {
  it('returns an observable that emits an array of fully resolved workspaces', async () => {
    const projectId = 'ppsg7ml5';
    const dataset = 'production';
    const client = (0, _client.default)({
      projectId,
      apiVersion: '2021-06-07',
      dataset,
      useCdn: false
    });
    const [workspace] = await (0, _resolveConfig.resolveConfig)({
      name: 'default',
      dataset,
      projectId,
      auth: (0, _createMockAuthStore.createMockAuthStore)({
        client,
        currentUser: null
      })
    }).pipe((0, _operators.first)()).toPromise();
    expect(workspace).toMatchObject({
      type: 'workspace',
      name: 'default',
      projectId: 'ppsg7ml5',
      dataset: 'production',
      unstable_sources: [{
        dataset: 'production',
        name: 'default',
        projectId: 'ppsg7ml5'
      }]
    });
  });
  it('emits a new value if the auth stores emit a new auth state', async () => {
    const projectId = 'ppsg7ml5';
    const dataset = 'production';
    const client = (0, _client.default)({
      projectId,
      apiVersion: '2021-06-07',
      dataset,
      useCdn: false
    });
    const results = await (0, _resolveConfig.resolveConfig)({
      name: 'default',
      dataset,
      projectId,
      auth: {
        state: (0, _rxjs.of)({
          authenticated: true,
          client,
          currentUser: null
        }, {
          authenticated: true,
          client,
          currentUser: {
            id: 'test',
            name: 'test',
            email: 'hello@example.com',
            role: '',
            roles: []
          }
        })
      }
    }) // this will buffer the results emitted in the observable into an array
    .pipe((0, _operators.bufferTime)(50)).toPromise();
    expect(results).toHaveLength(2);
    const [firstResult, secondResult] = results;
    expect(firstResult).toMatchObject([{
      name: 'default',
      projectId: 'ppsg7ml5',
      dataset: 'production',
      currentUser: null,
      unstable_sources: [{
        dataset: 'production',
        name: 'default',
        projectId: 'ppsg7ml5'
      }]
    }]);
    expect(secondResult).toMatchObject([{
      type: 'workspace',
      name: 'default',
      projectId: 'ppsg7ml5',
      dataset: 'production',
      // note the extra user here
      currentUser: {
        id: 'test',
        name: 'test',
        email: 'hello@example.com'
      },
      unstable_sources: [{
        dataset: 'production',
        name: 'default',
        projectId: 'ppsg7ml5'
      }]
    }]);
  });
});
describe('createWorkspaceFromConfig', () => {
  it('creates a promise that resolves to a full workspace', async () => {
    const projectId = 'ppsg7ml5';
    const dataset = 'production';
    const workspace = await (0, _resolveConfig.createWorkspaceFromConfig)({
      projectId,
      dataset,
      name: 'default'
    });
    expect(workspace).toMatchObject({
      type: 'workspace',
      name: 'default',
      projectId: 'ppsg7ml5',
      dataset: 'production',
      currentUser: null,
      unstable_sources: [{
        dataset: 'production',
        name: 'default',
        projectId: 'ppsg7ml5'
      }]
    });
  });
  it('allows overriding the `currentUser` and `client`', async () => {
    const projectId = 'ppsg7ml5';
    const dataset = 'production';
    const client = (0, _client.default)({
      projectId,
      apiVersion: '2021-06-07',
      dataset,
      useCdn: false
    });
    const currentUser = {
      id: 'test',
      name: 'test',
      email: 'hello@example.com',
      role: '',
      roles: []
    };
    const workspace = await (0, _resolveConfig.createWorkspaceFromConfig)({
      projectId,
      dataset,
      name: 'default',
      client,
      currentUser
    });
    expect(workspace).toMatchObject({
      type: 'workspace',
      name: 'default',
      projectId: 'ppsg7ml5',
      dataset: 'production',
      currentUser: {
        id: 'test',
        name: 'test',
        email: 'hello@example.com'
      },
      unstable_sources: [{
        dataset: 'production',
        name: 'default',
        projectId: 'ppsg7ml5'
      }]
    });
  });
});
describe('createSourceFromConfig', () => {
  it('calls `createWorkspaceFromConfig` and returns the first source', async () => {
    const projectId = 'ppsg7ml5';
    const dataset = 'production';
    const source = await (0, _resolveConfig.createSourceFromConfig)({
      projectId,
      dataset,
      name: 'default'
    });
    expect(source).toMatchObject({
      type: 'source',
      name: 'default',
      projectId: 'ppsg7ml5',
      dataset: 'production',
      currentUser: null
    });
  });
});