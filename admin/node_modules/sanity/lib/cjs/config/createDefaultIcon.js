"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDefaultIcon = createDefaultIcon;

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _color = require("@sanity/color");

var _color2k = require("color2k");

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function pseudoRandomNumber(seed) {
  const hashCode = seed.split('') // eslint-disable-next-line no-bitwise
  .reduce((prevHash, currVal) => (prevHash << 5) - prevHash + currVal.charCodeAt(0) | 0, 0);
  return Math.abs(hashCode * 16807 % 2147483647) / 2147483647;
}

const SvgText = _styledComponents.default.text(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  font-family: ", ";\n  font-weight: ", ";\n  font-size: 16px;\n  transform: translateY(1px);\n"])), _ref => {
  let {
    theme
  } = _ref;
  return theme.sanity.fonts.heading.family;
}, _ref2 => {
  let {
    theme
  } = _ref2;
  return theme.sanity.fonts.heading.weights.bold;
});
/**
 * Creates an icon element based on the input title
 */


function createDefaultIcon(title, subtitle) {
  const rng1 = pseudoRandomNumber("".concat(title, " ").concat(subtitle));

  const huesWithoutGray = _color.COLOR_HUES.filter(hue => hue !== 'gray');

  const colorHue = huesWithoutGray[Math.floor(rng1 * huesWithoutGray.length)];
  const possibleTints = ['300', '400', '500', '600', '700'];
  const rng2 = pseudoRandomNumber(rng1.toString());
  const tint = possibleTints[Math.floor(rng2 * possibleTints.length)];
  const color = _color.hues[colorHue][tint].hex;
  const letters = title // split by whitespace
  .split(/\s/g) // replace all non-word characters with empty string
  .map(word => word.replace(/\\W/g, '')) // remove empty strings
  .filter(Boolean) // take the first two words
  .slice(0, 2) // grab the first letter and make it upper case
  .map(i => i.charAt(0).toUpperCase());
  const darkened = (0, _color2k.darken)(color, 0.4);
  const lightened = (0, _color2k.lighten)(color, 0.4);
  /* eslint-disable no-negated-condition */
  // eslint-disable-next-line no-nested-ternary

  const textColor = !(0, _color2k.hasBadContrast)(color, 'readable', darkened) ? darkened : !(0, _color2k.hasBadContrast)(color, 'readable', lightened) ? lightened : (0, _color2k.readableColor)(color);
  /* eslint-enable no-negated-condition */

  return /*#__PURE__*/_react.default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 32 32"
  }, /*#__PURE__*/_react.default.createElement("rect", {
    width: 32,
    height: 32,
    rx: 2,
    fill: color
  }), /*#__PURE__*/_react.default.createElement(SvgText, {
    x: "50%",
    y: "50%",
    textAnchor: "middle",
    alignmentBaseline: "middle",
    dominantBaseline: "middle",
    fill: textColor
  }, letters));
}