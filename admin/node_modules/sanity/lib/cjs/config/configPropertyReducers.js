"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toolsReducer = exports.schemaTypesReducer = exports.schemaTemplatesReducer = exports.resolveProductionUrlReducer = exports.newDocumentOptionsResolver = exports.initialLanguageFilter = exports.initialDocumentBadges = exports.initialDocumentActions = exports.imageAssetSourceResolver = exports.fileAssetSourceResolver = exports.documentBadgesReducer = exports.documentActionsReducer = exports._documentLanguageFilterReducer = void 0;

var _actions = require("../desk/actions");

var _badges = require("../desk/badges");

const initialDocumentBadges = [_badges.LiveEditBadge];
exports.initialDocumentBadges = initialDocumentBadges;
const initialDocumentActions = [_actions.PublishAction, _actions.DiscardChangesAction, _actions.UnpublishAction, _actions.DuplicateAction, _actions.DeleteAction];
exports.initialDocumentActions = initialDocumentActions;
const initialLanguageFilter = [];
exports.initialLanguageFilter = initialLanguageFilter;

const schemaTypesReducer = (prev, _ref, context) => {
  let {
    schema
  } = _ref;
  const schemaTypes = schema === null || schema === void 0 ? void 0 : schema.types;
  if (!schemaTypes) return prev;
  if (typeof schemaTypes === 'function') return schemaTypes(prev, context);
  if (Array.isArray(schemaTypes)) return [...prev, ...schemaTypes];
  throw new Error("Expected `schema.types` to an array or a function but found ".concat(typeof schemaTypes, " instead."));
};

exports.schemaTypesReducer = schemaTypesReducer;

const resolveProductionUrlReducer = async (prev, _ref2, context) => {
  let {
    document
  } = _ref2;
  const resolveProductionUrl = document === null || document === void 0 ? void 0 : document.productionUrl; // the redundant await is useful for error logging because the error is caught
  // in this stack vs somewhere down stream
  // eslint-disable-next-line no-return-await

  if (resolveProductionUrl) return await resolveProductionUrl(prev, context);
  return prev;
};

exports.resolveProductionUrlReducer = resolveProductionUrlReducer;

const toolsReducer = (prev, _ref3, context) => {
  let {
    tools
  } = _ref3;
  if (!tools) return prev;
  if (typeof tools === 'function') return tools(prev, context);
  if (Array.isArray(tools)) return [...prev, ...tools];
  throw new Error("Expected `tools` to an array or a function but found ".concat(typeof tools, " instead."));
};

exports.toolsReducer = toolsReducer;

const schemaTemplatesReducer = (prev, _ref4, context) => {
  let {
    schema
  } = _ref4;
  const schemaTemplates = schema === null || schema === void 0 ? void 0 : schema.templates;
  if (!schemaTemplates) return prev;
  if (typeof schemaTemplates === 'function') return schemaTemplates(prev, context);
  if (Array.isArray(schemaTemplates)) return [...prev, ...schemaTemplates];
  throw new Error("Expected `schema.templates` to an array or a function but found ".concat(typeof schemaTemplates, " instead."));
};

exports.schemaTemplatesReducer = schemaTemplatesReducer;

const documentBadgesReducer = (prev, _ref5, context) => {
  let {
    document
  } = _ref5;
  const documentBadges = document === null || document === void 0 ? void 0 : document.badges;
  if (!documentBadges) return prev;
  if (typeof documentBadges === 'function') return documentBadges(prev, context);
  if (Array.isArray(documentBadges)) return [...prev, ...documentBadges];
  throw new Error("Expected `document.actions` to an array or a function but found ".concat(typeof documentBadges, " instead."));
};

exports.documentBadgesReducer = documentBadgesReducer;

const documentActionsReducer = (prev, _ref6, context) => {
  let {
    document
  } = _ref6;
  const documentActions = document === null || document === void 0 ? void 0 : document.actions;
  if (!documentActions) return prev;
  if (typeof documentActions === 'function') return documentActions(prev, context);
  if (Array.isArray(documentActions)) return [...prev, ...documentActions];
  throw new Error("Expected `document.actions` to an array or a function but found ".concat(typeof documentActions, " instead."));
};

exports.documentActionsReducer = documentActionsReducer;

const newDocumentOptionsResolver = (prev, _ref7, context) => {
  let {
    document
  } = _ref7;
  const resolveNewDocumentOptions = document === null || document === void 0 ? void 0 : document.newDocumentOptions;
  if (!resolveNewDocumentOptions) return prev;

  if (typeof resolveNewDocumentOptions !== 'function') {
    throw new Error("Expected `document.resolveNewDocumentOptions` a function but found ".concat(typeof resolveNewDocumentOptions, " instead."));
  }

  return resolveNewDocumentOptions(prev, context);
};

exports.newDocumentOptionsResolver = newDocumentOptionsResolver;

const fileAssetSourceResolver = (prev, _ref8, context) => {
  var _form$file;

  let {
    form
  } = _ref8;
  const assetSources = form === null || form === void 0 ? void 0 : (_form$file = form.file) === null || _form$file === void 0 ? void 0 : _form$file.assetSources;
  if (!assetSources) return prev;
  if (typeof assetSources === 'function') return assetSources(prev, context);
  if (Array.isArray(assetSources)) return [...prev, ...assetSources];
  throw new Error("Expected `file.assetSources` to an array or a function but found ".concat(typeof assetSources, " instead."));
};

exports.fileAssetSourceResolver = fileAssetSourceResolver;

const imageAssetSourceResolver = (prev, _ref9, context) => {
  var _form$image;

  let {
    form
  } = _ref9;
  const assetSources = form === null || form === void 0 ? void 0 : (_form$image = form.image) === null || _form$image === void 0 ? void 0 : _form$image.assetSources;
  if (!assetSources) return prev;
  if (typeof assetSources === 'function') return assetSources(prev, context);
  if (Array.isArray(assetSources)) return [...prev, ...assetSources];
  throw new Error("Expected `image.assetSources` to an array or a function but found ".concat(typeof assetSources, " instead."));
};
/**
 * @internal
 */


exports.imageAssetSourceResolver = imageAssetSourceResolver;

const _documentLanguageFilterReducer = (prev, _ref10, context) => {
  let {
    document
  } = _ref10;
  const resolveDocumentLanguageFilter = document === null || document === void 0 ? void 0 : document.unstable_languageFilter;
  if (!resolveDocumentLanguageFilter) return prev;
  if (typeof resolveDocumentLanguageFilter === 'function') return resolveDocumentLanguageFilter(prev, context);
  if (Array.isArray(resolveDocumentLanguageFilter)) return [...prev, ...resolveDocumentLanguageFilter];
  throw new Error("Expected `document.actions` to an array or a function but found ".concat(typeof resolveDocumentLanguageFilter, " instead."));
};

exports._documentLanguageFilterReducer = _documentLanguageFilterReducer;