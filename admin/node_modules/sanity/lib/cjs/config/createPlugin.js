"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPlugin = createPlugin;

var _isString2 = _interopRequireDefault(require("lodash/isString"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validatePlugin(pluginResult) {
  // TODO: name is required etc
  const messages = ['projectId' in pluginResult && '`projectId` not allowed in plugin configuration', 'dataset' in pluginResult && '`dataset` not allowed in plugin configuration'].filter(_isString2.default);
  if (messages.length) throw new Error("Invalid plugin configuration:\n".concat(messages.map(message => "\t".concat(message)).join('\n')));
} // interface Foo {
//   s?: string
//   // j?: number
// }
// type F<T> = Exclude<T[keyof T], undefined> extends never ? T : T | void
// type X = F<Foo>
// interface X
// export function createPlugin<TOptions = void>(
//   arg: PluginFactory<TOptions> | PluginOptions
// ): Plugin<F<TOptions>>


function createPlugin(arg) {
  if (typeof arg === 'function') {
    const pluginFactory = arg;
    return options => {
      // TODO: there's a possiblity of passing default arguments to users'
      // plugin factories or reading from default options in `TOptions`
      const result = pluginFactory(options);
      validatePlugin(result);
      return result;
    };
  }

  validatePlugin(arg);
  return () => arg;
}