"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSourceFromConfig = createSourceFromConfig;
exports.createWorkspaceFromConfig = createWorkspaceFromConfig;
exports.resolveConfig = resolveConfig;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _createMockAuthStore = require("../datastores/authStore/createMockAuthStore");

var _prepareConfig = require("./prepareConfig");

/**
 * Fully resolves a configuration including subscribing to all sources and
 * workspaces from a config. Returns an `Observable` that waits till all sources
 * emit once before emitting an array of fully resolved sources and workspaces.
 *
 * @alpha
 */
function resolveConfig(config) {
  const {
    workspaces
  } = (0, _prepareConfig.prepareConfig)(config);
  return (0, _rxjs.combineLatest)( // eslint-disable-next-line @typescript-eslint/no-unused-vars
  workspaces.flatMap(workspaceSummary => (0, _rxjs.combineLatest)(workspaceSummary.__internal.sources.map(_ref => {
    let {
      source
    } = _ref;
    return source;
  })).pipe((0, _operators.map)(sources => ({ ...workspaceSummary,
    ...sources[0],
    unstable_sources: sources,
    type: 'workspace'
  })))));
}

/**
 * PRIMARILY FOR TESTING PURPOSES.
 *
 * This will create a fully resolved workspace from a config and optionally
 * allows a `client` and `currentUser` override. This exists primarily for
 * testing purposes. If you need to use a workspace, we recommend using the
 * `useWorkspace` hook to grab the fully resolved workspace from the
 * `StudioProvider`
 *
 * @alpha
 */
async function createWorkspaceFromConfig(options) {
  const [workspace] = await resolveConfig({ ...options,
    ...('client' in options && 'currentUser' in options && {
      auth: (0, _createMockAuthStore.createMockAuthStore)(options)
    })
  }).pipe((0, _operators.first)()).toPromise();
  return workspace;
}
/**
 * PRIMARILY FOR TESTING PURPOSES.
 *
 * This will create a fully resolved source from a config and optionally
 * allows a `client` and `currentUser` override. This exists primarily for
 * testing purposes. If you need to use a source, we recommend using the
 * `useSource` hook to grab the fully resolved source from the `StudioProvider`
 *
 * @alpha
 */


async function createSourceFromConfig(options) {
  const workspace = await createWorkspaceFromConfig(options);
  return workspace.unstable_sources[0];
}