"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyWeights = applyWeights;
exports.calculateScore = void 0;

var _toLower2 = _interopRequireDefault(require("lodash/toLower"));

var _keyBy2 = _interopRequireDefault(require("lodash/keyBy"));

var _intersection2 = _interopRequireDefault(require("lodash/intersection"));

var _union2 = _interopRequireDefault(require("lodash/union"));

var _compact2 = _interopRequireDefault(require("lodash/compact"));

var _uniq2 = _interopRequireDefault(require("lodash/uniq"));

var _words2 = _interopRequireDefault(require("lodash/words"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// takes a set of terms and a value and returns a [score, story] pair where score is a value between 0, 1 and story is the explanation
const calculateScore = (searchTerms, value) => {
  const uniqueValueTerms = (0, _uniq2.default)((0, _compact2.default)((0, _words2.default)((0, _toLower2.default)(value))));
  const uniqueSearchTerms = (0, _uniq2.default)(searchTerms.map(_toLower2.default));
  const matches = (0, _intersection2.default)(uniqueSearchTerms, uniqueValueTerms);
  const all = (0, _union2.default)(uniqueValueTerms, uniqueSearchTerms);
  const fieldScore = matches.length / all.length;
  return fieldScore === 1 ? [1, 'Exact match'] : [fieldScore / 2, "Matched ".concat(matches.length, " of ").concat(all.length, " terms: [").concat(matches.join(', '), "]")];
};

exports.calculateScore = calculateScore;

const stringify = value => typeof value === 'string' ? value : JSON.stringify(value);

function applyWeights(searchSpec, hits) {
  let terms = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  const specByType = (0, _keyBy2.default)(searchSpec, spec => spec.typeName);
  return hits.map((hit, index) => {
    var _typeSpec$paths;

    const typeSpec = specByType[hit._type];
    const stories = ((_typeSpec$paths = typeSpec.paths) === null || _typeSpec$paths === void 0 ? void 0 : _typeSpec$paths.map((pathSpec, idx) => {
      const value = stringify(hit["w".concat(idx)]);

      if (!value) {
        return {
          path: pathSpec.path,
          score: 0,
          why: 'No match'
        };
      }

      const [score, why] = calculateScore(terms, value);
      return {
        path: pathSpec.path,
        score: score * pathSpec.weight,
        why: "".concat(why, " (*").concat(pathSpec.weight, ")")
      };
    })) || [];
    const totalScore = stories.reduce((acc, rank) => acc + rank.score, 0);
    return {
      hit,
      resultIndex: hits.length - index,
      score: totalScore,
      stories: stories
    };
  });
}