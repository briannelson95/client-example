"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDocumentSearchResults = useDocumentSearchResults;

var _react = require("react");

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _hooks = require("../hooks");

var _util = require("../util");

var _search = require("./search");

const EMPTY_STATE = {
  loading: false,
  error: null,
  value: []
};
const LOADING_STATE = {
  loading: true,
  error: null,
  value: []
}; // This value is used to improve performance by minimizing the number
// of API requests, as well as improving the user experience by waiting
// to display the search results until the user has finished typing.

const DEBOUNCE_VALUE = 400;

function useDocumentSearchResults(props) {
  const client = (0, _hooks.useClient)();
  const schema = (0, _hooks.useSchema)();
  const {
    includeDrafts = false,
    limit = 1000,
    query: queryProp
  } = props;
  const [state, setState] = (0, _react.useState)(EMPTY_STATE);
  const paramsSubject = (0, _react.useMemo)(() => new _rxjs.Subject(), []);
  const search = (0, _react.useMemo)(() => (0, _search.createSearch)(client, schema), [client, schema]);
  const state$ = (0, _react.useMemo)(() => paramsSubject.asObservable().pipe((0, _operators.share)(), (0, _operators.distinctUntilChanged)(), (0, _operators.filter)(_util.isNonNullable), (0, _operators.switchMap)(_ref => {
    let {
      query,
      options
    } = _ref;
    return query ? (0, _rxjs.concat)((0, _rxjs.of)(LOADING_STATE), (0, _rxjs.timer)(DEBOUNCE_VALUE).pipe((0, _operators.mergeMapTo)(_rxjs.EMPTY)), search(query, options).pipe((0, _operators.map)(results => ({
      loading: false,
      error: null,
      value: results
    })), (0, _operators.catchError)(error => {
      return (0, _rxjs.of)({
        loading: false,
        error,
        value: []
      });
    }))) : (0, _rxjs.of)(EMPTY_STATE);
  })), [paramsSubject, search]);
  (0, _react.useEffect)(() => {
    paramsSubject.next({
      options: {
        includeDrafts,
        limit
      },
      query: queryProp
    });
  }, [includeDrafts, limit, queryProp, paramsSubject]);
  (0, _react.useEffect)(() => {
    const sub = state$.subscribe(setState);
    return () => {
      sub.unsubscribe();
    };
  }, [state$]);
  return state;
}