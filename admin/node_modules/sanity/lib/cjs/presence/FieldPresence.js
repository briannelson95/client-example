"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FieldPresenceInner = exports.FieldPresence = void 0;
exports.FieldPresenceWithOverlay = FieldPresenceWithOverlay;
exports.FieldPresenceWithoutOverlay = FieldPresenceWithoutOverlay;

var _uniqBy2 = _interopRequireDefault(require("lodash/uniqBy"));

var _sortBy2 = _interopRequireDefault(require("lodash/sortBy"));

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _autoId = require("@reach/auto-id");

var _UserAvatar = require("../components/UserAvatar");

var _constants = require("./constants");

var _utils = require("./utils");

var _FieldPresence = require("./FieldPresence.styled");

var _context = require("./context");

var _PresenceTooltip = require("./PresenceTooltip");

var _tracker = require("./overlay/tracker");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const FieldPresence = _constants.DISABLE_OVERLAY ? FieldPresenceWithoutOverlay : FieldPresenceWithOverlay;
exports.FieldPresence = FieldPresence;

function FieldPresenceWithOverlay(props) {
  const contextPresence = (0, _react.useContext)(_context.FormFieldPresenceContext);
  const {
    presence = contextPresence,
    maxAvatars = _constants.DEFAULT_MAX_AVATARS_FIELDS
  } = props;

  const ref = _react.default.useRef(null);

  (0, _tracker.useReporter)((0, _autoId.useId)() || '', () => ({
    presence,
    element: ref.current,
    maxAvatars: maxAvatars
  }));
  const minWidth = -_constants.AVATAR_DISTANCE + (_constants.AVATAR_SIZE + _constants.AVATAR_DISTANCE) * props.maxAvatars;
  return /*#__PURE__*/_react.default.createElement(_FieldPresence.FlexWrapper, {
    justify: "flex-end",
    ref: ref,
    style: {
      minWidth: minWidth,
      minHeight: _constants.AVATAR_SIZE
    }
  });
}

function FieldPresenceWithoutOverlay(props) {
  const contextPresence = (0, _react.useContext)(_context.FormFieldPresenceContext);
  const {
    presence = contextPresence,
    maxAvatars = _constants.DEFAULT_MAX_AVATARS_FIELDS
  } = props;

  if (!presence.length) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement(FieldPresenceInner, {
    presence: presence,
    maxAvatars: maxAvatars
  });
}

function calcAvatarStackWidth(len) {
  return -_constants.AVATAR_DISTANCE + (_constants.AVATAR_SIZE + _constants.AVATAR_DISTANCE) * len;
}

const FieldPresenceInner = /*#__PURE__*/(0, _react.memo)(function FieldPresenceInner(_ref) {
  let {
    presence,
    position = 'inside',
    animateArrowFrom = 'inside',
    maxAvatars = _constants.DEFAULT_MAX_AVATARS_FIELDS,
    stack = true
  } = _ref;
  const uniquePresence = (0, _uniqBy2.default)(presence || [], item => item.user.id);
  const sorted = (0, _sortBy2.default)(uniquePresence, _presence => _presence.lastActiveAt);
  const [hidden, visible] = stack ? (0, _utils.splitRight)(sorted, maxAvatars) : [[], sorted];
  const avatars = [...visible.reverse().map(_visible => ({
    key: _visible.user.id,
    element: /*#__PURE__*/_react.default.createElement(_UserAvatar.UserAvatar, {
      animateArrowFrom: animateArrowFrom,
      position: position,
      status: "online",
      user: _visible.user
    })
  })), hidden.length >= 2 ? {
    key: 'counter',
    element: /*#__PURE__*/_react.default.createElement(_ui.AvatarCounter, {
      count: hidden.length
    })
  } : null].filter(Boolean);
  const maxWidth = calcAvatarStackWidth(maxAvatars);
  const currWidth = Math.min(calcAvatarStackWidth(uniquePresence.length), maxWidth);
  return /*#__PURE__*/_react.default.createElement(_FieldPresence.FlexWrapper, {
    justify: "flex-end",
    style: {
      width: maxWidth
    }
  }, /*#__PURE__*/_react.default.createElement("div", null), /*#__PURE__*/_react.default.createElement(_PresenceTooltip.PresenceTooltip, {
    items: uniquePresence
  }, /*#__PURE__*/_react.default.createElement(_FieldPresence.InnerBox, {
    direction: "row-reverse",
    style: {
      width: currWidth
    }
  }, avatars.map((av, i) => av && /*#__PURE__*/_react.default.createElement("div", {
    key: av.key,
    style: {
      position: 'absolute',
      transform: "translate3d(".concat(-i * (_constants.AVATAR_SIZE + _constants.AVATAR_DISTANCE), "px, 0px, 0px)"),
      transitionProperty: 'transform',
      transitionDuration: '200ms',
      transitionTimingFunction: 'cubic-bezier(0.85, 0, 0.15, 1)',
      zIndex: 100 - i
    }
  }, av.element)))));
});
exports.FieldPresenceInner = FieldPresenceInner;