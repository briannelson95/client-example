"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StickyOverlay = StickyOverlay;

var _sortBy2 = _interopRequireDefault(require("lodash/sortBy"));

var _orderBy2 = _interopRequireDefault(require("lodash/orderBy"));

var _groupBy2 = _interopRequireDefault(require("lodash/groupBy"));

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

var _react = _interopRequireWildcard(require("react"));

var _constants = require("../constants");

var _FieldPresence = require("../FieldPresence");

var _RegionsWithIntersections = require("./RegionsWithIntersections");

var _tracker = require("./tracker");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable @typescript-eslint/no-use-before-define */
const ITEM_TRANSITION = {
  transitionProperty: 'transform',
  transitionDuration: '200ms',
  transitionTimingFunction: 'cubic-bezier(0.85, 0, 0.15, 1)'
};

const bottom = rect => rect.top + rect.height;

function withSpacerHeight(regionsWithIntersectionDetails) {
  return regionsWithIntersectionDetails.map((withIntersection, idx, _regionsWithIntersectionDetails) => {
    var _regionsWithIntersect;

    const prevRect = (_regionsWithIntersect = _regionsWithIntersectionDetails[idx - 1]) === null || _regionsWithIntersect === void 0 ? void 0 : _regionsWithIntersect.region.rect;
    const prevBottom = prevRect ? bottom(prevRect) : 0;
    return { ...withIntersection,
      spacerHeight: withIntersection.region.rect.top - prevBottom
    };
  });
}

const orderByTop = regionsWithIntersectionDetails => (0, _orderBy2.default)(regionsWithIntersectionDetails, withIntersection => withIntersection.region.rect.top);

const plus = (a, b) => a + b;

const sum = array => array.reduce(plus, 0);

function group(regionsWithIntersectionDetails) {
  const regionsWithSpacerHeight = withSpacerHeight(orderByTop(regionsWithIntersectionDetails));
  const grouped = {
    top: [],
    inside: [],
    bottom: [],
    ...(0, _groupBy2.default)(regionsWithSpacerHeight, _withSpacerHeight => _withSpacerHeight.position)
  };
  return {
    top: orderByTop(grouped.top).map((withIntersection, i, grp) => ({ ...withIntersection,
      indent: grp.slice(i + 1).reduce((w, _withIntersection) => w + _withIntersection.region.rect.width, 0)
    })),
    inside: orderByTop(grouped.inside).map(withIntersection => ({ ...withIntersection,
      indent: 0
    })),
    bottom: orderByTop(grouped.bottom).map((withIntersection, i, grp) => ({ ...withIntersection,
      indent: grp.slice(0, i).reduce((w, _withIntersection) => w + _withIntersection.region.rect.width, 0)
    }))
  };
}

const Spacer = _ref => {
  let {
    height,
    ...rest
  } = _ref;
  return /*#__PURE__*/_react.default.createElement("div", {
    style: {
      height: Math.max(0, height),
      ...(rest === null || rest === void 0 ? void 0 : rest.style)
    }
  });
};

const DEFAULT_MARGINS = [0, 0, 0, 0];

const getOffsetsTo = (source, target) => {
  let el = source;
  let top = -el.scrollTop;
  let left = 0;

  while (el && el !== target) {
    top += el.offsetTop - el.scrollTop;
    left += el.offsetLeft;
    el = el.offsetParent instanceof HTMLElement ? el.offsetParent : null;
  }

  return {
    top,
    left
  };
};

function getRelativeRect(element, parent) {
  return { ...getOffsetsTo(element, parent),
    width: element.offsetWidth,
    height: element.offsetHeight
  };
}

function regionsWithComputedRects(regions, parent) {
  return regions.map(_ref2 => {
    let [id, region] = _ref2;
    return { ...region,
      id,
      rect: getRelativeRect(region.element, parent)
    };
  });
}

function StickyOverlay(props) {
  const {
    children,
    margins = DEFAULT_MARGINS
  } = props;
  const reportedValues = (0, _tracker.useReportedValues)();

  const ref = _react.default.useRef(null);

  const regions = _react.default.useMemo(() => ref.current ? regionsWithComputedRects(reportedValues, ref.current) : EMPTY_ARRAY, [reportedValues]);

  const renderCallback = _react.default.useCallback((regionsWithIntersectionDetails, containerWidth) => {
    const grouped = group(regionsWithIntersectionDetails.filter(item => item.region.presence.length > 0));
    const topSpacing = sum(grouped.top.map(n => n.region.rect.height + n.spacerHeight));
    const bottomSpacing = sum([...grouped.inside, ...grouped.bottom].map(n => n.region.rect.height + n.spacerHeight)); // todo: this needs cleaning up, should process all the needed layout data in one go

    const counts = grouped.inside.reduce((_counts, withIntersection) => {
      const {
        distanceTop,
        distanceBottom
      } = withIntersection;
      const nearTop = distanceTop <= _constants.SLIDE_RIGHT_THRESHOLD_TOP;
      const nearBottom = distanceBottom <= _constants.SLIDE_RIGHT_THRESHOLD_BOTTOM;
      return {
        nearTop: _counts.nearTop + (nearTop ? withIntersection.region.presence.length : 0),
        nearBottom: _counts.nearBottom + (nearBottom ? withIntersection.region.presence.length : 0)
      };
    }, {
      nearTop: 0,
      nearBottom: 0
    });
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(PresenceDock, {
      closeCount: counts.nearTop,
      margins: margins,
      position: "top",
      regionsWithIntersectionDetails: grouped.top
    }), /*#__PURE__*/_react.default.createElement(Spacer, {
      height: topSpacing
    }), /*#__PURE__*/_react.default.createElement(PresenceInside, {
      containerWidth: containerWidth,
      regionsWithIntersectionDetails: grouped.inside
    }), /*#__PURE__*/_react.default.createElement(Spacer, {
      height: bottomSpacing
    }), /*#__PURE__*/_react.default.createElement(PresenceDock, {
      closeCount: counts.nearBottom,
      margins: margins,
      position: "bottom",
      regionsWithIntersectionDetails: grouped.bottom
    }));
  }, [margins]);

  return /*#__PURE__*/_react.default.createElement(_RegionsWithIntersections.RegionsWithIntersections, {
    ref: ref,
    margins: margins,
    regions: regions,
    render: renderCallback
  }, children);
}

const EMPTY_ARRAY = [];
const PresenceDock = /*#__PURE__*/(0, _react.memo)(function PresenceDock(props) {
  const {
    closeCount,
    margins,
    position,
    regionsWithIntersectionDetails
  } = props;
  const dir = position === 'top' ? 1 : -1;
  const allPresenceItems = (0, _react.useMemo)(() => {
    if (!regionsWithIntersectionDetails.length) {
      return EMPTY_ARRAY;
    }

    return (0, _flatten2.default)((0, _sortBy2.default)(regionsWithIntersectionDetails, r => r.region.rect.top * dir).map(withIntersection => withIntersection.region.presence || EMPTY_ARRAY));
  }, [dir, regionsWithIntersectionDetails]);
  const [topMargin, rightMargin, bottomMargin, leftMargin] = margins;
  const leftOffset = (leftMargin || 0) + (allPresenceItems.length > 0 ? -closeCount * (_constants.AVATAR_SIZE + _constants.AVATAR_DISTANCE) : 0) - rightMargin;
  const margin = position === 'top' ? topMargin : bottomMargin;
  const style = (0, _react.useMemo)(() => ({
    zIndex: 2,
    position: 'sticky',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'flex-end',
    ...ITEM_TRANSITION,
    transform: "translate3d(".concat(leftOffset, "px, 0px, 0px)"),
    top: _constants.AVATAR_ARROW_HEIGHT + 1 + margin,
    bottom: _constants.AVATAR_ARROW_HEIGHT + 1 + margin
  }), [leftOffset, margin]);
  return /*#__PURE__*/_react.default.createElement("div", {
    "data-dock": position,
    key: "sticky-".concat(position),
    style: style
  }, /*#__PURE__*/_react.default.createElement(_FieldPresence.FieldPresenceInner, {
    position: position,
    maxAvatars: _constants.MAX_AVATARS_DOCK,
    presence: allPresenceItems
  }));
});

function PresenceInside(props) {
  const {
    regionsWithIntersectionDetails,
    containerWidth
  } = props;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, regionsWithIntersectionDetails.map(withIntersection => {
    const originalLeft = withIntersection.region.rect.left;
    const {
      distanceTop,
      distanceBottom
    } = withIntersection;
    const nearTop = distanceTop <= _constants.SLIDE_RIGHT_THRESHOLD_TOP;
    const nearBottom = distanceBottom <= _constants.SLIDE_RIGHT_THRESHOLD_BOTTOM;
    const diffRight = containerWidth - originalLeft - withIntersection.region.rect.width;
    const {
      presence,
      maxAvatars
    } = withIntersection.region;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
      key: withIntersection.region.id
    }, /*#__PURE__*/_react.default.createElement("div", {
      style: {
        zIndex: 2,
        position: 'absolute',
        pointerEvents: 'all',
        ...ITEM_TRANSITION,
        left: originalLeft,
        transform: "translate3d(".concat(nearTop || nearBottom ? diffRight : 0, "px, 0px, 0px)"),
        height: withIntersection.region.rect.height,
        top: withIntersection.region.rect.top
      }
    }, /*#__PURE__*/_react.default.createElement(DebugValue, {
      value: () => "\u2912".concat(distanceTop, " | ").concat(distanceBottom, "\u2913")
    }, /*#__PURE__*/_react.default.createElement(_FieldPresence.FieldPresenceInner, {
      stack: !nearTop && !nearBottom // eslint-disable-next-line no-nested-ternary
      ,
      position: nearTop ? 'top' : nearBottom ? 'bottom' : 'inside',
      maxAvatars: maxAvatars,
      presence: presence
    }))));
  }));
}

const PassThrough = props => props.children;

const DebugValue = _constants.DEBUG ? function DebugValue(props) {
  return /*#__PURE__*/_react.default.createElement("div", {
    style: {
      position: 'absolute'
    }
  }, props.children, /*#__PURE__*/_react.default.createElement("span", {
    style: {
      top: 0,
      left: -15,
      fontSize: 11,
      right: -15,
      textAlign: 'center',
      height: _constants.AVATAR_SIZE,
      color: 'white',
      backgroundColor: 'rgba(0, 0, 0, 0.8)',
      position: 'absolute',
      zIndex: 1000
    }
  }, props.value()));
} : PassThrough;