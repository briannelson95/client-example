"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentPreviewPresence = DocumentPreviewPresence;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _PreviewCard = require("../components/PreviewCard");

var _UserAvatar = require("../components/UserAvatar");

var _isNonNullable = require("../util/isNonNullable");

var _templateObject, _templateObject2;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const PRESENCE_MENU_POPOVER_PROPS = {
  portal: true
};
const AvatarStackCard = (0, _styledComponents.default)(_ui.Card)(_ref => {
  var _color$selectable;

  let {
    theme,
    $selected
  } = _ref;
  const {
    color
  } = theme.sanity;
  return (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    --card-bg-color: inherit;\n    --card-fg-color: inherit;\n    --card-hairline-hard-color: ", ";\n  "])), $selected ? (_color$selectable = color.selectable) === null || _color$selectable === void 0 ? void 0 : _color$selectable.default.pressed.border : undefined);
});
const TooltipContentBox = (0, _styledComponents.default)(_ui.Box)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  max-width: 150px;\n"])));

const getTooltipText = presence => {
  if (presence.length === 1) {
    return "".concat(presence[0].user.displayName, " is editing this document");
  }

  if (presence.length > 1) {
    return "".concat(presence.length, " people are editing this document right now");
  }

  return undefined;
};

function DocumentPreviewPresence(props) {
  const {
    presence
  } = props;
  const {
    color
  } = (0, _styledComponents.useTheme)().sanity;
  const invertedScheme = color.dark ? 'light' : 'dark';
  const {
    selected
  } = (0, _PreviewCard.usePreviewCard)();
  const uniqueUsers = (0, _react.useMemo)(() => Array.from(new Set(presence.map(a => a.user.id))).map(id => {
    return presence.find(a => a.user.id === id);
  }).filter(_isNonNullable.isNonNullable), [presence]);
  const tooltipContent = (0, _react.useMemo)(() => {
    return /*#__PURE__*/_react.default.createElement(TooltipContentBox, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      align: "center",
      size: 1
    }, getTooltipText(uniqueUsers)));
  }, [uniqueUsers]);
  return /*#__PURE__*/_react.default.createElement(_ui.Tooltip, _extends({
    content: tooltipContent
  }, PRESENCE_MENU_POPOVER_PROPS), /*#__PURE__*/_react.default.createElement(AvatarStackCard, {
    scheme: selected ? invertedScheme : undefined,
    $selected: selected
  }, /*#__PURE__*/_react.default.createElement(_ui.AvatarStack, {
    maxLength: 2
  }, uniqueUsers.map(item => /*#__PURE__*/_react.default.createElement(_UserAvatar.UserAvatar, {
    key: item.user.id,
    user: item.user
  })))));
}