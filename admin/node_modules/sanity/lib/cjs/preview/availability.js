"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.create_preview_availability = create_preview_availability;

var _keyBy2 = _interopRequireDefault(require("lodash/keyBy"));

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _shallowEquals = _interopRequireDefault(require("shallow-equals"));

var _isRecord = require("../util/isRecord");

var _draftUtils = require("../util/draftUtils");

var _debounceCollect = require("./utils/debounceCollect");

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const MAX_DOCUMENT_ID_CHUNK_SIZE = 11164;
/**
 * Takes an array of document IDs and puts them into individual chunks.
 * Because document IDs can vary greatly in size, we want to chunk by the length of the
 * combined comma-separated ID set. We try to stay within 11164 bytes - this is about the
 * same length the Sanity client uses for max query size, and accounts for rather large
 * headers to be present - so this _should_ be safe.
 *
 * @param documentIds - Unique document IDs to chunk
 * @returns Array of document ID chunks
 */

function chunkDocumentIds(documentIds) {
  let chunk = [];
  let chunkSize = 0;
  const chunks = [];

  for (const documentId of documentIds) {
    // Reached the max length? start a new chunk
    if (chunkSize + documentId.length + 1 >= MAX_DOCUMENT_ID_CHUNK_SIZE) {
      chunks.push(chunk);
      chunk = [];
      chunkSize = 0;
    }

    chunkSize += documentId.length + 1; // +1 is to account for a comma between IDs

    chunk.push(documentId);
  }

  if (!chunks.includes(chunk)) {
    chunks.push(chunk);
  }

  return chunks;
}

function create_preview_availability(versionedClient, observePaths) {
  /**
   * Returns an observable of metadata for a given drafts model document
   */
  function observeDocumentPairAvailability(value) {
    const draftId = (0, _draftUtils.getDraftId)('_id' in value ? value._id : value._ref);
    const publishedId = (0, _draftUtils.getPublishedId)('_id' in value ? value._id : value._ref);
    return (0, _rxjs.combineLatest)([observeDocumentAvailability({
      _type: 'reference',
      _ref: draftId
    }), observeDocumentAvailability({
      _type: 'reference',
      _ref: publishedId
    })]).pipe((0, _operators.distinctUntilChanged)(_shallowEquals.default), (0, _operators.map)(_ref => {
      let [draftReadability, publishedReadability] = _ref;
      return {
        draft: draftReadability,
        published: publishedReadability
      };
    }));
  }
  /**
   * Observable of metadata for the document with the given id
   * If we can't read a document it is either because it's not readable or because it doesn't exist
   *
   * @internal
   */


  function observeDocumentAvailability(value) {
    const id = '_id' in value ? value._id : value._ref; // check for existence

    return observePaths(value, [['_rev']]).pipe((0, _operators.map)(res => (0, _isRecord.isRecord)(res) && Boolean('_rev' in res && (res === null || res === void 0 ? void 0 : res._rev))), (0, _operators.distinctUntilChanged)(), (0, _operators.switchMap)(hasRev => {
      return hasRev ? // short circuit: if we can read the _rev field we know it both exists and is readable
      (0, _rxjs.of)(_constants.AVAILABILITY_READABLE) : // we can't read the _rev field for two possible reasons: 1) the document isn't readable or 2) the document doesn't exist
      fetchDocumentReadability(id);
    }));
  }

  const fetchDocumentReadability = (0, _debounceCollect.debounceCollect)(function fetchDocumentReadability(args) {
    const uniqueIds = [...new Set((0, _flatten2.default)(args))];
    return (0, _rxjs.from)(chunkDocumentIds(uniqueIds)).pipe((0, _operators.mergeMap)(fetchDocumentReadabilityChunked, 10), (0, _operators.map)(res => args.map(_ref2 => {
      let [id] = _ref2;
      return res[uniqueIds.indexOf(id)];
    })));
  }, 1);

  function fetchDocumentReadabilityChunked(ids) {
    return (0, _rxjs.defer)(() => {
      const requestOptions = {
        uri: versionedClient.getDataUrl('doc', ids.join(',')),
        json: true,
        query: {
          excludeContent: 'true'
        },
        tag: 'preview.documents-availability'
      };
      return versionedClient.observable.request(requestOptions).pipe((0, _operators.map)(response => {
        const omitted = (0, _keyBy2.default)(response.omitted || [], entry => entry.id);
        return ids.map(id => {
          const omittedEntry = omitted[id];

          if (!omittedEntry) {
            // it's not omitted, so it exists and is readable
            return _constants.AVAILABILITY_READABLE;
          }

          if (omittedEntry.reason === 'existence') {
            return _constants.AVAILABILITY_NOT_FOUND;
          }

          if (omittedEntry.reason === 'permission') {
            // it's not omitted, so it exists and is readable
            return _constants.AVAILABILITY_PERMISSION_DENIED;
          }

          throw new Error("Unexpected reason for omission: \"".concat(omittedEntry.reason, "\""));
        });
      }));
    });
  }

  return {
    observeDocumentPairAvailability
  };
}