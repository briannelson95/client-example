"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SanityDefaultPreview = SanityDefaultPreview;

var _icons = require("@sanity/icons");

var _imageUrl = _interopRequireDefault(require("@sanity/image-url"));

var _types = require("@sanity/types");

var _react = _interopRequireWildcard(require("react"));

var _hooks = require("../../hooks");

var _util = require("../../util");

var _extractUploadState2 = require("./_extractUploadState");

var _previewComponents2 = require("./_previewComponents");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function FallbackIcon() {
  return /*#__PURE__*/_react.default.createElement(_icons.DocumentIcon, {
    className: "sanity-studio__preview-fallback-icon"
  });
}

function SanityDefaultPreview(props) {
  const {
    description: descriptionProp,
    icon,
    layout,
    media: mediaProp,
    subtitle: subtitleProp,
    title: titleProp,
    value: valueProp,
    ...restProps
  } = props;
  const client = (0, _hooks.useClient)();
  const imageBuilder = (0, _react.useMemo)(() => (0, _imageUrl.default)(client), [client]);
  const component = _previewComponents2._previewComponents[layout || 'default'] || _previewComponents2._previewComponents.default;
  const {
    _upload,
    value
  } = (0, _react.useMemo)(() => {
    return valueProp ? (0, _extractUploadState2._extractUploadState)(valueProp) : {
      _upload: undefined,
      value: undefined
    };
  }, [valueProp]);
  const description = descriptionProp || ((0, _util.isRecord)(value) && value !== null && value !== void 0 && value.description ? String(value === null || value === void 0 ? void 0 : value.description) : undefined);
  const title = titleProp || ((0, _util.isRecord)(value) && value !== null && value !== void 0 && value.title ? String(value === null || value === void 0 ? void 0 : value.title) : undefined);
  const subtitle = subtitleProp || ((0, _util.isRecord)(value) && value !== null && value !== void 0 && value.subtitle ? String(value === null || value === void 0 ? void 0 : value.subtitle) : undefined); // NOTE: This function exists because the previews provides options
  // for the rendering of the media (dimensions)

  const renderMedia = (0, _react.useCallback)(options => {
    if (!(0, _types.isImage)(mediaProp)) {
      return null;
    }

    const {
      dimensions
    } = options; // Handle sanity image

    return /*#__PURE__*/_react.default.createElement("img", {
      alt: (0, _util.isString)(title) ? title : undefined,
      referrerPolicy: "strict-origin-when-cross-origin",
      src: imageBuilder.image(mediaProp).width(dimensions.width || 100).height(dimensions.height || 100).fit(dimensions.fit).dpr(dimensions.dpr || 1).url() || ''
    });
  }, [imageBuilder, mediaProp, title]);
  const renderIcon = (0, _react.useCallback)(() => {
    return /*#__PURE__*/(0, _react.createElement)(icon || FallbackIcon);
  }, [icon]);
  const media = (0, _react.useMemo)(() => {
    if (icon === false) {
      // Explicitly disabled
      return false;
    }

    if (typeof mediaProp === 'function') {
      return mediaProp;
    }

    if ( /*#__PURE__*/(0, _react.isValidElement)(mediaProp)) {
      return mediaProp;
    } // If the asset is on media


    if ((0, _types.isReference)(mediaProp) && mediaProp._type === 'reference') {
      return renderMedia;
    } // Handle sanity image


    if ((0, _types.isImage)(mediaProp)) {
      return renderMedia;
    } // Render fallback icon


    return renderIcon;
  }, [icon, mediaProp, renderIcon, renderMedia]);
  return /*#__PURE__*/(0, _react.createElement)(component, {
    imageUrl: _upload === null || _upload === void 0 ? void 0 : _upload.previewImage,
    progress: _upload === null || _upload === void 0 ? void 0 : _upload.progress,
    ...restProps,
    media,
    description,
    title,
    subtitle,
    value
  });
}