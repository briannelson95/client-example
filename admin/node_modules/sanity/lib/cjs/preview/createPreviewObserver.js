"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPreviewObserver = createPreviewObserver;
exports.isRecord = isRecord;
exports.isReference = isReference;

var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _types = require("@sanity/types");

var _prepareForPreview = require("./utils/prepareForPreview");

var _getPreviewPaths = require("./utils/getPreviewPaths");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isRecord(value) {
  return (0, _isPlainObject2.default)(value);
}

function isReference(value) {
  return (0, _isPlainObject2.default)(value);
} // Takes a value and its type and prepares a snapshot for it that can be passed to a preview component


function createPreviewObserver(context) {
  const {
    observeDocumentTypeFromId,
    observePaths
  } = context;
  return function observeForPreview(value, type, viewOptions, apiConfig) {
    if ((0, _types.isCrossDatasetReferenceSchemaType)(type)) {
      // if the value is of type crossDatasetReference, but has no _ref property, we cannot prepare any value for the preview
      // and the most appropriate thing to do is to return `undefined` for snapshot
      if (!(0, _types.isCrossDatasetReference)(value)) {
        return (0, _rxjs.of)({
          snapshot: undefined
        });
      }

      const refApiConfig = {
        projectId: value._projectId,
        dataset: value._dataset
      };
      return observeDocumentTypeFromId(value._ref, refApiConfig).pipe((0, _operators.switchMap)(typeName => {
        if (typeName) {
          const refType = type.to.find(toType => toType.type === typeName);
          return observeForPreview(value, refType, {}, refApiConfig);
        }

        return (0, _rxjs.of)({
          snapshot: undefined
        });
      }));
    }

    if ((0, _types.isReferenceSchemaType)(type)) {
      // if the value is of type reference, but has no _ref property, we cannot prepare any value for the preview
      // and the most appropriate thing to do is to return `undefined` for snapshot
      if (!isReference(value)) {
        return (0, _rxjs.of)({
          snapshot: undefined
        });
      } // Previewing references actually means getting the referenced value,
      // and preview using the preview config of its type
      // todo: We need a way of knowing the type of the referenced value by looking at the reference record alone


      return observeDocumentTypeFromId(value._ref).pipe((0, _operators.switchMap)(typeName => {
        if (typeName) {
          const refType = type.to.find(toType => toType.name === typeName);
          return observeForPreview(value, refType);
        } // todo: in case we can't read the document type, we can figure out the reason why e.g. whether it's because
        //  the document doesn't exist or it's not readable due to lack of permission.
        //  We can use the "observeDocumentAvailability" function
        //  for this, but currently not sure if needed


        return (0, _rxjs.of)({
          snapshot: undefined
        });
      }));
    }

    const paths = (0, _getPreviewPaths.getPreviewPaths)(type.preview);

    if (paths) {
      return observePaths(value, paths, apiConfig).pipe((0, _operators.map)(snapshot => ({
        type: type,
        snapshot: snapshot && (0, _prepareForPreview.prepareForPreview)(snapshot, type, viewOptions)
      })));
    } // Note: this case is typically rare (or non-existent) and occurs only if
    // the SchemaType doesn't have a `select` field. The schema compiler
    // provides a default `preview` implementation for `object`s, `image`s,
    // `file`s, and `document`s


    return (0, _rxjs.of)({
      type,
      snapshot: value && isRecord(value) ? (0, _prepareForPreview.invokePrepare)(type, value, viewOptions).returnValue : null
    });
  };
}