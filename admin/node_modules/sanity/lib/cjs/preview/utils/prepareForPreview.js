"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.invokePrepare = invokePrepare;
exports.prepareForPreview = prepareForPreview;

var _uniqBy2 = _interopRequireDefault(require("lodash/uniqBy"));

var _pick2 = _interopRequireDefault(require("lodash/pick"));

var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

var _debounce2 = _interopRequireDefault(require("lodash/debounce"));

var _types = require("@sanity/types");

var _constants = require("../constants");

var _portableText = require("../utils/portableText");

var _isRecord = require("../../util/isRecord");

var _keysOf = require("./keysOf");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const PRESERVE_KEYS = ['_id', '_type', '_upload', '_createdAt', '_updatedAt'];
const EMPTY = [];

const errorCollector = (() => {
  let errorsByType = {};
  return {
    add: (type, value, error) => {
      if (!errorsByType[type.name]) {
        errorsByType[type.name] = [];
      }

      errorsByType[type.name].push({
        error: error,
        type: type,
        value
      });
    },

    getAll() {
      return errorsByType;
    },

    clear() {
      errorsByType = {};
    }

  };
})();

const reportErrors = (0, _debounce2.default)(() => {
  /* eslint-disable no-console */
  const errorsByType = errorCollector.getAll();
  const uniqueErrors = (0, _flatten2.default)(Object.keys(errorsByType).map(typeName => {
    const entries = errorsByType[typeName];
    return (0, _uniqBy2.default)(entries, entry => entry.error.message);
  }));
  const errorCount = uniqueErrors.length;

  if (errorCount === 0) {
    return;
  }

  console.groupCollapsed("%cHeads up! Got ".concat(errorCount === 1 ? 'error' : "".concat(errorCount, " errors"), " while preparing data for preview. Click for details."), 'color: #ff7e7c');
  Object.keys(errorsByType).forEach(typeName => {
    const entries = errorsByType[typeName];
    const first = entries[0];
    console.group("Check the preview config for schema type \"".concat(typeName, "\": %o"), first.type.preview);
    const uniqued = (0, _uniqBy2.default)(entries, entry => entry.error.message);
    uniqued.forEach(entry => {
      if (entry.error.type === 'returnValueError') {
        var _entry$type$preview;

        const hasPrepare = typeof ((_entry$type$preview = entry.type.preview) === null || _entry$type$preview === void 0 ? void 0 : _entry$type$preview.prepare) === 'function';
        const {
          value,
          error
        } = entry;
        console.log("Encountered an invalid ".concat(hasPrepare ? 'return value when calling prepare(%o)' : 'value targeted by preview.select', ":"), value);
        console.error(error);
      }

      if (entry.error.type === 'prepareError') {
        const {
          value,
          error
        } = entry;
        console.log('Encountered an error when calling prepare(%o):', value);
        console.error(error);
      }
    });
    console.groupEnd();
  });
  console.groupEnd();
  errorCollector.clear();
  /* eslint-enable no-console */
}, 1000);

const isRenderable = fieldName => value => {
  const type = typeof value;

  if (value === null || type === 'undefined' || type === 'string' || type === 'number' || type === 'boolean') {
    return EMPTY;
  }

  return [assignType('returnValueError', new Error("The \"".concat(fieldName, "\" field should be a string, number, boolean, undefined or null, instead saw ").concat(inspect(value))))];
};

const FIELD_NAME_VALIDATORS = {
  media: () => {
    // not sure how to validate media as it would  possibly involve executing a function and check the
    // return value
    return EMPTY;
  },
  title: isRenderable('title'),
  subtitle: isRenderable('subtitle'),
  description: isRenderable('description'),
  imageUrl: isRenderable('imageUrl'),
  date: isRenderable('date')
};

function inspect(val) {
  let prefixType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if ((0, _isRecord.isRecord)(val)) {
    const keys = Object.keys(val);
    const ellipse = keys.length > 3 ? '...' : '';
    const prefix = "object with keys ";
    return "".concat(prefixType ? prefix : '', "{").concat(keys.slice(0, 3).join(', ')).concat(ellipse, "}");
  }

  if (Array.isArray(val)) {
    const ellipse = val.length > 3 ? '...' : '';
    const prefix = "array with ";
    return "".concat(prefixType ? prefix : '', "[").concat(val.map(v => inspect(v, false))).concat(ellipse, "]");
  }

  return "the ".concat(typeof val, " ").concat(val);
}

function validateFieldValue(fieldName, fieldValue) {
  if (typeof fieldValue === 'undefined') {
    return EMPTY;
  }

  const validator = FIELD_NAME_VALIDATORS[fieldName];
  return validator && validator(fieldValue) || EMPTY;
}

function assignType(type, error) {
  return Object.assign(error, {
    type
  });
}

function validatePreparedValue(preparedValue) {
  if (!(0, _isPlainObject2.default)(preparedValue) || preparedValue === null) {
    return [assignType('returnValueError', new Error("Invalid return value. Expected a plain object with at least a 'title' field, instead saw ".concat(inspect(preparedValue))))];
  }

  return Object.entries(preparedValue).reduce((acc, _ref) => {
    let [fieldName, fieldValue] = _ref;
    return [...acc, ...validateFieldValue(fieldName, fieldValue)];
  }, EMPTY);
}

function validateReturnedPreview(result) {
  return { ...result,
    errors: [...(result.errors || []), ...validatePreparedValue(result.returnValue)]
  };
}

function defaultPrepare(value) {
  return (0, _keysOf.keysOf)(value).reduce((acc, fieldName) => {
    const val = value[fieldName];
    return { ...acc,
      [fieldName]: (0, _portableText.isPortableTextArray)(val) ? (0, _portableText.extractTextFromBlocks)(val) : value[fieldName]
    };
  }, {});
}

function invokePrepare(type, value) {
  var _type$preview;

  let viewOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  const prepare = (_type$preview = type.preview) === null || _type$preview === void 0 ? void 0 : _type$preview.prepare;

  try {
    return {
      returnValue: prepare ? prepare(value, viewOptions) : defaultPrepare(value),
      errors: EMPTY
    };
  } catch (error) {
    return {
      returnValue: null,
      errors: [assignType('prepareError', error)]
    };
  }
}

function withErrors(result, type, selectedValue) {
  result.errors.forEach(error => errorCollector.add(type, selectedValue, error));
  reportErrors();
  return _constants.INVALID_PREVIEW_FALLBACK;
}

function hasEnumListOptions(type) {
  const options = type.options && typeof type.options === 'object' ? type.options : false;

  if (!options || !('list' in options)) {
    return false;
  }

  const listOptions = options.list;
  return Array.isArray(listOptions);
}

function getListOptions(type) {
  if (!hasEnumListOptions(type)) {
    return undefined;
  }

  const listOptions = type.options.list;
  return listOptions.map(option => (0, _types.isTitledListValue)(option) ? option : {
    title: option,
    value: option
  });
}

function prepareForPreview(rawValue, type) {
  var _type$preview2, _type$preview3;

  let viewOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  const hasCustomPrepare = typeof ((_type$preview2 = type.preview) === null || _type$preview2 === void 0 ? void 0 : _type$preview2.prepare) === 'function';
  const selection = ((_type$preview3 = type.preview) === null || _type$preview3 === void 0 ? void 0 : _type$preview3.select) || {};
  const targetKeys = Object.keys(selection);
  const selectedValue = targetKeys.reduce((acc, key) => {
    var _typeWithFields$field;

    // Find the field the value belongs to
    const typeWithFields = 'fields' in type ? type : null;
    const targetFieldName = selection[key];
    const valueField = typeWithFields === null || typeWithFields === void 0 ? void 0 : (_typeWithFields$field = typeWithFields.fields) === null || _typeWithFields$field === void 0 ? void 0 : _typeWithFields$field.find(f => f.name === targetFieldName);
    const listOptions = valueField && getListOptions(valueField.type); // If the user has _not_ specified a `prepare()` function for the preview, and the
    // field type has an `options.list`, we want to use the title of the selected item
    // as the preview value. If, however, there _is_ a custom `prepare()`, we leave this
    // mapping up to the user to perform should they want to. This is both to maintain
    // backwards compatiblity, but also to allow using the raw value for prepare operations

    if (!hasCustomPrepare && listOptions) {
      // Find the selected option that matches the raw value
      const selectedOption = listOptions && listOptions.find(opt => opt.value === (0, _get2.default)(rawValue, selection[key]));
      acc[key] = selectedOption ? selectedOption.title : (0, _get2.default)(rawValue, selection[key]);
    } else {
      acc[key] = (0, _get2.default)(rawValue, selection[key]);
    }

    return acc;
  }, {});
  const prepareResult = invokePrepare(type, selectedValue, viewOptions);

  if (prepareResult.errors.length > 0) {
    return withErrors(prepareResult, type, selectedValue);
  }

  const returnValueResult = validateReturnedPreview(invokePrepare(type, selectedValue, viewOptions));
  return returnValueResult.errors.length > 0 ? withErrors(returnValueResult, type, selectedValue) : { ...(0, _pick2.default)(rawValue, PRESERVE_KEYS),
    ...prepareResult.returnValue
  };
}