"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combineSelections = combineSelections;
exports.reassemble = reassemble;
exports.toQuery = toQuery;

var _values2 = _interopRequireDefault(require("lodash/values"));

var _sortBy2 = _interopRequireDefault(require("lodash/sortBy"));

var _identity2 = _interopRequireDefault(require("lodash/identity"));

var _searchUtils = require("../../util/searchUtils");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function combineSelections(selections) {
  return (0, _values2.default)(selections.reduce((output, _ref, index) => {
    let [id, fields] = _ref;
    const key = (0, _sortBy2.default)(fields.join(','), _identity2.default).join('.');

    if (!output[key]) {
      output[key] = {
        fields: fields,
        ids: [],
        map: []
      };
    }

    const idx = output[key].ids.length;
    output[key].ids[idx] = id;
    output[key].map[idx] = index;
    return output;
  }, {}));
}

function stringifyId(id) {
  return JSON.stringify(id);
}

const maybeEscape = fieldName => (0, _searchUtils.fieldNeedsEscape)(fieldName) ? "\"".concat(fieldName, "\": @").concat((0, _searchUtils.escapeField)(fieldName)) : fieldName;

function toSubQuery(_ref2) {
  let {
    ids,
    fields
  } = _ref2;
  const allFields = [..._constants.INCLUDE_FIELDS_QUERY, ...fields];
  return "*[_id in [".concat(ids.map(stringifyId).join(','), "]][0...").concat(ids.length, "]{").concat(allFields.map(maybeEscape).join(','), "}");
}

function toQuery(combinedSelections) {
  return "[".concat(combinedSelections.map(toSubQuery).join(','), "][0...").concat(combinedSelections.length, "]");
}

function reassemble(queryResult, combinedSelections) {
  return queryResult.reduce((reprojected, subResult, index) => {
    const map = combinedSelections[index].map;
    map.forEach((resultIdx, i) => {
      const id = combinedSelections[index].ids[i];
      const found = subResult.find(doc => doc._id === id);
      reprojected[resultIdx] = found || null;
    });
    return reprojected;
  }, []);
}