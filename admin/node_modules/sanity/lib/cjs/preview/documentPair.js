"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.create_preview_documentPair = create_preview_documentPair;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _draftUtils = require("../util/draftUtils");

var _isRecord = require("../util/isRecord");

var _availability = require("./availability");

function create_preview_documentPair(versionedClient, observePaths) {
  const {
    observeDocumentPairAvailability
  } = (0, _availability.create_preview_availability)(versionedClient, observePaths);
  const ALWAYS_INCLUDED_SNAPSHOT_PATHS = [['_updatedAt'], ['_createdAt'], ['_type']];
  return {
    observePathsDocumentPair
  };

  function observePathsDocumentPair(value, paths) {
    const {
      draftId,
      publishedId
    } = (0, _draftUtils.getIdPair)('_id' in value ? value._id : value._ref);
    return observeDocumentPairAvailability(value).pipe((0, _operators.switchMap)(availability => {
      if (!availability.draft.available && !availability.published.available) {
        // short circuit, neither draft nor published is available so no point in trying to get a snapshot
        return (0, _rxjs.of)({
          id: publishedId,
          type: null,
          draft: {
            availability: availability.draft,
            snapshot: undefined
          },
          published: {
            availability: availability.published,
            snapshot: undefined
          }
        });
      }

      const snapshotPaths = [...paths, ...ALWAYS_INCLUDED_SNAPSHOT_PATHS];
      return (0, _rxjs.combineLatest)([observePaths({
        _type: 'reference',
        _ref: draftId
      }, snapshotPaths), observePaths({
        _type: 'reference',
        _ref: publishedId
      }, snapshotPaths)]).pipe((0, _operators.map)(_ref => {
        let [draftSnapshot, publishedSnapshot] = _ref;
        // note: assume type is always the same
        const type = (0, _isRecord.isRecord)(draftSnapshot) && '_type' in draftSnapshot && draftSnapshot._type || (0, _isRecord.isRecord)(publishedSnapshot) && '_type' in publishedSnapshot && publishedSnapshot._type || null;
        return {
          id: publishedId,
          type: typeof type === 'string' ? type : null,
          draft: {
            availability: availability.draft,
            snapshot: draftSnapshot
          },
          published: {
            availability: availability.published,
            snapshot: publishedSnapshot
          }
        };
      }));
    }));
  }
}