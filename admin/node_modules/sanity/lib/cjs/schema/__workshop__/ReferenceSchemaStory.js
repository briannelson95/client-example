"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ReferenceSchemaStory;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _ = require("..");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ReferenceSchemaStory() {
  const authorTypeDef = (0, _react.useMemo)(() => ({
    type: 'document',
    name: 'author',
    title: 'Author',
    fields: [{
      type: 'string',
      name: 'name'
    }]
  }), []);
  const testTypeDef = (0, _react.useMemo)(() => ({
    type: 'reference',
    name: 'test',
    title: 'Test',
    to: [{
      type: 'author'
    }]
  }), []);
  const schemaDef = (0, _react.useMemo)(() => ({
    name: 'test',
    types: [authorTypeDef, testTypeDef]
  }), [authorTypeDef, testTypeDef]);
  const schema = (0, _react.useMemo)(() => (0, _.createSchema)(schemaDef), [schemaDef]);
  return /*#__PURE__*/_react.default.createElement(_ui.Card, {
    height: "fill"
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    height: "fill"
  }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    flex: 1,
    overflow: "auto",
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Label, {
    size: 1
  }, "Schema definitions"), /*#__PURE__*/_react.default.createElement(_ui.Box, {
    paddingTop: 4
  }), /*#__PURE__*/_react.default.createElement(_ui.Code, {
    language: "json",
    size: 1
  }, JSON.stringify(schemaDef.types, null, 2))), /*#__PURE__*/_react.default.createElement(_ui.Card, {
    borderLeft: true,
    flex: 1,
    overflow: "auto",
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Label, {
    size: 1
  }, "Schema types"), /*#__PURE__*/_react.default.createElement(_ui.Box, {
    paddingTop: 4
  }), /*#__PURE__*/_react.default.createElement(_ui.Code, {
    language: "json",
    size: 1
  }, JSON.stringify([schemaTypeToJSON(schema.get('author')), schemaTypeToJSON(schema.get('test'))], null, 2)))));
}

function schemaTypeToJSON(schemaType) {
  if (!schemaType) {
    return null;
  }

  if (!schemaType.type) {
    return {
      name: schemaType.name
    }; // return schemaType.name
  }

  const obj = {
    type: schemaTypeToJSON(schemaType.type),
    name: schemaType.name,
    title: schemaType.title
  };

  if ('fields' in schemaType) {
    obj.fields = schemaType.fields.map(f => schemaTypeToJSON(f));
  }

  if ('to' in schemaType) {
    obj.to = schemaType.to.map(f => schemaTypeToJSON(f));
  }

  return obj;
}