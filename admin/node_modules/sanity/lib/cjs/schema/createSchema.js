"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSchema = createSchema;

var _schema = _interopRequireDefault(require("@sanity/schema"));

var _internal = require("@sanity/schema/_internal");

var _validation = require("@sanity/validation");

var _slug = _interopRequireDefault(require("./types/slug"));

var _geopoint = _interopRequireDefault(require("./types/geopoint"));

var _imageCrop = _interopRequireDefault(require("./types/imageCrop"));

var _imageHotspot = _interopRequireDefault(require("./types/imageHotspot"));

var _assetSourceData = _interopRequireDefault(require("./types/assetSourceData"));

var _imageAsset = _interopRequireDefault(require("./types/imageAsset"));

var _imagePalette = _interopRequireDefault(require("./types/imagePalette"));

var _imagePaletteSwatch = _interopRequireDefault(require("./types/imagePaletteSwatch"));

var _imageDimensions = _interopRequireDefault(require("./types/imageDimensions"));

var _imageMetadata = _interopRequireDefault(require("./types/imageMetadata"));

var _fileAsset = _interopRequireDefault(require("./types/fileAsset"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const isError = problem => problem.severity === 'error';

const builtinTypes = [_assetSourceData.default, _slug.default, _geopoint.default, // legacyRichDate,
_imageAsset.default, _fileAsset.default, _imageCrop.default, _imageHotspot.default, _imageMetadata.default, _imageDimensions.default, _imagePalette.default, _imagePaletteSwatch.default];

function createSchema(schemaDef) {
  const validated = (0, _internal.validateSchema)(schemaDef.types).getTypes();
  const validation = (0, _internal.groupProblems)(validated);
  const hasErrors = validation.some(group => group.problems.some(isError));

  const compiled = _schema.default.compile({
    name: schemaDef.name,
    types: hasErrors ? [] : [...schemaDef.types, ...builtinTypes].filter(Boolean)
  }) // ;(compiled as any)._source = schemaDef
  ;

  compiled._validation = validation;
  return (0, _validation.inferFromSchema)(compiled);
}