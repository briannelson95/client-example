"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DiffCardStory;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _diff = require("../diff");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function DiffCardStory() {
  const diff = (0, _react.useMemo)(() => ({
    type: 'boolean',
    action: 'added',
    isChanged: true,
    fromValue: null,
    toValue: true,
    annotation: {
      chunk: {
        index: 0,
        id: 'foo',
        type: 'editDraft',
        start: 0,
        end: 0,
        startTimestamp: new Date('2021-01-01').toJSON(),
        endTimestamp: new Date('2021-01-02').toJSON(),
        authors: new Set(['p27ewL8aM']),
        draftState: 'present',
        publishedState: 'missing'
      },
      timestamp: new Date('2021-01-02').toJSON(),
      author: 'p27ewL8aM'
    }
  }), []);
  return /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_diff.DiffCard, {
    diff: diff // disableHoverEffect
    ,
    path: [],
    tooltip: {
      description: 'Added'
    }
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "DiffCard"))));
}