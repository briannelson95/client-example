"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ChangeResolverStory;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _hooks = require("../../hooks");

var _diff = require("../diff");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ChangeResolverStory() {
  const documentId = 'test';
  const documentType = 'author';
  const schema = (0, _hooks.useSchema)();
  const schemaType = schema.get(documentType);
  const nameDiff = (0, _react.useMemo)(() => ({
    type: 'string',
    action: 'changed',
    isChanged: true,
    fromValue: '',
    toValue: 'Test',
    annotation: {
      chunk: {
        index: 0,
        id: 'foo',
        type: 'editDraft',
        start: 0,
        end: 0,
        startTimestamp: new Date('2021-01-01').toJSON(),
        endTimestamp: new Date('2021-01-02').toJSON(),
        authors: new Set(['p27ewL8aM']),
        draftState: 'present',
        publishedState: 'missing'
      },
      timestamp: new Date('2021-01-02').toJSON(),
      author: 'p27ewL8aM'
    },
    segments: []
  }), []); // export interface FieldChangeNode {
  //   type: 'field'
  //   diff: Diff
  //   itemDiff?: ItemDiff
  //   parentDiff?: ObjectDiff | ArrayDiff
  //   key: string
  //   path: Path
  //   error?: FieldValueError
  //   titlePath: ChangeTitlePath
  //   schemaType: ObjectFieldType
  //   showHeader: boolean
  //   showIndex: boolean
  //   diffComponent?: DiffComponent
  //   parentSchema?: ArraySchemaType | ObjectSchemaType
  //   readOnly?: ConditionalProperty
  //   hidden?: ConditionalProperty
  // }

  const change = (0, _react.useMemo)(() => ({
    type: 'field',
    diff: nameDiff,
    key: 'name',
    path: ['name'],
    parentSchema: schemaType,
    schemaType: schemaType.fields.find(f => f.name === 'name'),
    titlePath: ['Name'],
    showIndex: true,
    showHeader: true
  }), [nameDiff, schemaType]);
  const FieldWrapper = (0, _react.useCallback)(_props => {
    // console.log('props', _props)
    return /*#__PURE__*/_react.default.createElement(_ui.Card, null, _props.children);
  }, []);
  const diff = (0, _react.useMemo)(() => ({
    type: 'object',
    action: 'changed',
    isChanged: true,
    fields: {
      name: nameDiff
    },
    fromValue: {
      name: ''
    },
    toValue: {
      name: 'Test'
    },
    annotation: {
      chunk: {
        index: 0,
        id: 'foo',
        type: 'editDraft',
        start: 0,
        end: 0,
        startTimestamp: new Date('2021-01-01').toJSON(),
        endTimestamp: new Date('2021-01-02').toJSON(),
        authors: new Set(['p27ewL8aM']),
        draftState: 'present',
        publishedState: 'missing'
      },
      timestamp: new Date('2021-01-02').toJSON(),
      author: 'p27ewL8aM'
    }
  }), [nameDiff]);
  const documentContext = (0, _react.useMemo)(() => ({
    documentId,
    FieldWrapper,
    isComparingCurrent: true,
    rootDiff: diff,
    schemaType,
    value: {
      name: 'Test'
    }
  }), [diff, documentId, FieldWrapper, schemaType]);
  return /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_diff.DocumentChangeContext.Provider, {
    value: documentContext
  }, /*#__PURE__*/_react.default.createElement(_diff.ChangeResolver, {
    change: change
  })));
}