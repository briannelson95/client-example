"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Text = Text;
exports.TextWithDiff = TextWithDiff;

var _startCase2 = _interopRequireDefault(require("lodash/startCase"));

var _types = require("@sanity/types");

var _react = _interopRequireWildcard(require("react"));

var _changeIndicators = require("../../../../../components/changeIndicators");

var _diff = require("../../../../diff");

var _styledComponents = require("./styledComponents");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function Text(_ref) {
  let {
    diff,
    childDiff,
    children,
    path,
    segment,
    ...restProps
  } = _ref;
  const diffWithFallback = diff || childDiff;
  const hasChanged = diffWithFallback && diffWithFallback.action !== 'unchanged' && segment.action !== 'unchanged';

  if (hasChanged) {
    return /*#__PURE__*/_react.default.createElement(TextWithDiff, _extends({}, restProps, {
      childDiff: childDiff,
      diff: diff,
      segment: segment,
      path: path
    }), children);
  }

  return /*#__PURE__*/_react.default.createElement(_styledComponents.InlineBox, null, children);
}

function TextWithDiff(_ref2) {
  let {
    diff,
    childDiff,
    children,
    path,
    segment,
    ...restProps
  } = _ref2;

  const {
    onSetFocus
  } = _react.default.useContext(_changeIndicators.ConnectorContext);

  const {
    path: fullPath
  } = _react.default.useContext(_diff.DiffContext);

  const spanSegment = (0, _react.useMemo)(() => path.slice(-2, 1)[0], [path]);
  const isRemoved = diff && diff.action === 'removed';
  const prefix = fullPath.slice(0, fullPath.findIndex(seg => (0, _types.isKeySegment)(seg) && (0, _types.isKeySegment)(spanSegment) && seg._key === spanSegment._key));
  const focusPath = prefix.concat(path);
  const handleClick = (0, _react.useCallback)(event => {
    event.stopPropagation();

    if (!isRemoved) {
      event.preventDefault();
      onSetFocus(focusPath);
    }
  }, [focusPath, isRemoved, onSetFocus]);
  const realSeg = diff && diff.segments.find(rSeg => rSeg.text === segment.text);
  const diffWithFallback = realSeg || diff || childDiff;
  const annotation = diffWithFallback && diffWithFallback.action !== 'unchanged' && diffWithFallback.annotation || null;
  const diffCard = annotation && segment.action !== 'unchanged' ? /*#__PURE__*/_react.default.createElement(_diff.DiffCard, {
    annotation: annotation,
    as: segment.action === 'removed' ? 'del' : 'ins',
    tooltip: {
      description: "".concat((0, _startCase2.default)(segment.action), " text")
    }
  }, children) : null;
  return /*#__PURE__*/_react.default.createElement(_styledComponents.InlineBox, _extends({}, restProps, {
    onClick: handleClick,
    "data-changed": ""
  }), /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, diffCard || children)));
}