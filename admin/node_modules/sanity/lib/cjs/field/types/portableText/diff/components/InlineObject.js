"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InlineObject = InlineObject;

var _icons = require("@sanity/icons");

var _types = require("@sanity/types");

var _ui = require("@sanity/ui");

var _paths = require("@sanity/util/paths");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _changeIndicators = require("../../../../../components/changeIndicators");

var _preview = require("../../../../../preview");

var _diff = require("../../../../diff");

var _helpers = require("../helpers");

var _styledComponents2 = require("./styledComponents");

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const InlineObjectWrapper = (0, _styledComponents.default)(_ui.Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  &:not([hidden]) {\n    display: inline;\n    cursor: pointer;\n    white-space: nowrap;\n    align-items: center;\n\n    &[data-removed] {\n      text-decoration: line-through;\n    }\n\n    ", " {\n      display: inline-flex;\n    }\n  }\n"])), _styledComponents2.InlineBox);

function InlineObject(_ref) {
  let {
    diff,
    object,
    schemaType,
    ...restProps
  } = _ref;

  if (!schemaType) {
    return /*#__PURE__*/_react.default.createElement(InlineObjectWrapper, _extends({}, restProps, {
      border: true,
      radius: 1
    }), "Unknown schema type: ", object._type);
  }

  if (diff) {
    return /*#__PURE__*/_react.default.createElement(InlineObjectWithDiff, _extends({}, restProps, {
      diff: diff,
      object: object,
      schemaType: schemaType
    }));
  }

  return /*#__PURE__*/_react.default.createElement(InlineObjectWrapper, null, /*#__PURE__*/_react.default.createElement(_preview.SanityPreview, {
    schemaType: schemaType,
    value: object,
    layout: "inline"
  }));
}

function InlineObjectWithDiff(_ref2) {
  let {
    diff,
    object,
    path,
    schemaType,
    ...restProps
  } = _ref2;
  const {
    path: fullPath
  } = (0, _react.useContext)(_diff.DiffContext);
  const {
    onSetFocus
  } = (0, _react.useContext)(_changeIndicators.ConnectorContext);
  const color = (0, _diff.useDiffAnnotationColor)(diff, []);
  const style = (0, _react.useMemo)(() => color ? {
    background: color.background,
    color: color.text
  } : {}, [color]);
  const [open, setOpen] = (0, _react.useState)(false);
  const emptyObject = object && (0, _helpers.isEmptyObject)(object);
  const isRemoved = diff.action === 'removed';
  const prefix = fullPath.slice(0, fullPath.findIndex(seg => (0, _types.isKeySegment)(seg) && seg._key === object._key));
  const myPath = prefix.concat(path);
  const myValue = "field-".concat((0, _paths.toString)(myPath));
  const values = (0, _changeIndicators.useReportedValues)();
  const isEditing = values.filter(_ref3 => {
    let [p] = _ref3;
    return p.startsWith(myValue);
  }).length > 0;
  const focusPath = fullPath.slice(0, -1).concat(path).concat([_paths.FOCUS_TERMINATOR]);
  (0, _react.useEffect)(() => {
    if (isEditing) {
      setOpen(true);
      onSetFocus(focusPath);
    }
  }, [isEditing]);
  const handleOpenPopup = (0, _react.useCallback)(event => {
    event.stopPropagation();
    setOpen(true);

    if (!isRemoved) {
      onSetFocus(focusPath);
      return;
    }

    event.preventDefault();
  }, [focusPath]);
  const handleClose = (0, _react.useCallback)(() => {
    setOpen(false);
  }, []);

  const popoverContent = /*#__PURE__*/_react.default.createElement(_diff.DiffContext.Provider, {
    value: {
      path: myPath
    }
  }, /*#__PURE__*/_react.default.createElement(PopoverContent, {
    diff: diff,
    emptyObject: emptyObject,
    onClose: handleClose,
    schemaType: schemaType
  }));

  const annotation = diff.action !== 'unchanged' && diff.annotation || null;
  const annotations = annotation ? [annotation] : [];
  return /*#__PURE__*/_react.default.createElement(InlineObjectWrapper, _extends({}, restProps, {
    onClick: handleOpenPopup,
    style: style,
    "data-removed": diff.action === 'removed' ? '' : undefined,
    border: true,
    radius: 2
  }), /*#__PURE__*/_react.default.createElement(_ui.Popover, {
    content: popoverContent,
    open: open,
    portal: true
  }, /*#__PURE__*/_react.default.createElement(_styledComponents2.PreviewContainer, null, /*#__PURE__*/_react.default.createElement(_diff.DiffTooltip, {
    annotations: annotations,
    description: "".concat(diff.action, " inline object")
  }, /*#__PURE__*/_react.default.createElement(_styledComponents2.InlineBox, null, /*#__PURE__*/_react.default.createElement(_preview.SanityPreview, {
    schemaType: schemaType,
    value: object,
    layout: "inline"
  }), /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    paddingX: 1
  }, /*#__PURE__*/_react.default.createElement(_styledComponents2.InlineText, {
    size: 0
  }, /*#__PURE__*/_react.default.createElement(_icons.ChevronDownIcon, null))))))));
}

function PopoverContent(_ref4) {
  let {
    diff,
    emptyObject,
    onClose,
    schemaType
  } = _ref4;
  const [popoverElement, setPopoverElement] = (0, _react.useState)(null); // const {isTopLayer} = useLayer()

  const handleClickOutside = (0, _react.useCallback)(() => {
    // Popover doesn't close at all when using this condition
    // if (!isTopLayer) return
    onClose();
  }, [onClose]);
  (0, _ui.useClickOutside)(handleClickOutside, [popoverElement]);
  return /*#__PURE__*/_react.default.createElement(_styledComponents2.PopoverContainer, {
    ref: setPopoverElement,
    padding: 3
  }, emptyObject && /*#__PURE__*/_react.default.createElement(_ui.Label, {
    size: 1,
    muted: true
  }, "Empty ", schemaType.title), !emptyObject && /*#__PURE__*/_react.default.createElement(_diff.ChangeList, {
    diff: diff,
    schemaType: schemaType
  }));
}