"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArrayOfOptionsFieldDiff = void 0;

var _types = require("@sanity/types");

var _react = _interopRequireDefault(require("react"));

var _ui = require("@sanity/ui");

var _preview = require("../../../../preview");

var _userColor = require("../../../../user-color");

var _diff = require("../../../diff");

var _preview2 = require("../../boolean/preview");

var _arrayUtils = require("../util/arrayUtils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ArrayOfOptionsFieldDiff = _ref => {
  var _schemaType$options;

  let {
    diff,
    schemaType
  } = _ref;
  const options = (_schemaType$options = schemaType.options) === null || _schemaType$options === void 0 ? void 0 : _schemaType$options.list;
  const colorManager = (0, _userColor.useUserColorManager)();

  if (!Array.isArray(options)) {
    // Shouldn't happen, because the resolver should only resolve here if it does
    return null;
  }

  return /*#__PURE__*/_react.default.createElement("div", null, diff.items.map(item => normalizeItems(item, diff, schemaType)).filter(item => item !== null).sort(sortItems).map((item, index) => {
    const {
      annotation,
      isPresent,
      value,
      memberType,
      title
    } = item;
    const color = (0, _diff.getAnnotationColor)(colorManager, annotation);
    const action = isPresent ? 'Added' : 'Removed';
    return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
      align: "center",
      key: getItemKey(diff, index)
    }, /*#__PURE__*/_react.default.createElement(_diff.DiffTooltip, {
      annotations: annotation ? [annotation] : [],
      description: action
    }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
      align: "center"
    }, /*#__PURE__*/_react.default.createElement(_preview2.Checkbox, {
      checked: !isPresent,
      color: color
    }), /*#__PURE__*/_react.default.createElement(_ui.Box, {
      margin: 2
    }, /*#__PURE__*/_react.default.createElement(_diff.FromToArrow, null)), /*#__PURE__*/_react.default.createElement(_preview2.Checkbox, {
      checked: isPresent,
      color: color
    }))), /*#__PURE__*/_react.default.createElement(_ui.Flex, {
      align: "center"
    }, /*#__PURE__*/_react.default.createElement(ItemPreview, {
      value: title || value,
      memberType: memberType
    })));
  }));
};

exports.ArrayOfOptionsFieldDiff = ArrayOfOptionsFieldDiff;

function normalizeItems(item, parentDiff, schemaType) {
  if (item.diff.action === 'unchanged') {
    return null;
  }

  const {
    fromValue,
    toValue
  } = parentDiff;
  const value = getValue(item.diff);
  const wasPresent = isInArray(value, fromValue);
  const isPresent = isInArray(value, toValue);

  if (wasPresent === isPresent) {
    return null;
  }

  return {
    title: getItemTitle(value, schemaType),
    memberType: resolveMemberType(getValue(item.diff), schemaType),
    itemIndex: getOptionIndex(value, schemaType),
    annotation: item.annotation,
    isPresent,
    value
  };
}

function sortItems(itemA, itemB) {
  return itemA.itemIndex - itemB.itemIndex;
}

function ItemPreview(_ref2) {
  let {
    value,
    memberType
  } = _ref2;
  return /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginX: 2,
    marginY: 1
  }, typeof value === 'string' || typeof value === 'number' ? value : /*#__PURE__*/_react.default.createElement(_preview.SanityPreview, {
    schemaType: memberType,
    value: value,
    layout: "default"
  }));
}

function isInArray(value, parent) {
  const array = parent || [];
  return typeof value === 'object' && value !== null ? array.some(item => (0, _arrayUtils.isEqual)(item, value)) : array.includes(value);
}

function getItemKey(diff, index) {
  const value = diff.toValue || diff.fromValue;
  return (0, _types.isKeyedObject)(value) ? value._key : index;
}

function getValue(diff) {
  return typeof diff.toValue === 'undefined' ? diff.fromValue : diff.toValue;
}

function resolveMemberType(item, schemaType) {
  const itemTypeName = resolveTypeName(item);
  return schemaType.of.find(memberType => memberType.name === itemTypeName);
}

function resolveTypeName(value) {
  const jsType = resolveJSType(value);

  if (jsType !== 'object') {
    return jsType;
  }

  const obj = value;
  return '_type' in obj && obj._type || jsType;
}

function resolveJSType(val) {
  if (val === null) {
    return 'null';
  }

  if (Array.isArray(val)) {
    return 'array';
  }

  return typeof val;
}

function isNamedOption(item) {
  return typeof item === 'object' && item !== null && 'title' in item;
}

function getOptionIndex(item, schemaType) {
  var _schemaType$options2;

  const list = ((_schemaType$options2 = schemaType.options) === null || _schemaType$options2 === void 0 ? void 0 : _schemaType$options2.list) || [];
  return list.findIndex(opt => (0, _arrayUtils.isEqual)(isNamedOption(opt) ? opt.value : opt, item));
}

function getItemTitle(item, schemaType) {
  var _schemaType$options3;

  const list = ((_schemaType$options3 = schemaType.options) === null || _schemaType$options3 === void 0 ? void 0 : _schemaType$options3.list) || [];
  const index = getOptionIndex(item, schemaType);
  return index === -1 ? undefined : list[index].title || undefined;
}