"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileFieldDiff = void 0;

var _icons = require("@sanity/icons");

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _diff = require("../../../diff");

var _hooks = require("../../../diff/hooks");

var _helpers = require("./helpers");

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const SizeDiff = _styledComponents.default.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  ", "\n  &:not([hidden]) {\n    display: inline-block;\n  }\n\n  [data-number='positive'] {\n    color: var(--size-diff-positive);\n  }\n\n  [data-number='negative'] {\n    color: var(--size-diff-negative);\n  }\n"])), _ref => {
  let {
    theme
  } = _ref;
  return "\n    --size-diff-positive: ".concat(theme.sanity.color.solid.positive.enabled.bg, ";\n    --size-diff-negative: ").concat(theme.sanity.color.solid.critical.enabled.bg, ";\n  ");
});

const FileFieldDiff = _ref2 => {
  let {
    diff,
    schemaType
  } = _ref2;
  const {
    fromValue,
    toValue,
    fields
  } = diff;
  const fromAsset = fromValue === null || fromValue === void 0 ? void 0 : fromValue.asset;
  const toAsset = toValue === null || toValue === void 0 ? void 0 : toValue.asset;
  const prev = (0, _hooks.useRefValue)(fromAsset === null || fromAsset === void 0 ? void 0 : fromAsset._ref);
  const next = (0, _hooks.useRefValue)(toAsset === null || toAsset === void 0 ? void 0 : toAsset._ref);
  const changedFields = Object.entries(fields).filter(_ref3 => {
    let [name, field] = _ref3;
    return field.isChanged && name !== '_type';
  }).map(_ref4 => {
    let [name] = _ref4;
    return name;
  });
  const didAssetChange = changedFields.includes('asset');
  const nestedFields = schemaType.fields.filter(field => field.name !== 'asset' && changedFields.includes(field.name)).map(field => field.name); // Sizes in MB TODO: improve. Apple uses 1000^2

  const prevSize = (prev === null || prev === void 0 ? void 0 : prev.size) && prev.size / 1000 / 1000;
  const nextSize = (next === null || next === void 0 ? void 0 : next.size) && next.size / 1000 / 1000;
  const pctDiff = (0, _helpers.getSizeDiff)(prevSize, nextSize);
  const roundedPrevSize = prevSize ? prevSize.toFixed(2) : undefined;
  const roundedNextSize = nextSize ? nextSize.toFixed(2) : undefined;
  const cardStyles = (0, _react.useMemo)(() => ({
    display: 'block',
    flex: 1
  }), []);

  const from = prev && /*#__PURE__*/_react.default.createElement(_diff.DiffCard, {
    as: "del",
    diff: diff,
    path: "asset._ref",
    style: cardStyles
  }, /*#__PURE__*/_react.default.createElement(_diff.MetaInfo, {
    title: prev.originalFilename || 'Untitled',
    icon: _icons.DocumentIcon
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 0,
    style: {
      color: 'inherit'
    }
  }, "".concat(roundedPrevSize, "MB"))));

  const to = next && /*#__PURE__*/_react.default.createElement(_diff.DiffCard, {
    as: "ins",
    diff: diff,
    path: "asset._ref",
    style: cardStyles
  }, /*#__PURE__*/_react.default.createElement(_diff.MetaInfo, {
    title: next.originalFilename || 'Untitled',
    icon: _icons.DocumentIcon
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center"
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 0,
    style: {
      color: 'inherit'
    }
  }, "".concat(roundedNextSize, "MB")), pctDiff !== 0 && /*#__PURE__*/_react.default.createElement(_ui.Card, {
    radius: 2,
    padding: 1,
    as: SizeDiff,
    marginLeft: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 0,
    "data-number": pctDiff > 0 ? 'positive' : 'negative'
  }, pctDiff > 0 && '+', pctDiff, "%")))));

  const FileAssetChange = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, from && !to && /*#__PURE__*/_react.default.createElement(_diff.DiffTooltip, {
    diff: diff,
    path: "asset._ref",
    description: "Removed"
  }, from), from && to && /*#__PURE__*/_react.default.createElement(_diff.DiffTooltip, {
    diff: diff,
    path: "asset._ref"
  }, /*#__PURE__*/_react.default.createElement(_diff.FromTo, {
    from: from,
    layout: "grid",
    to: to
  })), !from && to && /*#__PURE__*/_react.default.createElement(_diff.DiffTooltip, {
    diff: diff,
    path: "asset._ref",
    description: "Added"
  }, to));

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, didAssetChange && FileAssetChange, nestedFields.length > 0 && /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginTop: didAssetChange ? 4 : 3
  }, /*#__PURE__*/_react.default.createElement(_diff.ChangeList, {
    diff: diff,
    schemaType: schemaType,
    fields: nestedFields
  })));
};

exports.FileFieldDiff = FileFieldDiff;