"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HotspotCropSVG = HotspotCropSVG;

var _react = _interopRequireDefault(require("react"));

var _diff = require("../../../diff");

var _helpers = require("./helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function HotspotCropSVG(props) {
  const {
    crop,
    diff,
    hash,
    hotspot,
    width = 100,
    height = 100,
    ...restProps
  } = props;
  const cropColor = (0, _diff.useDiffAnnotationColor)(diff, 'crop');
  const hotspotColor = (0, _diff.useDiffAnnotationColor)(diff, 'hotspot');
  return /*#__PURE__*/_react.default.createElement("svg", _extends({}, restProps, {
    fill: "none",
    width: width,
    height: height,
    viewBox: "0 0 ".concat(width, " ").concat(height)
  }), /*#__PURE__*/_react.default.createElement("defs", null, crop && hotspot && /*#__PURE__*/_react.default.createElement("mask", {
    id: "mask-hotspot-".concat(hash)
  }, /*#__PURE__*/_react.default.createElement("rect", {
    x: 0,
    y: 0,
    width: width,
    height: height,
    fill: "#fff"
  }), /*#__PURE__*/_react.default.createElement(HotspotSVG, {
    hotspot: hotspot,
    fill: "#000",
    offset: 1,
    width: width,
    height: height,
    stroke: "#000",
    strokeWidth: 3
  }))), crop && /*#__PURE__*/_react.default.createElement(_diff.DiffTooltip, {
    diff: diff,
    path: "crop",
    description: "Crop changed"
  }, /*#__PURE__*/_react.default.createElement("g", null, /*#__PURE__*/_react.default.createElement(CropSVG, {
    crop: crop,
    fill: (0, _helpers.hexToRgba)(cropColor.border, 0.25),
    mask: hotspot ? "url(#mask-hotspot-".concat(hash, ")") : undefined,
    stroke: cropColor.border,
    strokeWidth: 1,
    width: width,
    height: height
  }))), hotspot && /*#__PURE__*/_react.default.createElement(_diff.DiffTooltip, {
    diff: diff,
    path: "hotspot",
    description: "Hotspot changed"
  }, /*#__PURE__*/_react.default.createElement("g", null, /*#__PURE__*/_react.default.createElement(HotspotSVG, {
    hotspot: hotspot,
    fill: (0, _helpers.hexToRgba)(hotspotColor.border, 0.25),
    stroke: hotspotColor.border,
    strokeWidth: 1,
    width: width,
    height: height
  }))));
}

function CropSVG(_ref) {
  let {
    crop,
    width,
    height,
    ...restProps
  } = _ref;
  const rectProps = {
    x: crop.left * width,
    y: crop.top * height,
    width: (1 - crop.right - crop.left) * width,
    height: (1 - crop.bottom - crop.top) * height
  };
  return /*#__PURE__*/_react.default.createElement("rect", _extends({}, restProps, rectProps, {
    style: {
      vectorEffect: 'non-scaling-stroke'
    }
  }));
}

function HotspotSVG(_ref2) {
  let {
    hotspot,
    offset = 0,
    width,
    height,
    ...restProps
  } = _ref2;
  const ellipseProps = {
    cx: hotspot.x * width,
    cy: hotspot.y * height,
    rx: hotspot.width / 2 * width + offset,
    ry: hotspot.height / 2 * height + offset
  };
  return /*#__PURE__*/_react.default.createElement("ellipse", _extends({}, restProps, ellipseProps, {
    style: {
      vectorEffect: 'non-scaling-stroke'
    }
  }));
}