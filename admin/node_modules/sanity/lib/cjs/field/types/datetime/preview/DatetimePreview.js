"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DatetimePreview = void 0;

var legacyDateFormat = _interopRequireWildcard(require("@sanity/util/legacyDateFormat"));

var _ui = require("@sanity/ui");

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const DEFAULT_DATE_FORMAT = 'YYYY-MM-DD';
const DEFAULT_TIME_FORMAT = 'HH:mm';

const DatetimeWrapper = _styledComponents.default.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: inline-block;\n  word-wrap: break-word;\n"])));

const DatetimePreview = function DatetimePreview(_ref) {
  let {
    value,
    schemaType
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(_ui.Box, {
    as: DatetimeWrapper,
    paddingX: 2,
    paddingY: 1
  }, formatDateTime(value, schemaType));
};

exports.DatetimePreview = DatetimePreview;

function formatDateTime(value, schemaType) {
  const {
    options,
    name
  } = schemaType;
  const dateFormat = (options === null || options === void 0 ? void 0 : options.dateFormat) || DEFAULT_DATE_FORMAT;
  const timeFormat = (options === null || options === void 0 ? void 0 : options.timeFormat) || DEFAULT_TIME_FORMAT;
  return legacyDateFormat.format(new Date(value), name === 'date' ? dateFormat : "".concat(dateFormat, " ").concat(timeFormat));
}