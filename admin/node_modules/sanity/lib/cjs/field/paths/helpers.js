"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findIndex = findIndex;
exports.getItemKey = getItemKey;
exports.getItemKeySegment = getItemKeySegment;
exports.getValueAtPath = getValueAtPath;
exports.isEmptyObject = isEmptyObject;
exports.normalizeIndexSegment = normalizeIndexSegment;
exports.normalizeIndexTupleSegment = normalizeIndexTupleSegment;
exports.normalizeKeySegment = normalizeKeySegment;
exports.normalizePathSegment = normalizePathSegment;
exports.pathToString = pathToString;
exports.pathsAreEqual = pathsAreEqual;
exports.stringToPath = stringToPath;

var _types = require("@sanity/types");

var _isRecord = require("../../util/isRecord");

const rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
const reKeySegment = /_key\s*==\s*['"](.*)['"]/;

function pathToString(path) {
  if (!Array.isArray(path)) {
    throw new Error('Path is not an array');
  }

  return path.reduce((target, segment, i) => {
    const segmentType = typeof segment;

    if (segmentType === 'number') {
      return "".concat(target, "[").concat(segment, "]");
    }

    if (segmentType === 'string') {
      const separator = i === 0 ? '' : '.';
      return "".concat(target).concat(separator).concat(segment);
    }

    if ((0, _types.isKeySegment)(segment) && segment._key) {
      return "".concat(target, "[_key==\"").concat(segment._key, "\"]");
    }

    if (Array.isArray(segment)) {
      const [from, to] = segment;
      return "".concat(target, "[").concat(from, ":").concat(to, "]");
    }

    throw new Error("Unsupported path segment `".concat(JSON.stringify(segment), "`"));
  }, '');
}

function getValueAtPath(rootValue, path) {
  const segment = path[0];

  if (!segment) {
    return rootValue;
  }

  const tail = path.slice(1);

  if ((0, _types.isIndexSegment)(segment)) {
    return getValueAtPath(Array.isArray(rootValue) ? rootValue[segment] : undefined, tail);
  }

  if ((0, _types.isKeySegment)(segment)) {
    return getValueAtPath(Array.isArray(rootValue) ? rootValue.find(item => item._key === segment._key) : undefined, tail);
  }

  if (typeof segment === 'string') {
    return getValueAtPath((0, _isRecord.isRecord)(rootValue) ? rootValue[segment] : undefined, tail);
  }

  throw new Error("Unknown segment type ".concat(JSON.stringify(segment)));
}

function findIndex(array, segment) {
  if (typeof segment !== 'number' && !(0, _types.isKeySegment)(segment)) {
    return -1;
  }

  return typeof segment === 'number' ? segment : array.findIndex(item => (0, _types.isKeyedObject)(item) && item._key === segment._key);
}

function stringToPath(path) {
  const segments = path.match(rePropName);

  if (!segments) {
    throw new Error('Invalid path string');
  }

  return segments.map(normalizePathSegment);
}

function normalizePathSegment(segment) {
  if ((0, _types.isIndexSegment)(segment)) {
    return normalizeIndexSegment(segment);
  }

  if ((0, _types.isKeySegment)(segment)) {
    return normalizeKeySegment(segment);
  }

  if ((0, _types.isIndexTuple)(segment)) {
    return normalizeIndexTupleSegment(segment);
  }

  return segment;
}

function normalizeIndexSegment(segment) {
  return Number(segment.replace(/[^\d]/g, ''));
}

function normalizeKeySegment(segment) {
  const segments = segment.match(reKeySegment);

  if (!segments) {
    throw new Error('Invalid key segment');
  }

  return {
    _key: segments[1]
  };
}

function normalizeIndexTupleSegment(segment) {
  const [from, to] = segment.split(':').map(seg => seg === '' ? seg : Number(seg));
  return [from, to];
}

function pathsAreEqual(pathA, pathB) {
  if (pathA.length !== pathB.length) {
    return false;
  }

  return pathA.every((segmentA, index) => {
    const segmentB = pathB[index];

    if ((0, _types.isKeySegment)(segmentA) && (0, _types.isKeySegment)(segmentB)) {
      return segmentA._key === segmentB._key;
    }

    if ((0, _types.isIndexSegment)(segmentA)) {
      return Number(segmentA) === Number(segmentB);
    }

    if ((0, _types.isIndexTuple)(segmentA) && (0, _types.isIndexTuple)(segmentB)) {
      return segmentA[0] === segmentB[0] && segmentA[1] === segmentB[1];
    }

    return segmentA === segmentB;
  });
}

function getItemKey(arrayItem) {
  return (0, _types.isKeyedObject)(arrayItem) ? arrayItem._key : undefined;
}

function getItemKeySegment(arrayItem) {
  const key = getItemKey(arrayItem);
  return key ? {
    _key: key
  } : undefined;
}

function isEmptyObject(item) {
  return typeof item === 'object' && item !== null && Object.keys(item).length <= 0;
}