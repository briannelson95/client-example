"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FieldChange = FieldChange;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _conditionalReadOnly = require("../../../conditional-property/conditionalReadOnly");

var _hooks = require("../../../hooks");

var _undoChange = require("../changes/undoChange");

var _DiffContext = require("../contexts/DiffContext");

var _hooks2 = require("../hooks");

var _datastores = require("../../../datastores");

var _ChangeBreadcrumb = require("./ChangeBreadcrumb");

var _DiffErrorBoundary = require("./DiffErrorBoundary");

var _DiffInspectWrapper = require("./DiffInspectWrapper");

var _FallbackDiff = require("./FallbackDiff");

var _RevertChangesButton = require("./RevertChangesButton");

var _ValueError = require("./ValueError");

var _FieldChange = require("./FieldChange.styled");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function FieldChange(props) {
  var _useConditionalReadOn;

  const {
    change,
    hidden,
    readOnly
  } = props;
  const conditionalReadOnly = (_useConditionalReadOn = (0, _conditionalReadOnly.useConditionalReadOnly)()) !== null && _useConditionalReadOn !== void 0 ? _useConditionalReadOn : readOnly;
  const DiffComponent = change.diffComponent || _FallbackDiff.FallbackDiff;
  const {
    documentId,
    schemaType,
    rootDiff,
    isComparingCurrent,
    FieldWrapper = _react.default.Fragment
  } = (0, _hooks2.useDocumentChange)();
  const ops = (0, _hooks.useDocumentOperation)(documentId, schemaType.name);
  const [confirmRevertOpen, setConfirmRevertOpen] = (0, _react.useState)(false);
  const [revertHovered, setRevertHovered] = (0, _react.useState)(false);
  const [revertButtonElement, setRevertButtonElement] = (0, _react.useState)(null);
  const [permissions, isPermissionsLoading] = (0, _datastores.useDocumentPairPermissions)({
    id: documentId,
    type: schemaType.name,
    permission: 'update'
  });
  const handleRevertChanges = (0, _react.useCallback)(() => {
    (0, _undoChange.undoChange)(change, rootDiff, ops);
  }, [change, rootDiff, ops]);
  const handleRevertChangesConfirm = (0, _react.useCallback)(() => {
    setConfirmRevertOpen(true);
  }, []);

  const closeRevertChangesConfirmDialog = _react.default.useCallback(() => {
    setConfirmRevertOpen(false);
  }, []);

  const handleRevertButtonMouseEnter = (0, _react.useCallback)(() => {
    setRevertHovered(true);
  }, []);
  const handleRevertButtonMouseLeave = (0, _react.useCallback)(() => {
    setRevertHovered(false);
  }, []);
  const handleClickOutside = (0, _react.useCallback)(() => setConfirmRevertOpen(false), []);
  (0, _ui.useClickOutside)(handleClickOutside, [revertButtonElement]);
  const content = (0, _react.useMemo)(() => hidden ? null : /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 1,
    as: _FieldChange.FieldChangeContainer
  }, change.showHeader && /*#__PURE__*/_react.default.createElement(_ChangeBreadcrumb.ChangeBreadcrumb, {
    change: change,
    titlePath: change.titlePath
  }), /*#__PURE__*/_react.default.createElement(FieldWrapper, {
    path: change.path,
    hasHover: revertHovered
  }, /*#__PURE__*/_react.default.createElement(_DiffInspectWrapper.DiffInspectWrapper, {
    change: change,
    as: _FieldChange.DiffBorder,
    "data-revert-field-hover": revertHovered ? '' : undefined,
    "data-error": change.error ? '' : undefined,
    "data-revert-all-hover": true
  }, change.error ? /*#__PURE__*/_react.default.createElement(_ValueError.ValueError, {
    error: change.error
  }) : /*#__PURE__*/_react.default.createElement(_DiffErrorBoundary.DiffErrorBoundary, null, /*#__PURE__*/_react.default.createElement(_DiffContext.DiffContext.Provider, {
    value: {
      path: change.path
    }
  }, /*#__PURE__*/_react.default.createElement(DiffComponent, {
    diff: change.diff,
    schemaType: change.schemaType
  }))), isComparingCurrent && !isPermissionsLoading && (permissions === null || permissions === void 0 ? void 0 : permissions.granted) && /*#__PURE__*/_react.default.createElement(_FieldChange.PopoverWrapper, {
    content: /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 3,
      sizing: "border"
    }, "Are you sure you want to revert the changes?", /*#__PURE__*/_react.default.createElement(_ui.Grid, {
      columns: 2,
      gap: 2,
      marginTop: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
      mode: "ghost",
      onClick: closeRevertChangesConfirmDialog
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      align: "center"
    }, "Cancel")), /*#__PURE__*/_react.default.createElement(_ui.Button, {
      tone: "critical",
      onClick: handleRevertChanges
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      align: "center"
    }, "Revert change")))),
    open: confirmRevertOpen,
    portal: true,
    placement: "left",
    ref: setRevertButtonElement
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    flex: 1
  }, /*#__PURE__*/_react.default.createElement(_RevertChangesButton.RevertChangesButton, {
    onClick: handleRevertChangesConfirm,
    onMouseEnter: handleRevertButtonMouseEnter,
    onMouseLeave: handleRevertButtonMouseLeave,
    selected: confirmRevertOpen,
    disabled: conditionalReadOnly,
    "data-testid": "single-change-revert-button-".concat(change === null || change === void 0 ? void 0 : change.key)
  })))))), [change, closeRevertChangesConfirmDialog, conditionalReadOnly, confirmRevertOpen, DiffComponent, FieldWrapper, hidden, handleRevertButtonMouseEnter, handleRevertButtonMouseLeave, handleRevertChanges, handleRevertChangesConfirm, isComparingCurrent, isPermissionsLoading, permissions, revertHovered]);
  return content;
}