"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChangeList = ChangeList;

var _ui = require("@sanity/ui");

var _icons = require("@sanity/icons");

var _react = _interopRequireWildcard(require("react"));

var _conditionalProperty = require("../../../conditional-property");

var _hooks = require("../../../hooks");

var _DiffContext = require("../contexts/DiffContext");

var _buildChangeList = require("../changes/buildChangeList");

var _undoChange = require("../changes/undoChange");

var _useDocumentChange = require("../hooks/useDocumentChange");

var _datastores = require("../../../datastores");

var _ChangeResolver = require("./ChangeResolver");

var _NoChanges = require("./NoChanges");

var _ChangeList = require("./ChangeList.styled");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ChangeList(_ref) {
  let {
    diff,
    fields,
    schemaType
  } = _ref;
  const {
    documentId,
    isComparingCurrent,
    value
  } = (0, _useDocumentChange.useDocumentChange)();
  const docOperations = (0, _hooks.useDocumentOperation)(documentId, schemaType.name);
  const {
    path
  } = (0, _react.useContext)(_DiffContext.DiffContext);
  const isRoot = path.length === 0;
  const [confirmRevertAllOpen, setConfirmRevertAllOpen] = (0, _react.useState)(false);
  const [confirmRevertAllHover, setConfirmRevertAllHover] = (0, _react.useState)(false);
  const isReadOnly = (0, _conditionalProperty.unstable_useConditionalProperty)({
    document: value,
    value: undefined,
    checkProperty: schemaType.readOnly,
    checkPropertyKey: 'readOnly'
  });

  if (schemaType.jsonType !== 'object') {
    throw new Error("Only object schema types are allowed in ChangeList");
  }

  const [permissions, isPermissionsLoading] = (0, _datastores.useDocumentPairPermissions)({
    id: documentId,
    type: schemaType.name,
    permission: 'update'
  });
  const allChanges = (0, _react.useMemo)(() => (0, _buildChangeList.buildObjectChangeList)(schemaType, diff, path, [], {
    fieldFilter: fields
  }), [schemaType, fields, path, diff]);
  const changes = (0, _react.useMemo)(() => fields && fields.length === 0 ? [] : maybeFlatten(allChanges), [allChanges, fields]);
  const rootChange = allChanges[0];
  const revertAllChanges = (0, _react.useCallback)(() => {
    (0, _undoChange.undoChange)(rootChange, diff, docOperations);
    setConfirmRevertAllOpen(false);
  }, [rootChange, diff, docOperations]);
  const handleRevertAllChangesClick = (0, _react.useCallback)(() => {
    setConfirmRevertAllOpen(true);
  }, []);
  const handleRevertAllChangesMouseEnter = (0, _react.useCallback)(() => {
    setConfirmRevertAllHover(true);
  }, []);
  const handleRevertAllChangesMouseLeave = (0, _react.useCallback)(() => {
    setConfirmRevertAllHover(false);
  }, []);
  const closeRevertAllChangesConfirmDialog = (0, _react.useCallback)(() => {
    setConfirmRevertAllOpen(false);
  }, []);
  const [revertAllContainerElement, setRevertAllContainerElement] = (0, _react.useState)(null);
  const handleClickOutside = (0, _react.useCallback)(() => setConfirmRevertAllOpen(false), []);
  (0, _ui.useClickOutside)(handleClickOutside, [revertAllContainerElement]);

  if (changes.length === 0) {
    return isRoot ? /*#__PURE__*/_react.default.createElement(_NoChanges.NoChanges, null) : null;
  }

  const showFooter = isRoot && changes.length > 1;
  return /*#__PURE__*/_react.default.createElement(_ui.Card, null, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 5
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    as: _ChangeList.ChangeListWrapper,
    space: 5
  }, changes.map(change => /*#__PURE__*/_react.default.createElement("div", {
    key: change.key
  }, /*#__PURE__*/_react.default.createElement(_ChangeResolver.ChangeResolver, {
    change: change,
    key: change.key,
    "data-revert-all-changes-hover": confirmRevertAllHover ? '' : undefined,
    readOnly: isReadOnly || (change === null || change === void 0 ? void 0 : change.readOnly),
    hidden: change === null || change === void 0 ? void 0 : change.hidden
  })))), showFooter && isComparingCurrent && !isPermissionsLoading && (permissions === null || permissions === void 0 ? void 0 : permissions.granted) && /*#__PURE__*/_react.default.createElement(_ChangeList.PopoverWrapper, {
    content: /*#__PURE__*/_react.default.createElement(_ui.Box, null, "Are you sure you want to revert all ", changes.length, " changes?", /*#__PURE__*/_react.default.createElement(_ui.Grid, {
      columns: 2,
      gap: 2,
      marginTop: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
      mode: "ghost",
      text: "Cancel",
      onClick: closeRevertAllChangesConfirmDialog
    }), /*#__PURE__*/_react.default.createElement(_ui.Button, {
      tone: "critical",
      text: "Revert all",
      onClick: revertAllChanges
    }))),
    open: confirmRevertAllOpen,
    padding: 4,
    placement: 'left',
    portal: true,
    ref: setRevertAllContainerElement
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, null, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    tone: "critical",
    mode: "ghost",
    text: "Revert all changes",
    icon: _icons.RevertIcon,
    onClick: handleRevertAllChangesClick,
    onMouseEnter: handleRevertAllChangesMouseEnter,
    onMouseLeave: handleRevertAllChangesMouseLeave,
    disabled: isReadOnly
  })))));
}

function maybeFlatten(changes) {
  return changes.length === 1 && changes[0].type === 'group' && changes[0].path.length === 0 ? changes[0].changes : changes;
}