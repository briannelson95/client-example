"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiffCard = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _annotations = require("../annotations");

var _DiffTooltip = require("./DiffTooltip");

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const StyledCard = (0, _styledComponents.default)(_ui.Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  --diff-card-radius: ", ";\n  --diff-card-bg-color: ", ";\n\n  max-width: 100%;\n  position: relative;\n  border-radius: var(--diff-card-radius);\n\n  &:not(del) {\n    text-decoration: none;\n  }\n\n  &[data-hover] {\n    &::after {\n      content: '';\n      display: block;\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n    }\n\n    &:hover {\n      border-bottom-left-radius: 0;\n      border-bottom-right-radius: 0;\n\n      &::after {\n        bottom: -3px;\n        border-top: 1px solid var(---diff-card-bg-color);\n        border-bottom: 2px solid currentColor;\n        border-bottom-left-radius: var(--diff-card-radius);\n        border-bottom-right-radius: var(--diff-card-radius);\n      }\n    }\n\n    [data-from-to-layout]:hover & {\n      border-bottom-left-radius: 0;\n      border-bottom-right-radius: 0;\n\n      &::after {\n        bottom: -3px;\n        border-top: 1px solid var(---diff-card-bg-color);\n        border-bottom: 2px solid currentColor;\n        border-bottom-left-radius: var(--diff-card-radius);\n        border-bottom-right-radius: var(--diff-card-radius);\n      }\n    }\n  }\n"])), _ref => {
  let {
    theme
  } = _ref;
  return (0, _ui.rem)(theme.sanity.radius[2]);
}, _ref2 => {
  let {
    theme
  } = _ref2;
  return theme.sanity.color.card.enabled.bg;
});
const EMPTY_PATH = [];
const DiffCard = /*#__PURE__*/(0, _react.forwardRef)(function DiffCard(props, ref) {
  const {
    annotation: annotationProp,
    as = 'div',
    children,
    className,
    diff,
    disableHoverEffect,
    path = EMPTY_PATH,
    style = {},
    tooltip,
    ...restProps
  } = props;
  const annotation = (0, _react.useMemo)(() => annotationProp || (0, _annotations.getAnnotationAtPath)(diff, path), [annotationProp, diff, path]);
  const color = (0, _annotations.useAnnotationColor)(annotation);

  const element = /*#__PURE__*/_react.default.createElement(StyledCard, _extends({}, restProps, {
    as: as,
    className: className,
    "data-hover": disableHoverEffect || !annotation ? undefined : '',
    ref: ref,
    radius: 1,
    style: { ...style,
      backgroundColor: color.background,
      color: color.text
    }
  }), children);

  if (tooltip && annotation) {
    return /*#__PURE__*/_react.default.createElement(_DiffTooltip.DiffTooltip, {
      annotations: [annotation],
      description: tooltip && typeof tooltip === 'object' && tooltip.description
    }, element);
  }

  return element;
});
exports.DiffCard = DiffCard;