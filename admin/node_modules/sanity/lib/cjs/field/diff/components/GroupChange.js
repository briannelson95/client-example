"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GroupChange = GroupChange;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _hooks = require("../../../hooks");

var _undoChange = require("../changes/undoChange");

var _helpers = require("../helpers");

var _diff = require("../../types/portableText/diff");

var _useHover = require("../../utils/useHover");

var _paths = require("../../paths");

var _DiffContext = require("../contexts/DiffContext");

var _hooks2 = require("../hooks");

var _datastores = require("../../../datastores");

var _ChangeBreadcrumb = require("./ChangeBreadcrumb");

var _ChangeResolver = require("./ChangeResolver");

var _RevertChangesButton = require("./RevertChangesButton");

var _GroupChange = require("./GroupChange.styled");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function GroupChange(props) {
  const {
    change: group,
    readOnly,
    hidden,
    // 'data-revert-all-changes-hover': dataRevertAllChangesHover,
    ...restProps
  } = props;
  const {
    titlePath,
    changes,
    path: groupPath
  } = group;
  const {
    path: diffPath
  } = (0, _react.useContext)(_DiffContext.DiffContext);
  const {
    documentId,
    schemaType,
    FieldWrapper,
    rootDiff,
    isComparingCurrent
  } = (0, _hooks2.useDocumentChange)();
  const isPortableText = changes.every(change => (0, _helpers.isFieldChange)(change) && (0, _diff.isPTSchemaType)(change.schemaType));
  const isNestedInDiff = (0, _paths.pathsAreEqual)(diffPath, groupPath);
  const [revertButtonRef, isRevertButtonHovered] = (0, _useHover.useHover)();
  const docOperations = (0, _hooks.useDocumentOperation)(documentId, schemaType.name);
  const [confirmRevertOpen, setConfirmRevertOpen] = (0, _react.useState)(false);
  const [revertPopoverElement, setRevertPopoverElement] = (0, _react.useState)(null);
  const [permissions, isPermissionsLoading] = (0, _datastores.useDocumentPairPermissions)({
    id: documentId,
    type: schemaType.name,
    permission: 'update'
  });
  const handleRevertChanges = (0, _react.useCallback)(() => (0, _undoChange.undoChange)(group, rootDiff, docOperations), [group, rootDiff, docOperations]);
  const handleRevertChangesConfirm = (0, _react.useCallback)(() => {
    setConfirmRevertOpen(true);
  }, []);
  const closeRevertChangesConfirmDialog = (0, _react.useCallback)(() => {
    setConfirmRevertOpen(false);
  }, []);
  (0, _ui.useClickOutside)(() => setConfirmRevertOpen(false), [revertPopoverElement]);
  const content = (0, _react.useMemo)(() => hidden ? null : /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 1,
    as: _GroupChange.GroupChangeContainer,
    "data-revert-group-hover": isRevertButtonHovered ? '' : undefined,
    "data-portable-text": isPortableText ? '' : undefined // data-revert-all-groups-hover={
    //   restProps[] === '' ? '' : undefined
    // }

  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    as: _GroupChange.ChangeListWrapper,
    space: 5
  }, changes.map(change => /*#__PURE__*/_react.default.createElement(_ChangeResolver.ChangeResolver, {
    key: change.key,
    change: change,
    readOnly: readOnly,
    hidden: hidden
  }))), isComparingCurrent && !isPermissionsLoading && (permissions === null || permissions === void 0 ? void 0 : permissions.granted) && /*#__PURE__*/_react.default.createElement(_GroupChange.PopoverWrapper, {
    content: /*#__PURE__*/_react.default.createElement(_ui.Box, null, "Are you sure you want to revert the changes?", /*#__PURE__*/_react.default.createElement(_ui.Grid, {
      columns: 2,
      gap: 2,
      marginTop: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
      mode: "ghost",
      onClick: closeRevertChangesConfirmDialog
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      align: "center"
    }, "Cancel")), /*#__PURE__*/_react.default.createElement(_ui.Button, {
      tone: "critical",
      onClick: handleRevertChanges
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      align: "center"
    }, "Revert change")))),
    portal: true,
    padding: 4,
    placement: 'left',
    open: confirmRevertOpen,
    ref: setRevertPopoverElement
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, null, /*#__PURE__*/_react.default.createElement(_RevertChangesButton.RevertChangesButton, {
    onClick: handleRevertChangesConfirm,
    ref: revertButtonRef,
    selected: confirmRevertOpen,
    disabled: readOnly,
    "data-testid": "group-change-revert-button-".concat(group.fieldsetName)
  })))), [changes, closeRevertChangesConfirmDialog, confirmRevertOpen, readOnly, group.fieldsetName, handleRevertChanges, handleRevertChangesConfirm, hidden, isComparingCurrent, isRevertButtonHovered, isPermissionsLoading, isPortableText, permissions, revertButtonRef]);
  return hidden ? null : /*#__PURE__*/_react.default.createElement(_ui.Stack, _extends({
    space: 1
  }, restProps), /*#__PURE__*/_react.default.createElement(_ChangeBreadcrumb.ChangeBreadcrumb, {
    titlePath: titlePath
  }), isNestedInDiff || !FieldWrapper ? content : /*#__PURE__*/_react.default.createElement(FieldWrapper, {
    hasHover: isRevertButtonHovered,
    path: group.path
  }, content));
}