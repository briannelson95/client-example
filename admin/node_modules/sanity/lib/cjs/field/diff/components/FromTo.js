"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FromTo = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _FromToArrow = require("./FromToArrow");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const INLINE_COLUMN_STYLES = {
  flexShrink: 0
};
const BLOCK_COLUMN_STYLES = {
  alignItems: 'stretch'
};
const FLEX_ALIGN = {
  top: 'flex-start',
  center: 'center',
  bottom: 'flex-end',
  default: 'flex-start'
};
const FromTo = /*#__PURE__*/(0, _react.forwardRef)(function FromTo(props, ref) {
  const {
    align = 'top',
    layout = 'inline',
    from,
    to,
    style,
    ...restProps
  } = props;
  const theme = (0, _ui.useTheme)();
  const Layout = layout === 'inline' ? _ui.Flex : _ui.Grid;
  const layoutStyles = (0, _react.useMemo)(() => ({ ...style,
    ...(layout === 'inline' ? {
      maxWidth: '100%',
      display: 'inline-flex'
    } : {
      gridTemplateColumns: "minmax(0, 1fr) ".concat((0, _ui.rem)(theme.sanity.space[5]), " minmax(0, 1fr)")
    })
  }), [layout, style, theme]);
  const columnStyles = layout === 'inline' ? INLINE_COLUMN_STYLES : BLOCK_COLUMN_STYLES;
  return /*#__PURE__*/_react.default.createElement(Layout, _extends({}, restProps, {
    ref: ref,
    style: layoutStyles,
    "data-from-to-layout": true
  }), from && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: FLEX_ALIGN[align],
    style: columnStyles
  }, from), /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    justify: "center",
    padding: 2
  }, /*#__PURE__*/_react.default.createElement(_FromToArrow.FromToArrow, null))), /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: FLEX_ALIGN[align],
    style: columnStyles
  }, to));
});
exports.FromTo = FromTo;