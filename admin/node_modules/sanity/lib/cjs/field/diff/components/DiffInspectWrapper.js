"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiffInspectWrapper = DiffInspectWrapper;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _paths = require("../../paths");

var _FromToArrow = require("./FromToArrow");

var _templateObject, _templateObject2;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const CodeWrapper = _styledComponents.default.pre(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  overflow-x: auto;\n  position: relative;\n"])));

const Meta = _styledComponents.default.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: absolute;\n  top: 0;\n  right: 0;\n"])));

function DiffInspectWrapper(props) {
  const {
    children,
    as,
    change,
    ...restProps
  } = props;
  const isHovering = (0, _react.useRef)(false);
  const [isInspecting, setIsInspecting] = (0, _react.useState)(false);
  const toggleInspect = (0, _react.useCallback)(() => setIsInspecting(state => !state), [setIsInspecting]);
  const handleMouseEnter = (0, _react.useCallback)(() => isHovering.current = true, []);
  const handleMouseLeave = (0, _react.useCallback)(() => isHovering.current = false, [isHovering]);
  (0, _react.useEffect)(() => {
    function onKeyDown(evt) {
      const {
        metaKey,
        key
      } = evt;

      if (metaKey && key === 'i' && isHovering.current) {
        toggleInspect();
      }
    }

    window.addEventListener('keydown', onKeyDown, false);
    return () => window.removeEventListener('keydown', onKeyDown, false);
  }, [toggleInspect]);
  return /*#__PURE__*/_react.default.createElement(_ui.Box, _extends({
    as: as,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }, restProps), isInspecting ? /*#__PURE__*/_react.default.createElement(DiffInspector, {
    change: change
  }) : children);
}

const MetaLabel = _ref => {
  let {
    title
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 3,
    display: "inline-block",
    as: Meta
  }, /*#__PURE__*/_react.default.createElement(_ui.Label, {
    size: 1,
    muted: true
  }, title));
};

function DiffInspector(_ref2) {
  var _change$itemDiff, _change$itemDiff2, _change$itemDiff3;

  let {
    change
  } = _ref2;
  return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    padding: 3,
    tone: "transparent",
    as: CodeWrapper,
    radius: 1
  }, /*#__PURE__*/_react.default.createElement(MetaLabel, {
    title: "meta"
  }), /*#__PURE__*/_react.default.createElement(_ui.Code, {
    language: "json",
    size: 1
  }, printMeta({
    path: (0, _paths.pathToString)(change.path),
    fromIndex: (_change$itemDiff = change.itemDiff) === null || _change$itemDiff === void 0 ? void 0 : _change$itemDiff.fromIndex,
    toIndex: (_change$itemDiff2 = change.itemDiff) === null || _change$itemDiff2 === void 0 ? void 0 : _change$itemDiff2.toIndex,
    hasMoved: (_change$itemDiff3 = change.itemDiff) === null || _change$itemDiff3 === void 0 ? void 0 : _change$itemDiff3.hasMoved,
    action: change.diff.action,
    isChanged: change.diff.isChanged
  }))), /*#__PURE__*/_react.default.createElement(_ui.Card, {
    as: CodeWrapper,
    tone: "critical",
    padding: 3,
    radius: 1
  }, /*#__PURE__*/_react.default.createElement(MetaLabel, {
    title: "from"
  }), /*#__PURE__*/_react.default.createElement(_ui.Code, {
    language: "json",
    size: 1
  }, jsonify(change.diff.fromValue))), /*#__PURE__*/_react.default.createElement(_ui.Card, null, /*#__PURE__*/_react.default.createElement(_FromToArrow.FromToArrow, {
    direction: "down",
    align: "center"
  })), /*#__PURE__*/_react.default.createElement(_ui.Card, {
    as: CodeWrapper,
    tone: "positive",
    padding: 3,
    radius: 1
  }, /*#__PURE__*/_react.default.createElement(MetaLabel, {
    title: "to"
  }), /*#__PURE__*/_react.default.createElement(_ui.Code, {
    language: "json",
    size: 1
  }, jsonify(change.diff.toValue))));
}

function jsonify(value) {
  if (typeof value === 'undefined') {
    return 'undefined';
  }

  return JSON.stringify(value, null, 2);
}

function printMeta(keys) {
  const lines = [];
  Object.entries(keys).forEach(_ref3 => {
    let [key, value] = _ref3;

    if (typeof value !== 'undefined' && value !== null) {
      lines.push("".concat(key, ": ").concat(value));
    }
  });
  return lines.join('\n');
}