"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findMatchingRoutes = findMatchingRoutes;

var _pick2 = _interopRequireDefault(require("lodash/pick"));

var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));

var _intersection2 = _interopRequireDefault(require("lodash/intersection"));

var _difference2 = _interopRequireDefault(require("lodash/difference"));

var _arrayify = require("./utils/arrayify");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isRecord(value) {
  return (0, _isPlainObject2.default)(value);
}

function createMatchResult(nodes, missing, remaining) {
  return {
    nodes,
    missing,
    remaining
  };
}

function findMatchingRoutes(node, _state) {
  if (!_state) {
    return createMatchResult([], [], []);
  }

  const state = node.scope ? _state[node.scope] : _state;
  const requiredParams = node.route.segments.filter(seg => seg.type === 'param').map(seg => seg.name);
  const stateKeys = isRecord(state) ? Object.keys(state) : [];
  const consumedParams = (0, _intersection2.default)(stateKeys, requiredParams);
  const missingParams = (0, _difference2.default)(requiredParams, consumedParams);
  const remainingParams = (0, _difference2.default)(stateKeys, consumedParams);

  if (missingParams.length > 0) {
    return createMatchResult([], missingParams, []);
  }

  if (remainingParams.length === 0) {
    return createMatchResult([node], [], []);
  }

  const children = (0, _arrayify.arrayify)((typeof node.children === 'function' ? node.children(isRecord(state) ? state : {}) : node.children) || []);

  if (remainingParams.length > 0 && children.length === 0) {
    return createMatchResult([], remainingParams, []);
  }

  const remainingState = (0, _pick2.default)(state, remainingParams);
  let matchingChild = {
    nodes: [],
    remaining: [],
    missing: []
  };
  (0, _arrayify.arrayify)(children).some(childNode => {
    matchingChild = findMatchingRoutes(childNode, remainingState);
    return matchingChild.nodes.length > 0;
  });

  if (matchingChild.nodes.length === 0) {
    return createMatchResult([], missingParams, remainingParams);
  }

  return createMatchResult([node, ...matchingChild.nodes], matchingChild.missing, matchingChild.remaining);
}