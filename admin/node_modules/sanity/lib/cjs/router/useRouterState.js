"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRouterState = useRouterState;

var _identity2 = _interopRequireDefault(require("lodash/identity"));

var _react = require("react");

var _useRouter = require("./useRouter");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @public
 */
function useRouterState() {
  let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _identity2.default;
  const {
    state
  } = (0, _useRouter.useRouter)();
  const [selectedState, setState] = (0, _react.useState)(() => selector(state)); // reset the state when the `selector` prop changes

  (0, _react.useEffect)(() => setState(selector(state)), [selector, state]); // TODO
  // update the state via a subscription
  // useEffect(() => {
  //   // prevents "Can't perform a React state update on an unmounted component."
  //   const mounted = {current: true}
  //   const unsubscribe = channel.subscribe(() => {
  //     if (mounted.current) {
  //       setState(selector(state))
  //     }
  //   })
  //   return () => {
  //     mounted.current = false
  //     unsubscribe()
  //   }
  // }, [channel, selector, getState])

  return selectedState;
}