"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SourceProvider = SourceProvider;
exports.useSource = useSource;

var _react = _interopRequireWildcard(require("react"));

var _workspace = require("./workspace");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const SourceContext = /*#__PURE__*/(0, _react.createContext)(null);

function SourceProvider(_ref) {
  let {
    children,
    ...props
  } = _ref;
  const parentSource = (0, _react.useContext)(SourceContext);
  const {
    unstable_sources: sources
  } = (0, _workspace.useWorkspace)();

  if ('source' in props) {
    const {
      source
    } = props;
    return /*#__PURE__*/_react.default.createElement(SourceContext.Provider, {
      value: source
    }, children);
  }

  if ('name' in props) {
    const {
      name
    } = props;
    const source = sources.find(s => s.name === name);

    if (!source) {
      throw new Error("Could not find source with name `".concat(name, "` in current workspace"));
    }

    if (parentSource === source) return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children);
    return /*#__PURE__*/_react.default.createElement(SourceContext.Provider, {
      value: source
    }, children);
  }

  throw new Error('Invalid props passed into SourceProvider. A `name` or a `source` object is required.');
}
/**
 * @deprecated INTERNAL USE ONLY
 */


function useSource() {
  const source = (0, _react.useContext)(SourceContext);
  if (!source) throw new Error('Could not find `source` context');
  return source;
}