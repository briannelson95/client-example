"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WorkspaceLoader = WorkspaceLoaderBoundary;

var _react = _interopRequireWildcard(require("react"));

var _operators = require("rxjs/operators");

var _rxjs = require("rxjs");

var _ui = require("@sanity/ui");

var _util = require("../../util");

var _config = require("../../config");

var _router = require("../../router");

var _router2 = require("../router");

var _activeWorkspaceMatcher = require("../activeWorkspaceMatcher");

var _workspace = require("../workspace");

var _source = require("../source");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// TODO: work on error handler
// import {flattenErrors} from './flattenErrors'
const isStateEvent = e => e.type === 'state';

const initialState = {
  isNotFound: true,
  state: {}
};
const useRouterState = (0, _util.createHookFromObservableFactory)(_ref => {
  let {
    tools,
    unstable_history,
    router
  } = _ref;
  if (!router || !tools) return (0, _rxjs.of)(initialState);
  return (0, _router2.createRouterEventStream)({
    unstable_history,
    router,
    tools
  }).pipe((0, _operators.filter)(isStateEvent), (0, _operators.scan)((prevState, event) => {
    return { ...prevState,
      isNotFound: event.isNotFound,
      state: event.state
    };
  }, initialState));
}, {
  initialValue: initialState
});

function WorkspaceLoader(_ref2) {
  let {
    children,
    LoadingComponent
  } = _ref2;
  const [error, handleError] = (0, _react.useState)(null);
  if (error) throw error;
  const {
    activeWorkspace,
    __internal: {
      history
    }
  } = (0, _activeWorkspaceMatcher.useActiveWorkspace)();
  const [workspace, setWorkspace] = (0, _react.useState)(null);
  const handleNavigate = (0, _react.useCallback)(opts => {
    if (opts.replace) {
      history.replace(opts.path);
    } else {
      history.push(opts.path);
    }
  }, [history]);
  (0, _react.useEffect)(() => {
    const subscription = (0, _rxjs.combineLatest)(activeWorkspace.__internal.sources.map(_ref3 => {
      let {
        source
      } = _ref3;
      return source.pipe((0, _operators.catchError)(err => {
        if (err instanceof _config.ConfigResolutionError) return (0, _rxjs.of)(err);
        throw err;
      }));
    })).pipe((0, _operators.map)(results => {
      const errors = results.filter(result => result instanceof _config.ConfigResolutionError);

      if (errors.length) {
        throw new _config.ConfigResolutionError({
          name: activeWorkspace.name,
          causes: errors,
          type: 'workspace'
        });
      }

      return results;
    }), (0, _operators.map)(_ref4 => {
      let [rootSource, ...restOfSources] = _ref4;
      return { ...activeWorkspace,
        ...rootSource,
        unstable_sources: [rootSource, ...restOfSources],
        type: 'workspace'
      };
    })).subscribe({
      next: setWorkspace,
      error: handleError
    });
    return () => subscription.unsubscribe();
  }, [activeWorkspace]);
  const tools = workspace === null || workspace === void 0 ? void 0 : workspace.tools;
  const router = (0, _react.useMemo)(() => {
    if (!workspace) return undefined;
    return (0, _router2.createRouter)(workspace);
  }, [workspace]);
  const [routerState] = useRouterState({
    unstable_history: history,
    router,
    tools
  });
  if (!router || !workspace) return /*#__PURE__*/_react.default.createElement(LoadingComponent, null); // TODO: may need a screen if one of the sources is not logged in. e.g. it
  // is currently possible for the user to be logged into the current workspace
  // but not all of its nested sources.
  // if (!allSourcesLoggedIn) return <NotAllSourcesAuthenticatedComponent />

  return /*#__PURE__*/_react.default.createElement(_workspace.WorkspaceProvider, {
    workspace: workspace
  }, /*#__PURE__*/_react.default.createElement(_source.SourceProvider // the first source is always the root source and is always present
  , {
    source: workspace.unstable_sources[0]
  }, /*#__PURE__*/_react.default.createElement(_router.RouterProvider, {
    onNavigate: handleNavigate,
    router: router,
    state: routerState.state
  }, children)));
}

function WorkspaceLoaderBoundary(_ref5) {
  let {
    ConfigErrorsComponent,
    ...props
  } = _ref5;
  const [{
    error
  }, setError] = (0, _react.useState)({
    error: null
  }); // TODO: implement this
  // const errors = useMemo(() => flattenErrors(error, []), [error])

  if (error instanceof _config.ConfigResolutionError) return /*#__PURE__*/_react.default.createElement(ConfigErrorsComponent, null); // otherwise hand off to other boundaries

  if (error) throw error;
  return /*#__PURE__*/_react.default.createElement(_ui.ErrorBoundary, {
    onCatch: setError
  }, /*#__PURE__*/_react.default.createElement(WorkspaceLoader, props));
}