"use strict";

var _react = _interopRequireWildcard(require("react"));

var _react2 = require("@testing-library/react");

var _config = require("../../config");

var _StudioProvider = require("../StudioProvider");

var _workspace = require("../workspace");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

describe('StudioProvider', () => {
  it('works', async () => {
    const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {// intentionally blank
    });
    const projectId = 'ppsg7ml5';
    window.localStorage.setItem("__studio_auth_token_".concat(projectId), JSON.stringify({
      token: 'skaQT9YgcOZEKweP9PCUzQH3SoEYBGjudmJp4MwTBw8TlTIGPVWtDWDLKbJRxCCHcFrt5s4sTxZHcQCh'
    }));
    const config = (0, _config.createConfig)({
      name: 'default',
      projectId,
      dataset: 'test'
    });

    function Content() {
      const workspace = (0, _workspace.useWorkspace)();
      (0, _react.useEffect)(() => {// console.log({workspace})
      }, [workspace]);
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "content!");
    }

    const {
      debug
    } = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_StudioProvider.StudioProvider, {
      config: config
    }, /*#__PURE__*/_react.default.createElement(Content, null)));
    await (0, _react2.act)(async () => {
      await new Promise(resolve => setTimeout(resolve, 1000));
    });
    debug();
    consoleErrorSpy.mockRestore();
  });
});