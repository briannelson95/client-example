"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StudioLayout = StudioLayout;

var _startCase2 = _interopRequireDefault(require("lodash/startCase"));

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _router = require("../router");

var _components = require("./components");

var _NoToolsScreen = require("./screens/NoToolsScreen");

var _ToolNotFoundScreen = require("./screens/ToolNotFoundScreen");

var _workspace = require("./workspace");

var _templateObject;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const SearchFullscreenPortalCard = (0, _styledComponents.default)(_ui.Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  min-height: 100%;\n  flex: 1;\n"])));

function StudioLayout() {
  const {
    state: routerState
  } = (0, _router.useRouter)();
  const {
    name,
    title,
    tools
  } = (0, _workspace.useWorkspace)();
  const activeToolName = typeof routerState.tool === 'string' ? routerState.tool : undefined;
  const activeTool = tools.find(tool => tool.name === activeToolName);
  const [toolError, setToolError] = (0, _react.useState)(null);
  const [searchOpen, setSearchOpen] = (0, _react.useState)(false);
  const [fullscreenSearchPortalEl, setFullscreenSearchPortalEl] = (0, _react.useState)(null);
  const documentTitle = (0, _react.useMemo)(() => {
    const mainTitle = title || (0, _startCase2.default)(name);

    if (activeToolName) {
      return "".concat(mainTitle, " \u2013 ").concat((0, _startCase2.default)(activeToolName));
    }

    return mainTitle;
  }, [activeToolName, name, title]);
  (0, _react.useEffect)(() => {
    document.title = documentTitle;
  }, [documentTitle]);
  const handleSearchOpenChange = (0, _react.useCallback)(open => {
    setSearchOpen(open);
  }, []);
  (0, _react.useEffect)(() => {
    setToolError(null);
  }, [activeToolName]);
  const handleToolRetry = (0, _react.useCallback)(() => {
    setToolError(null);
  }, []);
  return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    "data-ui": "ToolScreen",
    direction: "column",
    height: "fill"
  }, /*#__PURE__*/_react.default.createElement(_components.Navbar, {
    onSearchOpenChange: handleSearchOpenChange,
    fullscreenSearchPortalEl: fullscreenSearchPortalEl
  }), tools.length === 0 && /*#__PURE__*/_react.default.createElement(_NoToolsScreen.NoToolsScreen, null), tools.length > 0 && !activeTool && activeToolName && /*#__PURE__*/_react.default.createElement(_ToolNotFoundScreen.ToolNotFoundScreen, {
    toolName: activeToolName
  }), toolError && activeTool && /*#__PURE__*/_react.default.createElement(_ui.Card, {
    flex: 1,
    overflow: "auto",
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Heading, {
    as: "h1"
  }, "The ", /*#__PURE__*/_react.default.createElement("code", null, activeToolName), " tool crashed"), /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginTop: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    onClick: handleToolRetry,
    text: "Retry"
  })), /*#__PURE__*/_react.default.createElement(_ui.Card, {
    marginTop: 4,
    overflow: "auto",
    padding: 3,
    tone: "critical"
  }, /*#__PURE__*/_react.default.createElement(_ui.Code, {
    size: 1
  }, toolError.error.stack)), /*#__PURE__*/_react.default.createElement(_ui.Card, {
    marginTop: 4,
    overflow: "auto",
    padding: 3,
    tone: "critical"
  }, /*#__PURE__*/_react.default.createElement(_ui.Code, {
    size: 1
  }, toolError.info.componentStack))), searchOpen && /*#__PURE__*/_react.default.createElement(SearchFullscreenPortalCard, {
    ref: setFullscreenSearchPortalEl,
    overflow: "auto"
  }), /*#__PURE__*/_react.default.createElement(_ui.Card, {
    flex: 1,
    hidden: searchOpen
  }, !toolError && activeTool && activeToolName && /*#__PURE__*/_react.default.createElement(_router.RouteScope, {
    scope: activeToolName
  }, /*#__PURE__*/_react.default.createElement(_ui.ErrorBoundary, {
    onCatch: setToolError
  }, /*#__PURE__*/_react.default.createElement(_react.Suspense, {
    fallback: /*#__PURE__*/_react.default.createElement(LoadingTool, null)
  }, /*#__PURE__*/(0, _react.createElement)(activeTool.component, {
    tool: activeTool
  }))))));
}

function LoadingTool() {
  return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    height: "fill",
    justify: "center"
  }, /*#__PURE__*/_react.default.createElement(_ui.Spinner, {
    muted: true
  }));
}