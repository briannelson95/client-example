"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decodeUrlState = decodeUrlState;
exports.isNonNullable = isNonNullable;
exports.resolveDefaultState = resolveDefaultState;
exports.resolveIntentState = resolveIntentState;

var _isRecord = require("../../util/isRecord");

var _getOrderedTools = require("./util/getOrderedTools");

function resolveUrlStateWithDefaultTool(tools, state) {
  const orderedTools = (0, _getOrderedTools.getOrderedTools)(tools);
  const defaultTool = orderedTools[0];

  if (!state || state.tool || !defaultTool) {
    return state;
  }

  return Object.assign({}, state, {
    tool: defaultTool.name
  });
}

function makeBackwardsCompatible(tools, state) {
  if (!state) {
    return state;
  }

  if ((0, _getOrderedTools.getOrderedTools)(tools).find(tool => tool.name === state.space)) {
    return { ...state,
      tool: state.space,
      space: undefined
    };
  }

  return state;
}

function resolveDefaultState(tools, state) {
  const urlStateWithDefaultTool = resolveUrlStateWithDefaultTool(tools, makeBackwardsCompatible(tools, state));
  return urlStateWithDefaultTool;
}

function resolveIntentState(tools, currentState, intentState) {
  const {
    intent,
    params,
    payload
  } = intentState;

  if (typeof intent !== 'string') {
    throw new Error('intent must be a string');
  }

  if (!(0, _isRecord.isRecord)(params)) {
    throw new Error('intent params must be a string');
  }

  const orderedTools = (0, _getOrderedTools.getOrderedTools)(tools);
  const currentTool = currentState !== null && currentState !== void 0 && currentState.tool ? orderedTools.find(tool => tool.name === currentState.tool) : null; // If current tool can handle intent and if so, give it precedence

  const matchingTool = (currentTool ? [currentTool, ...orderedTools] : orderedTools).find(tool => tool && typeof tool.canHandleIntent === 'function' && tool.canHandleIntent(intent, params, currentState && currentState[tool.name]));

  if (matchingTool !== null && matchingTool !== void 0 && matchingTool.getIntentState) {
    const toolState = matchingTool.getIntentState(intent, params, currentState && currentState[matchingTool.name], payload);
    return {
      type: 'state',
      isNotFound: false,
      state: { ...currentState,
        tool: matchingTool.name,
        [matchingTool.name]: toolState
      }
    };
  }

  return {
    type: 'intent',
    isNotFound: true,
    intent: {
      name: intent,
      params
    }
  };
}

function decodeUrlState(rootRouter, pathname) {
  return {
    type: 'state',
    state: rootRouter.decode(pathname) || {},
    isNotFound: rootRouter.isNotFound(pathname)
  };
}

function isNonNullable(value) {
  return value !== null && value !== undefined;
}