"use strict";

var _validateWorkspaces = require("../validateWorkspaces");

describe('validateBasePaths', () => {
  it('allows empty basePaths', () => {
    (0, _validateWorkspaces.validateBasePaths)([{
      name: 'foo',
      basePath: '/'
    }]);
    (0, _validateWorkspaces.validateBasePaths)([{
      name: 'foo',
      basePath: ''
    }]);
    (0, _validateWorkspaces.validateBasePaths)([{
      name: 'foo',
      basePath: undefined
    }]);
  });
  it('throws if more than one workspace is defined, but one or more workspace does not have a basepath', () => {
    expect(() => {
      (0, _validateWorkspaces.validateBasePaths)([{
        name: 'first'
      }, {
        name: 'second',
        basePath: '/2nd'
      }]);
    }).toThrowErrorMatchingInlineSnapshot("\"If more than one workspace is defined, every workspace must have a `basePath` defined. Workspace `first` is missing a `basePath`\"");
    expect(() => {
      (0, _validateWorkspaces.validateBasePaths)([{
        name: 'first',
        basePath: '/1st'
      }, {
        name: 'second'
      }]);
    }).toThrowErrorMatchingInlineSnapshot("\"If more than one workspace is defined, every workspace must have a `basePath` defined. Workspace `second` is missing a `basePath`\"");
    expect(() => {
      (0, _validateWorkspaces.validateBasePaths)([{
        name: 'first',
        basePath: '/1st'
      }, {
        name: 'second',
        basePath: ''
      }]);
    }).toThrowErrorMatchingInlineSnapshot("\"If more than one workspace is defined, every workspace must have a `basePath` defined. Workspace `second` has an invalid `basePath` (must be a non-empty string)\"");
  });
  it('throws if a workspace has invalid characters', () => {
    expect(() => {
      (0, _validateWorkspaces.validateBasePaths)([{
        name: 'foo',
        basePath: '\tinvalid.characters%everywhere  '
      }]);
    }).toThrowErrorMatchingInlineSnapshot("\"All workspace `basePath`s must start with a leading `/`, consist of only URL safe characters, and cannot end with a trailing `/`. Workspace `foo`'s basePath is `\tinvalid.characters%everywhere  `\"");
  });
  it("throws if a workspace doesn't start with a leading `/`", () => {
    expect(() => {
      (0, _validateWorkspaces.validateBasePaths)([{
        name: 'foo',
        basePath: 'no-leading-slash'
      }]);
    }).toThrowErrorMatchingInlineSnapshot("\"All workspace `basePath`s must start with a leading `/`, consist of only URL safe characters, and cannot end with a trailing `/`. Workspace `foo`'s basePath is `no-leading-slash`\"");
  });
  it('throws if a workspace has a trailing `/`', () => {
    expect(() => {
      (0, _validateWorkspaces.validateBasePaths)([{
        name: 'foo',
        basePath: '/has-trailing-slash/'
      }]);
    }).toThrowErrorMatchingInlineSnapshot("\"All workspace `basePath`s must start with a leading `/`, consist of only URL safe characters, and cannot end with a trailing `/`. Workspace `foo`'s basePath is `/has-trailing-slash/`\"");
  });
  it('allows base paths with a leading `/`, URL safe characters, and no trailing slash', () => {
    (0, _validateWorkspaces.validateBasePaths)([{
      name: 'foo',
      basePath: '/valid'
    }]);
    (0, _validateWorkspaces.validateBasePaths)([{
      name: 'foo',
      basePath: '/also/valid'
    }]);
    (0, _validateWorkspaces.validateBasePaths)([{
      name: 'foo',
      basePath: '/still-valid'
    }]);
  });
  it('throws if workspace base paths have differing segment counts', () => {
    expect(() => {
      (0, _validateWorkspaces.validateBasePaths)([{
        name: 'twoSegments',
        basePath: '/one/two'
      }, {
        name: 'threeSegments',
        basePath: '/one/two/three'
      }]);
    }).toThrowErrorMatchingInlineSnapshot("\"All workspace `basePath`s must have the same amount of segments. Workspace `twoSegments` had 2 segments `/one/two` but workspace `threeSegments` had 3 segments `/one/two/three`\"");
  });
  it('throws if workspaces have identical base paths', () => {
    expect(() => {
      (0, _validateWorkspaces.validateBasePaths)([{
        name: 'foo',
        basePath: '/one/two'
      }, {
        name: 'bar',
        basePath: '/foo/bar'
      }, {
        name: 'fooAgain',
        basePath: '/OnE/TwO'
      }]);
    }).toThrowErrorMatchingInlineSnapshot("\"`basePath`s must be unique. Workspaces `foo` and `fooAgain` both have the `basePath` `/one/two`\"");
  });
});
describe('validateNames', () => {
  it('allows missing name on single workspace', () => {
    (0, _validateWorkspaces.validateNames)([{
      basePath: '/'
    }]);
    (0, _validateWorkspaces.validateNames)([{
      name: undefined,
      basePath: '/'
    }]);
  });
  it('throws if more than one workspace is defined, but one or more workspace does not have a name', () => {
    expect(() => {
      (0, _validateWorkspaces.validateNames)([{
        basePath: '/first'
      }, {
        name: 'second',
        basePath: '/2nd'
      }]);
    }).toThrowErrorMatchingInlineSnapshot("\"All workspaces must have a `name`, unless only a single workspace is defined. Workspace at index 0 did not define a `name`.\"");
    expect(() => {
      (0, _validateWorkspaces.validateNames)([{
        basePath: '/first',
        title: 'First'
      }, {
        name: 'second',
        basePath: '/2nd'
      }]);
    }).toThrowErrorMatchingInlineSnapshot("\"All workspaces must have a `name`, unless only a single workspace is defined. Workspace at index 0 (titled \\\"First\\\") did not define a `name`.\"");
    expect(() => {
      (0, _validateWorkspaces.validateNames)([{
        name: 'first',
        basePath: '/1st'
      }, {
        basePath: '/second'
      }]);
    }).toThrowErrorMatchingInlineSnapshot("\"All workspaces must have a `name`, unless only a single workspace is defined. Workspace at index 1 did not define a `name`.\"");
    expect(() => {
      (0, _validateWorkspaces.validateNames)([{
        name: 'first',
        basePath: '/1st'
      }, {
        basePath: '/second',
        title: 'Second'
      }]);
    }).toThrowErrorMatchingInlineSnapshot("\"All workspaces must have a `name`, unless only a single workspace is defined. Workspace at index 1 (titled \\\"Second\\\") did not define a `name`.\"");
    expect(() => {
      (0, _validateWorkspaces.validateNames)([{
        name: 'first',
        basePath: '/1st'
      }, {
        name: '',
        basePath: '/2nd'
      }]);
    }).toThrowErrorMatchingInlineSnapshot("\"All workspaces must have a `name`, unless only a single workspace is defined. Workspace at index 1 did not define a `name`.\"");
  });
  it('throws if a workspace name has invalid characters', () => {
    expect(() => {
      (0, _validateWorkspaces.validateNames)([{
        name: '/nope',
        basePath: '/niet'
      }]);
    }).toThrowErrorMatchingInlineSnapshot("\"All workspace `name`s must consist of only a-z, 0-9, underscore and dashes, and cannot begin with an underscore or dash. Workspace at index 0 has the invalid name `/nope`\"");
    expect(() => {
      (0, _validateWorkspaces.validateNames)([{
        name: '/nope',
        basePath: '/niet',
        title: 'Nei'
      }]);
    }).toThrowErrorMatchingInlineSnapshot("\"All workspace `name`s must consist of only a-z, 0-9, underscore and dashes, and cannot begin with an underscore or dash. Workspace at index 0 (titled \\\"Nei\\\") has the invalid name `/nope`\"");
  });
  it('throws if a workspace name leads with a dash/underscore', () => {
    expect(() => {
      (0, _validateWorkspaces.validateNames)([{
        name: '-no-leading-dash',
        basePath: '/okay'
      }]);
    }).toThrowErrorMatchingInlineSnapshot("\"All workspace `name`s must consist of only a-z, 0-9, underscore and dashes, and cannot begin with an underscore or dash. Workspace at index 0 has the invalid name `-no-leading-dash`\"");
    expect(() => {
      (0, _validateWorkspaces.validateNames)([{
        name: '_no_leading_underscore',
        basePath: '/okay'
      }]);
    }).toThrowErrorMatchingInlineSnapshot("\"All workspace `name`s must consist of only a-z, 0-9, underscore and dashes, and cannot begin with an underscore or dash. Workspace at index 0 has the invalid name `_no_leading_underscore`\"");
    expect(() => {
      (0, _validateWorkspaces.validateNames)([{
        name: '_no_leading_underscore',
        basePath: '/okay',
        title: 'The Leading Underscore'
      }]);
    }).toThrowErrorMatchingInlineSnapshot("\"All workspace `name`s must consist of only a-z, 0-9, underscore and dashes, and cannot begin with an underscore or dash. Workspace at index 0 (titled \\\"The Leading Underscore\\\") has the invalid name `_no_leading_underscore`\"");
  });
  it('allows base paths with a leading [a-z0-9], underscores and dashes', () => {
    (0, _validateWorkspaces.validateNames)([{
      name: 'valid',
      basePath: '/one'
    }]);
    (0, _validateWorkspaces.validateNames)([{
      name: 'also-valid',
      basePath: '/two'
    }]);
    (0, _validateWorkspaces.validateNames)([{
      name: 'even_this_is_valid',
      basePath: '/three'
    }]);
    (0, _validateWorkspaces.validateNames)([{
      name: '2009-was-okay',
      basePath: '/four'
    }]);
    (0, _validateWorkspaces.validateNames)([{
      name: 'however_2020_was_not',
      basePath: '/five'
    }]);
    (0, _validateWorkspaces.validateNames)([{
      name: 'even_m1x3d-but_dont-do_it',
      basePath: '/six'
    }]);
  });
  it('throws if workspaces have identical names paths', () => {
    expect(() => {
      (0, _validateWorkspaces.validateNames)([{
        name: 'Foo',
        basePath: '/1st'
      }, {
        name: 'bar',
        basePath: '/2nd'
      }, {
        name: 'foO',
        basePath: '/3rd'
      }]);
    }).toThrowErrorMatchingInlineSnapshot("\"`name`s must be unique. Workspace at index 0 and workspace at index 2 both have the `name` `foO`\"");
    expect(() => {
      (0, _validateWorkspaces.validateNames)([{
        name: 'bAr',
        basePath: '/1st',
        title: 'First'
      }, {
        name: 'bar',
        basePath: '/2nd',
        title: 'Second'
      }, {
        name: 'foO',
        basePath: '/3rd',
        title: 'Third'
      }]);
    }).toThrowErrorMatchingInlineSnapshot("\"`name`s must be unique. Workspace at index 0 (titled \\\"First\\\") and workspace at index 1 (titled \\\"Second\\\") both have the `name` `bar`\"");
  });
});