"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColorSchemeProvider = ColorSchemeProvider;
exports.useColorScheme = useColorScheme;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const ColorSchemeContext = /*#__PURE__*/(0, _react.createContext)(null);

function ColorSchemeProvider(_ref) {
  let {
    children,
    onSchemeChange,
    scheme: schemeProp
  } = _ref;
  const prefersDark = (0, _ui.usePrefersDark)();
  const [scheme, setScheme] = (0, _react.useState)(schemeProp || 'light'); // if the preferred color scheme changes, then react to this change

  (0, _react.useEffect)(() => {
    const nextScheme = prefersDark ? 'dark' : 'light';
    setScheme(nextScheme);
    onSchemeChange === null || onSchemeChange === void 0 ? void 0 : onSchemeChange(nextScheme);
  }, [onSchemeChange, prefersDark]);
  const colorScheme = (0, _react.useMemo)(() => ({
    scheme,
    setScheme
  }), [scheme]);
  return /*#__PURE__*/_react.default.createElement(ColorSchemeContext.Provider, {
    value: colorScheme
  }, /*#__PURE__*/_react.default.createElement(_ui.ThemeProvider, {
    scheme: scheme,
    theme: _ui.studioTheme
  }, children));
}

function useColorScheme() {
  const value = (0, _react.useContext)(ColorSchemeContext);
  if (!value) throw new Error('Could not find `colorScheme` context');
  return value;
}