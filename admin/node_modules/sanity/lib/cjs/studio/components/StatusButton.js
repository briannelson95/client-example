"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StatusButton = void 0;

var _ui = require("@sanity/ui");

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _templateObject, _templateObject2;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const dot = (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  &:after {\n    content: '';\n    width: 6px;\n    height: 6px;\n    background-color: var(--status-button-dot-bg);\n    position: absolute;\n    top: 0;\n    right: 0;\n    border-radius: 50%;\n    transform: translate(-7px, 7px);\n    border: 1px solid var(--card-bg-color);\n  }\n"])));
const StatusButton = (0, _styledComponents.default)(_ui.Button)(_ref => {
  let {
    theme,
    active,
    statusTone
  } = _ref;
  const {
    color
  } = theme.sanity;
  const tone = color.selectable && color.selectable[statusTone].selected.bg;
  const showDot = active && tone;
  return (0, _styledComponents.css)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n      position: relative;\n      --status-button-dot-bg: ", ";\n\n      ", "\n    "])), tone, showDot && dot);
});
exports.StatusButton = StatusButton;