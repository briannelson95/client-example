"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SearchField = SearchField;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _icons = require("@sanity/icons");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _search = require("../../../../search");

var _SearchFullscreenContent = require("./SearchFullscreenContent");

var _SearchItem = require("./SearchItem");

var _SearchPopoverContent = require("./SearchPopoverContent");

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const StyledText = (0, _styledComponents.default)(_ui.Text)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  word-break: break-word;\n"])));

const filterOption = () => true;

function SearchField(props) {
  const {
    fullScreen,
    onSearchItemClick,
    portalElement,
    relatedElements,
    setSearchInputElement
  } = props;
  const [query, setQuery] = (0, _react.useState)(null);
  const results = (0, _search.useDocumentSearchResults)({
    includeDrafts: true,
    query: query || ''
  });
  const handleClickItem = (0, _react.useCallback)(() => {
    if (fullScreen && onSearchItemClick) {
      onSearchItemClick();
    }
  }, [fullScreen, onSearchItemClick]);
  const renderOption = (0, _react.useCallback)(option => {
    const {
      data
    } = option.payload;
    const documentId = data.hit._id;
    const documentType = data.hit._type;
    return /*#__PURE__*/_react.default.createElement(_SearchItem.SearchItem, {
      key: documentId,
      onClick: handleClickItem,
      padding: 2,
      documentId: documentId,
      documentType: documentType
    });
  }, [handleClickItem]);
  const renderPopoverFullscreen = (0, _react.useCallback)((popoverProps, ref) => {
    if (!popoverProps.hidden && results.error) {
      var _results$error;

      return /*#__PURE__*/_react.default.createElement(_SearchFullscreenContent.SearchFullscreenContent, {
        tone: "critical"
      }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
        align: "center",
        flex: 1,
        height: "fill",
        justify: "center",
        padding: 4,
        sizing: "border"
      }, /*#__PURE__*/_react.default.createElement(StyledText, {
        align: "center",
        muted: true
      }, (results === null || results === void 0 ? void 0 : (_results$error = results.error) === null || _results$error === void 0 ? void 0 : _results$error.message) || 'Something went wrong while searching')));
    }

    if (!popoverProps.hidden && query && !results.loading && results.value.length === 0) {
      return /*#__PURE__*/_react.default.createElement(_SearchFullscreenContent.SearchFullscreenContent, null, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
        align: "center",
        flex: 1,
        height: "fill",
        justify: "center",
        padding: 4,
        sizing: "border"
      }, /*#__PURE__*/_react.default.createElement(StyledText, {
        align: "center",
        muted: true
      }, "No results for ", /*#__PURE__*/_react.default.createElement("strong", null, "\u2018", query, "\u2019"))));
    }

    if (!popoverProps.hidden && results.value.length > 0) {
      return /*#__PURE__*/_react.default.createElement(_SearchFullscreenContent.SearchFullscreenContent, {
        hidden: popoverProps.hidden,
        ref: ref
      }, popoverProps.content);
    }

    return undefined;
  }, [query, results]);
  const renderPopover = (0, _react.useCallback)((popoverProps, ref) => {
    if (!popoverProps.hidden && results.error) {
      var _results$error2;

      return /*#__PURE__*/_react.default.createElement(_SearchPopoverContent.SearchPopoverContent, {
        content: /*#__PURE__*/_react.default.createElement(_ui.Box, {
          padding: 4
        }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
          align: "center",
          height: "fill",
          justify: "center"
        }, /*#__PURE__*/_react.default.createElement(StyledText, {
          align: "center",
          muted: true
        }, (results === null || results === void 0 ? void 0 : (_results$error2 = results.error) === null || _results$error2 === void 0 ? void 0 : _results$error2.message) || 'Something went wrong while searching'))),
        open: !popoverProps.hidden,
        ref: ref,
        referenceElement: popoverProps.inputElement
      });
    }

    if (!popoverProps.hidden && query && !results.loading && results.value.length === 0) {
      return /*#__PURE__*/_react.default.createElement(_SearchPopoverContent.SearchPopoverContent, {
        content: /*#__PURE__*/_react.default.createElement(_ui.Box, {
          padding: 4
        }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
          align: "center",
          height: "fill",
          justify: "center"
        }, /*#__PURE__*/_react.default.createElement(StyledText, {
          align: "center",
          muted: true
        }, "No results for ", /*#__PURE__*/_react.default.createElement("strong", null, "\u201C", query, "\u201D")))),
        open: !popoverProps.hidden,
        ref: ref,
        referenceElement: popoverProps.inputElement
      });
    }

    if (!popoverProps.hidden && results.value.length > 0) {
      return /*#__PURE__*/_react.default.createElement(_SearchPopoverContent.SearchPopoverContent, {
        content: popoverProps.content,
        open: !popoverProps.hidden,
        ref: ref,
        referenceElement: popoverProps.inputElement
      });
    }

    return undefined;
  }, [query, results]);
  const autoComplete = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(_ui.Autocomplete, {
    filterOption: filterOption,
    icon: _icons.SearchIcon,
    id: "studio-search",
    key: "studio-search",
    listBox: {
      padding: fullScreen ? 2 : 1
    },
    loading: results.loading,
    onQueryChange: setQuery,
    options: results.value.map(hit => {
      return {
        value: hit.hit._id,
        payload: {
          data: hit
        }
      };
    }),
    placeholder: "Search",
    radius: 2,
    ref: setSearchInputElement,
    relatedElements: relatedElements,
    renderOption: renderOption,
    renderPopover: fullScreen ? renderPopoverFullscreen : renderPopover
  }), [fullScreen, relatedElements, renderOption, renderPopover, renderPopoverFullscreen, results.loading, results.value, setSearchInputElement]);
  return /*#__PURE__*/_react.default.createElement(_ui.PortalProvider, {
    element: fullScreen ? portalElement : null
  }, autoComplete);
}