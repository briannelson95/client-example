"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConfigIssuesButton = ConfigIssuesButton;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _icons = require("@sanity/icons");

var _autoId = require("@reach/auto-id");

var _hooks = require("../../../../hooks");

var _SchemaProblemGroups = require("../../../screens/schemaErrors/SchemaProblemGroups");

var _colorScheme = require("../../../colorScheme");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ConfigIssuesButton() {
  var _schema$_validation;

  const schema = (0, _hooks.useSchema)();
  const groupsWithWarnings = ((_schema$_validation = schema._validation) === null || _schema$_validation === void 0 ? void 0 : _schema$_validation.filter(group => group.problems.some(problem => problem.severity === 'warning'))) || []; // get root scheme

  const {
    scheme
  } = (0, _colorScheme.useColorScheme)();
  const dialogId = (0, _autoId.useId)() || 'config-issues-dialog';
  const [isDialogOpen, setDialogOpen] = (0, _react.useState)(false);
  const [buttonElement, setButtonElement] = (0, _react.useState)(null);
  const handleOpen = (0, _react.useCallback)(() => setDialogOpen(true), []);
  const handleClose = (0, _react.useCallback)(() => {
    setDialogOpen(false);

    if (buttonElement) {
      buttonElement.focus();
    }
  }, [buttonElement]);

  if (groupsWithWarnings.length === 0) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    content: /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 1
    }, "Found configuration issues")),
    placement: "bottom",
    portal: true,
    scheme: scheme
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, null, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    icon: _icons.WarningOutlineIcon,
    mode: "bleed",
    tone: "caution",
    onClick: handleOpen,
    ref: setButtonElement,
    selected: isDialogOpen
  }))), isDialogOpen && /*#__PURE__*/_react.default.createElement(_ui.Dialog, {
    header: /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 3
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      weight: "semibold"
    }, "Configuration issues"), /*#__PURE__*/_react.default.createElement(_ui.Text, {
      muted: true,
      size: 1
    }, "Configuration checks are only performed during development and will not be visible in production builds")),
    width: 2,
    onClickOutside: handleClose,
    onClose: handleClose // force root scheme here to "break out" of the navbar's dark scheme
    ,
    scheme: scheme,
    id: dialogId
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 4,
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Heading, {
    as: "h2",
    size: 1
  }, "Found ", groupsWithWarnings.length, " schema warnings"), /*#__PURE__*/_react.default.createElement(_SchemaProblemGroups.SchemaProblemGroups, {
    problemGroups: groupsWithWarnings
  }))));
}