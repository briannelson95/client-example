"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WorkspaceAuth = WorkspaceAuth;

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _icons = require("@sanity/icons");

var _activeWorkspaceMatcher = require("../../../../activeWorkspaceMatcher");

var _workspaces = require("../../../../workspaces");

var _WorkspacePreview = require("../WorkspacePreview");

var _hooks = require("../hooks");

var _screens = require("../../../../screens");

var _constants = require("../constants");

var _Layout = require("./Layout");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function WorkspaceAuth() {
  var _selectedWorkspace$au;

  const workspaces = (0, _workspaces.useWorkspaces)();
  const {
    activeWorkspace,
    setActiveWorkspace
  } = (0, _activeWorkspaceMatcher.useActiveWorkspace)();
  const [authStates] = (0, _hooks.useWorkspaceAuthStates)(workspaces);
  const [selectedWorkspaceName, setSelectedWorkspaceName] = (0, _react.useState)((activeWorkspace === null || activeWorkspace === void 0 ? void 0 : activeWorkspace.name) || null);
  const selectedWorkspace = workspaces.length === 1 ? workspaces[0] : workspaces.find(workspace => workspace.name === selectedWorkspaceName);
  const LoginComponent = selectedWorkspace === null || selectedWorkspace === void 0 ? void 0 : (_selectedWorkspace$au = selectedWorkspace.auth) === null || _selectedWorkspace$au === void 0 ? void 0 : _selectedWorkspace$au.LoginComponent;
  const handleBack = (0, _react.useCallback)(() => setSelectedWorkspaceName(null), []);
  if (!authStates) return /*#__PURE__*/_react.default.createElement(_screens.LoadingScreen, null);

  if (LoginComponent && selectedWorkspace) {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2
    }, workspaces.length > 1 && /*#__PURE__*/_react.default.createElement(_ui.Flex, null, /*#__PURE__*/_react.default.createElement(_ui.Button, {
      fontSize: 1,
      icon: _icons.ArrowLeftIcon,
      mode: "bleed",
      onClick: handleBack,
      padding: 2,
      text: "Choose another workspace"
    })), /*#__PURE__*/_react.default.createElement(_Layout.Layout, {
      header: /*#__PURE__*/_react.default.createElement(_ui.Box, {
        padding: 3
      }, /*#__PURE__*/_react.default.createElement(_WorkspacePreview.WorkspacePreview, {
        icon: selectedWorkspace.icon,
        title: selectedWorkspace.title,
        subtitle: selectedWorkspace.dataset
      }))
    }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      padding: 2,
      paddingBottom: 3,
      paddingTop: 4
    }, /*#__PURE__*/_react.default.createElement(LoginComponent, _extends({}, (0, _omit2.default)(selectedWorkspace, ['type', '__internal']), {
      key: selectedWorkspaceName
    })))));
  }

  return /*#__PURE__*/_react.default.createElement(_Layout.Layout, {
    header: "Choose your workspace",
    footer: /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      padding: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
      as: "a",
      href: _constants.workspacesDocsUrl,
      icon: _icons.AddIcon,
      justify: "flex-start",
      mode: "bleed",
      rel: "noopener noreferrer",
      target: "__blank",
      text: "Add workspace"
    }))
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 1,
    paddingX: 1,
    paddingY: 2
  }, workspaces.map(workspace => {
    const authState = authStates[workspace.name]; // eslint-disable-next-line no-nested-ternary

    const state = authState.authenticated ? 'logged-in' : workspace.auth.LoginComponent ? 'logged-out' : 'no-access';

    const handleSelectWorkspace = () => {
      if (state === 'logged-in' && workspace.name !== activeWorkspace.name) {
        setActiveWorkspace(workspace.name);
      }

      if (state === 'logged-out') {
        setSelectedWorkspaceName(workspace.name);
      }
    };

    return /*#__PURE__*/_react.default.createElement(_ui.Card, {
      as: "button",
      radius: 2,
      key: workspace.name,
      padding: 2 // eslint-disable-next-line react/jsx-no-bind
      ,
      onClick: handleSelectWorkspace
    }, /*#__PURE__*/_react.default.createElement(_WorkspacePreview.WorkspacePreview, {
      icon: workspace === null || workspace === void 0 ? void 0 : workspace.icon,
      iconRight: _icons.ChevronRightIcon,
      state: state,
      subtitle: workspace.dataset,
      title: (workspace === null || workspace === void 0 ? void 0 : workspace.title) || workspace.name
    }));
  })));
}