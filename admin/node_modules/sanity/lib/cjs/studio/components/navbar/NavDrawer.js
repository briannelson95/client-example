"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NavDrawer = void 0;

var _ui = require("@sanity/ui");

var _icons = require("@sanity/icons");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _UserAvatar = require("../../../components/UserAvatar");

var _workspace = require("../../workspace");

var _rovingFocus = require("../../../components/rovingFocus");

var _ToolMenu = require("./tools/ToolMenu");

var _workspace2 = require("./workspace");

var _templateObject, _templateObject2, _templateObject3;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const Root = (0, _styledComponents.default)(_ui.Layer)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n"])));
const Backdrop = (0, _styledComponents.default)(_ui.Card)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: var(--card-shadow-penumbra-color);\n  transition: 200ms opacity ease-in-out;\n  pointer-events: none;\n  opacity: 0;\n\n  &[data-open='true'] {\n    opacity: 1;\n    pointer-events: all;\n  }\n"])));
const InnerCard = (0, _styledComponents.default)(_ui.Card)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  position: relative;\n  pointer-events: all;\n  flex-direction: column;\n  min-width: 200px;\n  max-width: 280px;\n  transition: 200ms transform ease-in-out;\n  transform: translate3d(calc(-100% - 1px), 0, 0);\n\n  &[data-open='true'] {\n    transform: translate3d(0, 0, 0);\n  }\n"])));
const NavDrawer = /*#__PURE__*/(0, _react.memo)(function NavDrawer(props) {
  const {
    activeToolName,
    isOpen,
    onClose,
    tools
  } = props;
  const [closeButtonElement, setCloseButtonElement] = (0, _react.useState)(null);
  const [innerCardElement, setInnerCardElement] = (0, _react.useState)(null);
  const tabIndex = isOpen ? 0 : -1;
  const {
    currentUser,
    navbar,
    auth
  } = (0, _workspace.useWorkspace)();
  const {
    ToolMenu = _ToolMenu.ToolMenu
  } = (navbar === null || navbar === void 0 ? void 0 : navbar.components) || {};
  (0, _rovingFocus.useRovingFocus)({
    rootElement: innerCardElement,
    navigation: ['tab']
  });
  (0, _ui.useGlobalKeyDown)(e => {
    if (e.key === 'Escape' && isOpen) {
      onClose();
    }
  });
  (0, _react.useEffect)(() => {
    if (isOpen) {
      closeButtonElement === null || closeButtonElement === void 0 ? void 0 : closeButtonElement.focus();
    }
  }, [closeButtonElement, isOpen]);
  return /*#__PURE__*/_react.default.createElement(Root, null, /*#__PURE__*/_react.default.createElement(Backdrop, {
    "data-open": isOpen,
    onClick: onClose
  }), /*#__PURE__*/_react.default.createElement(InnerCard, {
    display: "flex",
    height: "fill",
    "data-open": isOpen,
    shadow: 1,
    ref: setInnerCardElement
  }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    borderBottom: true
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 3,
    padding: [3, 3, 4]
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center"
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    flex: 1,
    align: "center",
    paddingRight: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    flex: 1,
    align: "center"
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, null, /*#__PURE__*/_react.default.createElement(_UserAvatar.UserAvatar, {
    size: 1,
    user: "me"
  })), /*#__PURE__*/_react.default.createElement(_ui.Box, {
    flex: 1,
    marginLeft: 2,
    title: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.name) || (currentUser === null || currentUser === void 0 ? void 0 : currentUser.email)
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    textOverflow: "ellipsis"
  }, (currentUser === null || currentUser === void 0 ? void 0 : currentUser.name) || (currentUser === null || currentUser === void 0 ? void 0 : currentUser.email))))), /*#__PURE__*/_react.default.createElement(_ui.Box, null, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    icon: _icons.CloseIcon,
    mode: "bleed",
    onClick: onClose,
    ref: setCloseButtonElement,
    tabIndex: tabIndex,
    title: "Close menu"
  }))), /*#__PURE__*/_react.default.createElement(_workspace2.WorkspaceMenuButton, {
    text: "Select workspace",
    justify: "flex-start"
  }))), /*#__PURE__*/_react.default.createElement(_ui.Box, {
    flex: "auto",
    overflow: "auto",
    padding: [3, 3, 4]
  }, /*#__PURE__*/_react.default.createElement(ToolMenu, {
    activeToolName: activeToolName,
    closeDrawer: onClose,
    context: "drawer",
    isDrawerOpen: isOpen,
    tools: tools
  })), auth.logout && /*#__PURE__*/_react.default.createElement(_ui.Card, {
    flex: "none",
    padding: [3, 3, 4],
    borderTop: true
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, null, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    iconRight: _icons.LeaveIcon,
    justify: "flex-start",
    mode: "bleed" // eslint-disable-next-line react/jsx-handler-names
    ,
    onClick: auth.logout,
    tabIndex: tabIndex,
    text: "Sign out"
  })))));
});
exports.NavDrawer = NavDrawer;