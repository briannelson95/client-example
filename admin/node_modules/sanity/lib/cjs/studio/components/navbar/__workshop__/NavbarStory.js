"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NavbarStory;

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _uiWorkshop = require("@sanity/ui-workshop");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _config = require("../../../../config");

var _isNonNullable = require("../../../../util/isNonNullable");

var _isTruthy = require("../../../../util/isTruthy");

var _ = require("..");

var _StudioProvider = require("../../../StudioProvider");

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const SearchFullscreenPortalCard = (0, _styledComponents.default)(_ui.Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  min-height: 100%;\n  flex: 1;\n"])));

const ExampleTool = () => /*#__PURE__*/_react.default.createElement("div", null, "Tool");

const noop = () => null; // const mockClient = createMockClient()


function NavbarStory() {
  const projectName = (0, _uiWorkshop.useString)('Project name', undefined);
  const [portalEl, setPortalEl] = (0, _react.useState)(null); // Create configuration

  const tools = useTools();
  const config = (0, _react.useMemo)(() => (0, _config.createConfig)({
    // The same id as in the test-studio sanity.config.ts
    projectId: 'ppsg7ml5',
    dataset: 'production',
    name: 'default',
    title: projectName,
    tools
  }), [projectName, tools]);
  return /*#__PURE__*/_react.default.createElement(_StudioProvider.StudioProvider, {
    config: config
  }, /*#__PURE__*/_react.default.createElement(_.Navbar, {
    onSearchOpenChange: noop,
    fullscreenSearchPortalEl: portalEl
  }), /*#__PURE__*/_react.default.createElement(SearchFullscreenPortalCard, {
    ref: setPortalEl
  }));
}

function useTools() {
  const toggledTools = {
    dashboard: (0, _uiWorkshop.useBoolean)('Dashboard'),
    content: (0, _uiWorkshop.useBoolean)('Content'),
    settings: (0, _uiWorkshop.useBoolean)('Settings'),
    vision: (0, _uiWorkshop.useBoolean)('Vision'),
    schema: (0, _uiWorkshop.useBoolean)('Schema'),
    arcade: (0, _uiWorkshop.useBoolean)('Arcade')
  };
  return (0, _react.useMemo)(() => [toggledTools.dashboard && {
    name: 'dashboard',
    title: 'Dashboard',
    icon: _icons.DashboardIcon,
    component: ExampleTool,
    options: {}
  }, toggledTools.content && {
    name: 'content',
    title: 'Content',
    icon: _icons.MasterDetailIcon,
    component: ExampleTool,
    options: {}
  }, toggledTools.settings && {
    name: 'settings',
    title: 'Settings',
    icon: _icons.CogIcon,
    component: ExampleTool,
    options: {}
  }, toggledTools.vision && {
    name: 'vision',
    title: 'Vision',
    icon: _icons.EyeOpenIcon,
    component: ExampleTool,
    options: {}
  }, toggledTools.schema && {
    name: 'schema',
    title: 'Schema',
    icon: _icons.DocumentsIcon,
    component: ExampleTool,
    options: {}
  }, toggledTools.arcade && {
    name: 'arcade',
    title: 'Arcade',
    icon: _icons.IceCreamIcon,
    component: ExampleTool,
    options: {}
  }].filter(_isTruthy.isTruthy).filter(_isNonNullable.isNonNullable), [toggledTools.arcade, toggledTools.content, toggledTools.dashboard, toggledTools.schema, toggledTools.settings, toggledTools.vision]);
}