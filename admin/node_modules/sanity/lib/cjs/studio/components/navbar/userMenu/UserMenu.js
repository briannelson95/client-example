"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserMenu = UserMenu;

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _UserAvatar = require("../../../../components/UserAvatar");

var _providerTitle = require("../../../../datastores/authStore/providerTitle");

var _colorScheme = require("../../../colorScheme");

var _workspace = require("../../../workspace");

var _LoginProviderLogo = require("./LoginProviderLogo");

var _templateObject, _templateObject2;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const StyledMenu = (0, _styledComponents.default)(_ui.Menu)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  min-width: 125px;\n  max-width: 350px;\n"])));
const AvatarBox = (0, _styledComponents.default)(_ui.Box)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: relative;\n"])));

function UserMenu() {
  const {
    currentUser,
    projectId,
    auth
  } = (0, _workspace.useWorkspace)();
  const {
    scheme,
    setScheme
  } = (0, _colorScheme.useColorScheme)();
  const providerTitle = (0, _providerTitle.getProviderTitle)(currentUser === null || currentUser === void 0 ? void 0 : currentUser.provider);
  const popoverProps = (0, _react.useMemo)(() => ({
    placement: 'bottom-end',
    portal: true,
    preventOverflow: true,
    scheme: scheme
  }), [scheme]);
  const handleToggleScheme = (0, _react.useCallback)(() => {
    setScheme(scheme === 'dark' ? 'light' : 'dark');
  }, [scheme, setScheme]);
  return /*#__PURE__*/_react.default.createElement(_ui.MenuButton, {
    button: /*#__PURE__*/_react.default.createElement(_ui.Button, {
      mode: "bleed",
      padding: 0,
      paddingX: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
      align: "center",
      gap: 1
    }, /*#__PURE__*/_react.default.createElement(_UserAvatar.UserAvatar, {
      user: "me",
      size: 1
    }), /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 1,
      muted: true
    }, /*#__PURE__*/_react.default.createElement(_icons.ChevronDownIcon, null)))),
    id: "user-menu",
    menu: /*#__PURE__*/_react.default.createElement(StyledMenu, null, /*#__PURE__*/_react.default.createElement(_ui.Card, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
      marginBottom: 3
    }, /*#__PURE__*/_react.default.createElement(_ui.Label, {
      size: 1,
      muted: true
    }, "Signed in as")), /*#__PURE__*/_react.default.createElement(_ui.Flex, {
      align: "center"
    }, /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
      disabled: !providerTitle,
      portal: true,
      content: providerTitle && /*#__PURE__*/_react.default.createElement(_ui.Box, {
        padding: 2
      }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
        size: 1
      }, "Signed in with ", providerTitle))
    }, /*#__PURE__*/_react.default.createElement(AvatarBox, {
      marginRight: 3
    }, /*#__PURE__*/_react.default.createElement(_UserAvatar.UserAvatar, {
      size: 1,
      user: "me"
    }), (currentUser === null || currentUser === void 0 ? void 0 : currentUser.provider) && /*#__PURE__*/_react.default.createElement(_LoginProviderLogo.LoginProviderLogo, {
      provider: currentUser.provider
    }))), /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      flex: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 1,
      weight: "semibold",
      textOverflow: "ellipsis"
    }, currentUser === null || currentUser === void 0 ? void 0 : currentUser.name), /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 1,
      muted: true,
      textOverflow: "ellipsis"
    }, currentUser === null || currentUser === void 0 ? void 0 : currentUser.email)))), /*#__PURE__*/_react.default.createElement(_ui.MenuDivider, null), /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
      icon: scheme === 'dark' ? _icons.SunIcon : _icons.MoonIcon,
      onClick: handleToggleScheme,
      text: scheme === 'dark' ? 'Switch to light mode' : 'Switch to dark mode'
    }), /*#__PURE__*/_react.default.createElement(_ui.MenuDivider, null), /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
      as: "a",
      href: "https://sanity.io/manage/project/".concat(projectId),
      target: "_blank",
      text: "Manage project",
      icon: _icons.CogIcon
    }), auth.logout && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ui.MenuDivider, null), /*#__PURE__*/_react.default.createElement(_ui.MenuItem, _extends({
      iconRight: _icons.LeaveIcon,
      text: "Sign out",
      disabled: !auth.logout
    }, auth.logout && {
      onClick: auth.logout
    })))),
    popover: popoverProps
  });
}