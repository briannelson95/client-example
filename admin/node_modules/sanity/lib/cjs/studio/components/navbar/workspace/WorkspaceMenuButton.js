"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WorkspaceMenuButton = WorkspaceMenuButton;

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _ = require("../../..");

var _router = require("../../../../router");

var _colorScheme = require("../../../colorScheme");

var _workspaces = require("../../../workspaces");

var _constants = require("./constants");

var _hooks = require("./hooks");

var _WorkspacePreview = require("./WorkspacePreview");

var _templateObject, _templateObject2;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const StyledMenu = (0, _styledComponents.default)(_ui.Menu)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  max-width: 350px;\n  min-width: 250px;\n"])));
const FooterCard = (0, _styledComponents.default)(_ui.Card)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: sticky;\n  bottom: 0;\n"])));

function WorkspaceMenuButton(props) {
  const {
    scheme
  } = (0, _colorScheme.useColorScheme)();
  const workspaces = (0, _workspaces.useWorkspaces)();
  const {
    activeWorkspace,
    setActiveWorkspace
  } = (0, _.useActiveWorkspace)();
  const [authStates] = (0, _hooks.useWorkspaceAuthStates)(workspaces);
  const {
    navigateUrl
  } = (0, _router.useRouter)();
  const popoverProps = (0, _react.useMemo)(() => ({
    constrainSize: true,
    scheme,
    portal: true
  }), [scheme]);
  return /*#__PURE__*/_react.default.createElement(_ui.MenuButton, {
    button: /*#__PURE__*/_react.default.createElement(_ui.Button, _extends({
      icon: _icons.SelectIcon,
      mode: "bleed"
    }, props, {
      disabled: !authStates
    })),
    id: "workspace-menu",
    menu: /*#__PURE__*/_react.default.createElement(StyledMenu, {
      paddingBottom: 0
    }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
      paddingX: 3,
      paddingY: 3
    }, /*#__PURE__*/_react.default.createElement(_ui.Label, {
      size: 1,
      muted: true
    }, "Workspaces")), authStates && workspaces.map(workspace => {
      const authState = authStates[workspace.name]; // eslint-disable-next-line no-nested-ternary

      const state = authState.authenticated ? 'logged-in' : workspace.auth.LoginComponent ? 'logged-out' : 'no-access';

      const handleSelectWorkspace = () => {
        if (state === 'logged-in' && workspace.name !== activeWorkspace.name) {
          setActiveWorkspace(workspace.name);
        } // Navigate to the base path of the workspace to authenticate


        if (state === 'logged-out') {
          navigateUrl({
            path: workspace.basePath
          });
        }
      };

      return /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
        key: workspace.name // eslint-disable-next-line react/jsx-no-bind
        ,
        onClick: handleSelectWorkspace,
        padding: 2,
        pressed: workspace.name === activeWorkspace.name
      }, /*#__PURE__*/_react.default.createElement(_WorkspacePreview.WorkspacePreview, {
        icon: workspace === null || workspace === void 0 ? void 0 : workspace.icon,
        selected: workspace.name === activeWorkspace.name,
        state: state,
        subtitle: workspace.dataset,
        title: (workspace === null || workspace === void 0 ? void 0 : workspace.title) || workspace.name
      }));
    }), /*#__PURE__*/_react.default.createElement(FooterCard, {
      borderTop: true,
      paddingY: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
      as: "a",
      href: _constants.workspacesDocsUrl,
      icon: _icons.AddIcon,
      rel: "noopener noreferrer",
      target: "__blank",
      text: "Add workspace"
    }))),
    popover: popoverProps
  });
}