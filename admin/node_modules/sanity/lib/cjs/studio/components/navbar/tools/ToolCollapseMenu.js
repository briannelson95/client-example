"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToolCollapseMenu = ToolCollapseMenu;

var _startCase2 = _interopRequireDefault(require("lodash/startCase"));

var _icons = require("@sanity/icons");

var _react = _interopRequireWildcard(require("react"));

var _collapseMenu = require("../../../../components/collapseMenu");

var _rovingFocus = require("../../../../components/rovingFocus");

var _colorScheme = require("../../../colorScheme");

var _ToolLink = require("./ToolLink");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ToolCollapseMenu(props) {
  const {
    activeToolName,
    tools
  } = props;
  const {
    scheme
  } = (0, _colorScheme.useColorScheme)();
  const [collapseMenuEl, setCollapseMenuEl] = (0, _react.useState)(null);
  (0, _rovingFocus.useRovingFocus)({
    rootElement: collapseMenuEl,
    navigation: ['arrows']
  });
  const menuButtonProps = (0, _react.useMemo)(() => ({
    popover: {
      constrainSize: true,
      portal: true,
      scheme: scheme
    }
  }), [scheme]);
  const children = (0, _react.useMemo)(() => tools.map((tool, index) => {
    const title = (tool === null || tool === void 0 ? void 0 : tool.title) || (0, _startCase2.default)(tool.name) || undefined;
    const Link = /*#__PURE__*/(0, _react.forwardRef)(function Link(linkProps, ref) {
      return /*#__PURE__*/_react.default.createElement(_ToolLink.ToolLink, _extends({}, linkProps, {
        ref: ref,
        name: tool.name
      }));
    });
    return /*#__PURE__*/_react.default.createElement(_collapseMenu.CollapseMenuButton, {
      as: Link,
      collapsedProps: {
        tooltipText: tool.title
      },
      icon: tool.icon || _icons.UnknownIcon // eslint-disable-next-line react/no-array-index-key
      ,
      key: "".concat(tool.name, "-").concat(index),
      mode: "bleed",
      selected: activeToolName === tool.name,
      text: title,
      tooltipProps: {
        scheme: scheme
      }
    });
  }), [activeToolName, scheme, tools]);
  return /*#__PURE__*/_react.default.createElement(_collapseMenu.CollapseMenu, {
    gap: 1,
    menuButtonProps: menuButtonProps,
    ref: setCollapseMenuEl
  }, children);
}