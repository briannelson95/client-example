"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChangelogButton = ChangelogButton;

var _react = _interopRequireWildcard(require("react"));

var _icons = require("@sanity/icons");

var _moduleStatus = require("../../../../module-status");

var _StatusButton = require("../../StatusButton");

var _environment = require("../../../../environment");

var _hooks = require("../../../../hooks");

var _colorScheme = require("../../../colorScheme");

var _ChangelogDialog = require("./ChangelogDialog");

var _ChangelogAccordion = require("./ChangelogAccordion");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const EMPTY_ARRAY = [];

function ChangelogButton() {
  const [open, setOpen] = (0, _react.useState)(false);
  const [buttonElement, setButtonElement] = (0, _react.useState)(null);
  const client = (0, _hooks.useClient)();
  const versionedClient = (0, _react.useMemo)(() => client.withConfig({
    apiVersion: '1'
  }), [client]); // get root scheme

  const {
    scheme
  } = (0, _colorScheme.useColorScheme)();
  const {
    value,
    error,
    isLoading
  } = (0, _moduleStatus.useModuleStatus)({
    client: versionedClient
  });
  const {
    changelog,
    currentVersion,
    latestVersion,
    isUpToDate
  } = value || {};
  const handleOpen = (0, _react.useCallback)(() => setOpen(true), []);
  const handleClose = (0, _react.useCallback)(() => {
    setOpen(false);

    if (buttonElement) {
      buttonElement.focus();
    }
  }, [buttonElement]);
  const dialogProps = (0, _react.useMemo)(() => ({
    footer: /*#__PURE__*/_react.default.createElement(_ChangelogAccordion.ChangelogAccordion, {
      defaultOpen: _environment.isDev
    }),
    onClickOutside: handleClose,
    onClose: handleClose,
    // force root scheme here to "break out" of the navbar's dark scheme
    scheme
  }), [handleClose, scheme]);

  if (error || isLoading || isUpToDate) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_StatusButton.StatusButton, {
    active: true,
    icon: _icons.PackageIcon,
    mode: "bleed",
    onClick: handleOpen,
    ref: setButtonElement,
    selected: open,
    statusTone: "primary"
  }), open && /*#__PURE__*/_react.default.createElement(_ChangelogDialog.ChangelogDialog, {
    changelog: changelog || EMPTY_ARRAY,
    currentVersion: currentVersion,
    dialogProps: dialogProps,
    latestVersion: latestVersion
  }));
}