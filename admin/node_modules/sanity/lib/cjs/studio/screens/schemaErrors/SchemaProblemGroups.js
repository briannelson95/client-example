"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SchemaProblemGroups = SchemaProblemGroups;

var _capitalize2 = _interopRequireDefault(require("lodash/capitalize"));

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _generateHelpUrl = require("@sanity/generate-help-url");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _templateObject, _templateObject2;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const TONES = {
  error: 'critical',
  warning: 'caution'
};

const SegmentSpan = _styledComponents.default.code(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  && {\n    background: none;\n    color: inherit;\n  }\n"])));

const ErrorMessageText = (0, _styledComponents.default)(_ui.Text)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  white-space: pre-line;\n"])));

function SchemaProblemGroups(props) {
  const {
    problemGroups
  } = props;
  const items = (0, _react.useMemo)(() => {
    const ret = [];

    for (const problemGroup of problemGroups) {
      for (const problem of problemGroup.problems) {
        ret.push({
          group: problemGroup,
          problem
        });
      }
    }

    return ret;
  }, [problemGroups]);
  return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    as: "ul",
    space: 4
  }, items.map((_ref, i) => {
    let {
      group,
      problem
    } = _ref;
    const isError = problem.severity === 'error';
    const isWarning = problem.severity === 'warning';
    const schemaType = getTypeInfo(group);
    return /*#__PURE__*/_react.default.createElement(_ui.Card, {
      border: true,
      key: i,
      padding: 4,
      radius: 2,
      tone: TONES[problem.severity]
    }, /*#__PURE__*/_react.default.createElement(_ui.Flex, null, /*#__PURE__*/_react.default.createElement(_ui.Box, {
      marginRight: 3
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      muted: true,
      size: 1
    }, isError && /*#__PURE__*/_react.default.createElement(_icons.ErrorOutlineIcon, null), isWarning && /*#__PURE__*/_react.default.createElement(_icons.WarningOutlineIcon, null))), /*#__PURE__*/_react.default.createElement(_ui.Box, {
      flex: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 1,
      weight: "semibold"
    }, schemaType ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (0, _capitalize2.default)(schemaType.type), " type \"", schemaType.name, "\"") : null))), /*#__PURE__*/_react.default.createElement(_ui.Box, {
      marginTop: 4
    }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
      border: true,
      overflow: "auto",
      padding: 2,
      tone: "inherit"
    }, /*#__PURE__*/_react.default.createElement(_ui.Breadcrumbs, {
      separator: /*#__PURE__*/_react.default.createElement(_ui.Text, {
        muted: true,
        size: 1
      }, "\u2192")
    }, group.path.map((segment, j) => {
      if (segment.kind === 'type') {
        return /*#__PURE__*/_react.default.createElement(_ui.Text, {
          key: j,
          size: 1
        }, /*#__PURE__*/_react.default.createElement(SegmentSpan, null, "".concat(_renderSegmentName(segment.name), ":").concat(segment.type)));
      }

      if (segment.kind === 'property') {
        return /*#__PURE__*/_react.default.createElement(_ui.Text, {
          key: j,
          size: 1
        }, /*#__PURE__*/_react.default.createElement(SegmentSpan, null, segment.name));
      }

      return null;
    })))), /*#__PURE__*/_react.default.createElement(_ui.Box, {
      as: "ul",
      marginTop: 4
    }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
      as: "li"
    }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 3
    }, /*#__PURE__*/_react.default.createElement(ErrorMessageText, {
      muted: true,
      size: 1
    }, problem.message), problem.helpId && /*#__PURE__*/_react.default.createElement(_ui.Text, {
      muted: true,
      size: 1
    }, /*#__PURE__*/_react.default.createElement("a", {
      href: (0, _generateHelpUrl.generateHelpUrl)(problem.helpId),
      target: "_blank",
      rel: "noopener noreferrer"
    }, "View documentation \u2192"))))));
  }));
}

function getTypeInfo(problem) {
  // note: unsure if the first segment here can ever be anything else than a type
  // a possible API improvement is to add schemaType info to the problem group interface itself
  const first = problem.path[0];

  if (first.kind === 'type') {
    return {
      name: first.name,
      type: first.type
    };
  }

  return null;
}

function _renderSegmentName(str) {
  if (str.startsWith('<unnamed_type_@_index')) {
    const parts = str.slice(1, -1).split('_');
    return "[".concat(parts[4], "]");
  }

  return str;
}