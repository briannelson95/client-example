"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AuthBoundary = AuthBoundary;

var _react = _interopRequireWildcard(require("react"));

var _screens = require("./screens");

var _activeWorkspaceMatcher = require("./activeWorkspaceMatcher");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function AuthBoundary(_ref) {
  let {
    children,
    AuthenticateComponent = _screens.AuthenticateScreen,
    LoadingComponent = _screens.LoadingScreen,
    NotAuthenticatedComponent = _screens.NotAuthenticatedScreen
  } = _ref;
  const [error, handleError] = (0, _react.useState)(null);
  if (error) throw error;
  const [loggedIn, setLoggedIn] = (0, _react.useState)('loading');
  const {
    activeWorkspace
  } = (0, _activeWorkspaceMatcher.useActiveWorkspace)();
  (0, _react.useEffect)(() => {
    var _activeWorkspace$auth, _activeWorkspace$auth2;

    (_activeWorkspace$auth = (_activeWorkspace$auth2 = activeWorkspace.auth).handleCallbackUrl) === null || _activeWorkspace$auth === void 0 ? void 0 : _activeWorkspace$auth.call(_activeWorkspace$auth2).catch(handleError);
  }, [activeWorkspace.auth]);
  (0, _react.useEffect)(() => {
    const subscription = activeWorkspace.auth.state.subscribe({
      next: _ref2 => {
        var _currentUser$roles;

        let {
          authenticated,
          currentUser
        } = _ref2;

        if ((currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$roles = currentUser.roles) === null || _currentUser$roles === void 0 ? void 0 : _currentUser$roles.length) === 0) {
          setLoggedIn('unauthorized');
          return;
        }

        setLoggedIn(authenticated ? 'logged-in' : 'logged-out');
      },
      error: handleError
    });
    return () => {
      subscription.unsubscribe();
    };
  }, [activeWorkspace]);
  if (loggedIn === 'loading') return /*#__PURE__*/_react.default.createElement(LoadingComponent, null);
  if (loggedIn === 'unauthorized') return /*#__PURE__*/_react.default.createElement(NotAuthenticatedComponent, null); // NOTE: there is currently a bug where the `AuthenticateComponent` will
  // flash after the first login with cookieless mode. See `createAuthStore`
  // for details

  if (loggedIn === 'logged-out') return /*#__PURE__*/_react.default.createElement(AuthenticateComponent, null);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children);
}