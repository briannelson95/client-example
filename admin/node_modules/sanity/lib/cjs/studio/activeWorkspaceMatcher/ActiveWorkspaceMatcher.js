"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ActiveWorkspaceMatcher = ActiveWorkspaceMatcher;

var _react = _interopRequireWildcard(require("react"));

var _history = require("history");

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _workspaces = require("../workspaces");

var _ActiveWorkspaceMatcherContext = require("./ActiveWorkspaceMatcherContext");

var _matchWorkspace = require("./matchWorkspace");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const createHistory = () => typeof document === 'undefined' ? (0, _history.createMemoryHistory)() : (0, _history.createBrowserHistory)();

function ActiveWorkspaceMatcher(_ref) {
  let {
    children,
    LoadingComponent,
    NotFoundComponent,
    unstable_history: historyProp
  } = _ref;
  const [error, setError] = (0, _react.useState)(null); // Throw error to closest error boundary

  if (error) throw error;
  const workspaces = (0, _workspaces.useWorkspaces)();
  const [activeWorkspace, setActiveWorkspace] = (0, _react.useState)(null);
  const [notFound, setNotFound] = (0, _react.useState)(false);
  const history = (0, _react.useMemo)(() => historyProp || createHistory(), [historyProp]);
  (0, _react.useEffect)(() => {
    const pathname$ = new _rxjs.Observable(observer => {
      const unlisten = history.listen(location => observer.next(location.pathname)); // Emit initial pathname

      observer.next(history.location.pathname || '/');
      return unlisten;
    });
    const subscription = pathname$.pipe((0, _operators.map)(pathname => (0, _matchWorkspace.matchWorkspace)({
      pathname,
      workspaces
    }))).subscribe({
      error: setError,
      next: result => {
        if (result.type === 'match') {
          setNotFound(false);
          setActiveWorkspace(result.workspace);
        }

        if (result.type === 'redirect') {
          history.replace(result.pathname);
        }

        if (result.type === 'not-found') {
          setNotFound(true);
        }
      }
    });
    return () => subscription.unsubscribe();
  }, [history, workspaces]);
  const setActiveWorkspaceName = (0, _react.useCallback)(workspaceName => {
    const foundWorkspace = workspaces.find(workspace => workspace.name === workspaceName);

    if (foundWorkspace) {
      history.push(foundWorkspace.basePath);
    }
  }, [history, workspaces]);
  const defaultWorkspaceName = workspaces[0].name;
  const handleNavigateToDefaultWorkspace = (0, _react.useCallback)(() => {
    setActiveWorkspaceName(defaultWorkspaceName);
  }, [setActiveWorkspaceName, defaultWorkspaceName]);
  const value = (0, _react.useMemo)(() => ({
    __internal: {
      history
    },
    activeWorkspace,
    setActiveWorkspace: setActiveWorkspaceName
  }), [history, activeWorkspace, setActiveWorkspaceName]);

  if (notFound) {
    return /*#__PURE__*/_react.default.createElement(NotFoundComponent, {
      onNavigateToDefaultWorkspace: handleNavigateToDefaultWorkspace
    });
  }

  if (!value.activeWorkspace) {
    return /*#__PURE__*/_react.default.createElement(LoadingComponent, null);
  }

  return /*#__PURE__*/_react.default.createElement(_ActiveWorkspaceMatcherContext.ActiveWorkspaceMatcherContext.Provider, {
    value: value
  }, children);
}