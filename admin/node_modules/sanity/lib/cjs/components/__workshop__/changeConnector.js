"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ChangeConnectorStory;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _scroll = require("../scroll");

var _ChangeFieldWrapper = require("../changeIndicators/ChangeFieldWrapper");

var _ChangeIndicator = require("../changeIndicators/ChangeIndicator");

var _ChangeConnectorRoot = require("../changeIndicators/overlay/ChangeConnectorRoot");

var _templateObject, _templateObject2;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const TestContainer = (0, _styledComponents.default)(_ui.Container).attrs({
  height: 'fill',
  width: 1
})(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  max-height: 320px;\n"])));
const Root = (0, _styledComponents.default)(_ChangeConnectorRoot.ChangeConnectorRoot)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  height: 100%;\n  outline: 1px solid var(--card-border-color);\n  position: relative;\n"])));

function ChangeConnectorStory() {
  const isReviewChangesOpen = true;
  const onOpenReviewChanges = (0, _react.useCallback)(() => undefined, []);
  const onSetFocus = (0, _react.useCallback)(() => undefined, []);
  const [focusPath, setFocusPath] = (0, _react.useState)([]);
  return /*#__PURE__*/_react.default.createElement(_ui.LayerProvider, null, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    height: "fill",
    tone: "transparent"
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    height: "fill",
    justify: "center",
    padding: 4,
    sizing: "border"
  }, /*#__PURE__*/_react.default.createElement(TestContainer, null, /*#__PURE__*/_react.default.createElement(Root, {
    isReviewChangesOpen: isReviewChangesOpen,
    onOpenReviewChanges: onOpenReviewChanges,
    onSetFocus: onSetFocus
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    height: "fill"
  }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    as: _scroll.ScrollContainer,
    "data-ui": "ScrollContainer",
    flex: 1,
    overflow: "auto",
    padding: 5,
    style: {
      position: 'relative'
    }
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 9
  }, /*#__PURE__*/_react.default.createElement(DebugFormField, {
    path: ['a'],
    focusPath: focusPath,
    setFocusPath: setFocusPath,
    value: "A",
    compareValue: "B"
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "Field A")), /*#__PURE__*/_react.default.createElement(DebugFormField, {
    path: ['b'],
    focusPath: focusPath,
    setFocusPath: setFocusPath,
    value: "B",
    compareValue: "C"
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "Field B")), /*#__PURE__*/_react.default.createElement(DebugFormField, {
    path: ['c'],
    focusPath: focusPath,
    setFocusPath: setFocusPath,
    value: "C",
    compareValue: "D"
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "Field C")))), /*#__PURE__*/_react.default.createElement(_ui.Card, {
    as: _scroll.ScrollContainer,
    "data-ui": "ScrollContainer",
    borderLeft: true,
    flex: 1,
    overflow: "auto",
    padding: 5,
    style: {
      position: 'relative'
    }
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    flex: 1,
    space: 9
  }, /*#__PURE__*/_react.default.createElement(DebugDiffField, {
    path: ['a']
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "Diff A")), /*#__PURE__*/_react.default.createElement(DebugDiffField, {
    path: ['b']
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "Diff B")), /*#__PURE__*/_react.default.createElement(DebugDiffField, {
    path: ['c']
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "Diff C"))))))))));
}

function DebugFormField(props) {
  const {
    children,
    focusPath,
    path,
    value,
    compareValue,
    setFocusPath
  } = props;
  const handleBlur = (0, _react.useCallback)(() => setFocusPath([]), [setFocusPath]);
  const handleFocus = (0, _react.useCallback)(() => setFocusPath(path), [path, setFocusPath]);
  return /*#__PURE__*/_react.default.createElement(_ChangeIndicator.ChangeIndicator, {
    hasFocus: false,
    path: path,
    isChanged: false
  }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    border: true,
    onBlur: handleBlur,
    onFocus: handleFocus,
    padding: 3,
    radius: 1,
    tabIndex: 0
  }, children));
}

function DebugDiffField(props) {
  const {
    children,
    path
  } = props;
  const [hovered, setHovered] = (0, _react.useState)(false);
  const handleMouseEnter = (0, _react.useCallback)(() => setHovered(true), []);
  const handleMouseLeave = (0, _react.useCallback)(() => setHovered(false), []);
  return /*#__PURE__*/_react.default.createElement(_ChangeFieldWrapper.ChangeFieldWrapper, {
    hasHover: hovered,
    path: path
  }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    borderLeft: true,
    padding: 3,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }, children));
}