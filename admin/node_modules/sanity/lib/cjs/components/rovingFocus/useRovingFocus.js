"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRovingFocus = useRovingFocus;

var _react = require("react");

const MUTATION_ATTRIBUTE_FILTER = ['aria-hidden', 'disabled', 'href'];
const FOCUSABLE = 'a[href], button, input, textarea, select, details, [tabindex]:not([tabindex="-1"])';

function getFocusableElements(element) {
  return [...element.querySelectorAll(FOCUSABLE)].filter(el => !el.hasAttribute('disabled') && el.getAttribute('aria-hidden') !== 'true');
}
/** This hook handles focus with the keyboard arrows.
 *
 * - Roving focus definition [https://a11y-solutions.stevenwoodson.com/solutions/focus/roving-focus/]
 * - Example usage:
 * 
 * ```
  function MyComponent() {
      const [rootElement, setRootElement] = setRootElement(null)

      useRovingFocus({
        rootElement: rootElement,
      })

      return (
        <div ref={setRootElement}>
          <button>Button</button>
          <button>Button</button>
          <button>Button</button>
        </div>
      )
  }
  ```
 */


function useRovingFocus(props) {
  const {
    direction = 'horizontal',
    initialFocus,
    loop = true,
    navigation = ['arrows'],
    pause = false,
    rootElement
  } = props;
  const [focusedIndex, setFocusedIndex] = (0, _react.useState)(-1);
  const [focusableElements, setFocusableElements] = (0, _react.useState)([]);
  const focusableLen = focusableElements.length;
  const lastFocusableIndex = focusableLen - 1;
  /**
   * Determine what keys to listen to depending on direction
   */

  const nextKey = direction === 'horizontal' ? 'ArrowRight' : 'ArrowDown';
  const prevKey = direction === 'horizontal' ? 'ArrowLeft' : 'ArrowUp';
  /**
   * Set focusable elements in state
   */

  const handleSetElements = (0, _react.useCallback)(() => {
    if (rootElement) {
      const els = getFocusableElements(rootElement);
      setFocusableElements(els);
    }
  }, [rootElement]);
  /**
   * Set focused index
   */

  const handleFocus = (0, _react.useCallback)(index => {
    setFocusedIndex(index);
  }, []);
  /**
   * Handle increment/decrement of focusedIndex
   */

  const handleKeyDown = (0, _react.useCallback)(event => {
    if (pause) {
      return;
    }

    const focusPrev = () => {
      event.preventDefault();
      setFocusedIndex(prevIndex => {
        const next = (prevIndex + lastFocusableIndex) % focusableLen;

        if (!loop && next === lastFocusableIndex) {
          return prevIndex;
        }

        return next;
      });
    };

    const focusNext = () => {
      event.preventDefault();
      setFocusedIndex(prevIndex => {
        const next = (prevIndex + 1) % focusableLen;

        if (!loop && next === 0) {
          return prevIndex;
        }

        return next;
      });
    };

    if (event.key === 'Tab' && navigation.includes('tab')) {
      if (event.shiftKey) {
        focusPrev();
      } else {
        focusNext();
      }
    }

    if (navigation.includes('arrows')) {
      if (event.key === prevKey) {
        focusPrev();
      }

      if (event.key === nextKey) {
        focusNext();
      }
    }
  }, [pause, prevKey, navigation, nextKey, lastFocusableIndex, focusableLen, loop]);
  /**
   * Set focusable elements on mount
   */

  (0, _react.useEffect)(() => {
    handleSetElements();
  }, [handleSetElements, initialFocus, direction]);
  /**
   * Listen to DOM mutations to update focusableElements with latest state
   */

  (0, _react.useEffect)(() => {
    const mo = new MutationObserver(handleSetElements);

    if (rootElement) {
      mo.observe(rootElement, {
        childList: true,
        subtree: true,
        attributeFilter: MUTATION_ATTRIBUTE_FILTER
      });
    }

    return () => {
      mo.disconnect();
    };
  }, [focusableElements, handleSetElements, rootElement]);
  /**
   * Set focus on elements in focusableElements depending on focusedIndex
   */

  (0, _react.useEffect)(() => {
    focusableElements.forEach((el, index) => {
      if (index === focusedIndex) {
        el.setAttribute('tabIndex', '0');
        el.setAttribute('aria-selected', 'true');
        el.focus();

        el.onfocus = () => handleFocus(index);

        el.onblur = () => handleFocus(-1);
      } else {
        el.setAttribute('tabIndex', '-1');
        el.setAttribute('aria-selected', 'false');

        el.onfocus = () => handleFocus(index);
      }
    });

    if (focusedIndex === -1 && focusableElements) {
      var _focusableElements$in;

      const initialIndex = initialFocus === 'last' ? lastFocusableIndex : 0;
      (_focusableElements$in = focusableElements[initialIndex]) === null || _focusableElements$in === void 0 ? void 0 : _focusableElements$in.setAttribute('tabIndex', '0');
    }
  }, [focusableElements, focusedIndex, handleFocus, initialFocus, lastFocusableIndex]);
  /**
   * Listen to key down events on rootElement
   */

  (0, _react.useEffect)(() => {
    rootElement === null || rootElement === void 0 ? void 0 : rootElement.addEventListener('keydown', handleKeyDown);
    return () => {
      rootElement === null || rootElement === void 0 ? void 0 : rootElement.removeEventListener('keydown', handleKeyDown);
    };
  }, [handleKeyDown, rootElement]);
  return undefined;
}