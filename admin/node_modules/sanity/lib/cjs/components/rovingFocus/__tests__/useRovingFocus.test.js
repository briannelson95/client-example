"use strict";

require("@testing-library/jest-dom/extend-expect");

var _react = require("@testing-library/react");

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _react2 = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _ = require("..");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line import/no-unassigned-import
function RenderTestComponent(props) {
  const {
    direction,
    loop,
    withDisabledButtons,
    initialFocus
  } = props;
  const [rootElement, setRootElement] = (0, _react2.useState)(null);
  (0, _.useRovingFocus)({
    direction: direction,
    loop: loop,
    rootElement: rootElement,
    initialFocus: initialFocus
  });
  return /*#__PURE__*/_react2.default.createElement(_ui.ThemeProvider, {
    theme: _ui.studioTheme
  }, /*#__PURE__*/_react2.default.createElement(_ui.Card, {
    ref: setRootElement,
    id: "rootElement"
  }, /*#__PURE__*/_react2.default.createElement(_ui.Button, {
    text: "Test",
    disabled: withDisabledButtons
  }), /*#__PURE__*/_react2.default.createElement(_ui.Button, {
    text: "Test"
  }), /*#__PURE__*/_react2.default.createElement(_ui.Button, {
    text: "Test",
    disabled: withDisabledButtons
  }), /*#__PURE__*/_react2.default.createElement(_ui.Button, {
    text: "Test"
  })));
}

describe('base/useRovingFocus:', () => {
  /**
   * Horizontal direction
   */
  it('horizontal direction', () => {
    const {
      container
    } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(RenderTestComponent, null));
    const rootElement = container.querySelector('#rootElement');
    const buttons = rootElement.querySelectorAll('button'); // Focus button #0 on tab

    _userEvent.default.tab();

    expect(buttons[0]).toBe(document.activeElement); // Focus button #1 on arrow right

    _react.fireEvent.keyDown(rootElement, {
      key: 'ArrowRight'
    });

    expect(buttons[1]).toBe(document.activeElement); // Focus button #2 on arrow right

    _react.fireEvent.keyDown(rootElement, {
      key: 'ArrowRight'
    });

    expect(buttons[2]).toBe(document.activeElement); // Focus button #3 on arrow right

    _react.fireEvent.keyDown(rootElement, {
      key: 'ArrowRight'
    });

    expect(buttons[3]).toBe(document.activeElement); // Focus button #0 on arrow right

    _react.fireEvent.keyDown(rootElement, {
      key: 'ArrowRight'
    });

    expect(buttons[0]).toBe(document.activeElement); // Focus button #3 on arrow left

    _react.fireEvent.keyDown(rootElement, {
      key: 'ArrowLeft'
    });

    expect(buttons[3]).toBe(document.activeElement); // Focus button #2 on arrow left

    _react.fireEvent.keyDown(rootElement, {
      key: 'ArrowLeft'
    });

    expect(buttons[2]).toBe(document.activeElement);
  });
  /**
   * Vertical direction
   */

  it('vertical direction', () => {
    const {
      container
    } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(RenderTestComponent, {
      direction: "vertical"
    }));
    const rootElement = container.querySelector('#rootElement');
    const buttons = rootElement.querySelectorAll('button'); // Focus button #0 on tab

    _userEvent.default.tab();

    expect(buttons[0]).toBe(document.activeElement); // Focus button #1 on arrow down

    _react.fireEvent.keyDown(rootElement, {
      key: 'ArrowDown'
    });

    expect(buttons[1]).toBe(document.activeElement); // Focus button #2 on arrow down

    _react.fireEvent.keyDown(rootElement, {
      key: 'ArrowDown'
    });

    expect(buttons[2]).toBe(document.activeElement); // Focus button #3 on arrow down

    _react.fireEvent.keyDown(rootElement, {
      key: 'ArrowDown'
    });

    expect(buttons[3]).toBe(document.activeElement); // Focus button #0 on arrow down

    _react.fireEvent.keyDown(rootElement, {
      key: 'ArrowDown'
    });

    expect(buttons[0]).toBe(document.activeElement); // Focus button #3 on arrow right

    _react.fireEvent.keyDown(rootElement, {
      key: 'ArrowUp'
    });

    expect(buttons[3]).toBe(document.activeElement); // Focus button #2 on arrow right

    _react.fireEvent.keyDown(rootElement, {
      key: 'ArrowUp'
    });

    expect(buttons[2]).toBe(document.activeElement);
  });
  /**
   * With disabled buttons
   */

  it('with disabled buttons', () => {
    const {
      container
    } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(RenderTestComponent, {
      withDisabledButtons: true
    }));
    const rootElement = container.querySelector('#rootElement');
    const buttons = rootElement.querySelectorAll('button'); // Focus button #1 on tab

    _userEvent.default.tab();

    expect(buttons[1]).toBe(document.activeElement); // Focus button #3 on arrow right (skips #2 because it is disabled)

    _react.fireEvent.keyDown(rootElement, {
      key: 'ArrowRight'
    });

    expect(buttons[3]).toBe(document.activeElement); // Focus button #1 on arrow right (skips #0 because it is disabled)

    _react.fireEvent.keyDown(rootElement, {
      key: 'ArrowRight'
    });

    expect(buttons[1]).toBe(document.activeElement);
  });
  /**
   * Without loop
   */

  it('without loop', () => {
    const {
      container
    } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(RenderTestComponent, {
      loop: false
    }));
    const rootElement = container.querySelector('#rootElement');
    const buttons = rootElement.querySelectorAll('button'); // Focus button #0 on tab

    _userEvent.default.tab();

    expect(buttons[0]).toBe(document.activeElement); // Focus button #1 on arrow right

    _react.fireEvent.keyDown(rootElement, {
      key: 'ArrowRight'
    });

    expect(buttons[1]).toBe(document.activeElement); // Focus button #2 on arrow right

    _react.fireEvent.keyDown(rootElement, {
      key: 'ArrowRight'
    });

    expect(buttons[2]).toBe(document.activeElement); // Focus button #3 on arrow right

    _react.fireEvent.keyDown(rootElement, {
      key: 'ArrowRight'
    });

    expect(buttons[3]).toBe(document.activeElement); // Focus button #3 on arrow right (because loop is disabled, the focus stays on #3)

    _react.fireEvent.keyDown(rootElement, {
      key: 'ArrowRight'
    });

    expect(buttons[3]).toBe(document.activeElement);
  });
  /**
   * Initial focus last
   */

  it('initial focus last', () => {
    const {
      container
    } = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(RenderTestComponent, {
      initialFocus: "last"
    }));
    const rootElement = container.querySelector('#rootElement');
    const buttons = rootElement.querySelectorAll('button'); // Focus button #3 on tab (the last button)

    _userEvent.default.tab();

    expect(buttons[3]).toBe(document.activeElement); // Focus button #0 on arrow right

    _react.fireEvent.keyDown(rootElement, {
      key: 'ArrowRight'
    });

    expect(buttons[0]).toBe(document.activeElement);
  });
});