"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextWithToneStyle = exports.TextWithTone = void 0;

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _ui = require("@sanity/ui");

var _react = _interopRequireDefault(require("react"));

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const TextWithToneStyle = (0, _styledComponents.default)(_ui.Text)(_ref => {
  let {
    $tone,
    theme
  } = _ref;
  const tone = theme.sanity.color.muted[$tone];
  return (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      &:not([data-muted]) {\n        --card-fg-color: ", ";\n      }\n\n      &[data-dimmed] {\n        opacity: 0.3;\n      }\n    "])), tone ? tone.enabled.fg : undefined);
});
exports.TextWithToneStyle = TextWithToneStyle;

const TextWithTone = /*#__PURE__*/_react.default.forwardRef(function TextWithTone(props, ref) {
  const {
    tone,
    dimmed,
    muted,
    ...rest
  } = props;
  return /*#__PURE__*/_react.default.createElement(TextWithToneStyle, _extends({
    "data-ui": "TextWithTone",
    "data-dimmed": dimmed ? '' : undefined,
    "data-muted": muted ? '' : undefined,
    $tone: tone,
    muted: muted,
    ref: ref
  }, rest));
});

exports.TextWithTone = TextWithTone;