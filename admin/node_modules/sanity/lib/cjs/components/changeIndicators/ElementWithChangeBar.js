"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ElementWithChangeBar = ElementWithChangeBar;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _ConnectorContext = require("./ConnectorContext");

var _ElementWithChangeBar = require("./ElementWithChangeBar.styled");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ElementWithChangeBar(props) {
  const {
    children,
    disabled,
    hasFocus,
    isChanged,
    withHoverEffect = true
  } = props;
  const [hover, setHover] = (0, _react.useState)(false);

  const {
    onOpenReviewChanges,
    isReviewChangesOpen
  } = _react.default.useContext(_ConnectorContext.ConnectorContext);

  const {
    zIndex
  } = (0, _ui.useLayer)();
  const handleMouseEnter = (0, _react.useCallback)(() => setHover(true), []);
  const handleMouseLeave = (0, _react.useCallback)(() => setHover(false), []);
  const changeBar = (0, _react.useMemo)(() => disabled || !isChanged ? null : /*#__PURE__*/_react.default.createElement(_ElementWithChangeBar.ChangeBar, {
    "data-testid": "change-bar",
    $zIndex: zIndex
  }, /*#__PURE__*/_react.default.createElement(_ElementWithChangeBar.ChangeBarMarker, {
    "data-testid": "change-bar__marker"
  }), /*#__PURE__*/_react.default.createElement(_ElementWithChangeBar.ChangeBarButton, {
    "aria-label": "Review changes",
    "data-testid": "change-bar__button",
    onClick: isReviewChangesOpen ? undefined : onOpenReviewChanges,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    tabIndex: -1,
    type: "button",
    $withHoverEffect: withHoverEffect
  })), [disabled, isChanged, zIndex, isReviewChangesOpen, onOpenReviewChanges, handleMouseEnter, handleMouseLeave, withHoverEffect]);
  return /*#__PURE__*/_react.default.createElement(_ElementWithChangeBar.ChangeBarWrapper, {
    changed: isChanged,
    "data-testid": "change-bar-wrapper",
    disabled: disabled,
    focus: hasFocus,
    hover: hover,
    isReviewChangeOpen: isReviewChangesOpen
  }, /*#__PURE__*/_react.default.createElement(_ElementWithChangeBar.FieldWrapper, {
    "data-testid": "change-bar__field-wrapper"
  }, children), changeBar);
}