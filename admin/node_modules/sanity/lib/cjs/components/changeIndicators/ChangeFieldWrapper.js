"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChangeFieldWrapper = void 0;

var PathUtils = _interopRequireWildcard(require("@sanity/util/paths"));

var _react = _interopRequireWildcard(require("react"));

var _reactFastCompare = _interopRequireDefault(require("react-fast-compare"));

var _tracker = require("./tracker");

var _ConnectorContext = require("./ConnectorContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * This is used to draw the bar that wraps the diff components in the changes panel
 */
const ChangeFieldWrapper = props => {
  const ref = _react.default.useRef(null);

  const {
    onSetFocus
  } = _react.default.useContext(_ConnectorContext.ConnectorContext);

  const [isHover, setHover] = _react.default.useState(false);

  const onMouseEnter = _react.default.useCallback(() => {
    setHover(true);
  }, []);

  const onMouseLeave = _react.default.useCallback(() => {
    setHover(false);
  }, []);

  (0, _tracker.useReporter)("change-".concat(PathUtils.toString(props.path)), () => ({
    element: ref.current,
    path: props.path,
    isChanged: true,
    hasFocus: false,
    hasHover: isHover,
    hasRevertHover: props.hasHover
  }), // note: deepCompare should be ok here since we're not comparing deep values
  _reactFastCompare.default);
  const handleClick = (0, _react.useCallback)(event => {
    setFocusWithStopPropagation(event, onSetFocus, props.path);
  }, [onSetFocus, props.path]);
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: ref,
    onClick: handleClick,
    onMouseLeave: onMouseLeave,
    onMouseEnter: onMouseEnter
  }, props.children);
}; // Stop the propagation here, or it will trigger the parent diff component's onClick.


exports.ChangeFieldWrapper = ChangeFieldWrapper;

function setFocusWithStopPropagation(event, onSetFocus, path) {
  event.stopPropagation();
  onSetFocus(path);
}