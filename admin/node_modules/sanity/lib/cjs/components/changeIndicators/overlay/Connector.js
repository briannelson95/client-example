"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Connector = void 0;

var _react = _interopRequireWildcard(require("react"));

var _constants = require("../constants");

var _connectorPath = require("./connectorPath");

var _mapConnectorToLine = require("./mapConnectorToLine");

var _Connector = require("./Connector.styled");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Connector = /*#__PURE__*/(0, _react.memo)(function Connector(_ref) {
  let {
    from,
    to
  } = _ref;
  const line = (0, _mapConnectorToLine.mapConnectorToLine)({
    from,
    to
  }); // If both ends of the connector are out of bounds, then do not render

  if (line.from.outOfBounds && line.to.outOfBounds) {
    return null;
  }

  const linePathDescription = (0, _connectorPath.generateConnectorPath)(line);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_Connector.InteractivePath, {
    d: linePathDescription,
    strokeWidth: _constants.INTERACTIVE_STROKE_WIDTH
  }), /*#__PURE__*/_react.default.createElement(_Connector.ConnectorPath, {
    d: linePathDescription,
    strokeWidth: _constants.STROKE_WIDTH
  }), /*#__PURE__*/_react.default.createElement(_Connector.RightBarWrapper, {
    top: to.rect.top,
    left: to.rect.left,
    height: to.rect.height,
    width: _constants.STROKE_WIDTH,
    bounds: to.bounds
  }), line.from.isAbove && /*#__PURE__*/_react.default.createElement(_Connector.ConnectorPath, {
    d: (0, _connectorPath.arrowPath)(line.from.left + _constants.ARROW_MARGIN_X, line.from.bounds.top - _constants.ARROW_THRESHOLD + _constants.ARROW_MARGIN_Y, -1),
    strokeWidth: _constants.STROKE_WIDTH
  }), line.from.isBelow && /*#__PURE__*/_react.default.createElement(_Connector.ConnectorPath, {
    d: (0, _connectorPath.arrowPath)(line.from.left + _constants.ARROW_MARGIN_X, line.from.bounds.top + line.from.bounds.height + _constants.ARROW_THRESHOLD - _constants.ARROW_MARGIN_Y, 1),
    strokeWidth: _constants.STROKE_WIDTH
  }), line.to.isAbove && /*#__PURE__*/_react.default.createElement(_Connector.ConnectorPath, {
    d: (0, _connectorPath.arrowPath)(line.to.bounds.left + _constants.ARROW_MARGIN_X, line.to.bounds.top - _constants.ARROW_THRESHOLD + _constants.ARROW_MARGIN_Y, -1),
    strokeWidth: _constants.STROKE_WIDTH
  }), line.to.isBelow && /*#__PURE__*/_react.default.createElement(_Connector.ConnectorPath, {
    d: (0, _connectorPath.arrowPath)(line.to.bounds.left + _constants.ARROW_MARGIN_X, line.to.bounds.top + line.to.bounds.height + _constants.ARROW_THRESHOLD - _constants.ARROW_MARGIN_Y, 1),
    strokeWidth: _constants.STROKE_WIDTH
  }), _constants.DEBUG && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_Connector.DebugRect, {
    x: line.from.bounds.left,
    y: line.from.bounds.top,
    width: line.from.bounds.width,
    height: line.from.bounds.height,
    stroke: "green"
  }), /*#__PURE__*/_react.default.createElement(_Connector.DebugRect, {
    x: line.to.bounds.left,
    y: line.to.bounds.top,
    width: line.to.bounds.width,
    height: line.to.bounds.height,
    stroke: "yellow"
  }), !line.from.outOfBounds && /*#__PURE__*/_react.default.createElement("g", {
    transform: "translate(".concat(line.from.bounds.left, " ").concat(line.from.bounds.top, ")")
  }, /*#__PURE__*/_react.default.createElement(_Connector.DebugRect, {
    width: line.from.bounds.width,
    height: line.from.bounds.height,
    strokeWidth: _constants.STROKE_WIDTH,
    stroke: "green"
  })), !line.to.outOfBounds && /*#__PURE__*/_react.default.createElement("g", {
    transform: "translate(".concat(line.to.bounds.left, " ").concat(line.to.bounds.top, ")")
  }, /*#__PURE__*/_react.default.createElement(_Connector.DebugRect, {
    width: line.to.bounds.width,
    height: line.to.bounds.height,
    strokeWidth: _constants.STROKE_WIDTH,
    stroke: "red"
  }))));
});
exports.Connector = Connector;