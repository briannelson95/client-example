"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChangeConnectorRoot = void 0;
exports.DisabledChangeConnectorRoot = DisabledChangeConnectorRoot;
exports.EnabledChangeConnectorRoot = EnabledChangeConnectorRoot;

var _react = _interopRequireWildcard(require("react"));

var _scroll = require("../../scroll");

var _ConnectorContext = require("../ConnectorContext");

var _constants = require("../constants");

var _tracker = require("../tracker");

var _ConnectorsOverlay = require("./ConnectorsOverlay");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function EnabledChangeConnectorRoot(_ref) {
  let {
    children,
    className,
    isReviewChangesOpen,
    onOpenReviewChanges,
    onSetFocus,
    ...restProps
  } = _ref;

  const [rootElement, setRootElement] = _react.default.useState();

  const contextValue = (0, _react.useMemo)(() => ({
    isReviewChangesOpen,
    onOpenReviewChanges,
    onSetFocus
  }), [isReviewChangesOpen, onOpenReviewChanges, onSetFocus]);
  return /*#__PURE__*/_react.default.createElement(_ConnectorContext.ConnectorContext.Provider, {
    value: contextValue
  }, /*#__PURE__*/_react.default.createElement(_tracker.Tracker, null, /*#__PURE__*/_react.default.createElement(_scroll.ScrollContainer, _extends({}, restProps, {
    ref: setRootElement,
    className: className
  }), children, rootElement && /*#__PURE__*/_react.default.createElement(_ConnectorsOverlay.ConnectorsOverlay, {
    rootElement: rootElement,
    onSetFocus: onSetFocus
  }))));
}

function DisabledChangeConnectorRoot(_ref2) {
  let {
    children,
    className
  } = _ref2;
  return /*#__PURE__*/_react.default.createElement(_scroll.ScrollContainer, {
    className: className
  }, children);
}

const ChangeConnectorRoot = _constants.ENABLED ? EnabledChangeConnectorRoot : DisabledChangeConnectorRoot;
exports.ChangeConnectorRoot = ChangeConnectorRoot;