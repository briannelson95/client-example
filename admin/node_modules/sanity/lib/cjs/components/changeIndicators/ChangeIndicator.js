"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChangeIndicator = ChangeIndicator;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _reactFastCompare = _interopRequireDefault(require("react-fast-compare"));

var PathUtils = _interopRequireWildcard(require("@sanity/util/paths"));

var _empty = require("../../form/utils/empty");

var _tracker = require("./tracker");

var _ElementWithChangeBar = require("./ElementWithChangeBar");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const ChangeBarWrapper = /*#__PURE__*/(0, _react.memo)(function ChangeBarWrapper(props) {
  const {
    children,
    className,
    disabled,
    hasFocus,
    isChanged,
    path = _empty.EMPTY_ARRAY,
    withHoverEffect
  } = props;
  const layer = (0, _ui.useLayer)();

  const [hasHover, setHover] = _react.default.useState(false);

  const onMouseEnter = _react.default.useCallback(() => setHover(true), []);

  const onMouseLeave = _react.default.useCallback(() => setHover(false), []);

  const ref = _react.default.useRef(null);

  (0, _tracker.useReporter)(disabled ? null : "field-".concat(PathUtils.toString(path)), () => ({
    element: ref.current,
    path: path,
    isChanged: isChanged,
    hasFocus: hasFocus,
    hasHover: hasHover,
    zIndex: layer.zIndex
  }), _reactFastCompare.default // note: deepCompare should be ok here since we're not comparing deep values
  );
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: ref,
    className: className,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave
  }, /*#__PURE__*/_react.default.createElement(_ElementWithChangeBar.ElementWithChangeBar, {
    hasFocus: hasFocus,
    isChanged: isChanged,
    disabled: disabled,
    withHoverEffect: withHoverEffect
  }, children));
});

function ChangeIndicator(props) {
  const {
    children,
    className,
    disabled,
    hasFocus,
    isChanged,
    path,
    withHoverEffect
  } = props;
  return /*#__PURE__*/_react.default.createElement(ChangeBarWrapper, {
    className: className,
    disabled: disabled,
    path: path,
    hasFocus: hasFocus,
    isChanged: isChanged,
    withHoverEffect: withHoverEffect
  }, children);
}