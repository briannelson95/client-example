"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CircularProgress = CircularProgress;

var _color = require("@sanity/color");

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _templateObject, _templateObject2, _templateObject3;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const SIZE = 43;
const STROKE_WIDTH = 3;

const Root = _styledComponents.default.svg(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  width: ", "px;\n  height: ", "px;\n  transform: rotate(-90deg);\n"])), SIZE, SIZE);

const BgCircle = _styledComponents.default.circle(_ref => {
  let {
    theme
  } = _ref;
  const {
    color
  } = theme.sanity;
  return (0, _styledComponents.css)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    fill: none;\n    stroke: ", ";\n    stroke-width: ", "px;\n  "])), _color.hues.gray[color.dark ? 900 : 100].hex, STROKE_WIDTH);
});

const ProgressCircle = _styledComponents.default.circle(_ref2 => {
  let {
    theme
  } = _ref2;
  const {
    color
  } = theme.sanity;
  return (0, _styledComponents.css)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n    fill: none;\n    stroke: ", ";\n    stroke-width: ", "px;\n    transition: stroke-dashoffset 75ms;\n  "])), _color.hues.blue[color.dark ? 400 : 500].hex, STROKE_WIDTH);
});

function CircularProgress(props) {
  const {
    value: valueProp
  } = props;
  const value = Math.min(Math.max(valueProp, 0), 100);
  const radius = SIZE / 2 - STROKE_WIDTH / 2;
  const circ = 2 * Math.PI * radius;
  const offset = (100 - value) / 100 * circ;
  const viewBox = "".concat(SIZE / 2, " ").concat(SIZE / 2, " ").concat(SIZE, " ").concat(SIZE);
  return /*#__PURE__*/_react.default.createElement(Root, {
    viewBox: viewBox
  }, /*#__PURE__*/_react.default.createElement(BgCircle, {
    cx: SIZE,
    cy: SIZE,
    r: radius
  }), /*#__PURE__*/_react.default.createElement(ProgressCircle, {
    cx: SIZE,
    cy: SIZE,
    r: radius,
    style: {
      strokeDasharray: circ,
      strokeDashoffset: "".concat(offset, "px")
    }
  }));
}