"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CollapseMenu = void 0;

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _CollapseOverflowMenu = require("./CollapseOverflowMenu");

var _ObserveElement = require("./ObserveElement");

var _CollapseMenuDivider = require("./CollapseMenuDivider");

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const FOCUS_RING_PADDING = 3;
const OPTION_STYLE = (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  list-style: none;\n  display: flex;\n  white-space: nowrap;\n\n  &[data-hidden='true'] {\n    opacity: 0;\n    visibility: hidden;\n  }\n"])));
const OuterFlex = (0, _styledComponents.default)(_ui.Flex)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  padding: ", "px;\n  margin: -", "px;\n  box-sizing: border-box;\n"])), FOCUS_RING_PADDING, FOCUS_RING_PADDING);
const RootFlex = (0, _styledComponents.default)(_ui.Flex)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  border-radius: inherit;\n  position: relative;\n"])));
const RowFlex = (0, _styledComponents.default)(_ui.Flex)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  width: max-content;\n\n  &[data-hidden='true'] {\n    height: 0px;\n    visibility: hidden;\n  }\n"])));
const OptionObserveElement = (0, _styledComponents.default)(_ObserveElement.ObserveElement)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  ", "\n"])), OPTION_STYLE);
const OptionHiddenFlex = (0, _styledComponents.default)(_ui.Flex)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  ", "\n"])), OPTION_STYLE);

function _isReactElement(node) {
  return Boolean(node);
}

const CollapseMenu = /*#__PURE__*/(0, _react.forwardRef)(function CollapseMenu(props, ref) {
  const {
    children: childrenProp,
    collapsed,
    collapseText = true,
    disableRestoreFocusOnClose,
    gap,
    menuButtonProps,
    onMenuClose
  } = props;
  const [rootEl, setRootEl] = (0, _react.useState)(null);
  const [hiddenRowEl, setHiddenRowEl] = (0, _react.useState)(null);
  const rootRect = (0, _ui.useElementRect)(rootEl);
  const [menuOptions, setMenuOptions] = (0, _react.useState)([]);
  const hasOverflow = (0, _react.useMemo)(() => {
    if (rootRect && rootEl && hiddenRowEl) {
      return rootRect.width < hiddenRowEl.scrollWidth;
    }

    return false;
  }, [hiddenRowEl, rootEl, rootRect]);
  const menuButton = (0, _react.useMemo)(() => (menuButtonProps === null || menuButtonProps === void 0 ? void 0 : menuButtonProps.button) || /*#__PURE__*/_react.default.createElement(_ui.Button, {
    icon: _icons.EllipsisVerticalIcon,
    mode: "bleed"
  }), [menuButtonProps]);
  const intersectionOptions = (0, _react.useMemo)(() => ({
    root: rootEl,
    threshold: 1,
    rootMargin: '2px'
  }), [rootEl]);
  const children = (0, _react.useMemo)(() => _react.default.Children.toArray(childrenProp).filter(_isReactElement), [childrenProp]);
  const menuOptionsArray = (0, _react.useMemo)( // eslint-disable-next-line max-nested-callbacks
  () => children.filter(_ref => {
    let {
      key
    } = _ref;
    return menuOptions.find(o => o.key === key);
  }), [children, menuOptions]);
  const menuIsVisible = (0, _react.useMemo)(() => collapsed || menuOptionsArray.length > 0, [collapsed, menuOptionsArray.length]);
  const isInMenu = (0, _react.useCallback)(childKey => menuOptionsArray.some(o => o.key === childKey), [menuOptionsArray]);
  const handleIntersection = (0, _react.useCallback)((e, child) => {
    const exists = isInMenu(child.key);

    if (!e.isIntersecting && !exists) {
      setMenuOptions(prev => [child, ...prev]);
    }

    if (e.isIntersecting && exists) {
      const updatedOptions = menuOptionsArray.filter(_ref2 => {
        let {
          key
        } = _ref2;
        return key !== child.key;
      });
      setMenuOptions(updatedOptions);
    }
  }, [isInMenu, menuOptionsArray]);
  const items = (0, _react.useMemo)(() => children.map(child => {
    const {
      collapsedProps,
      expandedProps
    } = child.props;
    const modeProps = hasOverflow ? collapsedProps : expandedProps;
    const text = hasOverflow && collapseText ? undefined : child.props.text;
    return /*#__PURE__*/(0, _react.cloneElement)(child, { ...modeProps,
      text: text
    });
  }), [children, collapseText, hasOverflow]);

  if (collapsed) {
    return /*#__PURE__*/_react.default.createElement(_CollapseOverflowMenu.CollapseOverflowMenu, {
      disableRestoreFocusOnClose: disableRestoreFocusOnClose,
      menuButton: menuButton,
      menuButtonProps: menuButtonProps,
      menuOptionsArray: children,
      onMenuClose: onMenuClose
    });
  }

  return /*#__PURE__*/_react.default.createElement(OuterFlex, {
    align: "center",
    "data-ui": "CollapseMenu",
    overflow: "hidden",
    sizing: "border",
    ref: ref
  }, /*#__PURE__*/_react.default.createElement(RootFlex, {
    direction: "column",
    flex: 1,
    justify: "center",
    ref: setRootEl
  }, /*#__PURE__*/_react.default.createElement(RowFlex, {
    gap: gap
  }, items.map((child, index) => {
    const {
      dividerBefore,
      tooltipText = '',
      tooltipProps = {}
    } = child.props;
    const hidden = isInMenu(child.key);
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
      key: child.key
    }, dividerBefore && index !== 0 && /*#__PURE__*/_react.default.createElement(_CollapseMenuDivider.CollapseMenuDivider, {
      hidden: hidden
    }), /*#__PURE__*/_react.default.createElement(OptionObserveElement, {
      options: intersectionOptions // eslint-disable-next-line react/jsx-no-bind
      ,
      callback: e => handleIntersection(e[0], child),
      "aria-hidden": hidden,
      "data-hidden": hidden
    }, /*#__PURE__*/_react.default.createElement(_ui.Tooltip, _extends({
      portal: true,
      disabled: !tooltipText,
      content: /*#__PURE__*/_react.default.createElement(_ui.Box, {
        padding: 2,
        sizing: "border"
      }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
        size: 1
      }, tooltipText))
    }, tooltipProps), /*#__PURE__*/_react.default.createElement(_ui.Flex, null, /*#__PURE__*/(0, _react.cloneElement)(child, {
      disabled: child.props.disabled || hidden,
      'aria-hidden': hidden
    })))));
  })), /*#__PURE__*/_react.default.createElement(RowFlex, {
    "data-hidden": true,
    "aria-hidden": "true",
    gap: gap,
    ref: setHiddenRowEl
  }, children.map((child, index) => {
    const {
      dividerBefore
    } = child.props;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
      key: child.key
    }, dividerBefore && index !== 0 && /*#__PURE__*/_react.default.createElement(_CollapseMenuDivider.CollapseMenuDivider, null), /*#__PURE__*/_react.default.createElement(OptionHiddenFlex, {
      key: child.key
    }, /*#__PURE__*/(0, _react.cloneElement)(child, {
      disabled: true,
      'aria-hidden': true
    })));
  }))), menuIsVisible && /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    marginLeft: gap
  }, /*#__PURE__*/_react.default.createElement(_CollapseOverflowMenu.CollapseOverflowMenu, {
    disableRestoreFocusOnClose: disableRestoreFocusOnClose,
    menuButton: menuButton,
    menuButtonProps: menuButtonProps,
    menuOptionsArray: menuOptionsArray,
    onMenuClose: onMenuClose
  })));
});
exports.CollapseMenu = CollapseMenu;