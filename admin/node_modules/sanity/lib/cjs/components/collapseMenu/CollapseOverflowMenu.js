"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CollapseOverflowMenu = CollapseOverflowMenu;

var _ui = require("@sanity/ui");

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const MENU_BUTTON_POPOVER_PROPS = {
  portal: true,
  constrainSize: true
};

function CollapseOverflowMenu(props) {
  const {
    disableRestoreFocusOnClose,
    menuButton,
    menuButtonProps,
    menuOptionsArray,
    onMenuClose
  } = props;
  return /*#__PURE__*/_react.default.createElement(_ui.MenuButton, _extends({
    __unstable_disableRestoreFocusOnClose: disableRestoreFocusOnClose,
    id: "menu-button",
    onClose: onMenuClose,
    popover: MENU_BUTTON_POPOVER_PROPS
  }, menuButtonProps, {
    button: menuButton,
    menu: /*#__PURE__*/_react.default.createElement(_ui.Menu, null, menuOptionsArray.map((c, index) => {
      const {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        collapsedProps = {},
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        expandedProps = {},
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        tooltipProps = {},
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        tooltipText,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        dividerBefore,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        fontSize,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        padding,
        text,
        icon,
        selected,
        ...rest
      } = c.props;
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
        key: c.key
      }, dividerBefore && index !== 0 && /*#__PURE__*/_react.default.createElement(_ui.MenuDivider, null), /*#__PURE__*/_react.default.createElement(_ui.MenuItem, _extends({
        text: text,
        icon: icon,
        pressed: selected
      }, rest)));
    }))
  }));
}