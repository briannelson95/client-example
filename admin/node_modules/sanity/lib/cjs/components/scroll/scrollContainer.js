"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScrollContainer = void 0;

var _ui = require("@sanity/ui");

var _nanoPubsub = _interopRequireDefault(require("nano-pubsub"));

var _react = _interopRequireWildcard(require("react"));

var _scrollContext = require("./scrollContext");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const noop = () => undefined;
/**
 * This provides a utility function for use within Sanity Studios to create scrollable containers
 * It also provides a way for components inside a scrollable container to track onScroll on their first parent scroll container
 * Note: this is used by different studio utilities to track positions of elements on screen
 * Note: It will call any given `onScroll` callback with a Native DOM Event, and not a React Synthetic event
 * Note: It will not make sure the element is actually scrollable, this still needs to be done with css as usual
 */


const ScrollContainer = /*#__PURE__*/_react.default.forwardRef(function ScrollContainer(props, ref) {
  const {
    as = 'div',
    onScroll,
    ...rest
  } = props;
  const forwardedRef = (0, _ui.useForwardedRef)(ref); // const selfRef = useRef<HTMLElement | null>(null)

  const parentContext = (0, _react.useContext)(_scrollContext.ScrollContext);
  const childContext = (0, _react.useMemo)(() => (0, _nanoPubsub.default)(), []);
  (0, _react.useEffect)(() => {
    if (onScroll) {
      // emit scroll events from children
      return childContext.subscribe(onScroll);
    }

    return noop;
  }, [childContext, onScroll]);
  (0, _react.useEffect)(() => {
    // let events bubble up
    if (parentContext) {
      return childContext.subscribe(parentContext.publish);
    }

    return noop;
  }, [parentContext, childContext]);
  (0, _react.useEffect)(() => {
    const handleScroll = event => {
      childContext.publish(event);
    };

    const el = forwardedRef.current;

    if (!el) {
      return undefined;
    }

    el.addEventListener('scroll', handleScroll, {
      passive: true,
      capture: true
    });
    return () => {
      el.removeEventListener('scroll', handleScroll);
    };
  }, [childContext, forwardedRef]);
  return /*#__PURE__*/_react.default.createElement(_scrollContext.ScrollContext.Provider, {
    value: childContext
  }, /*#__PURE__*/_react.default.createElement(as, {
    ref: forwardedRef,
    'data-testid': 'scroll-container',
    ...rest
  }));
});

exports.ScrollContainer = ScrollContainer;