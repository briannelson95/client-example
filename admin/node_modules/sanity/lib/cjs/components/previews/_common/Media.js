"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Media = Media;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _reactIs = require("react-is");

var _Media = require("./Media.styled");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Media(props) {
  const {
    border = true,
    dimensions,
    layout,
    media,
    radius = 1,
    responsive = false,
    styles
  } = props;
  return /*#__PURE__*/_react.default.createElement(_Media.MediaWrapper, {
    $dimensions: dimensions,
    $layout: layout,
    $radius: radius,
    $responsive: responsive,
    className: styles === null || styles === void 0 ? void 0 : styles.media,
    "data-testid": "Media"
  }, renderMedia({
    dimensions,
    layout,
    media
  }), border && /*#__PURE__*/_react.default.createElement("span", null));
}

function renderMedia(props) {
  const {
    dimensions,
    layout,
    media,
    styles
  } = props;

  if ((0, _reactIs.isValidElementType)(media)) {
    return /*#__PURE__*/(0, _react.createElement)(media, {
      dimensions,
      layout
    });
  }

  if (typeof media === 'string') {
    return /*#__PURE__*/_react.default.createElement(_ui.Text, {
      as: "span",
      className: styles === null || styles === void 0 ? void 0 : styles.mediaString
    }, media);
  }

  if ( /*#__PURE__*/(0, _react.isValidElement)(media)) {
    return media;
  }

  return null;
}