"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SchemaError = void 0;

var _upperFirst2 = _interopRequireDefault(require("lodash/upperFirst"));

var _logSymbols = _interopRequireDefault(require("log-symbols"));

var _generateHelpUrl = require("@sanity/generate-help-url");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// eslint-disable-next-line no-console
const consoleOutputter = {
  error: function () {
    return console.error(...arguments);
  }
};

class SchemaError extends Error {
  constructor(problemGroups) {
    super('Schema errors encountered');

    _defineProperty(this, "problemGroups", void 0);

    this.problemGroups = problemGroups;
  }

  print(output) {
    const logger = output || consoleOutputter;
    logger.error('Uh ohâ€¦ found errors in schema:\n');
    this.problemGroups.forEach(group => {
      group.problems.forEach(problem => {
        const icon = _logSymbols.default[problem.severity] || _logSymbols.default.info;
        output.error("  ".concat(icon, " ").concat((0, _upperFirst2.default)(problem.severity), ": ").concat(getPath(group.path)));
        output.error("  ".concat(problem.message));

        if (problem.helpId) {
          output.error("  See ".concat((0, _generateHelpUrl.generateHelpUrl)(problem.helpId)));
        }

        output.error('');
      });
    });
  }

}

exports.SchemaError = SchemaError;

function getPath(path) {
  return path.map(segment => {
    if (segment.kind === 'type' && segment.name && segment.type) {
      return "".concat(segment.name, " - (").concat(segment.type, ")");
    }

    if (segment.kind === 'property' && segment.name) {
      return segment.name;
    }

    return null;
  }).filter(Boolean).join(' / ');
}