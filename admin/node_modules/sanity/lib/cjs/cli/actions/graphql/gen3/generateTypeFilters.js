"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateTypeFilters = generateTypeFilters;

var _helpers = require("../helpers");

var _booleanFilters = require("../gen2/filters/booleanFilters");

var _dateFilters = require("../gen2/filters/dateFilters");

var _dateTimeFilters = require("../gen2/filters/dateTimeFilters");

var _floatFilters = require("../gen2/filters/floatFilters");

var _idFilters = require("../gen2/filters/idFilters");

var _integerFilters = require("../gen2/filters/integerFilters");

var _stringFilters = require("../gen2/filters/stringFilters");

var _documentFilters = require("./filters/documentFilters");

const typeAliases = {
  Url: 'String',
  Text: 'String',
  Email: 'String'
};
const filterCreators = {
  ID: _idFilters.createIdFilters,
  String: _stringFilters.createStringFilters,
  Float: _floatFilters.createFloatFilters,
  Integer: _integerFilters.createIntegerFilters,
  Boolean: _booleanFilters.createBooleanFilters,
  Datetime: _dateTimeFilters.createDateTimeFilters,
  Date: _dateFilters.createDateFilters,
  Document: _documentFilters.createDocumentFilters
};

function generateTypeFilters(types) {
  const builtInTypeKeys = Object.keys(filterCreators);
  const builtinTypeValues = Object.values(filterCreators);
  const objectTypes = types.filter(_helpers.isNonUnion).filter(type => type.type === 'Object' && !['Block', 'Span'].includes(type.name) && // TODO: What do we do with blocks?
  !type.interfaces && !builtInTypeKeys.includes(type.type));
  const unionTypes = types.filter(_helpers.isUnion).map(type => type.name);
  const documentTypes = types.filter(type => type.name === 'Document' || (0, _helpers.isDocumentType)(type));
  const builtinTypeFilters = createBuiltinTypeFilters(builtinTypeValues);
  const objectTypeFilters = createObjectTypeFilters(objectTypes, {
    unionTypes
  });
  const documentTypeFilters = createDocumentTypeFilters(documentTypes, {
    unionTypes
  });
  return builtinTypeFilters.concat(objectTypeFilters).concat(documentTypeFilters);
}

function createBuiltinTypeFilters(builtinTypeValues) {
  return builtinTypeValues.map(filterCreator => filterCreator());
}

function createObjectTypeFilters(objectTypes, options) {
  return objectTypes.map(objectType => ({
    name: "".concat(objectType.name, "Filter"),
    kind: 'InputObject',
    fields: createFieldFilters(objectType, options)
  }));
}

function createDocumentTypeFilters(documentTypes, options) {
  return documentTypes.map(documentType => ({
    name: "".concat(documentType.name, "Filter"),
    kind: 'InputObject',
    fields: [...getDocumentFilters(), ...createFieldFilters(documentType, options)]
  }));
}

function createFieldFilters(objectType, options) {
  const {
    unionTypes
  } = options;

  if (!objectType.fields) {
    return [];
  }

  return objectType.fields.filter(field => field.type !== 'JSON' && field.kind !== 'List' && !unionTypes.includes(field.type)).map(field => ({
    fieldName: field.fieldName,
    type: "".concat(typeAliases[field.type] || field.type, "Filter"),
    isReference: field.isReference
  }));
}

function getDocumentFilters() {
  return [{
    fieldName: '_',
    type: 'Sanity_DocumentFilter',
    description: 'Apply filters on document level'
  }];
}