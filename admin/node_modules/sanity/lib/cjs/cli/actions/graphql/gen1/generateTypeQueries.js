"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateTypeQueries = generateTypeQueries;

var _upperFirst2 = _interopRequireDefault(require("lodash/upperFirst"));

var _startCase2 = _interopRequireDefault(require("lodash/startCase"));

var _pluralizeEsm = _interopRequireDefault(require("pluralize-esm"));

var _helpers = require("../helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function pluralizeTypeName(name) {
  const words = (0, _startCase2.default)(name).split(' ');
  const last = words[words.length - 1];
  const plural = (0, _pluralizeEsm.default)(last.toLowerCase());
  words[words.length - 1] = (0, _upperFirst2.default)(plural);
  return words.join('');
}

function generateTypeQueries(types, filters) {
  const queries = [];
  const queryable = types.filter(_helpers.isNonUnion).filter(type => type.type === 'Object' && type.interfaces && type.interfaces.includes('Document')); // Single ID-based result lookup queries

  queryable.forEach(type => {
    queries.push({
      fieldName: type.name,
      type: type.name,
      constraints: [{
        field: '_id',
        comparator: 'EQUALS',
        value: {
          kind: 'argumentValue',
          argName: 'id'
        }
      }],
      args: [{
        name: 'id',
        description: "".concat(type.name, " document ID"),
        type: 'ID',
        isNullable: false
      }]
    });
  }); // Fetch all of type

  queryable.forEach(type => {
    const filterName = "".concat(type.name, "Filter");
    const hasFilter = filters.find(filter => filter.name === filterName);
    queries.push({
      fieldName: "all".concat(pluralizeTypeName(type.name)),
      filter: "_type == \"".concat(type.originalName || type.name, "\""),
      type: {
        kind: 'List',
        isNullable: false,
        children: {
          type: type.name,
          isNullable: false
        }
      },
      args: hasFilter ? [{
        name: 'where',
        type: filterName,
        isFieldFilter: true
      }, ...getLimitOffsetArgs()] : getLimitOffsetArgs()
    });
  });
  return queries;
}

function getLimitOffsetArgs() {
  return [{
    name: 'limit',
    type: 'Int',
    description: 'Max documents to return',
    isFieldFilter: false
  }, {
    name: 'offset',
    type: 'Int',
    description: 'Offset at which to start returning documents from',
    isFieldFilter: false
  }];
}