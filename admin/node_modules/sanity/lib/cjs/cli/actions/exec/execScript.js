"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _child_process = require("child_process");

var _promises = _interopRequireDefault(require("fs/promises"));

var _path = _interopRequireDefault(require("path"));

var _yargs = _interopRequireDefault(require("yargs/yargs"));

var _helpers = require("yargs/helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parseCliFlags(args) {
  return (0, _yargs.default)((0, _helpers.hideBin)(args.argv || process.argv)).command('exec [script]', 'executes given script', cmd => cmd.positional('script', {
    type: 'string',
    demandOption: true
  }).option('with-user-token', {
    type: 'boolean',
    default: false
  }).option('mock-browser-env', {
    type: 'boolean',
    default: false
  })).argv;
}

const execScript = async function execScript(args, context) {
  // Reparsing CLI flags for better control of binary flags
  const {
    withUserToken,
    mockBrowserEnv,
    script
  } = await parseCliFlags(args);
  const {
    workDir
  } = context;

  const scriptPath = _path.default.resolve(script || '');

  if (!script) {
    throw new Error('SCRIPT must be provided. `sanity exec <script>`');
  }

  if (!(await _promises.default.stat(scriptPath).catch(() => false))) {
    throw new Error("".concat(scriptPath, " does not exist"));
  }

  const esbuildPath = _path.default.resolve(__dirname, './esbuild.js');

  const browserEnvPath = _path.default.resolve(__dirname, './registerBrowserEnv.js');

  const configClientPath = _path.default.resolve(__dirname, './configClient.js');

  const baseArgs = mockBrowserEnv ? ['-r', browserEnvPath] : ['-r', esbuildPath];
  const tokenArgs = withUserToken ? ['-r', configClientPath] : [];
  const nodeArgs = [...baseArgs, ...tokenArgs, scriptPath, ...args.extraArguments];
  const proc = (0, _child_process.spawn)(process.argv[0], nodeArgs, {
    stdio: 'inherit',
    env: { // eslint-disable-next-line no-process-env
      ...process.env,
      SANITY_BASE_PATH: workDir
    }
  });
  proc.on('close', process.exit);
};

var _default = execScript;
exports.default = _default;