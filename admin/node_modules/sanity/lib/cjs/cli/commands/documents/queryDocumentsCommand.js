"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _yargs = _interopRequireDefault(require("yargs/yargs"));

var _helpers = require("yargs/helpers");

var _colorizeJson = require("../../util/colorizeJson");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultApiVersion = 'v2022-06-01';
const helpText = "\nRun a query against the projects configured dataset\n\nOptions\n  --pretty colorized JSON output\n  --dataset NAME to override dataset\n  --project PROJECT to override project ID\n  --anonymous Send the query without any authorization token\n  --api-version API version to use (defaults to `".concat(defaultApiVersion, "`)\n\nEnvironment variables\n  `SANITY_CLI_QUERY_API_VERSION` - will use the defined API version,\n  unless `--api-version` is specified.\n\nExamples\n  # Fetch 5 documents of type \"movie\"\n  sanity documents query '*[_type == \"movie\"][0..4]'\n\n  # Fetch title of the oldest movie in the dataset named \"staging\"\n  sanity documents query '*[_type == \"movie\"]|order(releaseDate asc)[0]{title}' --dataset staging\n\n  # Use API version v2021-06-07 and do a query\n  sanity documents query --api-version v2021-06-07 '*[_id == \"header\"] { \"headerText\": pt::text(body) }'\n");
var _default = {
  name: 'query',
  group: 'documents',
  signature: '[QUERY]',
  helpText,
  description: 'Query for documents',
  action: async (args, context) => {
    var _cliConfig$api, _cliConfig$api2;

    // Reparsing arguments for improved control of flags
    const {
      pretty,
      dataset,
      project,
      anonymous,
      'api-version': apiVersion
    } = await parseCliFlags(args);
    const {
      apiClient,
      output,
      chalk,
      cliConfig
    } = context;
    const [query] = args.argsWithoutOptions;

    if (!query) {
      throw new Error('Query must be specified');
    }

    if (!apiVersion) {
      output.warn(chalk.yellow("--api-version not specified, using `".concat(defaultApiVersion, "`")));
    }

    const requireDataset = !dataset;
    const requireProject = !project;
    const requireUser = !anonymous;

    if (requireProject && !(cliConfig !== null && cliConfig !== void 0 && (_cliConfig$api = cliConfig.api) !== null && _cliConfig$api !== void 0 && _cliConfig$api.projectId)) {
      throw new Error('No project configured in CLI config - either configure one, or use `--project` flag');
    }

    if (requireDataset && !(cliConfig !== null && cliConfig !== void 0 && (_cliConfig$api2 = cliConfig.api) !== null && _cliConfig$api2 !== void 0 && _cliConfig$api2.dataset)) {
      throw new Error('No dataset configured in CLI config - either configure one, or use `--dataset` flag');
    }

    const baseClient = apiClient({
      requireProject,
      requireUser
    }).clone();
    const {
      dataset: originalDataset,
      projectId: originalProjectId
    } = baseClient.config();
    const client = baseClient.config({
      projectId: project || originalProjectId,
      dataset: dataset || originalDataset,
      apiVersion: apiVersion || defaultApiVersion
    });

    try {
      const docs = await client.fetch(query);

      if (!docs) {
        throw new Error('Query returned no results');
      }

      output.print(pretty ? (0, _colorizeJson.colorizeJson)(docs, chalk) : JSON.stringify(docs, null, 2));
    } catch (err) {
      throw new Error("Failed to run query:\n".concat(err.message));
    }
  }
};
exports.default = _default;

function parseCliFlags(args) {
  // eslint-disable-next-line no-process-env
  const fallbackApiVersion = process.env.SANITY_CLI_QUERY_API_VERSION;
  return (0, _yargs.default)((0, _helpers.hideBin)(args.argv || process.argv).slice(2)).option('pretty', {
    type: 'boolean',
    default: false
  }).option('dataset', {
    type: 'string'
  }).option('project', {
    type: 'string'
  }).option('anonymous', {
    type: 'boolean',
    default: false
  }).option('api-version', {
    type: 'string',
    default: fallbackApiVersion
  }).argv;
}