"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unlinkAliasHandler = void 0;

var _promptForDatasetAliasName = require("../../../actions/dataset/alias/promptForDatasetAliasName");

var _validateDatasetAliasName = require("../../../actions/dataset/alias/validateDatasetAliasName");

var aliasClient = _interopRequireWildcard(require("./datasetAliasesClient"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const unlinkAliasHandler = async (args, context) => {
  const {
    apiClient,
    output,
    prompt
  } = context;
  const [, alias] = args.argsWithoutOptions;
  const client = apiClient();
  const nameError = alias && (0, _validateDatasetAliasName.validateDatasetAliasName)(alias);

  if (nameError) {
    throw new Error(nameError);
  }

  const fetchedAliases = await aliasClient.listAliases(client);
  let aliasName = await (alias || (0, _promptForDatasetAliasName.promptForDatasetAliasName)(prompt));
  let aliasOutputName = aliasName;

  if (aliasName.startsWith(aliasClient.ALIAS_PREFIX)) {
    aliasName = aliasName.substring(1);
  } else {
    aliasOutputName = "".concat(aliasClient.ALIAS_PREFIX).concat(aliasName);
  } // get the current alias from the remote alias list


  const linkedAlias = fetchedAliases.find(elem => elem.name === aliasName);

  if (!linkedAlias) {
    throw new Error("Dataset alias \"".concat(aliasOutputName, "\" does not exist"));
  }

  if (!linkedAlias.datasetName) {
    throw new Error("Dataset alias \"".concat(aliasOutputName, "\" is not linked to a dataset"));
  }

  await prompt.single({
    type: 'input',
    message: "Are you ABSOLUTELY sure you want to unlink this alias from the \"".concat(linkedAlias.datasetName, "\" dataset?\n      \n  Type YES/NO: "),
    filter: input => "".concat(input).toLowerCase(),
    validate: input => {
      return input === 'yes' || 'Ctrl + C to cancel dataset alias unlink.';
    }
  });

  try {
    const result = await aliasClient.unlinkAlias(client, aliasName);
    output.print("Dataset alias ".concat(aliasOutputName, " unlinked from ").concat(result.datasetName, " successfully"));
  } catch (err) {
    throw new Error("Dataset alias unlink failed:\n".concat(err.message));
  }
};

exports.unlinkAliasHandler = unlinkAliasHandler;