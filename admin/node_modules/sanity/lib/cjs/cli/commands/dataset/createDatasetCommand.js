"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug = require("../../debug");

var _datasetNamePrompt = require("../../actions/dataset/datasetNamePrompt");

var _validateDatasetName = require("../../actions/dataset/validateDatasetName");

const helpText = "\nOptions\n  --visibility <mode> Set visibility for this dataset (public/private)\n\nExamples\n  sanity dataset create\n  sanity dataset create <name>\n  sanity dataset create <name> --visibility private\n";
const allowedModes = ['private', 'public', 'custom'];
const createDatasetCommand = {
  name: 'create',
  group: 'dataset',
  signature: '[NAME]',
  helpText,
  description: 'Create a new dataset within your project',
  action: async (args, context) => {
    const {
      apiClient,
      output,
      prompt
    } = context;
    const flags = args.extOptions;
    const [dataset] = args.argsWithoutOptions;
    const client = apiClient();
    const nameError = dataset && (0, _validateDatasetName.validateDatasetName)(dataset);

    if (nameError) {
      throw new Error(nameError);
    }

    const [datasets, projectFeatures] = await Promise.all([client.datasets.list().then(sets => sets.map(ds => ds.name)), client.request({
      uri: '/features'
    })]);

    if (flags.visibility && !allowedModes.includes(flags.visibility)) {
      throw new Error("Visibility mode \"".concat(flags.visibility, "\" not allowed"));
    }

    const datasetName = await (dataset || (0, _datasetNamePrompt.promptForDatasetName)(prompt));

    if (datasets.includes(datasetName)) {
      throw new Error("Dataset \"".concat(datasetName, "\" already exists"));
    }

    const canCreatePrivate = projectFeatures.includes('privateDataset');
    (0, _debug.debug)('%s create private datasets', canCreatePrivate ? 'Can' : 'Cannot');
    const defaultAclMode = canCreatePrivate ? flags.visibility : 'public';
    const aclMode = await (defaultAclMode || promptForDatasetVisibility(prompt, output));

    try {
      await client.datasets.create(datasetName, {
        aclMode
      });
      output.print('Dataset created successfully');
    } catch (err) {
      throw new Error("Dataset creation failed:\n".concat(err.message));
    }
  }
};

async function promptForDatasetVisibility(prompt, output) {
  const mode = await prompt.single({
    type: 'list',
    message: 'Dataset visibility',
    choices: [{
      value: 'public',
      name: 'Public (world readable)'
    }, {
      value: 'private',
      name: 'Private (Authenticated user or token needed)'
    }]
  });

  if (mode === 'private') {
    output.print('Please note that while documents are private, assets (files and images) are still public\n');
  }

  return mode;
}

var _default = createDatasetCommand;
exports.default = _default;