"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkStudioDependencyVersions = checkStudioDependencyVersions;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _semver = _interopRequireDefault(require("semver"));

var _resolveFrom = _interopRequireDefault(require("resolve-from"));

var _generateHelpUrl = require("@sanity/generate-help-url");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// NOTE: when doing changes here, also remember to update versions in help docs at
// https://admin.sanity.io/desk/docs;helpArticle;upgrade-packages
const PACKAGES = [{
  name: 'react',
  supported: ['^17'],
  deprecatedBelow: null
}, {
  name: 'react-dom',
  supported: ['^17'],
  deprecatedBelow: null
}];

function checkStudioDependencyVersions(workDir) {
  const manifest = readPackageJson(_path.default.join(workDir, 'package.json'));
  const dependencies = { ...manifest.dependencies,
    ...manifest.devDependencies
  };
  const packageInfo = PACKAGES.map(pkg => {
    const dependency = dependencies[pkg.name];

    if (!dependency) {
      return false;
    }

    const manifestPath = _resolveFrom.default.silent(workDir, _path.default.join(pkg.name, 'package.json'));

    const installed = _semver.default.coerce(manifestPath ? readPackageJson(manifestPath).version : dependency.replace(/[\D.]/g, ''));

    if (!installed) {
      return false;
    }

    const supported = pkg.supported.join(' || '); // "Untested" is usually the case where we have not upgraded the React version requirements
    // before a release, but given that is usually works in a backwards-compatible way, we want
    // to indicate that it's _untested_, not necessarily _unsupported_
    // Ex: Installed is react@17.0.0, but we've only _tested_ with react@^16

    const isUntested = !_semver.default.satisfies(installed, supported) && _semver.default.gtr(installed, supported); // "Unsupported" in that the installed version is _lower than_ the minimum version
    // Ex: Installed is react@15.0.0, but we require react@^16


    const isUnsupported = !_semver.default.satisfies(installed, supported) && !isUntested; // "Deprecated" in that we will stop supporting it at some point in the near future,
    // so users should be prompted to upgrade

    const isDeprecated = pkg.deprecatedBelow ? _semver.default.ltr(installed, pkg.deprecatedBelow) : false;
    return { ...pkg,
      installed,
      isUnsupported,
      isDeprecated,
      isUntested
    };
  });
  const installedPackages = packageInfo.filter(inp => inp !== false);
  const unsupported = installedPackages.filter(pkg => pkg.isUnsupported);
  const deprecated = installedPackages.filter(pkg => !pkg.isUnsupported && pkg.isDeprecated);
  const untested = installedPackages.filter(pkg => pkg.isUntested);

  if (deprecated.length > 0) {
    // eslint-disable-next-line no-console
    console.warn("\n[WARN] The following package versions have been deprecated and should be upgraded:\n\n  ".concat(listPackages(deprecated), "\n\nSupport for these will be removed in a future release!\n\n  ").concat(getUpgradeInstructions(deprecated), "\n"));
  }

  if (untested.length > 0) {
    // eslint-disable-next-line no-console
    console.warn("\n[WARN] The following package versions have not yet been marked as supported:\n\n  ".concat(listPackages(untested), "\n\nYou _may_ encounter bugs while using these versions.\n\n  ").concat(getDowngradeInstructions(untested), "\n"));
  }

  if (unsupported.length > 0) {
    // eslint-disable-next-line no-console
    console.error("\n[ERROR] The following package versions are no longer supported and needs to be upgraded:\n\n  ".concat(listPackages(unsupported), "\n\n  ").concat(getUpgradeInstructions(unsupported), "\n"));
    process.exit(1);
  }
}

function listPackages(pkgs) {
  return pkgs.map(pkg => "".concat(pkg.name, " (installed: ").concat(pkg.installed, ", want: ").concat(pkg.deprecatedBelow || pkg.supported.join(' || '), ")")).join('\n  ');
}

function getUpgradeInstructions(pkgs) {
  const inst = pkgs.map(pkg => {
    const [highestSupported] = pkg.supported.map(version => (_semver.default.coerce(version) || {
      version: ''
    }).version).sort(_semver.default.rcompare);
    return "\"".concat(pkg.name, "@").concat(highestSupported, "\"");
  }).join(' ');
  return "To upgrade, run either:\n\n  yarn add ".concat(inst, "\n\n  or\n\n  npm install ").concat(inst, "\n\nRead more at ").concat((0, _generateHelpUrl.generateHelpUrl)('upgrade-packages'));
}

function getDowngradeInstructions(pkgs) {
  const inst = pkgs.map(pkg => {
    const [highestSupported] = pkg.supported.map(version => (_semver.default.coerce(version) || {
      version: ''
    }).version).sort(_semver.default.rcompare);
    return "\"".concat(pkg.name, "@").concat(highestSupported, "\"");
  }).join(' ');
  return "To downgrade, run either:\n\n  yarn add ".concat(inst, "\n\n  or\n\n  npm install ").concat(inst);
}

function readPackageJson(filePath) {
  try {
    // eslint-disable-next-line no-sync
    return JSON.parse(_fs.default.readFileSync(filePath, 'utf8'));
  } catch (err) {
    throw new Error("Failed to read \"".concat(filePath, "\": ").concat(err.message));
  }
}