"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getStudioConfig = getStudioConfig;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _operators = require("rxjs/operators");

var _config = require("../../config");

var _mockBrowserEnvironment = require("./mockBrowserEnvironment");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-sync */
const candidates = ['sanity.config.js', 'sanity.config.jsx', 'sanity.config.ts', 'sanity.config.tsx'];
/**
 * Note: Don't run this on the main thread, use it a forked process
 */

async function getStudioConfig(options) {
  let workspaces;
  const {
    basePath,
    configPath: cfgPath
  } = options;
  let cleanup;

  try {
    cleanup = (0, _mockBrowserEnvironment.mockBrowserEnvironment)(basePath);
    let configPath = cfgPath;

    if (configPath && !_fs.default.existsSync(configPath)) {
      throw new Error("Failed to find config at \"".concat(cfgPath, "\""));
    } else if (!configPath) {
      configPath = candidates.map(candidate => _path.default.join(basePath, candidate)).find(candidate => _fs.default.existsSync(candidate));
    }

    if (!configPath) {
      throw new Error("Failed to resolve sanity.config.(js|ts) for base path \"".concat(basePath, "\""));
    }

    let config;

    try {
      // eslint-disable-next-line import/no-dynamic-require
      const mod = require(configPath);

      config = mod.__esModule && mod.default ? mod.default : mod;
    } catch (err) {
      throw new Error("Failed to load configuration file \"".concat(configPath, "\":\n").concat(err.message));
    }

    if (!config) {
      throw new Error('Configuration did not export expected config shape');
    }

    workspaces = await (0, _config.resolveConfig)(config).pipe((0, _operators.first)()).toPromise();
  } catch (error) {
    if (cleanup) {
      cleanup();
    }

    throw error;
  }

  cleanup();

  if (!workspaces) {
    throw new Error('Failed to resolve configuration');
  }

  return workspaces;
}