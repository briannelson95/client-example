"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mockBrowserEnvironment = mockBrowserEnvironment;

var _pirates = require("pirates");

var _jsdomGlobal = _interopRequireDefault(require("jsdom-global"));

var _resolveFrom = _interopRequireDefault(require("resolve-from"));

var _node = require("esbuild-register/dist/node");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const jsdomDefaultHtml = "<!doctype html>\n<html>\n  <head><meta charset=\"utf-8\"></head>\n  <body></body>\n</html>";

function mockBrowserEnvironment(basePath) {
  // Guard against double-registering
  if (global && global.window && '__mockedBySanity' in global.window) {
    return () => {
      /* intentional noop */
    };
  }

  const domCleanup = (0, _jsdomGlobal.default)(jsdomDefaultHtml, {
    url: 'http://localhost:3333/'
  });

  const windowCleanup = () => global.window.close();

  const globalCleanup = provideFakeGlobals(basePath);
  const cleanupFileLoader = (0, _pirates.addHook)((code, filename) => "module.exports = ".concat(JSON.stringify(filename)), {
    ignoreNodeModules: false,
    exts: getFileExtensions()
  });
  const {
    unregister: unregisterESBuild
  } = (0, _node.register)({
    target: 'node14'
  });
  return function cleanupBrowserEnvironment() {
    unregisterESBuild();
    cleanupFileLoader();
    globalCleanup();
    windowCleanup();
    domCleanup();
  };
}

const getFakeGlobals = basePath => ({
  __mockedBySanity: true,
  requestAnimationFrame: setImmediate,
  cancelAnimationFrame: clearImmediate,
  requestIdleCallback: setImmediate,
  cancelIdleCallback: clearImmediate,
  InputEvent: global.window && global.window.InputEvent,
  ace: tryGetAceGlobal(basePath)
});

function provideFakeGlobals(basePath) {
  const globalEnv = global;
  const globalWindow = global.window;
  const fakeGlobals = getFakeGlobals(basePath);
  const stubbedGlobalKeys = [];
  const stubbedWindowKeys = [];

  for (const [rawKey, value] of Object.entries(fakeGlobals)) {
    if (typeof value === 'undefined') {
      continue;
    }

    const key = rawKey;

    if (!(key in globalEnv)) {
      globalEnv[key] = fakeGlobals[key];
      stubbedGlobalKeys.push(key);
    }

    if (!(key in global.window)) {
      globalWindow[key] = fakeGlobals[key];
      stubbedWindowKeys.push(key);
    }
  }

  return () => {
    stubbedGlobalKeys.forEach(key => {
      delete globalEnv[key];
    });
    stubbedWindowKeys.forEach(key => {
      delete globalWindow[key];
    });
  };
}

function tryGetAceGlobal(basePath) {
  // Work around an issue where using the @sanity/code-input plugin would crash
  // due to `ace` not being defined on the global due to odd bundling stategy.
  const acePath = _resolveFrom.default.silent(basePath, 'ace-builds');

  if (!acePath) {
    return undefined;
  }

  try {
    // eslint-disable-next-line import/no-dynamic-require
    return require(acePath);
  } catch (err) {
    return undefined;
  }
}

function getFileExtensions() {
  return ['.jpeg', '.jpg', '.png', '.gif', '.svg', '.webp', '.woff', '.woff2', '.ttf', '.eot', '.otf'];
}