"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateStructure = validateStructure;

var _util = require("../../util");

var _structureBuilder = require("../structureBuilder");

var _leven = require("./leven");

// TODO: this is not wired up
function validateStructure(structure) {
  if (!structure) {
    let val = 'null';

    if (structure !== null) {
      val = typeof structure === 'undefined' ? 'undefined' : 'false';
    }

    throw new _structureBuilder.SerializeError("Structure resolved to ".concat(val), [], 'root');
  }

  if (!structure.id) {
    throw new _structureBuilder.SerializeError('Structure did not contain required `id` property', [], 'root');
  }

  if (structure.id === 'edit') {
    throw new _structureBuilder.SerializeError('The root structure cannot have value `edit` as `id`', [], 'root');
  }

  warnOnUnknownExports(structure);

  if (!isStructure(structure)) {
    throw new Error("Structure needs to export a function, an observable, a promise or a structure builder, got ".concat(typeof structure));
  }

  return structure;
}

const KNOWN_STRUCTURE_EXPORTS = ['getDefaultDocumentNode'];

function isStructure(structure) {
  if (typeof structure === 'function') return true;
  if (!(0, _util.isRecord)(structure)) return false;
  return typeof structure.serialize !== 'function' || typeof structure.then !== 'function' || typeof structure.subscribe !== 'function' || typeof structure.type !== 'string';
} // export const validateStructure = (structure: any):  => {
// }


function warnOnUnknownExports(mod) {
  if (!mod) return;
  const known = [...KNOWN_STRUCTURE_EXPORTS, 'default'];
  const unknownKeys = Object.keys(mod).filter(key => !known.includes(key));

  for (const key of unknownKeys) {
    const {
      closest
    } = known.reduce((acc, current) => {
      const distance = (0, _leven.leven)(current, key);
      return distance < 3 && distance < acc.distance ? {
        closest: current,
        distance
      } : acc;
    }, {
      closest: null,
      distance: +Infinity
    });
    const hint = closest ? " - did you mean \"".concat(closest, "\"") : ''; // eslint-disable-next-line

    console.warn("Unknown structure export \"".concat(key, "\"").concat(hint));
  }
}