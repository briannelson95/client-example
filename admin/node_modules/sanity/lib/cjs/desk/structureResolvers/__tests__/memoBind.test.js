"use strict";

var _memoBind = require("../memoBind");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe('memoBind', () => {
  it('takes in an object and a method key and binds the object to the `this` value of the method', () => {
    class ExampleClass {
      constructor() {
        _defineProperty(this, "data", 'example');
      }

      aPrototype() {
        return this.data;
      }

    }

    const instance = new ExampleClass();
    const bound = (0, _memoBind.memoBind)(instance, 'aPrototype');
    expect(bound()).toBe('example');
  });
  it('memoizes the bindings against the method names and instances', () => {
    class ExampleClass {
      constructor() {
        _defineProperty(this, "data", 'example');
      }

      aPrototype() {
        return this.data;
      }

    }

    const instanceA = new ExampleClass();
    const boundA1 = (0, _memoBind.memoBind)(instanceA, 'aPrototype');
    const boundA2 = (0, _memoBind.memoBind)(instanceA, 'aPrototype');
    expect(boundA1).toBe(boundA2);
    const instanceB = new ExampleClass();
    const boundB1 = (0, _memoBind.memoBind)(instanceB, 'aPrototype');
    const boundB2 = (0, _memoBind.memoBind)(instanceB, 'aPrototype');
    expect(boundB1).toBe(boundB2);
    expect(boundA1).not.toBe(boundB1);
    expect(boundA2).not.toBe(boundB2);
  });
});