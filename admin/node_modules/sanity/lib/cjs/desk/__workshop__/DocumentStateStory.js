"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = InitialValueStory;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _datastores = require("../../datastores");

var _hooks = require("../../hooks");

var _studio = require("../../studio");

var _util = require("../../util");

var _DeskToolProvider = require("../DeskToolProvider");

var _panes = require("../panes");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function InitialValueStory() {
  const documentId = 'test';
  const documentType = 'author';
  const pane = (0, _react.useMemo)(() => ({
    id: documentId,
    options: {
      id: documentId,
      type: documentType
    },
    type: 'document',
    title: 'Workshop'
  }), [documentId, documentType]);
  return /*#__PURE__*/_react.default.createElement(_DeskToolProvider.DeskToolProvider, null, /*#__PURE__*/_react.default.createElement(_panes.DocumentPaneProvider, {
    index: 0,
    itemId: documentId,
    pane: pane,
    paneKey: documentId
  }, /*#__PURE__*/_react.default.createElement(Debug, {
    documentId: documentId,
    documentType: documentType
  })));
}

function Debug(props) {
  const {
    documentId,
    documentType
  } = props;
  const templateName = undefined; // 'author-developer'

  const templateParams = undefined; // {}

  const initialValue = (0, _datastores.useInitialValue)({
    documentId,
    documentType,
    templateName,
    templateParams
  });
  const editState = (0, _hooks.useEditState)(documentId, documentType);
  const {
    validation
  } = (0, _hooks.useValidationStatus)(documentId, documentType);
  const connectionState = (0, _hooks.useConnectionState)(documentId, documentType);
  const value = (editState === null || editState === void 0 ? void 0 : editState.draft) || (editState === null || editState === void 0 ? void 0 : editState.published) || initialValue.value;
  const documentActions = useDocumentActions(documentId, documentType, editState);
  return /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Code, {
    language: "json",
    size: 1
  }, JSON.stringify({
    connectionState,
    documentId,
    documentType,
    initialValue,
    validation,
    templateName,
    templateParams,
    value
  }, null, 2)), documentActions.node, documentActions.items && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 1
  }, documentActions.items.map((actionItem, idx) => actionItem && /*#__PURE__*/_react.default.createElement(_ui.Button, {
    disabled: actionItem.disabled,
    icon: actionItem.icon,
    key: idx // eslint-disable-next-line react/jsx-handler-names
    ,
    onClick: actionItem.onHandle,
    tone: actionItem.tone,
    text: actionItem.label
  }))), documentActions.items.map((actionItem, idx) => {
    if (actionItem !== null && actionItem !== void 0 && actionItem.modal && actionItem.modal.type === 'dialog') {
      return /*#__PURE__*/_react.default.createElement(_ui.Dialog, {
        footer: actionItem.modal.footer,
        header: actionItem.modal.header,
        id: "document-action-modal-".concat(idx) // eslint-disable-next-line react/jsx-handler-names
        ,
        onClose: actionItem.modal.onClose
      }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
        padding: 4
      }, actionItem.modal.content));
    }

    return null;
  })));
}

function useDocumentActions(documentId, schemaType, editState) {
  const {
    document
  } = (0, _studio.useSource)();
  const actions = (0, _react.useMemo)(() => document.actions({
    schemaType,
    documentId
  }), [document, documentId, schemaType]);
  const [descriptions, setDescriptions] = (0, _react.useState)(null);

  const node = /*#__PURE__*/_react.default.createElement(DocumentActionResolver, {
    actionHooks: actions,
    editState: editState,
    onUpdate: setDescriptions
  });

  return {
    items: descriptions,
    node
  };
}

function DocumentActionResolver(props) {
  const {
    actionHooks,
    editState,
    onUpdate
  } = props;
  const [actionDescriptions, setActionDescriptions] = (0, _react.useState)(() => actionHooks.map(() => null));
  const updateDescription = (0, _react.useCallback)((desc, idx) => {
    setActionDescriptions(arr => {
      const copy = arr.slice(0);
      copy.splice(idx, 1, desc);
      return copy;
    });
  }, []);
  (0, _react.useEffect)(() => {
    onUpdate(actionDescriptions);
  }, [actionDescriptions, onUpdate]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, actionHooks.map((actionHook, idx) => /*#__PURE__*/_react.default.createElement(DocumentActionHook, {
    actionHook: actionHook,
    editState: editState,
    index: idx,
    key: idx,
    onUpdate: updateDescription
  })));
}

function DocumentActionHook(props) {
  const {
    actionHook: useActionDescription,
    editState,
    index,
    onUpdate
  } = props;
  const onComplete = (0, _react.useCallback)(() => {// @todo
  }, []);
  const actionProps = (0, _react.useMemo)(() => ({ ...editState,
    onComplete,
    // @todo
    revision: undefined
  }), [editState, onComplete]);
  const actionDescription = (0, _util.useUnique)(useActionDescription(actionProps));
  (0, _react.useEffect)(() => {
    onUpdate(actionDescription, index);
  }, [actionDescription, index, onUpdate]);
  return null;
}