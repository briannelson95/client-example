"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getQueryResults = void 0;

var _operators = require("rxjs/operators");

var _rxjs = require("rxjs");

var _reactFastCompare = _interopRequireDefault(require("react-fast-compare"));

var _datastores = require("../../../datastores");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const INITIAL_CHILD_PROPS = {
  result: null,
  error: false
};

const createResultChildProps = documents => ({
  result: {
    documents
  },
  loading: false,
  error: false
});

const createErrorChildProps = error => ({
  result: null,
  loading: false,
  error
});

const getQueryResults = function (receivedProps$) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const onRetry$ = new _rxjs.Subject();
  const onRetry = onRetry$.next.bind(onRetry$);
  const queryProps$ = receivedProps$.pipe((0, _operators.map)(props => ({
    client: props.client,
    query: props.query,
    params: props.params
  })), (0, _operators.distinctUntilChanged)(_reactFastCompare.default), (0, _operators.publishReplay)(1), (0, _operators.refCount)());
  const queryResults$ = queryProps$.pipe((0, _operators.switchMap)(queryProps => {
    const query$ = (0, _datastores.listenQuery)(queryProps.client, queryProps.query, queryProps.params, options).pipe((0, _operators.map)(createResultChildProps), (0, _operators.share)());
    return (0, _rxjs.merge)((0, _rxjs.of)({
      loading: true
    }).pipe((0, _operators.delay)(400), (0, _operators.takeUntil)(query$)), query$);
  }));
  return queryResults$.pipe((0, _operators.startWith)(INITIAL_CHILD_PROPS), (0, _operators.catchError)((err, caught$) => (0, _rxjs.concat)((0, _rxjs.of)(createErrorChildProps(err)), (0, _rxjs.merge)((0, _rxjs.fromEvent)(window, 'online'), onRetry$).pipe((0, _operators.take)(1), (0, _operators.mergeMapTo)(caught$)))), (0, _operators.scan)((prev, next) => ({ ...prev,
    ...next,
    onRetry
  })));
};

exports.getQueryResults = getQueryResults;