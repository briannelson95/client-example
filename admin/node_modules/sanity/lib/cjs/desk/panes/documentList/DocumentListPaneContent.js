"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentListPaneContent = DocumentListPaneContent;

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _components = require("../../components");

var _hooks = require("../../../hooks");

var _util = require("../../../util");

var _helpers = require("./helpers");

var _constants = require("./constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function DocumentListPaneContent(props) {
  const {
    childItemId,
    error,
    filterIsSimpleTypeContraint,
    fullList,
    isActive,
    isLoading,
    items,
    layout,
    onListChange,
    onRetry,
    showIcons
  } = props;
  const schema = (0, _hooks.useSchema)();
  const {
    collapsed: layoutCollapsed
  } = (0, _components.usePaneLayout)();
  const {
    collapsed,
    index
  } = (0, _components.usePane)();
  const [shouldRender, setShouldRender] = (0, _react.useState)(false);
  (0, _react.useEffect)(() => {
    if (collapsed) return undefined;
    const timer = setTimeout(() => {
      setShouldRender(true);
    }, 0);
    return () => {
      clearTimeout(timer);
    };
  }, [collapsed]);
  const renderItem = (0, _react.useCallback)(item => {
    const publishedId = (0, _util.getPublishedId)(item._id);
    const isSelected = childItemId === publishedId;
    const pressed = !isActive && isSelected;
    const selected = isActive && isSelected;
    return /*#__PURE__*/_react.default.createElement(_components.PaneItem, {
      icon: showIcons === false ? false : undefined,
      id: publishedId,
      pressed: pressed,
      selected: selected,
      layout: layout,
      schemaType: schema.get(item._type),
      value: item
    });
  }, [childItemId, isActive, layout, schema, showIcons]);
  const content = (0, _react.useMemo)(() => {
    if (!shouldRender) {
      return null;
    }

    if (error) {
      return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
        align: "center",
        direction: "column",
        height: "fill",
        justify: "center"
      }, /*#__PURE__*/_react.default.createElement(_ui.Container, {
        width: 1
      }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
        paddingX: 4,
        paddingY: 5,
        space: 4
      }, /*#__PURE__*/_react.default.createElement(_ui.Heading, {
        as: "h3"
      }, "Could not fetch list items"), /*#__PURE__*/_react.default.createElement(_ui.Text, {
        as: "p"
      }, "Error: ", /*#__PURE__*/_react.default.createElement("code", null, error.message)), onRetry && /*#__PURE__*/_react.default.createElement(_ui.Box, null, /*#__PURE__*/_react.default.createElement(_ui.Button, {
        icon: _icons.SyncIcon,
        onClick: onRetry,
        text: "Retry",
        tone: "primary"
      })))));
    }

    if (items === null) {
      return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
        align: "center",
        direction: "column",
        height: "fill",
        justify: "center"
      }, /*#__PURE__*/_react.default.createElement(_components.Delay, {
        ms: 300
      }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ui.Spinner, {
        muted: true
      }), /*#__PURE__*/_react.default.createElement(_ui.Box, {
        marginTop: 3
      }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
        align: "center",
        muted: true,
        size: 1
      }, "Loading documents\u2026")))));
    }

    if (!isLoading && items.length === 0) {
      return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
        align: "center",
        direction: "column",
        height: "fill",
        justify: "center"
      }, /*#__PURE__*/_react.default.createElement(_ui.Container, {
        width: 1
      }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
        paddingX: 4,
        paddingY: 5
      }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
        align: "center",
        muted: true,
        size: 2
      }, filterIsSimpleTypeContraint ? 'No documents of this type' : 'No matching documents'))));
    }

    const hasMoreItems = fullList && items.length === _constants.FULL_LIST_LIMIT;
    return /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 2
    }, items.length > 0 && /*#__PURE__*/_react.default.createElement(_ui.VirtualList, {
      gap: 1,
      getItemKey: _helpers.getDocumentKey,
      items: items,
      renderItem: renderItem,
      onChange: onListChange // prevents bug when panes won't render if first rendered while collapsed
      ,
      key: "".concat(index, "-").concat(collapsed)
    }), isLoading && /*#__PURE__*/_react.default.createElement(_ui.Card, {
      borderTop: true,
      marginTop: 1,
      paddingX: 3,
      paddingY: 4
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      align: "center",
      muted: true,
      size: 1
    }, "Loading\u2026")), hasMoreItems && /*#__PURE__*/_react.default.createElement(_ui.Card, {
      marginTop: 1,
      paddingX: 3,
      paddingY: 4,
      radius: 2,
      tone: "transparent"
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      align: "center",
      muted: true,
      size: 1
    }, "Displaying a maximum of ", _constants.FULL_LIST_LIMIT, " documents")));
  }, [error, filterIsSimpleTypeContraint, fullList, onListChange, isLoading, items, onRetry, renderItem, shouldRender, collapsed, index]);
  return /*#__PURE__*/_react.default.createElement(_components.PaneContent, {
    overflow: layoutCollapsed ? undefined : 'auto'
  }, content);
}