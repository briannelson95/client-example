"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InspectDialog = InspectDialog;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _reactJsonInspector = _interopRequireDefault(require("@rexxars/react-json-inspector"));

var _components = require("../../../components");

var _useDeskToolSetting = require("../../../useDeskToolSetting");

var _useDocumentPane = require("../useDocumentPane");

var _constants = require("./constants");

var _helpers = require("./helpers");

var _InspectDialog = require("./InspectDialog.styles");

var _Search = require("./Search");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function InspectDialog(props) {
  const {
    value
  } = props;
  const {
    onInspectClose,
    paneKey
  } = (0, _useDocumentPane.useDocumentPane)();
  const dialogIdPrefix = "".concat(paneKey, "_inspect_");
  /* this creates a view mode (the default that it opens with is the parsed tab) that is saved based on the paneKey
  where the inspect dialog lives.
  This also means that when a page is loaded, the state of the tabs remains and doesn't revert to the pane tab */

  const [viewModeId, onViewModeChange] = (0, _useDeskToolSetting.useDeskToolSetting)('desk-tool', "inspect-view-preferred-view-mode-".concat(paneKey), 'parsed');
  /* based on the view mode it shows the right tab content */

  const viewMode = _constants.VIEW_MODES.find(mode => mode.id === viewModeId);

  const setParsedViewMode = (0, _react.useCallback)(() => {
    onViewModeChange(_constants.VIEW_MODE_PARSED.id);
  }, [onViewModeChange]);
  const setRawViewMode = (0, _react.useCallback)(() => {
    onViewModeChange(_constants.VIEW_MODE_RAW.id);
  }, [onViewModeChange]);
  return /*#__PURE__*/_react.default.createElement(_ui.Dialog, {
    id: "".concat(dialogIdPrefix, "dialog"),
    header: (0, _helpers.isDocumentLike)(value) ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Inspecting", ' ', /*#__PURE__*/_react.default.createElement("em", null, /*#__PURE__*/_react.default.createElement(_components.DocTitle, {
      document: value
    }))) : /*#__PURE__*/_react.default.createElement("em", null, "No value"),
    onClose: onInspectClose,
    width: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    direction: "column",
    height: "fill"
  }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    padding: 3,
    shadow: 1,
    style: {
      position: 'sticky',
      bottom: 0,
      zIndex: 3
    }
  }, /*#__PURE__*/_react.default.createElement(_ui.TabList, {
    space: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Tab, {
    "aria-controls": "".concat(dialogIdPrefix, "tabpanel"),
    fontSize: 1,
    id: "".concat(dialogIdPrefix, "tab-").concat(_constants.VIEW_MODE_PARSED.id),
    label: _constants.VIEW_MODE_PARSED.title,
    onClick: setParsedViewMode,
    selected: viewMode === _constants.VIEW_MODE_PARSED
  }), /*#__PURE__*/_react.default.createElement(_ui.Tab, {
    "aria-controls": "".concat(dialogIdPrefix, "tabpanel"),
    fontSize: 1,
    id: "".concat(dialogIdPrefix, "tab-").concat(_constants.VIEW_MODE_RAW.id),
    label: _constants.VIEW_MODE_RAW.title,
    onClick: setRawViewMode,
    selected: viewMode === _constants.VIEW_MODE_RAW
  }))), /*#__PURE__*/_react.default.createElement(_ui.TabPanel, {
    "aria-labelledby": "".concat(dialogIdPrefix, "tab-").concat(viewModeId),
    flex: 1,
    id: "".concat(dialogIdPrefix, "tabpanel"),
    overflow: "auto",
    padding: 4,
    style: {
      outline: 'none'
    }
  }, viewMode === _constants.VIEW_MODE_PARSED && /*#__PURE__*/_react.default.createElement(_InspectDialog.JSONInspectorWrapper, null, /*#__PURE__*/_react.default.createElement(_reactJsonInspector.default, {
    data: value,
    isExpanded: _helpers.isExpanded,
    onClick: _helpers.toggleExpanded,
    search: _Search.Search
  })), viewMode === _constants.VIEW_MODE_RAW && /*#__PURE__*/_react.default.createElement(_ui.Code, {
    language: "json",
    tabIndex: 0,
    onKeyDown: _helpers.maybeSelectAll,
    onDoubleClick: _helpers.select,
    onFocus: _helpers.select
  }, JSON.stringify(value, null, 2)))));
}