"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentSparkline = void 0;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _hooks = require("../../../../../hooks");

var _useDocumentPane = require("../../useDocumentPane");

var _DocumentBadges = require("./DocumentBadges");

var _PublishStatus = require("./PublishStatus");

var _ReviewChangesButton = require("./ReviewChangesButton");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const SYNCING_TIMEOUT = 1000;
const SAVED_TIMEOUT = 3000;
const DocumentSparkline = /*#__PURE__*/(0, _react.memo)(function DocumentSparkline() {
  var _editState$published;

  const {
    changesOpen,
    documentId,
    documentType,
    editState,
    onHistoryClose,
    onHistoryOpen,
    historyController,
    value
  } = (0, _useDocumentPane.useDocumentPane)();
  const syncState = (0, _hooks.useSyncState)(documentId, documentType);
  const lastUpdated = value === null || value === void 0 ? void 0 : value._updatedAt;
  const lastPublished = editState === null || editState === void 0 ? void 0 : (_editState$published = editState.published) === null || _editState$published === void 0 ? void 0 : _editState$published._updatedAt;
  const showingRevision = historyController.onOlderRevision();
  const liveEdit = Boolean(editState === null || editState === void 0 ? void 0 : editState.liveEdit);
  const published = Boolean(editState === null || editState === void 0 ? void 0 : editState.published);
  const changed = Boolean(editState === null || editState === void 0 ? void 0 : editState.draft);
  const [rootFlexElement, setRootFlexElement] = (0, _react.useState)(null);
  const rootFlexRect = (0, _ui.useElementRect)(rootFlexElement);
  const collapsed = !rootFlexRect || (rootFlexRect === null || rootFlexRect === void 0 ? void 0 : rootFlexRect.width) < 300;
  const [status, setStatus] = (0, _react.useState)(null); // eslint-disable-next-line consistent-return

  (0, _react.useEffect)(() => {
    if (status === 'syncing') {
      // status changed to 'syncing', schedule an update to set it to 'saved'
      const timerId = setTimeout(() => setStatus('saved'), SYNCING_TIMEOUT);
      return () => clearTimeout(timerId);
    }

    if (status === 'saved') {
      // status changed to 'saved', schedule an update to clear it
      const timerId = setTimeout(() => setStatus(null), SAVED_TIMEOUT);
      return () => clearTimeout(timerId);
    }
  }, [status, lastUpdated]);
  (0, _react.useLayoutEffect)(() => {
    // clear sync status when documentId changes
    setStatus(null);
  }, [documentId]); // set status to 'syncing' when lastUpdated changes and we go from not syncing to syncing

  (0, _react.useLayoutEffect)(() => {
    if (syncState.isSyncing) {
      setStatus('syncing');
    }
  }, [syncState.isSyncing, lastUpdated]);
  const reviewButton = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(_ReviewChangesButton.ReviewChangesButton, {
    lastUpdated: lastUpdated,
    status: status || (changed ? 'changes' : undefined),
    onClick: changesOpen ? onHistoryClose : onHistoryOpen,
    disabled: showingRevision,
    selected: changesOpen,
    collapsed: collapsed
  }), [changed, changesOpen, onHistoryClose, onHistoryOpen, lastUpdated, showingRevision, status, collapsed]);
  const publishStatus = (0, _react.useMemo)(() => (liveEdit || published) && /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginRight: 1
  }, /*#__PURE__*/_react.default.createElement(_PublishStatus.PublishStatus, {
    disabled: showingRevision,
    lastPublished: lastPublished,
    lastUpdated: lastUpdated,
    liveEdit: liveEdit,
    collapsed: collapsed
  })), [collapsed, lastPublished, lastUpdated, liveEdit, published, showingRevision]);
  return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    "data-ui": "DocumentSparkline",
    ref: setRootFlexElement
  }, publishStatus, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    flex: 1
  }, reviewButton, !collapsed && /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginLeft: 3
  }, /*#__PURE__*/_react.default.createElement(_DocumentBadges.DocumentBadges, null))));
});
exports.DocumentSparkline = DocumentSparkline;