"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentPanelHeader = void 0;

var _negate2 = _interopRequireDefault(require("lodash/negate"));

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _components = require("../../../../components");

var _timeline = require("../../timeline");

var _useDocumentPane = require("../../useDocumentPane");

var _useDeskTool = require("../../../../useDeskTool");

var _DocumentHeaderTabs = require("./DocumentHeaderTabs");

var _ValidationMenu = require("./ValidationMenu");

var _DocumentHeaderTitle = require("./DocumentHeaderTitle");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const isActionButton = item => Boolean(item.showAsAction);

const isMenuButton = (0, _negate2.default)(isActionButton);
const DocumentPanelHeader = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)((_ref, ref) => {
  let {
    rootElement
  } = _ref;
  const {
    onMenuAction,
    onPaneClose,
    onPaneSplit,
    historyController,
    validation,
    menuItems,
    menuItemGroups,
    schemaType,
    ready,
    views,
    unstable_languageFilter
  } = (0, _useDocumentPane.useDocumentPane)();
  const {
    revTime: rev
  } = historyController;
  const {
    features
  } = (0, _useDeskTool.useDeskTool)();
  const {
    index,
    BackLink,
    hasGroupSiblings
  } = (0, _components.usePaneRouter)();
  const contextMenuItems = (0, _react.useMemo)(() => menuItems.filter(isMenuButton), [menuItems]);

  const [isValidationOpen, setValidationOpen] = _react.default.useState(false);

  const showTabs = views.length > 1;
  const showVersionMenu = features.reviewChanges; // there are three kinds of buttons possible:
  //
  // 1. split pane - creates a new split pane
  // 2. close split pane — closes the current split pane
  // 3. close pane group — closes the current pane group
  // show the split pane button if they're enabled and there is more than one
  // view available to use to create a split view

  const showSplitPaneButton = features.splitViews && onPaneSplit && views.length > 1; // show the split pane button close button if the split button is showing
  // and there is more than one split pane open (aka has-siblings)

  const showSplitPaneCloseButton = showSplitPaneButton && hasGroupSiblings; // show the pane group close button if the `showSplitPaneCloseButton` is
  // _not_ showing (the split pane button replaces the group close button)
  // and if the back button is not showing (the back button and the close
  // button) do the same thing and shouldn't be shown at the same time)

  const showPaneGroupCloseButton = !showSplitPaneCloseButton && !features.backButton;
  return /*#__PURE__*/_react.default.createElement(_components.PaneHeader, {
    ref: ref,
    loading: !ready,
    title: /*#__PURE__*/_react.default.createElement(_DocumentHeaderTitle.DocumentHeaderTitle, null),
    tabs: showTabs && /*#__PURE__*/_react.default.createElement(_DocumentHeaderTabs.DocumentHeaderTabs, null),
    backButton: features.backButton && index > 0 && /*#__PURE__*/_react.default.createElement(_ui.Button, {
      as: BackLink,
      "data-as": "a",
      icon: _icons.ArrowLeftIcon,
      mode: "bleed"
    }),
    subActions: showVersionMenu && /*#__PURE__*/_react.default.createElement(_timeline.TimelineMenu, {
      chunk: rev,
      mode: "rev"
    }),
    actions: /*#__PURE__*/_react.default.createElement(_ui.Inline, {
      space: 1
    }, unstable_languageFilter.length > 0 && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, unstable_languageFilter.map((languageFilterComponent, idx) => {
      return /*#__PURE__*/(0, _react.createElement)(languageFilterComponent, {
        // eslint-disable-next-line react/no-array-index-key
        key: "language-filter-".concat(idx),
        schemaType
      });
    })), validation.length > 0 && /*#__PURE__*/_react.default.createElement(_ValidationMenu.ValidationMenu, {
      boundaryElement: rootElement,
      isOpen: isValidationOpen,
      key: "validation-menu",
      setOpen: setValidationOpen
    }), /*#__PURE__*/_react.default.createElement(_components.PaneContextMenuButton, {
      itemGroups: menuItemGroups,
      items: contextMenuItems,
      key: "context-menu",
      onAction: onMenuAction
    }), showSplitPaneButton && /*#__PURE__*/_react.default.createElement(_ui.Button, {
      icon: _icons.SplitVerticalIcon,
      key: "split-pane-button",
      mode: "bleed",
      onClick: onPaneSplit,
      title: "Split pane right"
    }), showSplitPaneCloseButton && /*#__PURE__*/_react.default.createElement(_ui.Button, {
      icon: _icons.CloseIcon,
      key: "close-view-button",
      mode: "bleed",
      onClick: onPaneClose,
      title: "Close split pane"
    }), showPaneGroupCloseButton && /*#__PURE__*/_react.default.createElement(_ui.Button, {
      icon: _icons.CloseIcon,
      key: "close-view-button",
      mode: "bleed",
      title: "Close pane group",
      as: BackLink
    }))
  });
}));
exports.DocumentPanelHeader = DocumentPanelHeader;
DocumentPanelHeader.displayName = 'DocumentPanelHeader';