"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentPanel = void 0;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _components = require("../../../components");

var _scroll = require("../../../../components/scroll");

var _datastores = require("../../../../datastores");

var _util = require("../../../../util");

var _useDocumentPane = require("../useDocumentPane");

var _inspectDialog = require("../inspectDialog");

var _hooks = require("../../../../hooks");

var _useDeskTool = require("../../../useDeskTool");

var _ReferenceChangedBanner = require("./ReferenceChangedBanner");

var _PermissionCheckBanner = require("./PermissionCheckBanner");

var _documentViews = require("./documentViews");

var _header = require("./header");

var _templateObject;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const Scroller = (0, _styledComponents.default)(_scroll.ScrollContainer)(_ref => {
  let {
    $disabled
  } = _ref;

  if ($disabled) {
    return {
      height: '100%'
    };
  }

  return (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    height: 100%;\n    overflow: auto;\n    position: relative;\n    scroll-behavior: smooth;\n    outline: none;\n  "])));
});

const DocumentPanel = function DocumentPanel(props) {
  const {
    footerHeight,
    isInspectOpen,
    rootElement
  } = props;
  const schema = (0, _hooks.useSchema)();
  const {
    activeViewId,
    displayed,
    documentId,
    documentType,
    editState,
    value,
    views,
    ready,
    schemaType
  } = (0, _useDocumentPane.useDocumentPane)();
  const {
    collapsed: layoutCollapsed
  } = (0, _components.usePaneLayout)();
  const parentPortal = (0, _ui.usePortal)();
  const {
    features
  } = (0, _useDeskTool.useDeskTool)();
  const [headerElement, setHeaderElement] = (0, _react.useState)(null);
  const headerRect = (0, _ui.useElementRect)(headerElement);
  const portalRef = (0, _react.useRef)(null);
  const [documentScrollElement, setDocumentScrollElement] = (0, _react.useState)(null);
  const requiredPermission = value._createdAt ? 'update' : 'create';
  const liveEdit = (0, _react.useMemo)(() => {
    var _schema$get;

    return Boolean((_schema$get = schema.get(documentType)) === null || _schema$get === void 0 ? void 0 : _schema$get.liveEdit);
  }, [documentType, schema]);
  const docId = value._id ? value._id : 'dummy-id';
  const docPermissionsInput = (0, _react.useMemo)(() => {
    return { ...value,
      _id: liveEdit ? (0, _util.getPublishedId)(docId) : (0, _util.getDraftId)(docId)
    };
  }, [liveEdit, value, docId]);
  const [permissions, isPermissionsLoading] = (0, _datastores.useDocumentValuePermissions)({
    document: docPermissionsInput,
    permission: requiredPermission
  });
  const activeView = (0, _react.useMemo)(() => views.find(view => view.id === activeViewId) || views[0] || {
    type: 'form'
  }, [activeViewId, views]); // Use a local portal container when split panes is supported

  const portalElement = features.splitPanes ? portalRef.current || parentPortal.element : parentPortal.element; // Calculate the height of the header

  const margins = (0, _react.useMemo)(() => {
    if (layoutCollapsed) {
      return [(headerRect === null || headerRect === void 0 ? void 0 : headerRect.height) || 0, 0, footerHeight ? footerHeight + 2 : 2, 0];
    }

    return [0, 0, 2, 0];
  }, [layoutCollapsed, footerHeight, headerRect]);
  const formViewHidden = activeView.type !== 'form';
  const activeViewNode = (0, _react.useMemo)(() => activeView.type === 'component' && activeView.component && /*#__PURE__*/(0, _react.createElement)(activeView.component, {
    document: {
      draft: (editState === null || editState === void 0 ? void 0 : editState.draft) || null,
      displayed: displayed || value,
      historical: displayed,
      published: (editState === null || editState === void 0 ? void 0 : editState.published) || null
    },
    documentId,
    options: activeView.options,
    schemaType
  }), [activeView, displayed, documentId, editState === null || editState === void 0 ? void 0 : editState.draft, editState === null || editState === void 0 ? void 0 : editState.published, schemaType, value]); // Scroll to top as `documentId` changes

  (0, _react.useEffect)(() => {
    if (!(documentScrollElement !== null && documentScrollElement !== void 0 && documentScrollElement.scrollTo)) return;
    documentScrollElement.scrollTo(0, 0);
  }, [documentId, documentScrollElement]);
  const inspectDialog = (0, _react.useMemo)(() => {
    return isInspectOpen ? /*#__PURE__*/_react.default.createElement(_inspectDialog.InspectDialog, {
      value: displayed || value
    }) : null;
  }, [isInspectOpen, displayed, value]);
  return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    direction: "column",
    flex: 2,
    overflow: layoutCollapsed ? undefined : 'hidden'
  }, /*#__PURE__*/_react.default.createElement(_header.DocumentPanelHeader, {
    rootElement: rootElement,
    ref: setHeaderElement
  }), /*#__PURE__*/_react.default.createElement(_components.PaneContent, null, /*#__PURE__*/_react.default.createElement(_ui.PortalProvider, {
    element: portalElement,
    __unstable_elements: {
      documentScrollElement: documentScrollElement
    }
  }, /*#__PURE__*/_react.default.createElement(_ui.BoundaryElementProvider, {
    element: documentScrollElement
  }, activeView.type === 'form' && !isPermissionsLoading && ready && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_PermissionCheckBanner.PermissionCheckBanner, {
    granted: Boolean(permissions === null || permissions === void 0 ? void 0 : permissions.granted),
    requiredPermission: requiredPermission
  }), /*#__PURE__*/_react.default.createElement(_ReferenceChangedBanner.ReferenceChangedBanner, null)), /*#__PURE__*/_react.default.createElement(Scroller, {
    $disabled: layoutCollapsed || false,
    "data-testid": "document-panel-scroller",
    ref: setDocumentScrollElement
  }, /*#__PURE__*/_react.default.createElement(_documentViews.FormView, {
    hidden: formViewHidden,
    key: documentId + (ready ? '_ready' : '_pending'),
    margins: margins,
    granted: Boolean(permissions === null || permissions === void 0 ? void 0 : permissions.granted)
  }), activeViewNode), inspectDialog, /*#__PURE__*/_react.default.createElement("div", {
    "data-testid": "document-panel-portal",
    ref: portalRef
  })))));
};

exports.DocumentPanel = DocumentPanel;