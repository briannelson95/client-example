"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ActionMenuButton = ActionMenuButton;

var _autoId = require("@reach/auto-id");

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _reactIs = require("react-is");

var _transitional = require("../../../../components/transitional");

var _ActionStateDialog = require("./ActionStateDialog");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ActionMenuButton(props) {
  const {
    actionStates,
    disabled
  } = props;
  const idPrefix = (0, _autoId.useId)() || '';
  const buttonRef = (0, _react.useRef)(null);
  const [actionIndex, setActionIndex] = (0, _react.useState)(-1);
  const [referenceElement, setReferenceElement] = (0, _react.useState)(null);
  const handleAction = (0, _react.useCallback)(idx => {
    setActionIndex(idx);
  }, []);
  const popoverProps = (0, _react.useMemo)(() => ({
    placement: 'top-end',
    portal: true,
    preventOverflow: true
  }), []);
  const currentAction = actionStates[actionIndex];
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ui.MenuButton, {
    id: "".concat(idPrefix, "-action-menu"),
    button: /*#__PURE__*/_react.default.createElement(_ui.Button, {
      "data-testid": "action-menu-button",
      "aria-label": "Open document actions",
      disabled: disabled,
      icon: _icons.ChevronDownIcon,
      mode: "ghost",
      ref: buttonRef
    }),
    menu: /*#__PURE__*/_react.default.createElement(_ui.Menu, {
      padding: 1
    }, actionStates.map((actionState, idx) => /*#__PURE__*/_react.default.createElement(ActionMenuListItem, {
      actionState: actionState,
      disabled: disabled,
      index: idx // eslint-disable-next-line react/no-array-index-key
      ,
      key: idx,
      onAction: handleAction
    }))),
    popover: popoverProps,
    ref: setReferenceElement
  }), currentAction && currentAction.modal && /*#__PURE__*/_react.default.createElement(_transitional.LegacyLayerProvider, {
    zOffset: "paneFooter"
  }, /*#__PURE__*/_react.default.createElement(_ActionStateDialog.ActionStateDialog, {
    modal: currentAction.modal,
    referenceElement: referenceElement
  })));
}

function ActionMenuListItem(props) {
  const {
    actionState,
    disabled,
    index,
    onAction
  } = props;
  const {
    onHandle
  } = actionState;
  const handleClick = (0, _react.useCallback)(() => {
    onAction(index);
    if (onHandle) onHandle();
  }, [index, onAction, onHandle]);

  const tooltipContent = actionState.title && /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 1
  }, actionState.title));

  return /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
    "data-testid": "action-".concat(actionState.label.replace(' ', '')),
    disabled: disabled || Boolean(actionState.disabled),
    onClick: handleClick,
    padding: 0,
    tone: actionState.tone
  }, /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    content: tooltipContent,
    disabled: !tooltipContent,
    fallbackPlacements: ['left', 'bottom'],
    placement: "top",
    portal: true
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    paddingX: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    flex: 1,
    paddingY: 3
  }, actionState.icon && /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginRight: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, /*#__PURE__*/(0, _react.isValidElement)(actionState.icon) && actionState.icon, (0, _reactIs.isValidElementType)(actionState.icon) && /*#__PURE__*/(0, _react.createElement)(actionState.icon))), /*#__PURE__*/_react.default.createElement(_ui.Text, null, actionState.label)), actionState.shortcut && /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginLeft: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Hotkeys, {
    keys: String(actionState.shortcut).split('+').map(s => s.slice(0, 1).toUpperCase() + s.slice(1))
  })))));
}