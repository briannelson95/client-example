"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ActionStateDialog = ActionStateDialog;

var _autoId = require("@reach/auto-id");

var _ui = require("@sanity/ui");

var _react = _interopRequireDefault(require("react"));

var _ConfirmDialog = require("./dialogs/ConfirmDialog");

var _ModalDialog = require("./dialogs/ModalDialog");

var _PopoverDialog = require("./dialogs/PopoverDialog");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import {DeprecatedErrorDialog} from './dialogs/DeprecatedErrorDialog'
// import {DeprecatedSuccessDialog} from './dialogs/DeprecatedSuccessDialog'
function ActionStateDialog(props) {
  const {
    modal,
    referenceElement = null
  } = props;
  const modalId = (0, _autoId.useId)() || ''; // @todo: rename this type type "component" or "node"?
  // if (modal.type === 'legacy') {
  //   return <>{modal.content}</>
  // }

  if (modal.type === 'confirm') {
    return /*#__PURE__*/_react.default.createElement(_ConfirmDialog.ConfirmDialog, {
      modal: modal,
      referenceElement: referenceElement
    });
  }

  if (modal.type === 'dialog') {
    return /*#__PURE__*/_react.default.createElement(_ModalDialog.ModalDialog, {
      modal: modal
    });
  }

  if (modal.type === 'popover') {
    return /*#__PURE__*/_react.default.createElement(_PopoverDialog.PopoverDialog, {
      modal: modal,
      referenceElement: referenceElement
    });
  } // if (modal.type === 'success') {
  //   return <DeprecatedSuccessDialog modal={modal} />
  // }
  // if (modal.type === 'error') {
  //   return <DeprecatedErrorDialog modal={modal} />
  // }
  // @todo: add validation?


  const unknownModal = modal; // eslint-disable-next-line no-console

  console.warn("Unsupported modal type ".concat(unknownModal.type));
  return /*#__PURE__*/_react.default.createElement(_ui.Dialog, {
    id: modalId // eslint-disable-next-line react/jsx-handler-names
    ,
    onClose: unknownModal.onClose // eslint-disable-next-line react/jsx-handler-names
    ,
    onClickOutside: unknownModal.onClose,
    width: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 4
  }, unknownModal.content || /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Unexpected modal type (", /*#__PURE__*/_react.default.createElement("code", null, unknownModal.type), ")")));
}