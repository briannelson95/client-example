"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HistoryStatusBarActions = exports.DocumentStatusBarActions = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _useDocumentPane = require("../useDocumentPane");

var _actions = require("../../../actions");

var _ActionMenuButton = require("./ActionMenuButton");

var _ActionStateDialog = require("./ActionStateDialog");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function DocumentStatusBarActionsInner(props) {
  const {
    disabled,
    showMenu,
    states
  } = props;
  const [firstActionState, ...menuActionStates] = states;
  const [buttonElement, setButtonElement] = (0, _react.useState)(null);
  const tooltipContent = (0, _react.useMemo)(() => {
    if (!firstActionState || !firstActionState.title && !firstActionState.shortcut) return null;
    return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
      padding: 2,
      style: {
        maxWidth: 300
      },
      align: "center"
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 1
    }, firstActionState.title), firstActionState.shortcut && /*#__PURE__*/_react.default.createElement(_ui.Box, {
      marginLeft: firstActionState.title ? 2 : 0
    }, /*#__PURE__*/_react.default.createElement(_ui.Hotkeys, {
      keys: String(firstActionState.shortcut).split('+').map(s => s.slice(0, 1).toUpperCase() + s.slice(1).toLowerCase())
    })));
  }, [firstActionState]);
  return /*#__PURE__*/_react.default.createElement(_ui.Flex, null, firstActionState && /*#__PURE__*/_react.default.createElement(_ui.LayerProvider, {
    zOffset: 200
  }, /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    disabled: !tooltipContent,
    content: tooltipContent,
    portal: true,
    placement: "top"
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    flex: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    "data-testid": "action-".concat(firstActionState.label),
    disabled: disabled || Boolean(firstActionState.disabled),
    icon: firstActionState.icon // eslint-disable-next-line react/jsx-handler-names
    ,
    onClick: firstActionState.onHandle,
    ref: setButtonElement,
    text: firstActionState.label,
    tone: firstActionState.tone || 'primary'
  })))), showMenu && menuActionStates.length > 0 && /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginLeft: 1
  }, /*#__PURE__*/_react.default.createElement(_ActionMenuButton.ActionMenuButton, {
    actionStates: menuActionStates,
    disabled: disabled
  })), firstActionState && firstActionState.modal && /*#__PURE__*/_react.default.createElement(_ActionStateDialog.ActionStateDialog, {
    modal: firstActionState.modal,
    referenceElement: buttonElement
  }));
}

const DocumentStatusBarActions = /*#__PURE__*/(0, _react.memo)(function DocumentStatusBarActions() {
  const {
    actions,
    connectionState,
    editState
  } = (0, _useDocumentPane.useDocumentPane)(); // const [isMenuOpen, setMenuOpen] = useState(false)
  // const handleMenuOpen = useCallback(() => setMenuOpen(true), [])
  // const handleMenuClose = useCallback(() => setMenuOpen(false), [])
  // const handleActionComplete = useCallback(() => setMenuOpen(false), [])

  if (!actions || !editState) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement(_actions.RenderActionCollectionState // component={}
  // onActionComplete={handleActionComplete}
  , {
    actions: actions // @ts-expect-error TODO: fix the document actions
    ,
    actionProps: editState
  }, _ref => {
    let {
      states
    } = _ref;
    return /*#__PURE__*/_react.default.createElement(DocumentStatusBarActionsInner, {
      disabled: connectionState !== 'connected' // isMenuOpen={isMenuOpen}
      // onMenuOpen={handleMenuOpen}
      // onMenuClose={handleMenuClose}
      ,
      showMenu: actions.length > 1,
      states: states
    });
  });
});
exports.DocumentStatusBarActions = DocumentStatusBarActions;
const HistoryStatusBarActions = /*#__PURE__*/(0, _react.memo)(function HistoryStatusBarActions() {
  var _historyController$re;

  const {
    connectionState,
    editState,
    historyController
  } = (0, _useDocumentPane.useDocumentPane)();
  const revision = ((_historyController$re = historyController.revTime) === null || _historyController$re === void 0 ? void 0 : _historyController$re.id) || '';
  const disabled = ((editState === null || editState === void 0 ? void 0 : editState.draft) || (editState === null || editState === void 0 ? void 0 : editState.published) || {})._rev === revision;
  const actionProps = (0, _react.useMemo)(() => ({ ...(editState || {}),
    revision
  }), [editState, revision]);
  const historyActions = (0, _react.useMemo)(() => [_actions.HistoryRestoreAction], []);
  return /*#__PURE__*/_react.default.createElement(_actions.RenderActionCollectionState, {
    actions: historyActions,
    actionProps: actionProps
  }, _ref2 => {
    let {
      states
    } = _ref2;
    return /*#__PURE__*/_react.default.createElement(DocumentStatusBarActionsInner, {
      disabled: connectionState !== 'connected' || Boolean(disabled),
      showMenu: false,
      states: states
    });
  });
});
exports.HistoryStatusBarActions = HistoryStatusBarActions;