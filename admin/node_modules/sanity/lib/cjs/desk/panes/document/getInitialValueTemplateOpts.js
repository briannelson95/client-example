"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getInitialValueTemplateOpts = getInitialValueTemplateOpts;

/**
 * @internal
 */
function getInitialValueTemplateOpts(templates, opts) {
  const payload = opts.panePayload || {};
  const structureNodeTemplate = opts.templateName;

  if (opts.urlTemplate && structureNodeTemplate && structureNodeTemplate !== opts.urlTemplate) {
    // eslint-disable-next-line no-console
    console.warn("Conflicting templates: URL says \"".concat(opts.urlTemplate, "\", structure node says \"").concat(structureNodeTemplate, "\". Using \"").concat(structureNodeTemplate, "\"."));
  }

  const template = structureNodeTemplate || opts.urlTemplate;
  const typeTemplates = templates.filter(t => t.schemaType === opts.documentType);
  const templateParams = { ...opts.templateParams,
    ...(typeof payload === 'object' ? payload || {} : {})
  };
  let templateName = template; // If we have not specified a specific template, and we only have a single
  // template available for a schema type, use it

  if (!template && typeTemplates.length === 1) {
    templateName = typeTemplates[0].id;
  }

  return {
    templateName: templateName,
    templateParams
  };
}