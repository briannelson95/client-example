"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimelineMenu = TimelineMenu;

var _upperFirst2 = _interopRequireDefault(require("lodash/upperFirst"));

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _hooks = require("../../../../hooks");

var _useDocumentPane = require("../useDocumentPane");

var _helpers = require("./helpers");

var _timeline = require("./timeline");

var _templateObject;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const Root = (0, _styledComponents.default)(_ui.Popover)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  & > div {\n    display: flex;\n    flex-direction: column;\n\n    & > [data-ui='Card'] {\n      flex: 1;\n      min-height: 0;\n      display: flex;\n      flex-direction: column;\n\n      /* This is the scrollable container rendered by <Timeline /> */\n      & > div {\n        flex: 1;\n        min-height: 0;\n      }\n    }\n  }\n"])));

function TimelineMenu(_ref) {
  let {
    chunk,
    mode
  } = _ref;
  const {
    historyController,
    setTimelineRange,
    setTimelineMode,
    timeline,
    ready
  } = (0, _useDocumentPane.useDocumentPane)();
  const [open, setOpen] = (0, _react.useState)(false);
  const [buttonRef, setButtonRef] = (0, _react.useState)(null);
  const [menuContent, setMenuContent] = (0, _react.useState)(null);
  const handleOpen = (0, _react.useCallback)(() => {
    setTimelineMode(mode);
    setOpen(true);
  }, [mode, setTimelineMode]);
  const handleClose = (0, _react.useCallback)(() => {
    setTimelineMode('closed');
    setOpen(false);
  }, [setTimelineMode]);
  const handleClickOutside = (0, _react.useCallback)(() => {
    handleClose();
  }, [handleClose]);
  (0, _ui.useClickOutside)(handleClickOutside, [menuContent, buttonRef]);
  const selectRev = (0, _react.useCallback)(revChunk => {
    const [sinceId, revId] = historyController.findRangeForNewRev(revChunk);
    setTimelineMode('closed');
    setOpen(false);
    setTimelineRange(sinceId, revId);
  }, [historyController, setTimelineMode, setTimelineRange]);
  const selectSince = (0, _react.useCallback)(sinceChunk => {
    const [sinceId, revId] = historyController.findRangeForNewSince(sinceChunk);
    setTimelineMode('closed');
    setOpen(false);
    setTimelineRange(sinceId, revId);
  }, [historyController, setTimelineMode, setTimelineRange]);
  const loadMoreHistory = (0, _react.useCallback)(state => {
    historyController.setLoadMore(state);
  }, [historyController]);

  const content = open && /*#__PURE__*/_react.default.createElement("div", {
    ref: setMenuContent
  }, mode === 'rev' ? /*#__PURE__*/_react.default.createElement(_timeline.Timeline, _extends({
    onSelect: selectRev,
    onLoadMore: loadMoreHistory,
    timeline: timeline
  }, (0, _helpers.revTimelineProps)(historyController.realRevChunk))) : /*#__PURE__*/_react.default.createElement(_timeline.Timeline, _extends({
    onSelect: selectSince,
    onLoadMore: loadMoreHistory,
    timeline: timeline
  }, (0, _helpers.sinceTimelineProps)(historyController.sinceTime, historyController.realRevChunk))));

  const timeAgo = (0, _hooks.useTimeAgo)((chunk === null || chunk === void 0 ? void 0 : chunk.endTimestamp) || '', {
    agoSuffix: true
  });
  const revLabel = chunk ? "".concat((0, _upperFirst2.default)((0, _helpers.formatTimelineEventLabel)(chunk.type)), " ").concat(timeAgo) : 'Current version';
  const sinceLabel = chunk ? "Since ".concat((0, _helpers.formatTimelineEventLabel)(chunk.type), " ").concat(timeAgo) : 'Since unknown version';
  const openLabel = mode === 'rev' ? 'Select version' : 'Review changes since';
  const buttonLabel = mode === 'rev' ? revLabel : sinceLabel;
  return /*#__PURE__*/_react.default.createElement(Root, {
    constrainSize: true,
    content: content,
    "data-ui": "versionMenu",
    open: open,
    portal: true,
    referenceElement: buttonRef
  }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    disabled: !ready,
    mode: "bleed",
    fontSize: 1,
    padding: 2,
    iconRight: _icons.SelectIcon,
    onClick: open ? handleClose : handleOpen,
    ref: setButtonRef,
    selected: open,
    text: open ? openLabel : buttonLabel
  }));
}