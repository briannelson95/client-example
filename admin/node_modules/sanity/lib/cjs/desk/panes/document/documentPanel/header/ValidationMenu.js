"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidationMenu = ValidationMenu;

var _autoId = require("@reach/auto-id");

var _icons = require("@sanity/icons");

var _types = require("@sanity/types");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _validation = require("../../../../../components/validation");

var _useDocumentPane = require("../../useDocumentPane");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const BUTTON_PROPS = {
  error: {
    tone: 'critical',
    icon: _icons.ErrorOutlineIcon
  },
  warning: {
    tone: 'caution',
    icon: _icons.WarningOutlineIcon
  },
  info: {
    tone: 'primary',
    icon: _icons.InfoOutlineIcon
  }
};

function ValidationMenu(props) {
  const {
    boundaryElement,
    isOpen,
    setOpen
  } = props;
  const {
    onFocus,
    onPathOpen,
    schemaType,
    validation
  } = (0, _useDocumentPane.useDocumentPane)();
  const id = (0, _autoId.useId)();
  const hasValidationMarkers = validation.length > 0;
  const hasErrorMarkers = validation.some(_types.isValidationErrorMarker);
  const hasWarningMarkers = validation.some(_types.isValidationWarningMarker);
  const hasInfoMarkers = validation.some(_types.isValidationInfoMarker);
  const buttonProps = (0, _react.useMemo)(() => {
    if (hasErrorMarkers) return BUTTON_PROPS.error;
    if (hasWarningMarkers) return BUTTON_PROPS.warning;
    if (hasInfoMarkers) return BUTTON_PROPS.info;
    return undefined;
  }, [hasErrorMarkers, hasInfoMarkers, hasWarningMarkers]);
  const handleClose = (0, _react.useCallback)(() => setOpen(false), [setOpen]);
  if (!hasValidationMarkers) return null;
  return /*#__PURE__*/_react.default.createElement(_ui.MenuButton, {
    id: id || '',
    button: /*#__PURE__*/_react.default.createElement(_ui.Button, _extends({}, buttonProps, {
      title: "Show validation issues",
      mode: "bleed",
      "data-testid": "validation-list-button"
    })),
    menu: /*#__PURE__*/_react.default.createElement(_ui.Menu, {
      open: isOpen
    }, /*#__PURE__*/_react.default.createElement(_validation.ValidationList, {
      documentType: schemaType,
      validation: validation,
      onClose: handleClose,
      onFocus: onPathOpen
    })),
    popover: {
      portal: true,
      boundaryElement: boundaryElement,
      constrainSize: true,
      preventOverflow: true,
      width: 0
    },
    placement: "bottom-end"
  });
}