"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Timeline = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _timelineItem = require("./timelineItem");

var _timeline = require("./timeline.styled");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Must be a positive number
const LOAD_MORE_OFFSET = 20;

const Timeline = _ref => {
  let {
    timeline,
    disabledBeforeSelection,
    topSelection,
    bottomSelection,
    onSelect,
    onLoadMore
  } = _ref;
  const rootRef = (0, _react.useRef)(null);
  const listRef = (0, _react.useRef)(null);
  const [loadingElement, setLoadingElement] = (0, _react.useState)(null);
  let state = disabledBeforeSelection ? 'disabled' : 'enabled';
  const checkIfLoadIsNeeded = (0, _react.useCallback)(() => {
    const rootEl = rootRef.current;

    if (loadingElement && rootEl) {
      const {
        offsetHeight,
        scrollTop
      } = rootEl;
      const bottomPosition = offsetHeight + scrollTop + LOAD_MORE_OFFSET;
      const isVisible = loadingElement.offsetTop < bottomPosition;

      if (isVisible) {
        // @todo: find out why, for some reason, it won't load without RAF wrapper
        requestAnimationFrame(() => onLoadMore(isVisible));
      }
    }
  }, [onLoadMore, loadingElement]); // Load whenever it's needed

  (0, _react.useEffect)(checkIfLoadIsNeeded, [checkIfLoadIsNeeded]);
  return /*#__PURE__*/_react.default.createElement(_timeline.Root, {
    ref: rootRef,
    onScroll: checkIfLoadIsNeeded,
    "data-ui": "timeline"
  }, timeline.chunkCount === 0 && /*#__PURE__*/_react.default.createElement(_timeline.StackWrapper, {
    padding: 3,
    space: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 1,
    weight: "semibold"
  }, "No document history"), /*#__PURE__*/_react.default.createElement(_ui.Text, {
    muted: true,
    size: 1
  }, "When changing the content of the document, the document versions will appear in this menu.")), timeline.chunkCount > 0 && /*#__PURE__*/_react.default.createElement(_timeline.MenuWrapper, {
    ref: listRef,
    padding: 1,
    space: 0
  }, timeline.mapChunks(chunk => {
    const isSelectionTop = topSelection === chunk;
    const isSelectionBottom = bottomSelection === chunk;

    if (isSelectionTop) {
      state = 'withinSelection';
    }

    if (isSelectionBottom) {
      state = 'selected';
    }

    const item = /*#__PURE__*/_react.default.createElement(_timelineItem.TimelineItem, {
      chunk: chunk,
      isSelectionBottom: isSelectionBottom,
      isSelectionTop: isSelectionTop,
      key: chunk.id,
      state: state,
      onSelect: onSelect,
      type: chunk.type,
      timestamp: chunk.endTimestamp
    }); // Flip it back to normal after we've rendered the active one.


    if (state === 'selected') {
      state = 'enabled';
    }

    return item;
  })), !timeline.reachedEarliestEntry && /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    justify: "center",
    padding: 4,
    ref: setLoadingElement
  }, /*#__PURE__*/_react.default.createElement(_ui.Spinner, {
    muted: true
  })));
};

exports.Timeline = Timeline;
Timeline.displayName = 'Timeline';