"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConfirmDialog = ConfirmDialog;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _constants = require("./constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ConfirmDialog(props) {
  const {
    modal,
    referenceElement
  } = props;
  return /*#__PURE__*/_react.default.createElement(_ui.Popover, {
    content: /*#__PURE__*/_react.default.createElement(ConfirmDialogContent, {
      modal: modal
    }),
    fallbackPlacements: _constants.POPOVER_FALLBACK_PLACEMENTS,
    open: true,
    placement: "top",
    portal: true,
    preventOverflow: true,
    referenceElement: referenceElement
  });
}

function ConfirmDialogContent(props) {
  const {
    modal
  } = props;
  const {
    cancelButtonIcon,
    cancelButtonText,
    confirmButtonIcon,
    confirmButtonText,
    // color,
    message,
    onCancel,
    onConfirm,
    tone
  } = modal;
  const {
    isTopLayer
  } = (0, _ui.useLayer)();
  const [element, setElement] = (0, _react.useState)(null);
  const handleClickOutside = (0, _react.useCallback)(() => {
    if (isTopLayer) onCancel();
  }, [isTopLayer, onCancel]);
  const handleGlobalKeyDown = (0, _react.useCallback)(event => {
    if (event.key === 'Escape' && isTopLayer) onCancel();
  }, [isTopLayer, onCancel]);
  (0, _ui.useClickOutside)(handleClickOutside, [element]);
  (0, _ui.useGlobalKeyDown)(handleGlobalKeyDown);
  return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    direction: "column",
    ref: setElement,
    style: {
      minWidth: 320 - 16,
      maxWidth: 400
    }
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    flex: 1,
    overflow: "auto",
    padding: 4
  }, message), /*#__PURE__*/_react.default.createElement(_ui.Box, {
    paddingX: 4,
    paddingY: 3,
    style: {
      borderTop: '1px solid var(--card-border-color)'
    }
  }, /*#__PURE__*/_react.default.createElement(_ui.Grid, {
    columns: 2,
    gap: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    icon: cancelButtonIcon,
    onClick: onCancel,
    mode: "ghost",
    text: cancelButtonText || 'Cancel'
  }), /*#__PURE__*/_react.default.createElement(_ui.Button, {
    icon: confirmButtonIcon,
    onClick: onConfirm,
    text: confirmButtonText || 'Confirm',
    tone: tone
  }))));
}