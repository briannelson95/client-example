"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoadingPane = void 0;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _Delay = require("../../components/Delay");

var _pane = require("../../components/pane");

var _getWaitMessages = require("./getWaitMessages");

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const DELAY = false;
const DEFAULT_MESSAGE = 'Loadingâ€¦';
const Content = (0, _styledComponents.default)(_ui.Flex)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  opacity: 0;\n  transition: opacity 200ms;\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n"])));
/**
 * @internal
 */

const LoadingPane = /*#__PURE__*/(0, _react.memo)(props => {
  const {
    delay = 300,
    flex,
    message: messageProp = _getWaitMessages.getWaitMessages,
    minWidth,
    paneKey,
    path,
    selected,
    title,
    tone
  } = props;
  const resolvedMessage = (0, _react.useMemo)(() => {
    if (typeof messageProp === 'function') {
      return messageProp(path ? path.split(';') : []);
    }

    return messageProp;
  }, [messageProp, path]);
  const [currentMessage, setCurrentMessage] = (0, _react.useState)(() => {
    if (typeof resolvedMessage === 'string') return resolvedMessage;
    return DEFAULT_MESSAGE;
  });
  (0, _react.useEffect)(() => {
    if (typeof resolvedMessage !== 'object') return undefined;
    if (typeof resolvedMessage.subscribe === 'function') return undefined;
    const sub = resolvedMessage.subscribe(setCurrentMessage);
    return () => sub.unsubscribe();
  }, [resolvedMessage]);
  const [contentElement, setContentElement] = (0, _react.useState)(null);
  const [mounted, setMounted] = (0, _react.useState)(false);
  (0, _react.useEffect)(() => {
    if (!contentElement) return undefined;
    return (0, _ui._raf2)(() => setMounted(true));
  }, [contentElement]);

  const content = /*#__PURE__*/_react.default.createElement(Content, {
    align: "center",
    "data-mounted": mounted ? '' : undefined,
    direction: "column",
    height: "fill",
    justify: "center",
    ref: setContentElement
  }, /*#__PURE__*/_react.default.createElement(_ui.Spinner, {
    muted: true
  }), (title || currentMessage) && /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginTop: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    align: "center",
    muted: true,
    size: 1
  }, title || currentMessage)));

  return /*#__PURE__*/_react.default.createElement(_pane.Pane, {
    flex: flex,
    id: paneKey,
    minWidth: minWidth,
    selected: selected,
    tone: tone
  }, /*#__PURE__*/_react.default.createElement(_pane.PaneContent, null, DELAY ? /*#__PURE__*/_react.default.createElement(_Delay.Delay, {
    ms: delay
  }, content) : content));
});
exports.LoadingPane = LoadingPane;
LoadingPane.displayName = 'LoadingPane';