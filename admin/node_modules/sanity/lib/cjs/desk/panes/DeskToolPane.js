"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeskToolPane = void 0;

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _react = _interopRequireWildcard(require("react"));

var _paneRouter = require("../components/paneRouter");

var _unknown = require("./unknown");

var _loading = require("./loading");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// TODO: audit this creates separate chunks
const paneMap = {
  component: /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./userComponent')))),
  document: /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./document')))),
  documentList: /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./documentList')))),
  list: /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./list'))))
};
/**
 * NOTE: The same pane might appear multiple times (split pane), so use index as tiebreaker
 *
 * @internal
 */

const DeskToolPane = /*#__PURE__*/(0, _react.memo)(function DeskToolPane(props) {
  const {
    active,
    childItemId,
    groupIndex,
    index,
    itemId,
    pane,
    paneKey,
    params,
    payload,
    selected,
    siblingIndex
  } = props;
  const PaneComponent = paneMap[pane.type] || _unknown.UnknownPane;
  return /*#__PURE__*/_react.default.createElement(_paneRouter.PaneRouterProvider, {
    flatIndex: index,
    index: groupIndex,
    params: params,
    payload: payload,
    siblingIndex: siblingIndex
  }, /*#__PURE__*/_react.default.createElement(_react.Suspense, {
    fallback: /*#__PURE__*/_react.default.createElement(_loading.LoadingPane, {
      paneKey: paneKey
    })
  }, /*#__PURE__*/_react.default.createElement(PaneComponent, {
    childItemId: childItemId || '',
    index: index,
    itemId: itemId,
    isActive: active,
    isSelected: selected,
    paneKey: paneKey // @ts-expect-error TS doesn't know how to handle this intersection
    ,
    pane: pane
  })));
}, (_ref, _ref2) => {
  let {
    params: prevParams = {},
    payload: prevPayload = null,
    ...prev
  } = _ref;
  let {
    params: nextParams = {},
    payload: nextPayload = null,
    ...next
  } = _ref2;
  // deeply compare these objects (it's okay, they're small)
  if (!(0, _isEqual2.default)(prevParams, nextParams)) return false;
  if (!(0, _isEqual2.default)(prevPayload, nextPayload)) return false;
  const keys = new Set([...Object.keys(prev), ...Object.keys(next)]); // then shallow equal the rest

  for (const key of keys) {
    if (prev[key] !== next[key]) return false;
  }

  return true;
});
exports.DeskToolPane = DeskToolPane;