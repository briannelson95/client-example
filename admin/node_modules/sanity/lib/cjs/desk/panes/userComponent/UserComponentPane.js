"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserComponentPane = UserComponentPane;

var _react = _interopRequireWildcard(require("react"));

var _reactIs = require("react-is");

var _components = require("../../components");

var _UserComponentPaneHeader = require("./UserComponentPaneHeader");

var _UserComponentPaneContent = require("./UserComponentPaneContent");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @internal
 */
function UserComponentPane(props) {
  const {
    index,
    pane,
    paneKey,
    ...restProps
  } = props;
  const {
    params
  } = (0, _components.usePaneRouter)();
  const {
    child,
    component,
    menuItems,
    menuItemGroups,
    title = '',
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    type: _unused,
    __preserveInstance = false,
    ...restPane
  } = pane;
  const [ref, setRef] = (0, _react.useState)(null);
  return /*#__PURE__*/_react.default.createElement(_components.Pane, {
    id: paneKey,
    minWidth: 320,
    selected: restProps.isSelected
  }, /*#__PURE__*/_react.default.createElement(_UserComponentPaneHeader.UserComponentPaneHeader, {
    actionHandlers: ref === null || ref === void 0 ? void 0 : ref.actionHandlers,
    index: index,
    menuItems: menuItems,
    menuItemGroups: menuItemGroups,
    title: title
  }), /*#__PURE__*/_react.default.createElement(_UserComponentPaneContent.UserComponentPaneContent, null, (0, _reactIs.isValidElementType)(component) && /*#__PURE__*/(0, _react.createElement)(component, { // this forces a re-render when the router panes change. note: in
    // theory, this shouldn't be necessary and the downstream user
    // component could internally handle these updates, but this was done
    // to preserve older desk tool behavior. if the experimental flag
    // `__preserveInstance` is true, then no key will be applied.
    ...(!__preserveInstance && {
      key: "".concat(restProps.itemId, "-").concat(restProps.childItemId)
    }),
    ...restProps,
    ...restPane,
    // NOTE: here we're utilizing the function form of refs so setting
    // the ref causes a re-render for `UserComponentPaneHeader`
    ...{
      ref: setRef
    },
    child: child,
    // @todo: Fix typings
    paneKey,
    // NOTE: this is for backwards compatibility (<= 2.20.0)
    urlParams: params
  }), /*#__PURE__*/(0, _react.isValidElement)(component) && component));
}