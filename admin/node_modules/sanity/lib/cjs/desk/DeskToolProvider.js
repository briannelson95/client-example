"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeskToolProvider = DeskToolProvider;

var _react = _interopRequireWildcard(require("react"));

var _useConfigContextFromSource = require("../config/useConfigContextFromSource");

var _studio = require("../studio");

var _DeskToolContext = require("./DeskToolContext");

var _structureBuilder = require("./structureBuilder");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function DeskToolProvider(_ref) {
  let {
    defaultDocumentNode,
    structure: resolveStructure,
    children
  } = _ref;
  const [layoutCollapsed, setLayoutCollapsed] = (0, _react.useState)(false);
  const source = (0, _studio.useSource)();
  const configContext = (0, _useConfigContextFromSource.useConfigContextFromSource)(source);
  const S = (0, _react.useMemo)(() => {
    return (0, _structureBuilder.createStructureBuilder)({
      defaultDocumentNode,
      source
    });
  }, [defaultDocumentNode, source]);
  const rootPaneNode = (0, _react.useMemo)(() => {
    // TODO: unify types and remove cast
    if (resolveStructure) return resolveStructure(S, configContext);
    return S.defaults();
  }, [S, resolveStructure, configContext]);
  return /*#__PURE__*/_react.default.createElement(_DeskToolContext.DeskToolContext.Provider, {
    value: (0, _react.useMemo)(() => {
      return {
        features: {
          backButton: layoutCollapsed,
          reviewChanges: !layoutCollapsed,
          splitPanes: !layoutCollapsed,
          splitViews: !layoutCollapsed
        },
        layoutCollapsed,
        setLayoutCollapsed,
        rootPaneNode,
        structureContext: S.context
      };
    }, [layoutCollapsed, rootPaneNode, S.context])
  }, children);
}