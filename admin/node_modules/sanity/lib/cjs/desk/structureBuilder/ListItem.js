"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ListItemBuilder = void 0;

var _camelCase2 = _interopRequireDefault(require("lodash/camelCase"));

var _DocumentList = require("./DocumentList");

var _SerializeError = require("./SerializeError");

var _List = require("./List");

var _Document = require("./Document");

var _Component = require("./Component");

var _validateId = require("./util/validateId");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ListItemBuilder {
  constructor(_context, spec) {
    this._context = _context;

    _defineProperty(this, "spec", void 0);

    this.spec = spec ? spec : {};
  }

  id(id) {
    return this.clone({
      id
    });
  }

  getId() {
    return this.spec.id;
  }

  title(title) {
    return this.clone({
      title,
      id: this.spec.id || (0, _camelCase2.default)(title)
    });
  }

  getTitle() {
    return this.spec.title;
  }

  icon(icon) {
    return this.clone({
      icon
    });
  }

  showIcon() {
    let enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    return this.clone({
      displayOptions: { ...(this.spec.displayOptions || {}),
        showIcon: enabled
      }
    });
  }

  getShowIcon() {
    return this.spec.displayOptions ? this.spec.displayOptions.showIcon : undefined;
  }

  getIcon() {
    return this.spec.icon;
  }

  child(child) {
    return this.clone({
      child
    });
  }

  getChild() {
    return this.spec.child;
  }

  schemaType(schemaType) {
    return this.clone({
      schemaType
    });
  }

  getSchemaType() {
    return this.spec.schemaType;
  }

  serialize() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      path: []
    };
    const {
      id,
      title,
      child
    } = this.spec;

    if (typeof id !== 'string' || !id) {
      throw new _SerializeError.SerializeError('`id` is required for list items', options.path, options.index).withHelpUrl(_SerializeError.HELP_URL.ID_REQUIRED);
    }

    if (!options.titleIsOptional && (typeof title !== 'string' || !title)) {
      throw new _SerializeError.SerializeError('`title` is required for list items', options.path, id).withHelpUrl(_SerializeError.HELP_URL.TITLE_REQUIRED);
    }

    let schemaType = this.spec.schemaType;

    if (typeof schemaType === 'string') {
      const type = this._context.schema.get(schemaType);

      if (!type) {
        throw new _SerializeError.SerializeError("Could not find type \"".concat(schemaType, "\" in schema"), options.path, id).withHelpUrl(_SerializeError.HELP_URL.SCHEMA_TYPE_NOT_FOUND);
      }

      schemaType = type;
    }

    const serializeOptions = {
      path: options.path.concat(id),
      hint: 'child'
    };
    let listChild = child instanceof _Component.ComponentBuilder || child instanceof _DocumentList.DocumentListBuilder || child instanceof _Document.DocumentBuilder || child instanceof _List.ListBuilder ? child.serialize(serializeOptions) : child; // In the case of a function, create a bound version that will pass the correct serialize
    // context, so we may lazily resolve it at some point in the future without losing context

    if (typeof listChild === 'function') {
      const originalChild = listChild;

      listChild = (itemId, childOptions) => {
        return originalChild(itemId, { ...childOptions,
          serializeOptions
        });
      };
    }

    return { ...this.spec,
      id: (0, _validateId.validateId)(id, options.path, options.index),
      schemaType,
      child: listChild,
      title,
      type: 'listItem'
    };
  }

  clone(withSpec) {
    const builder = new ListItemBuilder(this._context);
    builder.spec = { ...this.spec,
      ...(withSpec || {})
    };
    return builder;
  }

}

exports.ListItemBuilder = ListItemBuilder;