"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getExtendedProjection = getExtendedProjection;
const IMPLICIT_FIELDS = ['_id', '_type', '_createdAt', '_updatedAt', '_rev']; // Takes a path array and a schema type and builds a GROQ join every time it enters a reference field

function joinReferences(schemaType, path) {
  const [head, ...tail] = path;

  if (!('fields' in schemaType)) {
    return '';
  }

  const schemaField = schemaType.fields.find(field => field.name === head);

  if (!schemaField) {
    if (!IMPLICIT_FIELDS.includes(head)) {
      // eslint-disable-next-line no-console
      console.warn('The current ordering config targeted the nonexistent field "%s" on schema type "%s". It should be one of %o', head, schemaType.name, schemaType.fields.map(field => field.name));
    }

    return '';
  }

  if ('to' in schemaField.type && schemaField.type.name === 'reference') {
    const refTypes = schemaField.type.to;
    return "".concat(head, "->{").concat(refTypes.map(refType => joinReferences(refType, tail)).join(','), "}");
  }

  const tailFields = tail.length > 0 && joinReferences(schemaField.type, tail);
  const tailWrapper = tailFields ? "{".concat(tailFields, "}") : '';
  return tail.length > 0 ? "".concat(head).concat(tailWrapper) : head;
}

function getExtendedProjection(schemaType, orderBy) {
  return orderBy.map(ordering => joinReferences(schemaType, ordering.field.split('.'))).join(', ');
}