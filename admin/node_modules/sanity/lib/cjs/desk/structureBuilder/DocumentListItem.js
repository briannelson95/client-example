"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentListItemBuilder = void 0;
exports.isDocumentListItem = isDocumentListItem;

var _util = require("../../util");

var _ListItem = require("./ListItem");

var _SerializeError = require("./SerializeError");

var _Document = require("./Document");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const createDefaultChildResolver = (context, spec) => documentId => {
  const schemaType = spec.schemaType && (typeof spec.schemaType === 'string' ? spec.schemaType : spec.schemaType.name);
  return schemaType ? context.resolveDocumentNode({
    schemaType,
    documentId
  }) : new _Document.DocumentBuilder(context).id('documentEditor').documentId(documentId);
};

class DocumentListItemBuilder extends _ListItem.ListItemBuilder {
  constructor(_context, spec) {
    super(_context, spec);
    this._context = _context;

    _defineProperty(this, "spec", void 0);

    this.spec = spec ? spec : {};
  }

  serialize() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      path: []
    };
    const spec = super.serialize({ ...options,
      titleIsOptional: true
    });

    if (!spec.schemaType) {
      throw new _SerializeError.SerializeError('`schemaType` is required for document list items', options.path, options.index).withHelpUrl(_SerializeError.HELP_URL.SCHEMA_TYPE_REQUIRED);
    }

    const child = spec.child || createDefaultChildResolver(this._context, spec);
    return { ...spec,
      child,
      schemaType: spec.schemaType,
      _id: spec.id
    };
  }

  clone(withSpec) {
    const builder = new DocumentListItemBuilder(this._context);
    builder.spec = { ...this.spec,
      ...(withSpec || {})
    };
    return builder;
  }

}

exports.DocumentListItemBuilder = DocumentListItemBuilder;

function isDocumentListItem(item) {
  return (0, _util.isRecord)(item) && typeof item.schemaType !== 'undefined' && typeof item._id === 'string';
}