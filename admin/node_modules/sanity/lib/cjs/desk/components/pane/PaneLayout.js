"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PaneLayout = PaneLayout;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _PaneLayoutContext = require("./PaneLayoutContext");

var _PaneLayout = require("./PaneLayout.styles");

var _paneLayoutController = require("./paneLayoutController");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * @beta This API will change. DO NOT USE IN PRODUCTION.
 */
function PaneLayout(props) {
  const {
    children,
    minWidth,
    onCollapse,
    onExpand,
    ...restProps
  } = props;
  const controller = (0, _react.useMemo)(() => (0, _paneLayoutController.createPaneLayoutController)(), []);
  const [rootElement, setRootElement] = (0, _react.useState)(null);
  const rootRect = (0, _ui.useElementRect)(rootElement);
  const width = (rootRect === null || rootRect === void 0 ? void 0 : rootRect.width) || 0;
  const collapsed = width === undefined || !minWidth ? undefined : width < minWidth;
  const [state, setState] = (0, _react.useState)({
    expandedElement: null,
    panes: [],
    resizing: false
  }); // Set root element

  (0, _react.useEffect)(() => controller.setRootElement(rootElement), [controller, rootElement]); // Set root size

  (0, _react.useEffect)(() => controller.setRootWidth(width), [controller, width]); // Subscribe to state changes

  (0, _react.useEffect)(() => controller.subscribe(setState), [controller]); // Call the `onCollapse` and `onExpand` callbacks as the `collapsed` boolean changes

  (0, _react.useEffect)(() => {
    if (collapsed === undefined) return;
    if (collapsed && onCollapse) onCollapse();
    if (!collapsed && onExpand) onExpand();
  }, [collapsed, onCollapse, onExpand]); // This is the context value that gives each pane the information they need

  const paneLayout = (0, _react.useMemo)(() => ({
    collapse: controller.collapse,
    collapsed,
    expand: controller.expand,
    expandedElement: state.expandedElement,
    mount: controller.mount,
    panes: state.panes,
    resize: controller.resize,
    resizing: state.resizing
  }), [collapsed, controller, state.expandedElement, state.panes, state.resizing]);
  return /*#__PURE__*/_react.default.createElement(_PaneLayoutContext.PaneLayoutContext.Provider, {
    value: paneLayout
  }, /*#__PURE__*/_react.default.createElement(_PaneLayout.Root, _extends({
    "data-ui": "PaneLayout"
  }, restProps, {
    "data-collapsed": collapsed ? '' : undefined // The `data-resizing` attribute is used to improve cursor behavior
    ,
    "data-resizing": state.resizing ? '' : undefined // The `data-mounted` attribute is used to fade in the layout and prevent flash of
    // non-collapsed panes
    ,
    "data-mounted": width ? '' : undefined,
    ref: setRootElement
  }), children));
}