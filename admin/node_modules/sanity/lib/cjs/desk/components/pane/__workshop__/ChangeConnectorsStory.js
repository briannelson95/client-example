"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ChangeConnectorsStory;

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _uiWorkshop = require("@sanity/ui-workshop");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _changeIndicators = require("../../../../components/changeIndicators");

var _scroll = require("../../../../components/scroll");

var _Pane = require("../Pane");

var _PaneContent = require("../PaneContent");

var _PaneFooter = require("../PaneFooter");

var _PaneHeader = require("../PaneHeader");

var _PaneLayout = require("../PaneLayout");

var _templateObject, _templateObject2, _templateObject3;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const TestContainer = (0, _styledComponents.default)(_ui.Container).attrs({
  height: 'fill',
  width: 1
})(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  max-height: 600px;\n"])));
const Root = (0, _styledComponents.default)(_changeIndicators.ChangeConnectorRoot)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  height: 100%;\n  outline: 1px solid var(--card-border-color);\n  position: relative;\n"])));
const Scroller = (0, _styledComponents.default)(_scroll.ScrollContainer)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n"])));

function ChangeConnectorsStory() {
  const [reviewChanges, setReviewChanges] = (0, _react.useState)(false);
  const onSetFocus = (0, _react.useCallback)(() => undefined, []);
  const [focusPath, setFocusPath] = (0, _react.useState)([]);
  const toggleReviewChanges = (0, _react.useCallback)(() => setReviewChanges(v => !v), []);
  const openReviewChanges = (0, _react.useCallback)(() => setReviewChanges(true), []);
  const closeReviewChanges = (0, _react.useCallback)(() => setReviewChanges(false), []);
  const [portalElement, setPortalElement] = (0, _react.useState)(null);
  const [documentContentElement, setdocumentContentElement] = (0, _react.useState)(null);
  const handleLayoutCollapse = (0, _uiWorkshop.useAction)('PaneLayout.onCollapse');
  const handleLayoutExpand = (0, _uiWorkshop.useAction)('PaneLayout.onExpand');
  return /*#__PURE__*/_react.default.createElement(_ui.LayerProvider, null, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    height: "fill",
    tone: "transparent"
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    height: "fill",
    justify: "center",
    padding: 4,
    sizing: "border"
  }, /*#__PURE__*/_react.default.createElement(TestContainer, null, /*#__PURE__*/_react.default.createElement(Root, {
    isReviewChangesOpen: reviewChanges,
    onOpenReviewChanges: openReviewChanges,
    onSetFocus: onSetFocus
  }, /*#__PURE__*/_react.default.createElement(_PaneLayout.PaneLayout, {
    height: "fill",
    minWidth: 512,
    onCollapse: handleLayoutCollapse,
    onExpand: handleLayoutExpand
  }, /*#__PURE__*/_react.default.createElement(_Pane.Pane, {
    id: "document-panel"
  }, /*#__PURE__*/_react.default.createElement(_PaneHeader.PaneHeader, {
    title: "Document"
  }), /*#__PURE__*/_react.default.createElement(_PaneContent.PaneContent, {
    ref: setdocumentContentElement
  }, /*#__PURE__*/_react.default.createElement(_ui.BoundaryElementProvider, {
    element: documentContentElement
  }, /*#__PURE__*/_react.default.createElement(_ui.PortalProvider, {
    element: portalElement
  }, /*#__PURE__*/_react.default.createElement(Scroller, null, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    paddingX: 4,
    paddingY: 5,
    space: 5
  }, /*#__PURE__*/_react.default.createElement(StringField, {
    focusPath: focusPath,
    path: ['a'],
    value: "A",
    compareValue: "B",
    setFocusPath: setFocusPath
  }), /*#__PURE__*/_react.default.createElement(StringField, {
    focusPath: focusPath,
    path: ['b'],
    value: "B",
    compareValue: "C",
    setFocusPath: setFocusPath
  }), /*#__PURE__*/_react.default.createElement(StringField, {
    focusPath: focusPath,
    path: ['c'],
    value: "C",
    compareValue: "D",
    setFocusPath: setFocusPath
  }), /*#__PURE__*/_react.default.createElement(StringField, {
    focusPath: focusPath,
    path: ['d'],
    value: "D",
    compareValue: "D",
    setFocusPath: setFocusPath
  }), /*#__PURE__*/_react.default.createElement(StringField, {
    focusPath: focusPath,
    path: ['e'],
    value: "D",
    compareValue: "D",
    setFocusPath: setFocusPath
  }), /*#__PURE__*/_react.default.createElement(StringField, {
    focusPath: focusPath,
    path: ['f'],
    value: "D",
    compareValue: "D",
    setFocusPath: setFocusPath
  }), /*#__PURE__*/_react.default.createElement(StringField, {
    focusPath: focusPath,
    path: ['g'],
    value: "D",
    compareValue: "D",
    setFocusPath: setFocusPath
  }), /*#__PURE__*/_react.default.createElement(StringField, {
    focusPath: focusPath,
    path: ['h'],
    value: "D",
    compareValue: "D",
    setFocusPath: setFocusPath
  }))), /*#__PURE__*/_react.default.createElement("div", {
    ref: setPortalElement
  })))), /*#__PURE__*/_react.default.createElement(_PaneFooter.PaneFooter, {
    padding: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    icon: _icons.RestoreIcon,
    mode: "bleed",
    onClick: toggleReviewChanges,
    selected: reviewChanges
  }))), reviewChanges && /*#__PURE__*/_react.default.createElement(_Pane.Pane, {
    id: "review-changes-panel"
  }, /*#__PURE__*/_react.default.createElement(_PaneHeader.PaneHeader, {
    actions: /*#__PURE__*/_react.default.createElement(_ui.Button, {
      icon: _icons.CloseIcon,
      mode: "bleed",
      onClick: closeReviewChanges
    }),
    title: "Changes"
  }), /*#__PURE__*/_react.default.createElement(_PaneContent.PaneContent, null, /*#__PURE__*/_react.default.createElement(Scroller, null, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    flex: 1,
    paddingX: 4,
    paddingY: 5,
    space: 5
  }, /*#__PURE__*/_react.default.createElement(DebugDiffField, {
    path: ['a']
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "Diff A")), /*#__PURE__*/_react.default.createElement(DebugDiffField, {
    path: ['b']
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "Diff B")), /*#__PURE__*/_react.default.createElement(DebugDiffField, {
    path: ['c']
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "Diff C"))))))))))));
}

function StringField(props) {
  const {
    focusPath,
    path,
    value,
    compareValue,
    setFocusPath
  } = props;
  const [open, setOpen] = (0, _react.useState)(false);
  const handleBlur = (0, _react.useCallback)(() => setFocusPath([]), [setFocusPath]);
  const handleFocus = (0, _react.useCallback)(() => setFocusPath(path), [path, setFocusPath]);
  const handleClose = (0, _react.useCallback)(() => setOpen(false), []);
  const handleOpen = (0, _react.useCallback)(() => setOpen(true), []);
  return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 1,
    weight: "semibold"
  }, "String"), /*#__PURE__*/_react.default.createElement(DebugFormField, {
    path: path,
    focusPath: focusPath,
    value: value,
    compareValue: compareValue
  }, /*#__PURE__*/_react.default.createElement(_ui.TextInput, {
    onBlur: handleBlur,
    onFocus: handleFocus,
    value: value
  })), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    icon: /*#__PURE__*/_react.default.createElement(_icons.AddIcon, null),
    mode: "ghost",
    onClick: handleOpen
  })), open && /*#__PURE__*/_react.default.createElement(_ui.DialogProvider, {
    position: "absolute"
  }, /*#__PURE__*/_react.default.createElement(_ui.Dialog, {
    id: "".concat(path.join('-'), "-dialog"),
    onClickOutside: handleClose
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "Dialog")))));
}

function DebugFormField(props) {
  const {
    children,
    focusPath,
    path,
    value,
    compareValue
  } = props;
  return /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicator, {
    path: path,
    isChanged: false,
    hasFocus: false
  }, children);
}

function DebugDiffField(props) {
  const {
    children,
    path
  } = props;
  const [hovered, setHovered] = (0, _react.useState)(false);
  const handleMouseEnter = (0, _react.useCallback)(() => setHovered(true), []);
  const handleMouseLeave = (0, _react.useCallback)(() => setHovered(false), []);
  const handleClick = (0, _react.useCallback)(() => {//
  }, []);
  return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 1,
    weight: "semibold"
  }, "String"), /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeFieldWrapper, {
    hasHover: hovered,
    path: path
  }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    borderLeft: true,
    onClick: handleClick,
    padding: 3,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }, children)));
}