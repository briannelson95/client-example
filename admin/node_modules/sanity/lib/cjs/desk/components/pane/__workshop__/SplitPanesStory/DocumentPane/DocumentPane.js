"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentPane = DocumentPane;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _Pane = require("../../../Pane");

var _usePaneLayout = require("../../../usePaneLayout");

var _DocumentViewPanel = require("./DocumentViewPanel");

var _ReviewChangesPanel = require("./ReviewChangesPanel");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function DocumentPane(props) {
  const {
    index,
    node,
    setPath
  } = props;
  const {
    collapsed: layoutCollapsed
  } = (0, _usePaneLayout.usePaneLayout)();
  const [reviewChanges, setReviewChanges] = (0, _react.useState)(false);
  const toggleReviewChanges = (0, _react.useCallback)(() => setReviewChanges(v => !v), []);
  const closeReviewChanges = (0, _react.useCallback)(() => setReviewChanges(false), []);
  (0, _react.useEffect)(() => {
    if (layoutCollapsed) setReviewChanges(false);
  }, [layoutCollapsed]);
  const handleBackClick = (0, _react.useCallback)(() => {
    setPath(p => p.slice(0, index));
  }, [index, setPath]);
  return /*#__PURE__*/_react.default.createElement(_Pane.Pane, {
    currentMinWidth: reviewChanges ? 600 + 320 : 600,
    flex: 2.5,
    id: String(index),
    minWidth: reviewChanges ? 320 + 320 : 320
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    flex: 1,
    height: "fill"
  }, /*#__PURE__*/_react.default.createElement(_DocumentViewPanel.DocumentViewPanel, {
    onBackClick: handleBackClick,
    reviewChanges: reviewChanges,
    title: "Document #".concat(node.id),
    toggleReviewChanges: toggleReviewChanges
  }), reviewChanges && /*#__PURE__*/_react.default.createElement(_ReviewChangesPanel.ReviewChangesPanel, {
    onClose: closeReviewChanges
  })));
}