"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PaneRouterProvider = PaneRouterProvider;

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _react = _interopRequireWildcard(require("react"));

var _paths = require("@sanity/util/paths");

var _router = require("../../../router");

var _ChildLink = require("./ChildLink");

var _BackLink = require("./BackLink");

var _ReferenceChildLink = require("./ReferenceChildLink");

var _PaneRouterContext = require("./PaneRouterContext");

var _ParameterizedLink = require("./ParameterizedLink");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const emptyArray = [];
/**
 * @internal
 */

function PaneRouterProvider(props) {
  const {
    children,
    flatIndex,
    index,
    params,
    payload,
    siblingIndex
  } = props;
  const {
    navigate,
    navigateIntent
  } = (0, _router.useRouter)();
  const routerState = (0, _router.useRouterState)();
  const routerPaneGroups = (0, _react.useMemo)(() => (routerState === null || routerState === void 0 ? void 0 : routerState.panes) || emptyArray, [routerState === null || routerState === void 0 ? void 0 : routerState.panes]);
  const groupIndex = index - 1;
  const modifyCurrentGroup = (0, _react.useCallback)(modifier => {
    const currentGroup = routerPaneGroups[groupIndex] || [];
    const currentItem = currentGroup[siblingIndex];
    const nextGroup = modifier(currentGroup, currentItem);
    const nextPanes = [...routerPaneGroups.slice(0, groupIndex), nextGroup, ...routerPaneGroups.slice(groupIndex + 1)];
    const nextRouterState = { ...(routerState || {}),
      panes: nextPanes
    };
    setTimeout(() => navigate(nextRouterState), 0);
    return nextRouterState;
  }, [groupIndex, navigate, routerPaneGroups, routerState, siblingIndex]);
  const setPayload = (0, _react.useCallback)(nextPayload => {
    modifyCurrentGroup((siblings, item) => [...siblings.slice(0, siblingIndex), { ...item,
      payload: nextPayload
    }, ...siblings.slice(siblingIndex + 1)]);
  }, [modifyCurrentGroup, siblingIndex]);
  const setParams = (0, _react.useCallback)(nextParams => {
    modifyCurrentGroup((siblings, item) => [...siblings.slice(0, siblingIndex), { ...item,
      params: nextParams
    }, ...siblings.slice(siblingIndex + 1)]);
  }, [modifyCurrentGroup, siblingIndex]);
  const handleEditReference = (0, _react.useCallback)(_ref => {
    let {
      id,
      parentRefPath,
      type,
      template
    } = _ref;
    navigate({
      panes: [...routerPaneGroups.slice(0, groupIndex + 1), [{
        id,
        params: {
          template: template.id,
          parentRefPath: (0, _paths.toString)(parentRefPath),
          type
        },
        payload: template.params
      }]]
    });
  }, [groupIndex, navigate, routerPaneGroups]);
  const ctx = (0, _react.useMemo)(() => ({
    // Zero-based index (position) of pane, visually
    index: flatIndex,
    // Zero-based index of pane group (within URL structure)
    groupIndex,
    // Zero-based index of pane within sibling group
    siblingIndex,
    // Payload of the current pane
    payload,
    // Params of the current pane
    params,
    // Whether or not the pane has any siblings (within the same group)
    hasGroupSiblings: routerPaneGroups[groupIndex] ? routerPaneGroups[groupIndex].length > 1 : false,
    // The length of the current group
    groupLength: routerPaneGroups[groupIndex] ? routerPaneGroups[groupIndex].length : 0,
    // Current router state for the "panes" property
    routerPanesState: routerPaneGroups,
    // Curried StateLink that passes the correct state automatically
    ChildLink: _ChildLink.ChildLink,
    // Curried StateLink that pops off the last pane group
    BackLink: _BackLink.BackLink,
    // A specialized `ChildLink` that takes in the needed props to open a
    // referenced document to the right
    ReferenceChildLink: _ReferenceChildLink.ReferenceChildLink,
    // Similar to `ReferenceChildLink` expect without the wrapping component
    handleEditReference,
    // Curried StateLink that passed the correct state, but merges params/payload
    ParameterizedLink: _ParameterizedLink.ParameterizedLink,
    // Replaces the current pane with a new one
    replaceCurrent: function () {
      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      modifyCurrentGroup(() => [{
        id: opts.id || '',
        payload: opts.payload,
        params: opts.params || {}
      }]);
    },
    // Removes the current pane from the group
    closeCurrent: () => {
      modifyCurrentGroup((siblings, item) => siblings.length > 1 ? siblings.filter(sibling => sibling !== item) : siblings);
    },
    // Duplicate the current pane, with optional overrides for payload, parameters
    duplicateCurrent: options => {
      modifyCurrentGroup((siblings, item) => {
        const duplicatedItem = { ...item,
          payload: (options === null || options === void 0 ? void 0 : options.payload) || item.payload,
          params: (options === null || options === void 0 ? void 0 : options.params) || item.params
        };
        return [...siblings.slice(0, siblingIndex), duplicatedItem, ...siblings.slice(siblingIndex)];
      });
    },
    // Set the view for the current pane
    setView: viewId => {
      const restParams = (0, _omit2.default)(params, 'view');
      return setParams(viewId ? { ...restParams,
        view: viewId
      } : restParams);
    },
    // Set the parameters for the current pane
    setParams,
    // Set the payload for the current pane
    setPayload,
    // Proxied navigation to a given intent. Consider just exposing `router` instead?
    navigateIntent
  }), [flatIndex, groupIndex, handleEditReference, modifyCurrentGroup, navigateIntent, params, payload, routerPaneGroups, setParams, setPayload, siblingIndex]);
  return /*#__PURE__*/_react.default.createElement(_PaneRouterContext.PaneRouterContext.Provider, {
    value: ctx
  }, children);
}