"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeskTool = void 0;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _isHotkey = _interopRequireDefault(require("is-hotkey"));

var _hooks = require("../../../hooks");

var _router = require("../../../router");

var _constants = require("../../constants");

var _panes = require("../../panes");

var _structureResolvers = require("../../structureResolvers");

var _pane = require("../pane");

var _useDeskTool = require("../../useDeskTool");

var _util = require("../../../util");

var _NoDocumentTypesScreen = require("./NoDocumentTypesScreen");

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const StyledPaneLayout = (0, _styledComponents.default)(_pane.PaneLayout)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  min-height: 100%;\n  min-width: 320px;\n"])));
const isSaveHotkey = (0, _isHotkey.default)('mod+s');
/**
 * @internal
 */

const DeskTool = /*#__PURE__*/(0, _react.memo)(function DeskTool(_ref) {
  var _schema$_original;

  let {
    onPaneChange
  } = _ref;
  const {
    navigate
  } = (0, _router.useRouter)();
  const {
    push: pushToast
  } = (0, _ui.useToast)();
  const schema = (0, _hooks.useSchema)();
  const {
    layoutCollapsed,
    setLayoutCollapsed
  } = (0, _useDeskTool.useDeskTool)();
  const {
    paneDataItems,
    resolvedPanes,
    routerPanes
  } = (0, _structureResolvers.useResolvedPanes)();
  const [portalElement, setPortalElement] = (0, _react.useState)(null);
  const handleRootCollapse = (0, _react.useCallback)(() => setLayoutCollapsed(true), [setLayoutCollapsed]);
  const handleRootExpand = (0, _react.useCallback)(() => setLayoutCollapsed(false), [setLayoutCollapsed]);
  (0, _react.useEffect)(() => {
    // we check for length before emitting here to skip the initial empty array
    // state from the `useResolvedPanes` hook. there should always be a root
    // pane emitted on subsequent emissions
    if (resolvedPanes.length) {
      onPaneChange(resolvedPanes);
    }
  }, [onPaneChange, resolvedPanes]); // The pane layout is "collapsed" on small screens, and only shows 1 pane at a time.
  // Remove pane siblings (i.e. split panes) as the pane layout collapses.

  (0, _react.useEffect)(() => {
    if (!layoutCollapsed) return;
    const hasSiblings = routerPanes.some(group => group.length > 1);
    if (!hasSiblings) return;
    const withoutSiblings = routerPanes.map(group => [group[0]]);
    navigate({
      panes: withoutSiblings
    }, {
      replace: true
    });
  }, [navigate, layoutCollapsed, routerPanes]);
  (0, _react.useEffect)(() => {
    const handleGlobalKeyDown = event => {
      // Prevent `Cmd+S`
      if (isSaveHotkey(event)) {
        event.preventDefault();
        pushToast({
          closable: true,
          id: 'auto-save-message',
          status: 'info',
          title: 'Your work is automatically saved!',
          duration: 4000
        });
      }
    };

    window.addEventListener('keydown', handleGlobalKeyDown);
    return () => window.removeEventListener('keydown', handleGlobalKeyDown);
  }, [pushToast]);
  const hasDefinedDocumentTypes = (_schema$_original = schema._original) === null || _schema$_original === void 0 ? void 0 : _schema$_original.types.some(_util._isCustomDocumentTypeDefinition);

  if (!hasDefinedDocumentTypes) {
    return /*#__PURE__*/_react.default.createElement(_NoDocumentTypesScreen.NoDocumentTypesScreen, null);
  }

  return /*#__PURE__*/_react.default.createElement(_ui.PortalProvider, {
    element: portalElement || null
  }, /*#__PURE__*/_react.default.createElement(StyledPaneLayout, {
    flex: 1,
    height: layoutCollapsed ? undefined : 'fill',
    minWidth: 512,
    onCollapse: handleRootCollapse,
    onExpand: handleRootExpand
  }, paneDataItems.map(_ref2 => {
    let {
      active,
      childItemId,
      groupIndex,
      itemId,
      key: paneKey,
      pane,
      index: paneIndex,
      params: paneParams,
      path,
      payload,
      siblingIndex,
      selected
    } = _ref2;
    return /*#__PURE__*/_react.default.createElement(_react.Fragment, {
      key: "".concat(pane === _constants.LOADING_PANE ? 'loading' : pane.type, "-").concat(paneIndex)
    }, pane === _constants.LOADING_PANE ? /*#__PURE__*/_react.default.createElement(_panes.LoadingPane, {
      paneKey: paneKey,
      path: path,
      selected: selected
    }) : /*#__PURE__*/_react.default.createElement(_panes.DeskToolPane, {
      active: active,
      groupIndex: groupIndex,
      index: paneIndex,
      pane: pane,
      childItemId: childItemId,
      itemId: itemId,
      paneKey: paneKey,
      params: paneParams,
      payload: payload,
      selected: selected,
      siblingIndex: siblingIndex
    }));
  })), /*#__PURE__*/_react.default.createElement("div", {
    "data-portal": "",
    ref: setPortalElement
  }));
});
exports.DeskTool = DeskTool;