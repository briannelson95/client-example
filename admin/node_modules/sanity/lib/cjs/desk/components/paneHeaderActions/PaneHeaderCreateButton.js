"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PaneHeaderCreateButton = PaneHeaderCreateButton;

var _icons = require("@sanity/icons");

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _IntentButton = require("../IntentButton");

var _datastores = require("../../../datastores");

var _router = require("../../../router");

var _hooks = require("../../../hooks");

var _InsufficientPermissionsMessageTooltip = require("./InsufficientPermissionsMessageTooltip");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const POPOVER_PROPS = {
  constrainSize: true,
  placement: 'bottom',
  portal: true
};

const getIntent = (schema, templates, item) => {
  var _templates$find;

  const typeName = (_templates$find = templates.find(t => t.id === item.templateId)) === null || _templates$find === void 0 ? void 0 : _templates$find.schemaType;
  if (!typeName) return null;
  const baseParams = {
    template: item.templateId,
    type: typeName,
    id: item.initialDocumentId
  };
  return {
    type: 'create',
    params: item.parameters ? [baseParams, item.parameters] : baseParams
  };
};

function PaneHeaderCreateButton(_ref) {
  let {
    templateItems
  } = _ref;
  const schema = (0, _hooks.useSchema)();
  const templates = (0, _hooks.useTemplates)();
  const [templatePermissions, isTemplatePermissionsLoading] = (0, _datastores.useTemplatePermissions)({
    templateItems
  });
  const nothingGranted = (0, _react.useMemo)(() => {
    return !isTemplatePermissionsLoading && (templatePermissions === null || templatePermissions === void 0 ? void 0 : templatePermissions.every(permission => !permission.granted));
  }, [isTemplatePermissionsLoading, templatePermissions]);
  const permissionsById = (0, _react.useMemo)(() => {
    if (!templatePermissions) return {};
    return templatePermissions.reduce((acc, permission) => {
      acc[permission.id] = permission;
      return acc;
    }, {});
  }, [templatePermissions]);

  if (nothingGranted) {
    return /*#__PURE__*/_react.default.createElement(_InsufficientPermissionsMessageTooltip.InsufficientPermissionsMessageTooltip, {
      reveal: true,
      loading: isTemplatePermissionsLoading
    }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
      "aria-label": "Insufficient permissions",
      icon: _icons.ComposeIcon,
      mode: "bleed",
      disabled: true,
      "data-testid": "action-intent-button"
    }));
  }

  if (templateItems.length === 1) {
    const firstItem = templateItems[0];
    const permissions = permissionsById[firstItem.id];
    const disabled = !(permissions !== null && permissions !== void 0 && permissions.granted);
    const intent = getIntent(schema, templates, firstItem);
    if (!intent) return null;
    return /*#__PURE__*/_react.default.createElement(_InsufficientPermissionsMessageTooltip.InsufficientPermissionsMessageTooltip, {
      reveal: disabled,
      loading: isTemplatePermissionsLoading
    }, /*#__PURE__*/_react.default.createElement(_IntentButton.IntentButton, {
      "aria-label": firstItem.title,
      icon: firstItem.icon || _icons.ComposeIcon,
      intent: intent,
      mode: "bleed",
      disabled: disabled,
      "data-testid": "action-intent-button"
    }));
  }

  return /*#__PURE__*/_react.default.createElement(_ui.MenuButton, {
    button: /*#__PURE__*/_react.default.createElement(_ui.Button, {
      icon: _icons.ComposeIcon,
      mode: "bleed",
      padding: 3,
      "data-testid": "multi-action-intent-button"
    }),
    id: "create-menu",
    menu: /*#__PURE__*/_react.default.createElement(_ui.Menu, null, /*#__PURE__*/_react.default.createElement(_ui.Box, {
      paddingX: 3,
      paddingTop: 3,
      paddingBottom: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Label, {
      muted: true
    }, "Create")), templateItems.map((item, itemIndex) => {
      const permissions = permissionsById[item.id];
      const disabled = !(permissions !== null && permissions !== void 0 && permissions.granted);
      const intent = getIntent(schema, templates, item);
      const template = templates.find(t => t.id === item.templateId);
      if (!template || !intent) return null;
      const Link = /*#__PURE__*/(0, _react.forwardRef)((linkProps, linkRef) => disabled ? /*#__PURE__*/_react.default.createElement("button", _extends({
        type: "button",
        disabled: true
      }, linkProps, {
        ref: linkRef
      })) : /*#__PURE__*/_react.default.createElement(_router.IntentLink, _extends({}, linkProps, {
        intent: intent.type,
        params: intent.params,
        ref: linkRef
      })));
      Link.displayName = 'Link';
      return /*#__PURE__*/_react.default.createElement(_InsufficientPermissionsMessageTooltip.InsufficientPermissionsMessageTooltip, {
        key: item.id,
        reveal: disabled,
        loading: isTemplatePermissionsLoading
      }, /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
        as: Link,
        "data-as": disabled ? 'button' : 'a',
        text: item.title || template.title,
        "aria-label": disabled ? 'Insufficient permissions' : item.title || template.title,
        disabled: disabled,
        "data-testid": "action-intent-button-".concat(itemIndex)
      }));
    })),
    popover: POPOVER_PROPS
  });
}