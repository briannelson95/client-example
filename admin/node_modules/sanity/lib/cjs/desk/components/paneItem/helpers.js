"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMissingDocumentFallback = void 0;
exports.getPreviewStateObservable = getPreviewStateObservable;
exports.isLiveEditEnabled = exports.getValueWithFallback = void 0;

var _assignWith2 = _interopRequireDefault(require("lodash/assignWith"));

var _icons = require("@sanity/icons");

var _react = _interopRequireDefault(require("react"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _util = require("../../../util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const isLiveEditEnabled = schemaType => schemaType.liveEdit === true;

exports.isLiveEditEnabled = isLiveEditEnabled;

const getMissingDocumentFallback = item => ({
  title: /*#__PURE__*/_react.default.createElement("em", null, item.title ? String(item.title) : 'Missing document'),
  subtitle: /*#__PURE__*/_react.default.createElement("em", null, item.title ? "Missing document ID: ".concat(item._id) : "Document ID: ".concat(item._id)),
  media: _icons.WarningOutlineIcon
});

exports.getMissingDocumentFallback = getMissingDocumentFallback;

const getValueWithFallback = _ref => {
  let {
    value,
    draft,
    published
  } = _ref;
  const snapshot = draft || published;

  if (!snapshot) {
    return getMissingDocumentFallback(value);
  }

  return (0, _assignWith2.default)({}, snapshot, value, (objValue, srcValue) => {
    return typeof srcValue === 'undefined' ? objValue : srcValue;
  });
};

exports.getValueWithFallback = getValueWithFallback;

function getPreviewStateObservable(documentPreviewStore, schemaType, documentId, title) {
  const draft$ = isLiveEditEnabled(schemaType) ? (0, _rxjs.of)({
    snapshot: null
  }) : documentPreviewStore.observeForPreview({
    _type: 'reference',
    _ref: (0, _util.getDraftId)(documentId)
  }, schemaType);
  const published$ = documentPreviewStore.observeForPreview({
    _type: 'reference',
    _ref: (0, _util.getPublishedId)(documentId)
  }, schemaType);
  return (0, _rxjs.combineLatest)([draft$, published$]).pipe((0, _operators.map)(_ref2 => {
    let [draft, published] = _ref2;
    return {
      draft: draft.snapshot ? {
        title,
        ...(draft.snapshot || {})
      } : null,
      isLoading: false,
      published: published.snapshot ? {
        title,
        ...(published.snapshot || {})
      } : null
    };
  }), (0, _operators.startWith)({
    draft: null,
    isLoading: true,
    published: null
  }));
}