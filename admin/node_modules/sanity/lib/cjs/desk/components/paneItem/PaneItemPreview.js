"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PaneItemPreview = void 0;

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _PublishedStatus = require("../PublishedStatus");

var _DraftStatus = require("../DraftStatus");

var _presence = require("../../../presence");

var _preview = require("../../../preview");

var _util = require("../../../util");

var _helpers = require("./helpers");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PaneItemPreview extends _react.default.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "state", {});

    _defineProperty(this, "subscription", void 0);

    const {
      value,
      schemaType
    } = props; // const {title} = value

    const title = (0, _util.isRecord)(value.title) && /*#__PURE__*/(0, _react.isValidElement)(value.title) || (0, _isString2.default)(value.title) || (0, _isNumber2.default)(value.title) ? value.title : null;
    let sync = true;
    this.subscription = (0, _helpers.getPreviewStateObservable)(props.documentPreviewStore, schemaType, value._id, title).subscribe(state => {
      if (sync) {
        this.state = state;
      } else {
        this.setState(state);
      }
    });
    sync = false;
  }

  componentWillUnmount() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }

  render() {
    const {
      icon,
      layout,
      presence,
      value
    } = this.props;
    const {
      draft,
      published,
      isLoading
    } = this.state;
    const status = isLoading ? null : /*#__PURE__*/_react.default.createElement(_ui.Inline, {
      space: 4
    }, presence && presence.length > 0 && /*#__PURE__*/_react.default.createElement(_presence.DocumentPreviewPresence, {
      presence: presence
    }), /*#__PURE__*/_react.default.createElement(_PublishedStatus.PublishedStatus, {
      document: published
    }), /*#__PURE__*/_react.default.createElement(_DraftStatus.DraftStatus, {
      document: draft
    }));
    return /*#__PURE__*/_react.default.createElement(_preview.SanityDefaultPreview, _extends({}, (0, _helpers.getValueWithFallback)({
      value,
      draft,
      published
    }), {
      isPlaceholder: isLoading,
      icon: icon,
      layout: layout,
      status: status
    }));
  }

}

exports.PaneItemPreview = PaneItemPreview;