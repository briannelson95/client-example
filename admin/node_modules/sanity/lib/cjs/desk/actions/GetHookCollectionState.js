"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GetHookCollectionState = GetHookCollectionState;

var _react = _interopRequireWildcard(require("react"));

var _isNonNullable = require("../../util/isNonNullable");

var _useThrottledCallback = require("../../util/useThrottledCallback");

var _actionId = require("./actionId");

var _HookStateContainer = require("./HookStateContainer");

var _requestIdleCallback = require("./requestIdleCallback");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function GetHookCollectionState(props) {
  const {
    hooks,
    args,
    children,
    onReset
  } = props;
  const statesRef = (0, _react.useRef)({});
  const [tickId, setTick] = (0, _react.useState)(0);
  const [keys, setKeys] = (0, _react.useState)({});
  const mountedRef = (0, _react.useRef)(true);
  (0, _react.useEffect)(() => {
    return () => {
      mountedRef.current = false;
    };
  }, []);
  const ricHandle = (0, _react.useRef)(null);
  const handleRequestUpdate = (0, _react.useCallback)(() => {
    if (ricHandle.current) {
      (0, _requestIdleCallback.cancelIdleCallback)(ricHandle.current);
    }

    ricHandle.current = (0, _requestIdleCallback.requestIdleCallback)(() => {
      ricHandle.current = null;

      if (mountedRef.current) {
        setTick(tick => tick + 1);
      }
    });
  }, []);
  const handleRequestUpdateThrottled = (0, _useThrottledCallback.useThrottledCallback)(handleRequestUpdate, 60, {
    trailing: true
  });
  const handleNext = (0, _react.useCallback)((id, hookState) => {
    if (hookState === null) {
      delete statesRef.current[id];
    } else {
      const current = statesRef.current[id];
      statesRef.current[id] = { ...current,
        value: hookState
      };
    }
  }, []);
  const handleReset = (0, _react.useCallback)(id => {
    setKeys(currentKeys => ({ ...currentKeys,
      [id]: (currentKeys[id] || 0) + 1
    }));

    if (onReset) {
      onReset();
    }
  }, [onReset]);
  const hookIds = (0, _react.useMemo)(() => hooks.map(hook => (0, _actionId.getHookId)(hook)), [hooks]);
  const states = (0, _react.useMemo)(() => hookIds.map(id => {
    var _statesRef$current$id;

    return (_statesRef$current$id = statesRef.current[id]) === null || _statesRef$current$id === void 0 ? void 0 : _statesRef$current$id.value;
  }).filter(_isNonNullable.isNonNullable), [hookIds, tickId]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, hooks.map(hook => {
    const id = (0, _actionId.getHookId)(hook);
    const key = keys[id] || 0;
    return /*#__PURE__*/_react.default.createElement(_HookStateContainer.HookStateContainer, {
      key: "".concat(id, "-").concat(key),
      hook: hook,
      id: id,
      args: args,
      onNext: handleNext,
      onRequestUpdate: handleRequestUpdateThrottled,
      onReset: handleReset
    });
  }), children({
    states
  }));
}