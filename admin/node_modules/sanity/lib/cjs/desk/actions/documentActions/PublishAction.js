"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PublishAction = void 0;

var _icons = require("@sanity/icons");

var _react = _interopRequireWildcard(require("react"));

var _types = require("@sanity/types");

var _hooks = require("../../../hooks");

var _InsufficientPermissionsMessage = require("../../../components/InsufficientPermissionsMessage");

var _components = require("../../components");

var _useDocumentPane = require("../../panes/document/useDocumentPane");

var _datastores = require("../../../datastores");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const DISABLED_REASON_TITLE = {
  LIVE_EDIT_ENABLED: 'Cannot publish since liveEdit is enabled for this document type',
  ALREADY_PUBLISHED: 'Already published',
  NO_CHANGES: 'No unpublished changes'
};

function getDisabledReason(reason, publishedAt) {
  if (reason === 'ALREADY_PUBLISHED' && publishedAt) {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", null, "Published ", /*#__PURE__*/_react.default.createElement(_components.TimeAgo, {
      time: publishedAt
    })));
  }

  return DISABLED_REASON_TITLE[reason];
} // eslint-disable-next-line complexity


const PublishAction = props => {
  const {
    id,
    type,
    liveEdit,
    draft,
    published
  } = props;
  const [publishState, setPublishState] = (0, _react.useState)(null);
  const {
    publish
  } = (0, _hooks.useDocumentOperation)(id, type);
  const validationStatus = (0, _hooks.useValidationStatus)(id, type);
  const syncState = (0, _hooks.useSyncState)(id, type);
  const {
    changesOpen,
    onHistoryOpen
  } = (0, _useDocumentPane.useDocumentPane)();
  const hasValidationErrors = validationStatus.validation.some(_types.isValidationErrorMarker); // we use this to "schedule" publish after pending tasks (e.g. validation and sync) has completed

  const [publishScheduled, setPublishScheduled] = (0, _react.useState)(false);
  const isNeitherSyncingNorValidating = !syncState.isSyncing && !validationStatus.isValidating;
  const [permissions, isPermissionsLoading] = (0, _datastores.useDocumentPairPermissions)({
    id,
    type,
    permission: 'publish'
  });
  const currentUser = (0, _datastores.useCurrentUser)(); // eslint-disable-next-line no-nested-ternary

  const title = publish.disabled ? getDisabledReason(publish.disabled, (published || {})._updatedAt) || '' : hasValidationErrors ? 'There are validation errors that need to be fixed before this document can be published' : '';
  const hasDraft = Boolean(draft);
  const doPublish = (0, _react.useCallback)(() => {
    publish.execute();
    setPublishState('publishing');
  }, [publish]);
  (0, _react.useEffect)(() => {
    if (publishScheduled && isNeitherSyncingNorValidating) {
      if (!hasValidationErrors) {
        doPublish();
      }

      setPublishScheduled(false);
    }
  }, [isNeitherSyncingNorValidating, doPublish, hasValidationErrors, publishScheduled]);
  (0, _react.useEffect)(() => {
    const didPublish = publishState === 'publishing' && !hasDraft;

    if (didPublish) {
      if (changesOpen) {
        // Re-open the panel
        onHistoryOpen();
      }
    }

    const nextState = didPublish ? 'published' : null;
    const delay = didPublish ? 200 : 4000;
    const timer = setTimeout(() => {
      setPublishState(nextState);
    }, delay);
    return () => clearTimeout(timer);
  }, [changesOpen, publishState, hasDraft, onHistoryOpen]);
  const handle = (0, _react.useCallback)(() => {
    if (syncState.isSyncing || validationStatus.isValidating) {
      setPublishScheduled(true);
    } else {
      doPublish();
    }
  }, [syncState.isSyncing, validationStatus.isValidating, doPublish]);

  if (liveEdit) {
    return {
      tone: 'positive',
      label: 'Publish',
      title: 'Live Edit is enabled for this content type and publishing happens automatically as you make changes',
      disabled: true
    };
  }

  if (!isPermissionsLoading && !(permissions !== null && permissions !== void 0 && permissions.granted)) {
    return {
      tone: 'positive',
      label: 'Publish',
      title: /*#__PURE__*/_react.default.createElement(_InsufficientPermissionsMessage.InsufficientPermissionsMessage, {
        operationLabel: "publish this document",
        currentUser: currentUser
      }),
      disabled: true
    };
  }

  const disabled = Boolean(publishScheduled || publishState === 'publishing' || publishState === 'published' || hasValidationErrors || publish.disabled);
  return {
    disabled: disabled || isPermissionsLoading,
    tone: 'positive',
    label: // eslint-disable-next-line no-nested-ternary
    publishState === 'published' ? 'Published' : publishScheduled || publishState === 'publishing' ? 'Publishingâ€¦' : 'Publish',
    // @todo: Implement loading state, to show a `<Button loading />` state
    // loading: publishScheduled || publishState === 'publishing',
    icon: publishState === 'published' ? _icons.CheckmarkIcon : _icons.PublishIcon,
    // eslint-disable-next-line no-nested-ternary
    title: publishScheduled ? 'Waiting for tasks to finish before publishing' : publishState === 'published' || publishState === 'publishing' ? null : title,
    shortcut: disabled || publishScheduled ? null : 'Ctrl+Alt+P',
    onHandle: handle
  };
};

exports.PublishAction = PublishAction;
PublishAction.action = 'publish';