"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiscardChangesAction = void 0;

var _icons = require("@sanity/icons");

var _react = _interopRequireWildcard(require("react"));

var _hooks = require("../../../hooks");

var _InsufficientPermissionsMessage = require("../../../components/InsufficientPermissionsMessage");

var _datastores = require("../../../datastores");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const DISABLED_REASON_TITLE = {
  NO_CHANGES: 'This document has no unpublished changes',
  NOT_PUBLISHED: 'This document is not published'
};

const DiscardChangesAction = _ref => {
  let {
    id,
    type,
    published,
    liveEdit,
    onComplete
  } = _ref;
  const {
    discardChanges
  } = (0, _hooks.useDocumentOperation)(id, type);
  const [isConfirmDialogOpen, setConfirmDialogOpen] = (0, _react.useState)(false);
  const [permissions, isPermissionsLoading] = (0, _datastores.useDocumentPairPermissions)({
    id,
    type,
    permission: 'discardDraft'
  });
  const currentUser = (0, _datastores.useCurrentUser)();
  const handleConfirm = (0, _react.useCallback)(() => {
    discardChanges.execute();
    onComplete();
  }, [discardChanges, onComplete]);
  const handle = (0, _react.useCallback)(() => {
    setConfirmDialogOpen(true);
  }, []);
  const modal = (0, _react.useMemo)(() => isConfirmDialogOpen && {
    type: 'confirm',
    tone: 'critical',
    onCancel: onComplete,
    onConfirm: handleConfirm,
    message: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Are you sure you want to discard all changes since last published?")
  }, [handleConfirm, isConfirmDialogOpen, onComplete]);

  if (!published || liveEdit) {
    return null;
  }

  if (!isPermissionsLoading && !(permissions !== null && permissions !== void 0 && permissions.granted)) {
    return {
      tone: 'critical',
      icon: _icons.ResetIcon,
      disabled: true,
      label: 'Discard changes',
      title: /*#__PURE__*/_react.default.createElement(_InsufficientPermissionsMessage.InsufficientPermissionsMessage, {
        operationLabel: "discard changes in this document",
        currentUser: currentUser
      })
    };
  }

  return {
    tone: 'critical',
    icon: _icons.ResetIcon,
    disabled: Boolean(discardChanges.disabled) || isPermissionsLoading,
    title: discardChanges.disabled && DISABLED_REASON_TITLE[discardChanges.disabled] || '',
    label: 'Discard changes',
    onHandle: handle,
    modal
  };
};

exports.DiscardChangesAction = DiscardChangesAction;
DiscardChangesAction.action = 'discardChanges';