"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HistoryRestoreAction = void 0;

var _icons = require("@sanity/icons");

var _react = _interopRequireWildcard(require("react"));

var _hooks = require("../../../hooks");

var _router = require("../../../router");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const HistoryRestoreAction = _ref => {
  let {
    id,
    type,
    revision,
    onComplete
  } = _ref;
  const {
    restore
  } = (0, _hooks.useDocumentOperation)(id, type);
  const router = (0, _router.useRouter)();
  const [isConfirmDialogOpen, setConfirmDialogOpen] = (0, _react.useState)(false);
  const handleConfirm = (0, _react.useCallback)(() => {
    restore.execute(revision);
    router.navigateIntent('edit', {
      id,
      type
    });
    onComplete();
  }, [revision, restore, router, onComplete, id, type]);
  const handle = (0, _react.useCallback)(() => {
    setConfirmDialogOpen(true);
  }, []);
  const modal = (0, _react.useMemo)(() => {
    if (isConfirmDialogOpen) {
      return {
        type: 'confirm',
        tone: 'critical',
        onCancel: onComplete,
        onConfirm: handleConfirm,
        message: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Are you sure you want to restore this document?")
      };
    }

    return null;
  }, [handleConfirm, isConfirmDialogOpen, onComplete]);
  const isRevisionInitialVersion = revision === '@initial';
  return {
    label: 'Restore',
    color: 'primary',
    onHandle: handle,
    title: isRevisionInitialVersion ? "You can't restore to the initial version" : 'Restore to this version',
    icon: _icons.RestoreIcon,
    modal,
    disabled: isRevisionInitialVersion
  };
};

exports.HistoryRestoreAction = HistoryRestoreAction;
HistoryRestoreAction.action = 'restore';