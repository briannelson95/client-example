"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DuplicateAction = void 0;

var _icons = require("@sanity/icons");

var _uuid = require("@sanity/uuid");

var _react = _interopRequireWildcard(require("react"));

var _InsufficientPermissionsMessage = require("../../../components/InsufficientPermissionsMessage");

var _datastores = require("../../../datastores");

var _hooks = require("../../../hooks");

var _router = require("../../../router");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const DISABLED_REASON_TITLE = {
  NOTHING_TO_DUPLICATE: 'This document doesn’t yet exist so there‘s nothing to duplicate'
};

const DuplicateAction = _ref => {
  let {
    id,
    type,
    onComplete
  } = _ref;
  const {
    duplicate
  } = (0, _hooks.useDocumentOperation)(id, type);
  const router = (0, _router.useRouter)();
  const [isDuplicating, setDuplicating] = (0, _react.useState)(false);
  const [permissions, isPermissionsLoading] = (0, _datastores.useDocumentPairPermissions)({
    id,
    type,
    permission: 'duplicate'
  });
  const currentUser = (0, _datastores.useCurrentUser)();
  const handle = (0, _react.useCallback)(() => {
    const dupeId = (0, _uuid.uuid)();
    setDuplicating(true);
    duplicate.execute(dupeId);
    router.navigateIntent('edit', {
      id: dupeId,
      type
    });
    onComplete();
  }, [duplicate, onComplete, router, type]);

  if (!isPermissionsLoading && !(permissions !== null && permissions !== void 0 && permissions.granted)) {
    return {
      icon: _icons.CopyIcon,
      disabled: true,
      label: 'Duplicate',
      title: /*#__PURE__*/_react.default.createElement(_InsufficientPermissionsMessage.InsufficientPermissionsMessage, {
        operationLabel: "duplicate this document",
        currentUser: currentUser
      })
    };
  }

  return {
    icon: _icons.CopyIcon,
    disabled: isDuplicating || Boolean(duplicate.disabled) || isPermissionsLoading,
    label: isDuplicating ? 'Duplicating…' : 'Duplicate',
    title: duplicate.disabled && DISABLED_REASON_TITLE[duplicate.disabled] || '',
    onHandle: handle
  };
};

exports.DuplicateAction = DuplicateAction;
DuplicateAction.action = 'duplicate';