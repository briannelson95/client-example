"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createUserStore = createUserStore;

var _dataloader = _interopRequireDefault(require("dataloader"));

var _raf = _interopRequireDefault(require("raf"));

var _util = require("../../util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Given a `client` and a `currentUser` creates a datastore that handles
 * fetching, batch fetching, and caching users.
 */
function createUserStore(_ref) {
  let {
    client: _client,
    currentUser
  } = _ref;

  const client = _client.withConfig({
    apiVersion: '2021-06-07'
  });

  const userLoader = new _dataloader.default(async userIds => {
    const value = await client.request({
      uri: "/users/".concat(userIds.join(',')),
      withCredentials: true,
      tag: 'users.get'
    });
    const response = Array.isArray(value) ? value : [value];
    const users = response.reduce((acc, next) => {
      if (next !== null && next !== void 0 && next.id) {
        acc[next.id] = next;
      }

      return acc;
    }, {});
    return userIds.map(id => users[id] || null);
  }, {
    batchScheduleFn: cb => (0, _raf.default)(cb)
  });
  const userFromCurrentUser = currentUser && {
    id: currentUser.id,
    displayName: currentUser.name,
    imageUrl: currentUser.profileImage
  };
  userLoader.prime('me', userFromCurrentUser);

  if (userFromCurrentUser !== null && userFromCurrentUser !== void 0 && userFromCurrentUser.id) {
    userLoader.prime(userFromCurrentUser.id, userFromCurrentUser);
  }

  return {
    getUser: userId => userLoader.load(userId),
    getUsers: async userIds => {
      const results = await userLoader.loadMany(userIds); // remove `Error`s from the the results

      return results.filter(result => (0, _util.isRecord)(result) && typeof result.id === 'string');
    }
  };
}