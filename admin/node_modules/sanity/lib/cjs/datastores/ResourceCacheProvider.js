"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResourceCacheProvider = ResourceCacheProvider;
exports.useResourceCache = useResourceCache;

var _react = _interopRequireWildcard(require("react"));

var _createMultiKeyWeakMap = require("./createMultiKeyWeakMap");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const ResourceCacheContext = /*#__PURE__*/(0, _react.createContext)(null);

function ResourceCacheProvider(_ref) {
  let {
    children
  } = _ref;
  const resourceCache = (0, _react.useMemo)(() => {
    const namespaces = new Map(); // this is used to replace the `null` values in any `dependencies` so that
    // they can be used in the `MultiKeyWeakMap` which doesn't accept null

    const nullReplacer = {};
    return {
      get: _ref2 => {
        let {
          namespace,
          dependencies
        } = _ref2;
        const dependenciesWithoutNull = dependencies.map(dep => dep === null ? nullReplacer : dep);
        const namespaceMap = namespaces.get(namespace);
        return namespaceMap === null || namespaceMap === void 0 ? void 0 : namespaceMap.get(dependenciesWithoutNull);
      },
      set: _ref3 => {
        let {
          namespace,
          dependencies,
          value
        } = _ref3;
        const namespaceMap = namespaces.get(namespace) || (0, _createMultiKeyWeakMap.createMultiKeyWeakMap)();
        const dependenciesWithoutNull = dependencies.map(dep => dep === null ? nullReplacer : dep);
        namespaces.set(namespace, namespaceMap);
        namespaceMap.set(dependenciesWithoutNull, value);
      }
    };
  }, []);
  return /*#__PURE__*/_react.default.createElement(ResourceCacheContext.Provider, {
    value: resourceCache
  }, children);
}

function useResourceCache() {
  const cache = (0, _react.useContext)(ResourceCacheContext);
  if (!cache) throw new Error('Could not find `cache` context');
  return cache;
}