"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = HistoryTimelineStory;

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _dateFns = require("date-fns");

var _react = _interopRequireWildcard(require("react"));

var _reactRx = require("react-rx");

var _changeIndicators = require("../../components/changeIndicators");

var _field = require("../../field");

var _hooks = require("../../hooks");

var _useInitialValue = require("../document/useInitialValue");

var _datastores = require("../datastores");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function HistoryTimelineStory() {
  const client = (0, _hooks.useClient)();
  const schema = (0, _hooks.useSchema)();
  const documentId = (0, _react.useMemo)(() => 'test', []);
  const documentType = (0, _react.useMemo)(() => 'author', []);
  const schemaType = schema.get(documentType);
  const templateName = (0, _react.useMemo)(() => undefined, []);
  const templateParams = (0, _react.useMemo)(() => undefined, []);
  const [params, setParams] = (0, _react.useState)({});
  const historyStore = (0, _datastores.useHistoryStore)();
  const connectionState = (0, _hooks.useConnectionState)(documentId, documentType);
  const editState = (0, _hooks.useEditState)(documentId, documentType);
  const initialValue = (0, _useInitialValue.useInitialValue)({
    documentId,
    documentType,
    templateName,
    templateParams
  });
  const value = (editState === null || editState === void 0 ? void 0 : editState.draft) || (editState === null || editState === void 0 ? void 0 : editState.published) || initialValue.value;
  const timeline = (0, _react.useMemo)(() => historyStore.getTimeline({
    publishedId: documentId,
    enableTrace: true
  }), [documentId, historyStore]); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  const {
    historyController
  } = (0, _reactRx.useMemoObservable)(() => historyStore.getTimelineController({
    client,
    documentId,
    documentType,
    timeline
  }), [client, documentId, documentType, timeline]);
  const [, _forceUpdate] = (0, _react.useState)(0);
  const forceUpdate = (0, _react.useCallback)(() => _forceUpdate(p => p + 1), []);
  (0, _react.useEffect)(() => {
    historyController.setRange(params.since || null, params.rev || null);
    forceUpdate();
  }, [forceUpdate, historyController, params.rev, params.since]);
  const changesOpen = historyController.changesPanelActive();
  const compareValue = changesOpen ? historyController.sinceAttributes() : null;
  const ready = connectionState === 'connected' && editState.ready;
  const isPreviousVersion = historyController.onOlderRevision();
  const displayed = (0, _react.useMemo)(() => isPreviousVersion ? historyController.displayed() : value, // eslint-disable-next-line react-hooks/exhaustive-deps
  [historyController, params.rev, params.since, value, isPreviousVersion]);
  const diff = changesOpen ? historyController.currentObjectDiff() : null;
  const handleHistoryOpen = (0, _react.useCallback)(() => {
    setParams(prevParams => ({ ...prevParams,
      since: '@lastPublished'
    }));
  }, []);
  const handleHistoryClose = (0, _react.useCallback)(() => {
    setParams(prevParams => (0, _omit2.default)({ ...prevParams
    }, 'since'));
  }, []);
  const setTimelineRange = (0, _react.useCallback)((newSince, newRev) => {
    setParams(prevParams => ({ ...prevParams,
      since: newSince || undefined,
      rev: newRev || undefined
    }));
  }, []);
  const isComparingCurrent = !historyController.onOlderRevision();
  const documentContext = (0, _react.useMemo)(() => ({
    documentId,
    schemaType: schemaType,
    FieldWrapper: _changeIndicators.ChangeFieldWrapper,
    rootDiff: diff,
    isComparingCurrent,
    value
  }), [diff, documentId, isComparingCurrent, schemaType, value]);
  return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    direction: "column",
    height: "fill"
  }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    borderBottom: true,
    padding: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Inline, {
    space: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    icon: _icons.RestoreIcon,
    mode: "ghost",
    onClick: changesOpen ? handleHistoryClose : handleHistoryOpen,
    selected: changesOpen,
    text: "Review changes"
  }))), /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    flex: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    flex: 1,
    overflow: "auto",
    padding: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    gap: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    flex: 1,
    space: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 1,
    weight: "semibold"
  }, "Revision")), timeline.mapChunks(chunk => {
    return /*#__PURE__*/_react.default.createElement(_ui.Card, {
      as: "button",
      key: chunk.id,
      onClick: () => {
        const [sinceId, revId] = historyController.findRangeForNewRev(chunk);
        setTimelineRange(sinceId, revId);
      },
      padding: 3,
      selected: historyController.realRevChunk === chunk
    }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, chunk.type), /*#__PURE__*/_react.default.createElement(_ui.Text, {
      muted: true,
      size: 1
    }, (0, _dateFns.format)(new Date(chunk.endTimestamp), 'MMM d, YYY @ HH:mm'))));
  })), changesOpen && /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    flex: 1,
    space: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 1,
    weight: "semibold"
  }, "Changes since")), timeline.mapChunks(chunk => {
    return /*#__PURE__*/_react.default.createElement(_ui.Card, {
      as: "button",
      key: chunk.id,
      onClick: () => {
        const [sinceId, revId] = historyController.findRangeForNewSince(chunk);
        setTimelineRange(sinceId, revId);
      },
      padding: 3,
      selected: historyController.sinceTime === chunk
    }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, chunk.type), /*#__PURE__*/_react.default.createElement(_ui.Text, {
      muted: true,
      size: 1
    }, (0, _dateFns.format)(new Date(chunk.endTimestamp), 'MMM d, YYY @ HH:mm'))));
  })))), /*#__PURE__*/_react.default.createElement(_ui.Card, {
    borderLeft: true,
    flex: 1,
    overflow: "auto",
    padding: 4
  }, diff && schemaType && /*#__PURE__*/_react.default.createElement(_field.DocumentChangeContext.Provider, {
    value: documentContext
  }, /*#__PURE__*/_react.default.createElement(_field.ChangeList, {
    diff: diff,
    schemaType: schemaType
  })), !changesOpen && /*#__PURE__*/_react.default.createElement(_ui.Text, null, "No range selected")), /*#__PURE__*/_react.default.createElement(_ui.Card, {
    borderLeft: true,
    flex: 1,
    overflow: "auto",
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Code, {
    language: "json",
    size: 1
  }, JSON.stringify({
    changesOpen,
    compareValue,
    diff,
    displayed,
    params,
    ready,
    viewOlderVersion: isPreviousVersion
  }, null, 2)))));
}