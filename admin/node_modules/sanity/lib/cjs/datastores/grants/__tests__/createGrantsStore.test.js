"use strict";

var _operators = require("rxjs/operators");

var _grantsStore = require("../grantsStore");

var _exampleGrants = require("../debug/exampleGrants");

function createMockClient() {
  let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const mockConfig = {
    useCdn: false,
    projectId: 'mock-project-id',
    dataset: 'mock-data-set',
    apiVersion: '1'
  };
  const requestUriPrefix = "/projects/".concat(mockConfig.projectId, "/datasets/").concat(mockConfig.dataset);
  const mockClient = {
    config: () => mockConfig,
    withConfig: () => mockClient,
    request: jest.fn(opts => {
      var _data$requests, _data$requests3;

      const path = opts.uri.slice(requestUriPrefix.length);

      if (data !== null && data !== void 0 && (_data$requests = data.requests) !== null && _data$requests !== void 0 && _data$requests[path]) {
        var _data$requests2;

        return Promise.resolve(data === null || data === void 0 ? void 0 : (_data$requests2 = data.requests) === null || _data$requests2 === void 0 ? void 0 : _data$requests2[path]);
      }

      return Promise.resolve((data === null || data === void 0 ? void 0 : (_data$requests3 = data.requests) === null || _data$requests3 === void 0 ? void 0 : _data$requests3['*']) || null);
    })
  };
  return mockClient;
}

describe('checkDocumentPermission', () => {
  it('takes in a permission and document and returns an observable of PermissionCheckResult', async () => {
    const client = createMockClient({
      requests: {
        '/acl': _exampleGrants.viewer
      }
    });
    const {
      checkDocumentPermission
    } = (0, _grantsStore.createGrantsStore)({
      client,
      currentUser: null
    });
    await expect(checkDocumentPermission('create', {
      _id: 'example-id',
      _type: 'book'
    }).pipe((0, _operators.first)()).toPromise()).resolves.toEqual({
      granted: false,
      reason: 'No matching grants found'
    });
    await expect(checkDocumentPermission('read', {
      _id: 'example-id',
      _type: 'book'
    }).pipe((0, _operators.first)()).toPromise()).resolves.toEqual({
      granted: true,
      reason: 'Matching grant'
    });
    expect(client.request.mock.calls).toEqual([[{
      tag: 'acl.get',
      uri: '/projects/mock-project-id/datasets/mock-data-set/acl',
      withCredentials: true
    }]]);
  });
});