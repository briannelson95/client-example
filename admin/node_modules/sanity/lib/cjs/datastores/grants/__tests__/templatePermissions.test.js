"use strict";

var _operators = require("rxjs/operators");

var _templates = require("../../../templates");

var _mockSanityClient = require("../../../../test/mocks/mockSanityClient");

var _schema = require("../../../schema");

var _exampleGrants = require("../debug/exampleGrants");

var _grantsStore = require("../grantsStore");

var _templatePermissions = require("../templatePermissions");

/* eslint-disable camelcase */
const schema = (0, _schema.createSchema)({
  name: 'test',
  types: [{
    name: 'author',
    title: 'Author',
    type: 'document',
    fields: [{
      name: 'name',
      type: 'string'
    }, {
      name: 'role',
      type: 'string'
    }, {
      name: 'locked',
      type: 'boolean'
    }]
  }]
});
const templates = (0, _templates.prepareTemplates)(schema, [...(0, _templates.defaultTemplatesForSchema)(schema), {
  id: 'author-developer-locked',
  title: 'Developer',
  schemaType: 'author',
  value: {
    role: 'developer',
    locked: true
  }
}, {
  id: 'author-developer-unlocked',
  title: 'Developer',
  schemaType: 'author',
  value: {
    role: 'developer',
    locked: false
  }
}]);
describe('getTemplatePermissions', () => {
  it('takes in a list of `InitialValueTemplateItem`s and returns an observable of `TemplatePermissionsResult` in a record', async () => {
    const client = (0, _mockSanityClient.createMockSanityClient)({
      requests: {
        '/acl': _exampleGrants.requiresApproval
      }
    });
    const grantsStore = (0, _grantsStore.createGrantsStore)({
      client: client,
      currentUser: null
    });
    const permissions = (0, _templatePermissions.getTemplatePermissions)({
      grantsStore,
      schema,
      templates,
      templateItems: [{
        id: 'author-developer-locked',
        templateId: 'author-developer-locked',
        type: 'initialValueTemplateItem',
        schemaType: 'author'
      }, {
        id: 'author-developer-unlocked',
        templateId: 'author-developer-unlocked',
        type: 'initialValueTemplateItem',
        schemaType: 'author'
      }]
    }).pipe((0, _operators.first)()).toPromise();
    await expect(permissions).resolves.toEqual([{
      description: undefined,
      granted: false,
      icon: undefined,
      schemaType: 'author',
      id: 'author-developer-locked',
      reason: 'No matching grants found',
      resolvedInitialValue: {
        locked: true,
        role: 'developer'
      },
      subtitle: 'Author',
      template: {
        id: 'author-developer-locked',
        schemaType: 'author',
        title: 'Developer',
        value: {
          locked: true,
          role: 'developer'
        }
      },
      templateId: 'author-developer-locked',
      title: 'Developer',
      type: 'initialValueTemplateItem'
    }, {
      description: undefined,
      granted: true,
      icon: undefined,
      schemaType: 'author',
      id: 'author-developer-unlocked',
      reason: 'Matching grant',
      resolvedInitialValue: {
        locked: false,
        role: 'developer'
      },
      subtitle: 'Author',
      template: {
        id: 'author-developer-unlocked',
        schemaType: 'author',
        title: 'Developer',
        value: {
          locked: false,
          role: 'developer'
        }
      },
      templateId: 'author-developer-unlocked',
      title: 'Developer',
      type: 'initialValueTemplateItem'
    }]);
  });
});