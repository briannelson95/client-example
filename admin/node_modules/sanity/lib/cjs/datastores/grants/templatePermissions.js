"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTemplatePermissions = getTemplatePermissions;
exports.useTemplatePermissions = useTemplatePermissions;
exports.useTemplatePermissionsFromHookFactory = void 0;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _hooks = require("../../hooks");

var _templates = require("../../templates");

var _createHookFromObservableFactory = require("../../util/createHookFromObservableFactory");

var _draftUtils = require("../../util/draftUtils");

var _datastores = require("../datastores");

var _documentValuePermissions = require("./documentValuePermissions");

function serialize(item) {
  if (item && 'serialize' in item) return serialize(item.serialize());
  return item;
}

/**
 * The observable version of `useTemplatePermissions`
 */
function getTemplatePermissions(_ref) {
  let {
    grantsStore,
    templateItems,
    templates,
    schema
  } = _ref;
  if (!(templateItems !== null && templateItems !== void 0 && templateItems.length)) return (0, _rxjs.of)([]);
  return (0, _rxjs.combineLatest)(templateItems.map(serialize).map(async item => {
    const template = templates.find(t => t.id === item.templateId);

    if (!template) {
      throw new Error("template not found: \"".concat(item.templateId, "\""));
    }

    const resolvedInitialValue = await (0, _templates.resolveInitialValue)(schema, template, item.parameters);
    return {
      template,
      item,
      resolvedInitialValue
    };
  }).map(promise => (0, _rxjs.from)(promise).pipe((0, _operators.switchMap)(_ref2 => {
    let {
      item,
      resolvedInitialValue,
      template
    } = _ref2;
    const schemaType = schema.get(template.schemaType);

    if (!schemaType) {
      throw new Error("schema type not found: \"".concat(template.schemaType, "\""));
    }

    const liveEdit = schemaType === null || schemaType === void 0 ? void 0 : schemaType.liveEdit;
    const {
      initialDocumentId = 'dummy-id'
    } = item;
    return (0, _documentValuePermissions.getDocumentValuePermissions)({
      grantsStore,
      permission: 'create',
      document: {
        _id: liveEdit ? (0, _draftUtils.getPublishedId)(initialDocumentId) : (0, _draftUtils.getDraftId)(initialDocumentId),
        ...resolvedInitialValue
      }
    }).pipe((0, _operators.map)(_ref3 => {
      let {
        granted,
        reason
      } = _ref3;
      const title = item.title || template.title;
      const result = { ...item,
        granted,
        reason,
        resolvedInitialValue,
        template,
        title,
        subtitle: schemaType.title === title ? undefined : schemaType.title,
        description: item.description || template.description,
        icon: item.icon || template.icon
      };
      return result;
    }));
  }))));
}
/**
 * Takes in an array of initial template values and returns an object of
 * `TemplatePermissionsResult` keyed by the IDs of the initial template values
 * given.
 *
 * The `TemplatePermissionsResult` is an object that contains a `granted`
 * boolean per key and can be used to determine if a user has the ability to
 * create documents using the given initial value template items.
 *
 * For each initial template value item, the corresponding template is found and
 * resolved against the parameters in each the initial template value item. The
 * resolved value is then run through the document-value permissions. If there
 * are any matching grants for the resolved initial template value, the
 * `TemplatePermissionsResult` will include `granted: true`.
 */


const useTemplatePermissionsFromHookFactory = (0, _createHookFromObservableFactory.createHookFromObservableFactory)(getTemplatePermissions);
exports.useTemplatePermissionsFromHookFactory = useTemplatePermissionsFromHookFactory;

function useTemplatePermissions(_ref4) {
  let {
    templateItems,
    ...rest
  } = _ref4;
  const schema = (0, _hooks.useSchema)();
  const templates = (0, _hooks.useTemplates)();
  const grantsStore = (0, _datastores.useGrantsStore)();
  return useTemplatePermissionsFromHookFactory({
    templateItems,
    grantsStore: rest.grantsStore || grantsStore,
    schema: rest.schema || schema,
    templates: rest.templates || templates
  });
}