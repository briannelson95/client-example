"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDocumentValuePermissions = getDocumentValuePermissions;
exports.useDocumentValuePermissions = useDocumentValuePermissions;
exports.useDocumentValuePermissionsFromHookFactory = void 0;

var _createHookFromObservableFactory = require("../../util/createHookFromObservableFactory");

var _datastores = require("../datastores");

/**
 * The observable version of `useDocumentValuePermissions`
 *
 * @see useDocumentValuePermissions
 */
function getDocumentValuePermissions(_ref) {
  let {
    grantsStore,
    document,
    permission
  } = _ref;
  const {
    checkDocumentPermission
  } = grantsStore;
  return checkDocumentPermission(permission, document);
}
/**
 * Gets permissions based on the value of the document passed into the hook
 * (stateless).
 *
 * Note: this is a lower-level API (compared to `useDocumentPairPermissions`)
 * that is _not_ draft-model aware.
 *
 * As a consequence, the operations it accepts are also low-level. (e.g.
 * `'publish'` permissions can't be determined with this API). This is because
 * it's not possible to tell if a user can do high-level document pair
 * operations on document using only one document value.
 *
 * For example, in order to determine if a user can publish, the current value
 * of the published document needs to be pulled and checked against the user's
 * grants. If there are no matching grants, then it fails the pre-condition and
 * no operation is allowed regardless of the given document.
 *
 * @see useDocumentPairPermissions
 */


const useDocumentValuePermissionsFromHookFactory = (0, _createHookFromObservableFactory.createHookFromObservableFactory)(getDocumentValuePermissions);
exports.useDocumentValuePermissionsFromHookFactory = useDocumentValuePermissionsFromHookFactory;

function useDocumentValuePermissions(_ref2) {
  let {
    document,
    permission,
    ...rest
  } = _ref2;
  const grantsStore = (0, _datastores.useGrantsStore)();
  return useDocumentValuePermissionsFromHookFactory({
    grantsStore: rest.grantsStore || grantsStore,
    document,
    permission
  });
}