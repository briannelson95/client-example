"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CONNECTING = void 0;
exports.createConnectionStatusStore = createConnectionStatusStore;
exports.onRetry = void 0;

var _observableCallback = require("observable-callback");

var _operators = require("rxjs/operators");

var _rxjs = require("rxjs");

var _catchWithCount = require("./utils/catchWithCount");

const onOnline$ = typeof window === 'undefined' ? (0, _rxjs.of)({}) : (0, _rxjs.fromEvent)(window, 'online');
const onOffline$ = typeof window === 'undefined' ? (0, _rxjs.of)({}) : (0, _rxjs.fromEvent)(window, 'offline');

const expBackoff = retryCount => Math.pow(2, retryCount) * 100;

const CONNECTING = {
  type: 'connecting'
};
exports.CONNECTING = CONNECTING;
const [onRetry$, onRetry] = (0, _observableCallback.observableCallback)();
exports.onRetry = onRetry;

const createErrorStatus = _ref => {
  let {
    error,
    isOffline,
    attemptNo,
    retryAt
  } = _ref;
  return {
    type: 'error',
    error,
    attemptNo,
    isOffline,
    retryAt
  };
};

/**
 * This is the beginning of what should be the data store tracking connection status in the Sanity studio.
 */
function createConnectionStatusStore(_ref2) {
  let {
    bifur
  } = _ref2;
  const connectionStatus$ = (0, _rxjs.merge)(bifur.heartbeats, onOffline$.pipe((0, _operators.mergeMapTo)((0, _rxjs.throwError)(new Error('The browser went offline'))))).pipe((0, _operators.map)(ts => ({
    type: 'connected',
    lastHeartbeat: ts
  })), (0, _catchWithCount.catchWithCount)((error, successiveErrorsCount, caught) => {
    const timeUntilRetry = Math.min(1000 * 240, expBackoff(successiveErrorsCount));
    const retryAt = new Date(new Date().getTime() + timeUntilRetry);
    const expiry$ = (0, _rxjs.timer)(retryAt);
    const isOffline = !navigator.onLine;
    const initialErrorStatus = createErrorStatus({
      error,
      retryAt,
      isOffline,
      attemptNo: successiveErrorsCount
    });

    const triggerRetry$ = _rxjs.NEVER.pipe((0, _operators.takeUntil)(isOffline ? onOnline$ : (0, _rxjs.merge)(expiry$, onOnline$, onRetry$)));

    return (0, _rxjs.concat)((0, _rxjs.of)(initialErrorStatus), triggerRetry$.pipe((0, _operators.take)(1)), caught);
  }), (0, _operators.startWith)(CONNECTING));
  return {
    connectionStatus$
  };
}