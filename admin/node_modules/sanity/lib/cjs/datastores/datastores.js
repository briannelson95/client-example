"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useConnectionStatusStore = useConnectionStatusStore;
exports.useCrossProjectTokenStore = useCrossProjectTokenStore;
exports.useDocumentPreviewStore = useDocumentPreviewStore;
exports.useDocumentStore = useDocumentStore;
exports.useGrantsStore = useGrantsStore;
exports.useHistoryStore = useHistoryStore;
exports.usePresenceStore = usePresenceStore;
exports.useProjectStore = useProjectStore;
exports.useSettingsStore = useSettingsStore;
exports.useUserStore = useUserStore;

var _react = require("react");

var _hooks = require("../hooks");

var _studio = require("../studio");

var _preview = require("../preview");

var _connectionStatusStore = require("./connection-status/connection-status-store");

var _crossProjectToken = require("./crossProjectToken");

var _document = require("./document");

var _grants = require("./grants");

var _history = require("./history");

var _presence = require("./presence");

var _project = require("./project");

var _ResourceCacheProvider = require("./ResourceCacheProvider");

var _settings = require("./settings");

var _user = require("./user");

/* eslint-disable camelcase */
function useUserStore() {
  const {
    client,
    currentUser
  } = (0, _studio.useSource)();
  const resourceCache = (0, _ResourceCacheProvider.useResourceCache)();
  return (0, _react.useMemo)(() => {
    const userStore = resourceCache.get({
      namespace: 'userStore',
      dependencies: [client, currentUser]
    }) || (0, _user.createUserStore)({
      client,
      currentUser
    });
    resourceCache.set({
      namespace: 'userStore',
      dependencies: [client, currentUser],
      value: userStore
    });
    return userStore;
  }, [client, currentUser, resourceCache]);
}

function useGrantsStore() {
  const {
    client
  } = (0, _studio.useSource)();
  const currentUser = (0, _user.useCurrentUser)();
  const resourceCache = (0, _ResourceCacheProvider.useResourceCache)();
  return (0, _react.useMemo)(() => {
    const grantsStore = resourceCache.get({
      namespace: 'grantsStore',
      dependencies: [client, currentUser]
    }) || (0, _grants.createGrantsStore)({
      client,
      currentUser
    });
    resourceCache.set({
      namespace: 'grantsStore',
      dependencies: [client, currentUser],
      value: grantsStore
    });
    return grantsStore;
  }, [client, currentUser, resourceCache]);
}

function useHistoryStore() {
  const client = (0, _hooks.useClient)();
  const resourceCache = (0, _ResourceCacheProvider.useResourceCache)();
  return (0, _react.useMemo)(() => {
    const historyStore = resourceCache.get({
      namespace: 'historyStore',
      dependencies: [client]
    }) || (0, _history.createHistoryStore)({
      client
    });
    resourceCache.set({
      namespace: 'historyStore',
      dependencies: [client],
      value: historyStore
    });
    return historyStore;
  }, [client, resourceCache]);
}

function useDocumentPreviewStore() {
  const client = (0, _hooks.useClient)();
  const resourceCache = (0, _ResourceCacheProvider.useResourceCache)();
  const crossProjectTokenStore = useCrossProjectTokenStore();
  return (0, _react.useMemo)(() => {
    const documentPreviewStore = resourceCache.get({
      namespace: 'documentPreviewStore',
      dependencies: [client, crossProjectTokenStore]
    }) || (0, _preview.createDocumentPreviewStore)({
      client,
      crossProjectTokenStore
    });
    resourceCache.set({
      namespace: 'documentPreviewStore',
      dependencies: [client, crossProjectTokenStore],
      value: documentPreviewStore
    });
    return documentPreviewStore;
  }, [client, resourceCache, crossProjectTokenStore]);
}

function useCrossProjectTokenStore() {
  const client = (0, _hooks.useClient)();
  const resourceCache = (0, _ResourceCacheProvider.useResourceCache)();
  return (0, _react.useMemo)(() => {
    const crossProjectTokenStore = resourceCache.get({
      namespace: 'crossProjectTokenStore',
      dependencies: [client]
    }) || (0, _crossProjectToken.__tmp_wrap_crossProjectToken)({
      client
    });
    resourceCache.set({
      namespace: 'crossProjectTokenStore',
      dependencies: [client],
      value: crossProjectTokenStore
    });
    return crossProjectTokenStore;
  }, [client, resourceCache]);
}

function useDocumentStore() {
  const client = (0, _hooks.useClient)();
  const schema = (0, _hooks.useSchema)();
  const templates = (0, _hooks.useTemplates)();
  const resourceCache = (0, _ResourceCacheProvider.useResourceCache)();
  const historyStore = useHistoryStore();
  const documentPreviewStore = useDocumentPreviewStore();
  return (0, _react.useMemo)(() => {
    const documentStore = resourceCache.get({
      namespace: 'documentStore',
      dependencies: [client, documentPreviewStore, historyStore, schema]
    }) || (0, _document.createDocumentStore)({
      client,
      documentPreviewStore,
      historyStore,
      initialValueTemplates: templates,
      schema
    });
    resourceCache.set({
      namespace: 'documentStore',
      dependencies: [client, documentPreviewStore, historyStore, schema],
      value: documentStore
    });
    return documentStore;
  }, [client, documentPreviewStore, historyStore, resourceCache, schema, templates]);
}

function useConnectionStatusStore() {
  const {
    bifur
  } = (0, _studio.useSource)().__internal;

  const resourceCache = (0, _ResourceCacheProvider.useResourceCache)();
  return (0, _react.useMemo)(() => {
    const connectionStatusStore = resourceCache.get({
      namespace: 'connectionStatusStore',
      dependencies: [bifur]
    }) || (0, _connectionStatusStore.createConnectionStatusStore)({
      bifur
    });
    resourceCache.set({
      namespace: 'connectionStatusStore',
      dependencies: [bifur],
      value: connectionStatusStore
    });
    return connectionStatusStore;
  }, [bifur, resourceCache]);
}

function usePresenceStore() {
  const {
    __internal: {
      bifur
    }
  } = (0, _studio.useSource)();
  const resourceCache = (0, _ResourceCacheProvider.useResourceCache)();
  const userStore = useUserStore();
  const connectionStatusStore = useConnectionStatusStore();
  return (0, _react.useMemo)(() => {
    const presenceStore = resourceCache.get({
      namespace: 'presenceStore',
      dependencies: [bifur, connectionStatusStore, userStore]
    }) || (0, _presence.__tmp_wrap_presenceStore)({
      bifur,
      connectionStatusStore,
      userStore
    });
    resourceCache.set({
      namespace: 'presenceStore',
      dependencies: [bifur, connectionStatusStore, userStore],
      value: presenceStore
    });
    return presenceStore;
  }, [bifur, connectionStatusStore, resourceCache, userStore]);
}

function useProjectStore() {
  const client = (0, _hooks.useClient)();
  const resourceCache = (0, _ResourceCacheProvider.useResourceCache)();
  return (0, _react.useMemo)(() => {
    const projectStore = resourceCache.get({
      namespace: 'projectStore',
      dependencies: [client]
    }) || (0, _project.createProjectStore)({
      client
    });
    resourceCache.set({
      namespace: 'projectStore',
      dependencies: [client],
      value: projectStore
    });
    return projectStore;
  }, [client, resourceCache]);
}

function useSettingsStore() {
  const resourceCache = (0, _ResourceCacheProvider.useResourceCache)();
  const workspace = (0, _studio.useWorkspace)();
  return (0, _react.useMemo)(() => {
    const settingsStore = resourceCache.get({
      dependencies: [workspace],
      namespace: 'settingsStore'
    }) || (0, _settings.createSettingsStore)();
    resourceCache.set({
      dependencies: [workspace],
      namespace: 'settingsStore',
      value: settingsStore
    });
    return settingsStore;
  }, [resourceCache, workspace]);
}