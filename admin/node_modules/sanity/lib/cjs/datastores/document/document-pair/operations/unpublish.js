"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unpublish = void 0;

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _isLiveEditEnabled = require("../utils/isLiveEditEnabled");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const unpublish = {
  disabled: _ref => {
    let {
      schema,
      snapshots,
      typeName
    } = _ref;

    if ((0, _isLiveEditEnabled.isLiveEditEnabled)(schema, typeName)) {
      return 'LIVE_EDIT_ENABLED';
    }

    return snapshots.published ? false : 'NOT_PUBLISHED';
  },
  execute: _ref2 => {
    let {
      client,
      idPair,
      snapshots
    } = _ref2;
    let tx = client.observable.transaction().delete(idPair.publishedId);

    if (snapshots.published) {
      tx = tx.createIfNotExists({ ...(0, _omit2.default)(snapshots.published, '_updatedAt'),
        _id: idPair.draftId,
        _type: snapshots.published._type
      });
    }

    return tx.commit({
      tag: 'document.unpublish',
      visibility: 'async',
      // this disables referential integrity for cross-dataset references. we
      // have this set because we warn against unpublishes in the `ConfirmDeleteDialog`
      // UI. This operation is run when "unpublish anyway" is clicked
      skipCrossDatasetReferenceValidation: true
    });
  }
};
exports.unpublish = unpublish;