"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkoutPair = checkoutPair;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _getPairListener = require("../getPairListener");

var _bufferedDoc = require("../buffered-doc");

const isEventForDocId = id => event => event.type !== 'reconnect' && event.documentId === id;

function commitMutations(client, mutations) {
  return client.dataRequest('mutate', mutations, {
    visibility: 'async',
    returnDocuments: false,
    tag: 'document.commit'
  });
}

function setVersion(version) {
  return ev => ({ ...ev,
    version
  });
}

function checkoutPair(client, idPair) {
  const {
    publishedId,
    draftId
  } = idPair;
  const listenerEvents$ = (0, _getPairListener.getPairListener)(client, idPair).pipe((0, _operators.share)());
  const reconnect$ = listenerEvents$.pipe((0, _operators.filter)(ev => ev.type === 'reconnect'));
  const draft = (0, _bufferedDoc.createBufferedDocument)(draftId, listenerEvents$.pipe((0, _operators.filter)(isEventForDocId(draftId))), mut => commitMutations(client, mut));
  const published = (0, _bufferedDoc.createBufferedDocument)(publishedId, listenerEvents$.pipe((0, _operators.filter)(isEventForDocId(publishedId))), mut => commitMutations(client, mut));
  return {
    draft: { ...draft,
      events: (0, _rxjs.merge)(reconnect$, draft.events).pipe((0, _operators.map)(setVersion('draft'))),
      consistency$: draft.consistency$,
      remoteSnapshot$: draft.remoteSnapshot$.pipe((0, _operators.map)(setVersion('draft')))
    },
    published: { ...published,
      events: (0, _rxjs.merge)(reconnect$, published.events).pipe((0, _operators.map)(setVersion('published'))),
      consistency$: published.consistency$,
      remoteSnapshot$: published.remoteSnapshot$.pipe((0, _operators.map)(setVersion('published')))
    }
  };
}