"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createObservableBufferedDocument = void 0;

var _mutator = require("@sanity/mutator");

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

// BufferedDocument.LOCAL never updates its revision due to its internal consistency checks
// but we sometimes we need the most current _rev on the document in UI land, e.g.
// in order to do optimistic locking on the edited document to make sure we publish the document the user
// actually are looking at, and not the one currently at the server
// Also - the mutator is not setting _updatedAt on patches applied optimistically or
// when they are received from server
const getUpdatedSnapshot = bufferedDocument => {
  const LOCAL = bufferedDocument.LOCAL;
  const HEAD = bufferedDocument.document.HEAD;

  if (!LOCAL) {
    return LOCAL;
  }

  return { ...LOCAL,
    _type: (HEAD || LOCAL)._type,
    _rev: (HEAD || LOCAL)._rev,
    _updatedAt: new Date().toISOString()
  };
};

const toSnapshotEvent = document => ({
  type: 'snapshot',
  document
});

const getDocument = event => event.document; // This is an observable interface for BufferedDocument in an attempt
// to make it easier to work with the api provided by it


const createObservableBufferedDocument = (listenerEvent$, commitMutations) => {
  // Incoming local actions (e.g. a request to mutate, a request to commit pending changes, etc.)
  const actions$ = new _rxjs.Subject(); // Stream of commit requests. Must be handled by a commit handler

  const consistency$ = new _rxjs.BehaviorSubject(true); // Stream of mutations for this document
  // NOTE: this will *not* include remote mutations received over the listener
  // that has *already* applied locally/optimistically

  const mutations$ = new _rxjs.Subject(); // a stream of rebase events emitted from the mutator

  const rebase$ = new _rxjs.Subject(); // a stream of remote mutations with effetcs

  const remoteMutations = new _rxjs.Subject();

  const createInitialBufferedDocument = initialSnapshot => {
    const bufferedDocument = new _mutator.BufferedDocument(initialSnapshot);

    bufferedDocument.onMutation = _ref => {
      let {
        mutation,
        remote
      } = _ref;
      // this is called after either when:
      // 1) local mutations has been added, optimistically applied and queued for sending
      // 2) remote mutations originating from another client has arrived and been applied
      mutations$.next({
        type: 'mutation',
        document: getUpdatedSnapshot(bufferedDocument),
        mutations: mutation.mutations,
        origin: remote ? 'remote' : 'local'
      });
    };

    bufferedDocument.onRemoteMutation = mutation => {
      remoteMutations.next({
        type: 'remoteMutation',
        head: bufferedDocument.document.HEAD,
        transactionId: mutation.transactionId,
        timestamp: mutation.timestamp,
        author: mutation.identity,
        effects: mutation.effects
      });
    };

    bufferedDocument.onRebase = (edge, nextRemoteMutations, localMutations) => {
      rebase$.next({
        type: 'rebase',
        document: edge,
        remoteMutations: nextRemoteMutations,
        localMutations
      });
    };

    bufferedDocument.onConsistencyChanged = isConsistent => {
      consistency$.next(isConsistent);
    };

    bufferedDocument.commitHandler = opts => {
      const {
        resultRev,
        ...mutation
      } = opts.mutation.params;
      commitMutations(mutation).then(opts.success, error => {
        const isBadRequest = error.name === 'ClientError' && error.statusCode >= 400 && error.statusCode <= 500;

        if (isBadRequest) {
          opts.cancel(error);
        } else {
          opts.failure();
        }

        return Promise.reject(error);
      });
    };

    return bufferedDocument;
  };

  const currentBufferedDocument$ = listenerEvent$.pipe((0, _operators.scan)((bufferedDocument, listenerEvent) => {
    // consider renaming 'snapshot' to initial/welcome
    if (listenerEvent.type === 'snapshot') {
      if (bufferedDocument) {
        // we received a new snapshot and already got an old one. When we receive a snapshot again
        // it is usually because the connection has been down. Attempt to save pending changes (if any)
        bufferedDocument.commit();
      }

      return createInitialBufferedDocument(listenerEvent.document || null);
    }

    if (bufferedDocument === null) {
      // eslint-disable-next-line no-console
      console.warn('Ignoring event of type "%s" since buffered document has not yet been set up with snapshot', listenerEvent.type);
      return null;
    }

    return bufferedDocument;
  }, null), (0, _operators.distinctUntilChanged)(), (0, _operators.publishReplay)(1), (0, _operators.refCount)()); // this is a stream of document snapshots where each new snapshot are emitted after listener mutations
  // has been applied. Since the optimistic patches is not emitted on the mutation$ stream, we need this
  // in order to update the document with a new _rev (and _updatedAt)

  const snapshotAfterSync$ = listenerEvent$.pipe((0, _operators.filter)(ev => ev.type === 'mutation'), (0, _operators.withLatestFrom)(currentBufferedDocument$), (0, _operators.map)(_ref2 => {
    let [mutationEvent, bufferedDocument] = _ref2;
    bufferedDocument.arrive(new _mutator.Mutation(mutationEvent));
    return getUpdatedSnapshot(bufferedDocument);
  })); // this is where the side effects mandated by local actions actually happens

  const actionHandler$ = actions$.pipe((0, _operators.withLatestFrom)(currentBufferedDocument$), (0, _operators.tap)(_ref3 => {
    let [action, bufferedDocument] = _ref3;

    if (action.type === 'mutation') {
      bufferedDocument.add(new _mutator.Mutation({
        mutations: action.mutations
      }));
    }

    if (action.type === 'commit') {
      bufferedDocument.commit();
    }
  }), // We subscribe to this only for the side effects
  (0, _operators.mergeMapTo)(_rxjs.EMPTY), (0, _operators.share)());

  const emitAction = action => actions$.next(action);

  const addMutations = mutations => emitAction({
    type: 'mutation',
    mutations
  });

  const addMutation = mutation => addMutations([mutation]);

  const commit = () => {
    return currentBufferedDocument$.pipe((0, _operators.take)(1), (0, _operators.mergeMap)(bufferedDocument => bufferedDocument.commit()), (0, _operators.mergeMapTo)(_rxjs.EMPTY));
  }; // A stream of this document's snapshot


  const snapshot$ = (0, _rxjs.merge)(currentBufferedDocument$.pipe((0, _operators.map)(bufferedDocument => bufferedDocument.LOCAL)), mutations$.pipe((0, _operators.map)(getDocument)), rebase$.pipe((0, _operators.map)(getDocument)), snapshotAfterSync$).pipe((0, _operators.map)(toSnapshotEvent), (0, _operators.publishReplay)(1), (0, _operators.refCount)());
  const remoteSnapshot$ = (0, _rxjs.merge)(currentBufferedDocument$.pipe((0, _operators.map)(bufferedDocument => bufferedDocument.document.HEAD), (0, _operators.map)(toSnapshotEvent)), remoteMutations).pipe((0, _operators.publishReplay)(1), (0, _operators.refCount)());
  return {
    updates$: (0, _rxjs.merge)(snapshot$, actionHandler$, mutations$, rebase$),
    consistency$: consistency$.pipe((0, _operators.distinctUntilChanged)(), (0, _operators.publishReplay)(1), (0, _operators.refCount)()),
    remoteSnapshot$,
    addMutation,
    addMutations,
    commit
  };
};

exports.createObservableBufferedDocument = createObservableBufferedDocument;