"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBroadcastChannel = createBroadcastChannel;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _util = require("../../util");

var storage = _interopRequireWildcard(require("./storage"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function createBroadcastChannel(namespace) {
  const storageEvents$ = typeof window === 'undefined' ? (0, _rxjs.of)() // No storage events in non-browser environments
  : (0, _rxjs.fromEvent)(window, 'storage');
  const storageKey = "__studio_local_storage_messaging_".concat(namespace); // note: the the `storageEvents$` stream does not emit for the current
  // window/tab. this subject is used to re-broadcast messages broadcast outward
  // to itself

  const broadcastedMessages$ = new _rxjs.Subject();
  const messages$ = (0, _rxjs.merge)(broadcastedMessages$, storageEvents$.pipe((0, _operators.filter)(event => event.key === storageKey), (0, _operators.map)(event => event.newValue), (0, _operators.filter)(_util.isNonNullable), (0, _operators.map)(newValue => JSON.parse(newValue)))).pipe( // this is important to ensure all new subscribers get a message on subscribe
  (0, _operators.shareReplay)(1));

  function broadcast(message) {
    try {
      storage.setItem(storageKey, JSON.stringify(message)); // clear the value afterwards so that next message will still emit a
      // new event even if it's identical to the previous one

      storage.removeItem(storageKey);
      broadcastedMessages$.next(message);
    } catch (err) {// intentional noop
    }
  }

  return {
    messages: messages$,
    broadcast
  };
}