"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._createAuthStore = _createAuthStore;
exports.createAuthStore = void 0;

var _memoize2 = _interopRequireDefault(require("lodash/memoize"));

var _client = _interopRequireDefault(require("@sanity/client"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _cors = require("../cors");

var _createBroadcastChannel = require("./createBroadcastChannel");

var _sessionId = require("./sessionId");

var storage = _interopRequireWildcard(require("./storage"));

var _createLoginComponent = require("./createLoginComponent");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getStorageKey = projectId => {
  // Project ID is part of the localStorage key so that different projects can
  // store their separate tokens, and it's easier to do book keeping.
  if (!projectId) throw new Error('Invalid project id');
  return "__studio_auth_token_".concat(projectId);
};

const getToken = projectId => {
  try {
    const item = storage.getItem(getStorageKey(projectId));

    if (item) {
      const {
        token
      } = JSON.parse(item);

      if (token && typeof token === 'string') {
        return token;
      }
    }
  } catch (err) {
    console.error(err);
  }

  return null;
};

const clearToken = projectId => {
  try {
    storage.removeItem(getStorageKey(projectId));
  } catch (err) {
    console.error(err);
  }
};

const saveToken = _ref => {
  let {
    token,
    projectId
  } = _ref;

  try {
    storage.setItem(getStorageKey(projectId), JSON.stringify({
      token,
      time: new Date().toISOString()
    }));
  } catch (err) {
    console.error(err);
  }
};

const getCurrentUser = async client => {
  const result = await (0, _cors.checkCors)(client);

  if (result !== null && result !== void 0 && result.isCorsError) {
    var _client$config;

    throw new _cors.CorsOriginError({ ...result,
      projectId: (_client$config = client.config()) === null || _client$config === void 0 ? void 0 : _client$config.projectId
    });
  }

  try {
    const user = await client.request({
      uri: '/users/me',
      withCredentials: true,
      tag: 'users.get-current'
    }); // if the user came back with an id, assume it's a full CurrentUser

    return typeof (user === null || user === void 0 ? void 0 : user.id) === 'string' ? user : null;
  } catch (err) {
    if (err.statusCode === 401) return null;
    throw err;
  }
};
/**
 * @internal
 */


function _createAuthStore(_ref2) {
  let {
    projectId,
    dataset,
    loginMethod = 'dual',
    ...providerOptions
  } = _ref2;
  // this broadcast channel receives either a token as a `string` or `null`.
  // a new client will be created from it, otherwise, it'll only trigger a retry
  // for cookie-based auth
  const {
    broadcast,
    messages
  } = (0, _createBroadcastChannel.createBroadcastChannel)("dual_mode_auth_".concat(projectId)); // // TODO: there is currently a bug where the AuthBoundary flashes the
  // // `NotAuthenticatedComponent` on the first load after a login with
  // // cookieless mode. A potential solution to fix this bug is to delay
  // // emitting `state$` until the session ID has been converted to a token
  // const firstMessage = messages.pipe(first())

  const token$ = messages.pipe((0, _operators.startWith)(loginMethod === 'dual' ? getToken(projectId) : null));
  const state$ = token$.pipe( // // see above
  // debounce(() => firstMessage),
  (0, _operators.map)(token => (0, _client.default)({
    projectId,
    dataset,
    apiVersion: '2021-06-07',
    useCdn: false,
    ...(token && {
      token
    }),
    withCredentials: true,
    requestTagPrefix: 'sanity.studio',
    ignoreBrowserTokenWarning: true
  })), (0, _operators.switchMap)(client => (0, _rxjs.defer)(async () => {
    const currentUser = await getCurrentUser(client);
    return {
      currentUser,
      client,
      authenticated: !!currentUser
    };
  })), (0, _operators.shareReplay)(1));

  async function handleCallbackUrl() {
    if (_sessionId.sessionId && loginMethod === 'dual') {
      const requestClient = (0, _client.default)({
        projectId,
        dataset,
        useCdn: true,
        withCredentials: true,
        apiVersion: '2021-06-07',
        requestTagPrefix: 'sanity.studio'
      }); // try to get the current user by using the cookie credentials

      const currentUser = await getCurrentUser(requestClient);

      if (currentUser) {
        // if that worked, then we don't need to fetch a token
        broadcast(null);
      } else {
        // if that didn't work, then we need to trade the session ID for a token
        const {
          token
        } = await requestClient.request({
          method: 'GET',
          uri: "/auth/fetch",
          query: {
            sid: _sessionId.sessionId
          },
          tag: 'auth.fetch-token'
        });
        saveToken({
          token,
          projectId
        });
        broadcast(token);
      }
    } else {
      broadcast(loginMethod === 'dual' ? getToken(projectId) : null);
    }
  }

  async function logout() {
    const requestClient = (0, _client.default)({
      projectId,
      dataset,
      useCdn: true,
      withCredentials: true,
      apiVersion: '2021-06-07',
      requestTagPrefix: 'sanity.studio'
    });
    clearToken(projectId);
    await requestClient.auth.logout();
    broadcast(null);
  }

  const LoginComponent = (0, _createLoginComponent.createLoginComponent)({ ...providerOptions,
    getClient: () => state$.pipe((0, _operators.map)(state => state.client)),
    loginMethod
  });
  return {
    handleCallbackUrl,
    token: token$,
    state: state$,
    LoginComponent,
    logout
  };
}

function hash(value) {
  if (typeof value !== 'object' || value === null) return "".concat(value); // note: this code path works for arrays as well as objects

  return JSON.stringify(Object.fromEntries(Object.entries(value).sort((_ref3, _ref4) => {
    let [a] = _ref3;
    let [b] = _ref4;
    return a.localeCompare(b, 'en');
  }).map(_ref5 => {
    let [k, v] = _ref5;
    return [k, hash(v)];
  })));
}
/**
 * @public
 */


const createAuthStore = (0, _memoize2.default)(_createAuthStore, hash);
exports.createAuthStore = createAuthStore;