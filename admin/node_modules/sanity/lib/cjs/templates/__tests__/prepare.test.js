"use strict";

var _ = require("../");

var _schema = require("./schema");

describe('getTemplates', () => {
  test('returns defaults if part is not implemented', () => {
    const templates = (0, _.defaultTemplatesForSchema)(_schema.schema);
    expect(templates).toMatchSnapshot();
  });
  test('returns defined templates if part implemented', () => {
    const templates = (0, _.prepareTemplates)(_schema.schema, [{
      id: 'author',
      title: 'Author',
      schemaType: 'author',
      value: {
        title: 'here'
      }
    }, {
      serialize: () => ({
        id: 'developer',
        title: 'Developer',
        schemaType: 'developer',
        value: {
          title: 'Foo'
        }
      })
    }]);
    expect(templates).toMatchSnapshot();
  });
  test('validates that templates has ID', () => {
    expect(() => (0, _.prepareTemplates)(_schema.schema, [{
      title: 'Author',
      schemaType: 'author',
      value: {
        title: 'here'
      }
    }])).toThrow('Template "Author" is missing required properties: id');
  });
  test('validates that templates has title', () => {
    expect(() => (0, _.prepareTemplates)(_schema.schema, [{
      id: 'author',
      schemaType: 'author',
      value: {
        title: 'here'
      }
    }])).toThrow('Template "author" is missing required properties: title');
  });
  test('validates that templates has schema type', () => {
    expect(() => (0, _.prepareTemplates)(_schema.schema, [{
      id: 'author',
      title: 'Author',
      value: {
        title: 'here'
      }
    }])).toThrow('Template "author" is missing required properties: schemaType');
  });
  test('validates that templates has value', () => {
    expect(() => (0, _.prepareTemplates)(_schema.schema, [{
      id: 'author',
      title: 'Author',
      schemaType: 'author'
    }])).toThrow('Template "author" is missing required properties: value');
  });
  test('validates that templates has id, title, schemaType, value', () => {
    expect(() => (0, _.prepareTemplates)(_schema.schema, [{}])).toThrow('Template at index 0 is missing required properties: id, title, schemaType, value');
  });
  test('validates that templates has an object/function value', () => {
    expect(() => (0, _.prepareTemplates)(_schema.schema, [{
      id: 'author',
      title: 'Author',
      schemaType: 'author',
      value: []
    }, {
      id: 'person',
      title: 'Person',
      schemaType: 'person',
      value: []
    }])).toThrow('Template "author" has an invalid "value" property; should be a function or an object');
  });
  test('validates that templates has unique IDs', () => {
    expect(() => (0, _.prepareTemplates)(_schema.schema, [{
      id: 'author',
      title: 'Author',
      schemaType: 'author',
      value: {
        name: 'Gunnar'
      }
    }, {
      id: 'person',
      title: 'Person',
      schemaType: 'person'
    }])).toThrow('Template "person" is missing required properties: value');
  });
});