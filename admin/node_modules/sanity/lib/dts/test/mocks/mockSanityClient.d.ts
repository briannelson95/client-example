import { Observable } from 'rxjs';
export interface MockClientTransactionLog {
    id: number;
    commit: any[][];
    create: any[][];
    createIfNotExists: any[][];
    createOrReplace: any[][];
    delete: any[][];
    patch: any[][];
}
export interface MockClientLog {
    listen: {
        query: string;
        params?: any;
    }[];
    observable: {
        fetch: {
            query: string;
            params?: any;
        }[];
        getDocuments: {
            ids: string[];
        }[];
        listen: {
            query: string;
            params?: any;
        }[];
        request: any[];
    };
    request: any[];
    transaction: MockClientTransactionLog[];
}
export declare function createMockSanityClient(data?: {
    requests?: Record<string, any>;
}): {
    $log: MockClientLog;
    config: () => {
        useCdn: boolean;
        projectId: string;
        dataset: string;
        apiVersion: string;
    };
    getUrl: (uri: string) => string;
    withConfig: () => any;
    request: (opts: {
        uri: string;
        tag?: string;
        withCredentials: boolean;
    }) => Promise<any>;
    listen: (query: string, params?: any) => Observable<{
        type: string;
    }>;
    observable: {
        fetch: (query: string, params?: any) => Observable<any>;
        getDocuments: (ids: string[]) => Observable<never[]>;
        listen: (query: string, params?: any) => Observable<{
            type: string;
        }>;
        request: (opts: {
            uri: string;
            tag?: string;
            withCredentials: boolean;
        }) => Observable<any>;
        transaction: () => {
            commit: (...args: any[]) => Observable<{}> | Promise<{}>;
            create: (...args: any[]) => any;
            createIfNotExists: (...args: any[]) => any;
            createOrReplace: (...args: any[]) => any;
            delete: (...args: any[]) => any;
            patch: (...args: any[]) => any;
        };
    };
    transaction: () => {
        commit: (...args: any[]) => Observable<{}> | Promise<{}>;
        create: (...args: any[]) => any;
        createIfNotExists: (...args: any[]) => any;
        createOrReplace: (...args: any[]) => any;
        delete: (...args: any[]) => any;
        patch: (...args: any[]) => any;
    };
};
//# sourceMappingURL=mockSanityClient.d.ts.map