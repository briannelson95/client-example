import { of } from 'rxjs';
export function createMockSanityClient(data = {}) {
    const requests = {
        '/auth/providers': {
            thirdPartyLogin: true,
            sso: { saml: true },
            providers: [
                { name: 'google', title: 'Google', url: 'https://api.sanity.io/v1/auth/login/google' },
                { name: 'github', title: 'GitHub', url: 'https://api.sanity.io/v1/auth/login/github' },
                {
                    name: 'sanity',
                    title: 'E-mail / password',
                    url: 'https://api.sanity.io/v1/auth/login/sanity',
                },
            ],
        },
        '/users/me': {
            id: 'grrm',
            name: 'George R.R. Martin',
            email: 'george@sanity.io',
            profileImage: 'https://i.hurimg.com/i/hdn/75/0x0/59c94dee45d2a027e83d45f2.jpg',
            role: 'administrator',
            roles: [
                {
                    name: 'administrator',
                    title: 'Administrator',
                    description: 'Read and write access to all datasets, with full access to all project settings.',
                },
            ],
            provider: 'google',
        },
        ...data.requests,
    };
    const mockConfig = {
        useCdn: false,
        projectId: 'mock-project-id',
        dataset: 'mock-data-set',
        apiVersion: '1',
    };
    const BASE_URL = `mock://${mockConfig.projectId}.sanity.api`;
    const requestUriPrefix = `/projects/${mockConfig.projectId}/datasets/${mockConfig.dataset}`;
    // const $log = jest.fn()
    const $log = {
        listen: [],
        observable: {
            fetch: [],
            getDocuments: [],
            listen: [],
            request: [],
        },
        request: [],
        transaction: [],
    };
    const mockClient = {
        $log,
        config: () => mockConfig,
        getUrl: (uri) => {
            return BASE_URL + uri;
        },
        withConfig: () => mockClient,
        request: (opts) => {
            $log.request.push(opts);
            if (opts.uri.startsWith(requestUriPrefix)) {
                const path = opts.uri.slice(requestUriPrefix.length);
                if (requests[path]) {
                    return Promise.resolve(requests[path]);
                }
            }
            return Promise.resolve(requests[opts.uri] || requests['*'] || null);
        },
        listen: (query, params) => {
            $log.listen.push({ query, params });
            return of({ type: 'welcome' });
        },
        observable: {
            fetch: (query, params) => {
                $log.observable.fetch.push({ query, params });
                // $log('observable.fetch', {query, params})
                return of(null);
            },
            getDocuments: (ids) => {
                $log.observable.getDocuments.push({ ids });
                // $log('observable.getDocuments', {ids})
                return of([]);
            },
            listen: (query, params) => {
                $log.observable.listen.push({ query, params });
                // $log('observable.listen', {query, params})
                return of({ type: 'welcome' });
            },
            request: (opts) => {
                // console.log('mockSanityClient.observable.request', opts)
                $log.observable.request.push(opts);
                if (opts.uri.startsWith(requestUriPrefix)) {
                    const path = opts.uri.slice(requestUriPrefix.length);
                    if (requests[path]) {
                        return of(requests[path]);
                    }
                }
                return of(requests[opts.uri] || requests['*'] || null);
            },
            transaction: () => {
                // $log.transaction.push(null)
                // $log('transaction')
                return _createTransaction({ observable: true });
            },
        },
        transaction: () => {
            // $log.transaction.push(null)
            // $log('transaction')
            return _createTransaction({ observable: false });
        },
    };
    //
    let transactionId = 0;
    return mockClient;
    function _createTransaction({ observable }) {
        const id = ++transactionId;
        const $txLog = {
            id,
            commit: [],
            create: [],
            createIfNotExists: [],
            createOrReplace: [],
            delete: [],
            patch: [],
        };
        $log.transaction.push($txLog);
        const tx = {
            commit: (...args) => {
                // $log(`transaction#${id}.commit`, ...args)
                $txLog.commit.push(args);
                return observable ? of({}) : Promise.resolve({});
            },
            create: (...args) => {
                $txLog.create.push(args);
                // $log(`transaction#${id}.create`, ...args)
                return tx;
            },
            createIfNotExists: (...args) => {
                $txLog.createIfNotExists.push(args);
                // $log(`transaction#${id}.createIfNotExists`, ...args)
                return tx;
            },
            createOrReplace: (...args) => {
                $txLog.createOrReplace.push(args);
                // $log(`transaction#${id}.createOrReplace`, ...args)
                return tx;
            },
            delete: (...args) => {
                $txLog.delete.push(args);
                // $log(`transaction#${id}.delete`, ...args)
                return tx;
            },
            patch: (...args) => {
                $txLog.patch.push(args);
                // $log(`transaction#${id}.patch`, ...args)
                return tx;
            },
        };
        return tx;
    }
}
//# sourceMappingURL=mockSanityClient.js.map