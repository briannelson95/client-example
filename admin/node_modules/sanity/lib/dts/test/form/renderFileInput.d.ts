/// <reference types="jest" />
import { Schema } from '@sanity/types';
import React from 'react';
import { FileInputProps } from '../../src/form/inputs/files/FileInput';
import { TestRenderProps } from './types';
import { TestRenderInputContext } from './renderInput';
export declare type TestRenderFileInputCallback = (inputProps: FileInputProps, context: TestRenderInputContext) => React.ReactElement;
export declare function renderFileInput(options: {
    assetSources?: FileInputProps['assetSources'];
    fieldDefinition: Schema.TypeDefinition<'file'>;
    observeAsset?: FileInputProps['observeAsset'];
    props?: TestRenderProps;
    render: TestRenderFileInputCallback;
    resolveUploader?: FileInputProps['resolveUploader'];
}): Promise<{
    rerender: (subsequentRender: TestRenderFileInputCallback) => void;
    focusRef: jest.Mock<any, any>;
    onBlur: jest.Mock<any, any>;
    onChange: jest.Mock<any, any>;
    onFocus: jest.Mock<any, any>;
    onPathBlur: jest.Mock<any, any>;
    onPathFocus: jest.Mock<any, any>;
    onFieldGroupSelect: jest.Mock<any, any>;
    onSetFieldSetCollapsed: jest.Mock<any, any>;
    result: import("@testing-library/react").RenderResult<typeof import("@testing-library/dom/types/queries"), HTMLElement>;
}>;
//# sourceMappingURL=renderFileInput.d.ts.map