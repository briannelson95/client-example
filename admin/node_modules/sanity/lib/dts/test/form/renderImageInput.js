import { EMPTY } from 'rxjs';
import { renderObjectInput } from './renderObjectInput';
export async function renderImageInput(options) {
    const { fieldDefinition, props, render: initialRender } = options;
    const assetSources = []; // @todo
    const imageUrlBuilder = {};
    const observeAsset = () => EMPTY;
    const resolveUploader = () => null;
    function transformProps(inputProps, context) {
        const { schemaType, value, ...restProps } = inputProps;
        const { client } = context;
        return {
            ...restProps,
            assetSources,
            client,
            imageUrlBuilder,
            observeAsset,
            resolveUploader,
            schemaType: schemaType,
            value: value,
        };
    }
    const result = await renderObjectInput({
        fieldDefinition: fieldDefinition,
        props,
        render: (inputProps, context) => initialRender(transformProps(inputProps, context), context),
    });
    function rerender(subsequentRender) {
        result.rerender((inputProps, context) => subsequentRender(transformProps(inputProps, context), context));
    }
    return { ...result, rerender };
}
//# sourceMappingURL=renderImageInput.js.map