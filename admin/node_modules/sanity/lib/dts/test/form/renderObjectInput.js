import { defaultRenderField, defaultRenderInput, defaultRenderItem, defaultRenderPreview, } from '../../src/form/studio/defaults';
import { renderInput } from './renderInput';
export async function renderObjectInput(options) {
    const { fieldDefinition, props, render: initialRender } = options;
    const onCloseField = jest.fn();
    const onCollapseField = jest.fn();
    const onCollapseFieldSet = jest.fn();
    const onExpandField = jest.fn();
    const onExpandFieldSet = jest.fn();
    const onOpenField = jest.fn();
    const onFieldGroupSelect = jest.fn();
    function transformProps(inputProps, context) {
        const { formState } = context;
        const { onPathFocus, path, schemaType, value, ...restProps } = inputProps;
        const fieldMember = formState.members?.find((member) => member.kind === 'field' && member.name === fieldDefinition.name);
        const field = fieldMember?.field;
        return {
            ...restProps,
            changed: false,
            groups: field?.groups || [],
            members: field?.members || [],
            onCloseField,
            onCollapseField,
            onCollapseFieldSet,
            onExpandField,
            onExpandFieldSet,
            onFieldGroupSelect,
            onFocusPath: onPathFocus,
            onOpenField,
            path,
            renderField: defaultRenderField,
            renderInput: defaultRenderInput,
            renderItem: defaultRenderItem,
            renderPreview: defaultRenderPreview,
            schemaType: schemaType,
            value: value,
        };
    }
    const result = await renderInput({
        fieldDefinition,
        props,
        render: (inputProps, context) => initialRender(transformProps(inputProps, context), context),
    });
    function rerender(subsequentRender) {
        result.rerender((inputProps, context) => subsequentRender(transformProps(inputProps, context), context));
    }
    return { ...result, rerender };
}
//# sourceMappingURL=renderObjectInput.js.map