import { defaultRenderField, defaultRenderInput, defaultRenderItem, defaultRenderPreview, } from '../../src/form/studio/defaults';
import { renderInput } from './renderInput';
export async function renderArrayOfObjectsInput(options) {
    const { fieldDefinition, props, render } = options;
    const onAppendItem = jest.fn();
    const onCloseItem = jest.fn();
    const onCollapse = jest.fn();
    const onCollapseItem = jest.fn();
    const onExpand = jest.fn();
    const onExpandItem = jest.fn();
    const onFocusPath = jest.fn();
    const onInsert = jest.fn();
    const onMoveItem = jest.fn();
    const onOpenItem = jest.fn();
    const onPrependItem = jest.fn();
    const onRemoveItem = jest.fn();
    let initialValueId = 0;
    const resolveInitialValue = () => Promise.resolve({ _key: String(initialValueId++) });
    function transformProps(baseProps, context) {
        const { focusPath, path, schemaType, value, ...restProps } = baseProps;
        const { formState } = context;
        const fieldMember = formState.members?.find((member) => member.kind === 'field' && member.name === fieldDefinition.name);
        const field = fieldMember?.field;
        return {
            ...restProps,
            changed: false,
            focusPath,
            members: field?.members || [],
            onAppendItem,
            onCloseItem,
            onCollapse,
            onCollapseItem,
            onExpand,
            onExpandItem,
            onFocusPath,
            onInsert,
            onMoveItem,
            onOpenItem,
            onPrependItem,
            onRemoveItem,
            path,
            renderField: defaultRenderField,
            renderInput: defaultRenderInput,
            renderItem: defaultRenderItem,
            renderPreview: defaultRenderPreview,
            resolveInitialValue,
            schemaType: schemaType,
            value: value,
        };
    }
    const ret = await renderInput({
        fieldDefinition,
        props,
        render: (inputProps, context) => render(transformProps(inputProps, context)),
    });
    function rerender(renderFn) {
        return ret.rerender((inputProps, context) => renderFn(transformProps(inputProps, context)));
    }
    return { ...ret, onAppendItem, rerender };
}
//# sourceMappingURL=renderArrayOfObjectsInput.js.map