import { of } from 'rxjs';
import { renderObjectInput } from './renderObjectInput';
const EMPTY_SEARCH = () => of([]);
export async function renderCrossDatasetReferenceInput(options) {
    const { fieldDefinition, getReferenceInfo, onSearch = EMPTY_SEARCH, props, render: initialRender, } = options;
    function transformProps(baseProps, _context) {
        const { changed, schemaType, value, ...restProps } = baseProps;
        return {
            ...restProps,
            changed,
            getReferenceInfo,
            onSearch,
            schemaType: schemaType,
            value: value,
        };
    }
    const result = await renderObjectInput({
        fieldDefinition: fieldDefinition,
        props,
        render: (baseProps, context) => initialRender(transformProps(baseProps, context), context),
    });
    function rerender(subsequentRender) {
        result.rerender((baseProps, context) => subsequentRender(transformProps(baseProps, context), context));
    }
    return { ...result, rerender };
}
//# sourceMappingURL=renderCrossDatasetReferenceInput.js.map