/// <reference types="react" />
/// <reference types="jest" />
import { Schema } from '@sanity/types';
import { StringInputProps } from '../../src/form';
import { TestRenderInputContext } from './renderInput';
import { TestRenderProps } from './types';
export declare type TestRenderStringInputCallback = (inputProps: StringInputProps, context: TestRenderInputContext) => React.ReactElement;
export declare function renderStringInput(options: {
    fieldDefinition: Schema.TypeDefinition<'date' | 'datetime' | 'string' | 'url'>;
    props?: TestRenderProps;
    render: TestRenderStringInputCallback;
}): Promise<{
    rerender: (subsequentRender: TestRenderStringInputCallback) => void;
    focusRef: jest.Mock<any, any>;
    onBlur: jest.Mock<any, any>;
    onChange: jest.Mock<any, any>;
    onFocus: jest.Mock<any, any>;
    onPathBlur: jest.Mock<any, any>;
    onPathFocus: jest.Mock<any, any>;
    onFieldGroupSelect: jest.Mock<any, any>;
    onSetFieldSetCollapsed: jest.Mock<any, any>;
    result: import("@testing-library/react").RenderResult<typeof import("@testing-library/dom/types/queries"), HTMLElement>;
}>;
//# sourceMappingURL=renderStringInput.d.ts.map