import { Box, Card, Stack, Text } from '@sanity/ui';
import React, { useCallback, useContext } from 'react';
import { ConnectorContext } from '../../../../../components/changeIndicators';
import { DiffContext, DiffTooltip, useDiffAnnotationColor } from '../../../../diff';
import { isHeader } from '../helpers';
import Blockquote from './Blockquote';
import Header from './Header';
import Paragraph from './Paragraph';
const EMPTY_PATH = [];
export default function Block(props) {
    const { diff, block, children } = props;
    const color = useDiffAnnotationColor(diff, EMPTY_PATH);
    const { path: fullPath } = useContext(DiffContext);
    const { onSetFocus } = useContext(ConnectorContext);
    const isRemoved = diff.action === 'removed';
    let returned = children;
    const handleClick = useCallback((event) => {
        event.stopPropagation();
        if (!isRemoved) {
            onSetFocus(fullPath);
        }
    }, [fullPath, isRemoved, onSetFocus]);
    if (block.style === 'blockquote') {
        returned = React.createElement(Blockquote, null, returned);
    }
    else if (block.style && isHeader(block)) {
        returned = React.createElement(Header, { style: block.style }, returned);
    }
    else {
        returned = React.createElement(Paragraph, null, returned);
    }
    let fromStyle;
    // If style was changed, indicate that
    if (diff.origin.action === 'changed' &&
        diff.origin.fields.style &&
        diff.origin.fields.style.action === 'changed' &&
        diff.origin.fields.style.annotation) {
        fromStyle = diff?.origin?.fromValue?.style;
        const style = color ? { background: color.background, color: color.text } : {};
        returned = (React.createElement(Card, { padding: 3, border: true, radius: 2, style: { borderStyle: 'dotted' }, "diff-block-action": diff.action, "data-block-note": `changed_from_style_${fromStyle || 'undefined'}` },
            React.createElement(Stack, { space: 2 },
                React.createElement(DiffTooltip, { annotations: [diff.origin.fields.style?.annotation], diff: diff.origin.fields.style },
                    React.createElement(Text, { size: 0 },
                        "Changed block style from '",
                        fromStyle,
                        "'")),
                React.createElement(Box, { style: style }, returned))));
    }
    return (React.createElement("div", { onClick: handleClick, "diff-block-action": diff.action, "data-block-note": `changed_from_style_${fromStyle || 'undefined'}` }, returned));
}
//# sourceMappingURL=Block.js.map