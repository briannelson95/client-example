import { DocumentIcon } from '@sanity/icons';
import React, { useMemo } from 'react';
import { Box, Card, Flex, Text } from '@sanity/ui';
import styled from 'styled-components';
import { DiffCard, DiffTooltip, FromTo, MetaInfo, ChangeList } from '../../../diff';
import { useRefValue } from '../../../diff/hooks';
import { getSizeDiff } from './helpers';
const SizeDiff = styled.div `
  ${({ theme }) => `
    --size-diff-positive: ${theme.sanity.color.solid.positive.enabled.bg};
    --size-diff-negative: ${theme.sanity.color.solid.critical.enabled.bg};
  `}
  &:not([hidden]) {
    display: inline-block;
  }

  [data-number='positive'] {
    color: var(--size-diff-positive);
  }

  [data-number='negative'] {
    color: var(--size-diff-negative);
  }
`;
export const FileFieldDiff = ({ diff, schemaType }) => {
    const { fromValue, toValue, fields } = diff;
    const fromAsset = fromValue?.asset;
    const toAsset = toValue?.asset;
    const prev = useRefValue(fromAsset?._ref);
    const next = useRefValue(toAsset?._ref);
    const changedFields = Object.entries(fields)
        .filter(([name, field]) => field.isChanged && name !== '_type')
        .map(([name]) => name);
    const didAssetChange = changedFields.includes('asset');
    const nestedFields = schemaType.fields
        .filter((field) => field.name !== 'asset' && changedFields.includes(field.name))
        .map((field) => field.name);
    // Sizes in MB TODO: improve. Apple uses 1000^2
    const prevSize = prev?.size && prev.size / 1000 / 1000;
    const nextSize = next?.size && next.size / 1000 / 1000;
    const pctDiff = getSizeDiff(prevSize, nextSize);
    const roundedPrevSize = prevSize ? prevSize.toFixed(2) : undefined;
    const roundedNextSize = nextSize ? nextSize.toFixed(2) : undefined;
    const cardStyles = useMemo(() => ({ display: 'block', flex: 1 }), []);
    const from = prev && (React.createElement(DiffCard, { as: "del", diff: diff, path: "asset._ref", style: cardStyles },
        React.createElement(MetaInfo, { title: prev.originalFilename || 'Untitled', icon: DocumentIcon },
            React.createElement(Text, { size: 0, style: { color: 'inherit' } }, `${roundedPrevSize}MB`))));
    const to = next && (React.createElement(DiffCard, { as: "ins", diff: diff, path: "asset._ref", style: cardStyles },
        React.createElement(MetaInfo, { title: next.originalFilename || 'Untitled', icon: DocumentIcon },
            React.createElement(Flex, { align: "center" },
                React.createElement(Text, { size: 0, style: { color: 'inherit' } }, `${roundedNextSize}MB`),
                pctDiff !== 0 && (React.createElement(Card, { radius: 2, padding: 1, as: SizeDiff, marginLeft: 2 },
                    React.createElement(Text, { size: 0, "data-number": pctDiff > 0 ? 'positive' : 'negative' },
                        pctDiff > 0 && '+',
                        pctDiff,
                        "%")))))));
    const FileAssetChange = (React.createElement(React.Fragment, null,
        from && !to && (React.createElement(DiffTooltip, { diff: diff, path: "asset._ref", description: "Removed" }, from)),
        from && to && (React.createElement(DiffTooltip, { diff: diff, path: "asset._ref" },
            React.createElement(FromTo, { from: from, layout: "grid", to: to }))),
        !from && to && (React.createElement(DiffTooltip, { diff: diff, path: "asset._ref", description: "Added" }, to))));
    return (React.createElement(React.Fragment, null,
        didAssetChange && FileAssetChange,
        nestedFields.length > 0 && (React.createElement(Box, { marginTop: didAssetChange ? 4 : 3 },
            React.createElement(ChangeList, { diff: diff, schemaType: schemaType, fields: nestedFields })))));
};
//# sourceMappingURL=FileFieldDiff.js.map