import { isKeySegment } from '@sanity/types';
import React, { useCallback, useMemo } from 'react';
import { startCase } from 'lodash';
import { ConnectorContext } from '../../../../../components/changeIndicators';
import { DiffCard, DiffContext } from '../../../../diff';
import { InlineBox } from './styledComponents';
export function Text({ diff, childDiff, children, path, segment, ...restProps }) {
    const diffWithFallback = diff || childDiff;
    const hasChanged = diffWithFallback && diffWithFallback.action !== 'unchanged' && segment.action !== 'unchanged';
    if (hasChanged) {
        return (React.createElement(TextWithDiff, { ...restProps, childDiff: childDiff, diff: diff, segment: segment, path: path }, children));
    }
    return React.createElement(InlineBox, null, children);
}
export function TextWithDiff({ diff, childDiff, children, path, segment, ...restProps }) {
    const { onSetFocus } = React.useContext(ConnectorContext);
    const { path: fullPath } = React.useContext(DiffContext);
    const spanSegment = useMemo(() => path.slice(-2, 1)[0], [path]);
    const isRemoved = diff && diff.action === 'removed';
    const prefix = fullPath.slice(0, fullPath.findIndex((seg) => isKeySegment(seg) && isKeySegment(spanSegment) && seg._key === spanSegment._key));
    const focusPath = prefix.concat(path);
    const handleClick = useCallback((event) => {
        event.stopPropagation();
        if (!isRemoved) {
            event.preventDefault();
            onSetFocus(focusPath);
        }
    }, [focusPath, isRemoved, onSetFocus]);
    const realSeg = diff && diff.segments.find((rSeg) => rSeg.text === segment.text);
    const diffWithFallback = realSeg || diff || childDiff;
    const annotation = (diffWithFallback && diffWithFallback.action !== 'unchanged' && diffWithFallback.annotation) ||
        null;
    const diffCard = annotation && segment.action !== 'unchanged' ? (React.createElement(DiffCard, { annotation: annotation, as: segment.action === 'removed' ? 'del' : 'ins', tooltip: { description: `${startCase(segment.action)} text` } }, children)) : null;
    return (React.createElement(InlineBox, { ...restProps, onClick: handleClick, "data-changed": "" },
        React.createElement("span", null,
            React.createElement(React.Fragment, null, diffCard || children))));
}
//# sourceMappingURL=Text.js.map