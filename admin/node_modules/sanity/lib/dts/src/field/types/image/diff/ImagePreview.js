import React, { useMemo } from 'react';
import { getImageDimensions, isDefaultCrop, isDefaultHotspot } from '@sanity/asset-utils';
import imageUrlBuilder from '@sanity/image-url';
import { ImageIcon } from '@sanity/icons';
import { Box, Card, Flex, Text } from '@sanity/ui';
import styled from 'styled-components';
import { hues } from '@sanity/color';
import { useClient } from '../../../../hooks';
import { MetaInfo } from '../../../diff';
import { useDocumentValues } from '../../../../datastores';
import { getDeviceDpr, simpleHash } from './helpers';
import { HotspotCropSVG } from './HotspotCropSVG';
const ASSET_FIELDS = ['originalFilename'];
// To trigger error state, change `src` attribute to random string ("foo")
// To trigger slow loading, use a throttling proxy (charles) or browser devtools
// To trigger deleted state, set `id` to valid, non-existant image asset ID,
// eg: 'image-1217bc35db5030739b7be571c79d3c401551911d-300x200-png'
export const NoImagePreview = () => (React.createElement(Card, { flex: 1, tone: "transparent", padding: 4, radius: 2, height: "stretch" },
    React.createElement(Flex, { align: "center", justify: "center", height: "fill" },
        React.createElement(Text, { size: 1, muted: true }, "(no image)"))));
const ImageWrapper = styled.div `
  height: 100%;
  max-height: 190px;
  position: relative;

  /* Ideally the checkerboard component currently in the form builder should be made available and used here */
  background-color: ${hues.gray[100].hex};
  background-image: linear-gradient(45deg, ${hues.gray[50].hex} 25%, transparent 25%),
    linear-gradient(-45deg, ${hues.gray[50].hex} 25%, transparent 25%),
    linear-gradient(45deg, transparent 75%, ${hues.gray[50].hex} 75%),
    linear-gradient(-45deg, transparent 75%, ${hues.gray[50].hex} 75%);
  background-size: 16px 16px;
  background-position: 0 0, 0 8px, 8px -8px, -8px 0;

  &::after {
    content: '';
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    box-shadow: inset 0 0 0 1px var(--card-border-color);
    pointer-events: none;
  }

  &[data-changed] {
    opacity: 0.45;
  }
`;
const Image = styled.img `
  display: block;
  flex: 1;
  min-height: 0;
  object-fit: contain;
  width: 100%;
  height: 100%;

  &[data-action='removed'] {
    opacity: 0.45;
  }
`;
const HotspotDiff = styled.div `
  svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
`;
export function ImagePreview(props) {
    const { id, action, diff, hotspot, crop, is } = props;
    const client = useClient();
    const [imageError, setImageError] = React.useState();
    const { value: asset } = useDocumentValues(id, ASSET_FIELDS);
    const dimensions = getImageDimensions(id);
    const imageBuilder = useMemo(() => imageUrlBuilder(client), [client]);
    // undefined = still loading, null = its gone
    const assetIsDeleted = asset === null;
    const title = (asset && asset.originalFilename) || 'Untitled';
    const imageSource = imageBuilder
        .image(id)
        .height(190) // Should match container max-height
        .dpr(getDeviceDpr())
        .fit('max');
    const assetChanged = diff.fromValue?.asset?._ref !== diff.toValue?.asset?._ref;
    const metaAction = action === 'changed' ? undefined : action;
    return (React.createElement(Flex, { direction: "column", height: "fill", flex: 1 },
        React.createElement(Box, { flex: 1, padding: 2, paddingBottom: 0 },
            React.createElement(Flex, { as: ImageWrapper, direction: "column", "data-changed": is === 'from' && assetChanged ? '' : undefined, "data-error": imageError ? '' : undefined },
                !assetIsDeleted && !imageError && (React.createElement(Image, { src: imageSource.toString() || '', alt: title, "data-action": metaAction, onError: setImageError, width: dimensions.width, height: dimensions.height })),
                (assetIsDeleted || imageError) && (React.createElement(Box, { paddingY: 5 },
                    React.createElement(Text, { size: 1, muted: true, align: "center" }, assetIsDeleted ? 'Image is deleted' : 'Error loading image'))),
                React.createElement(HotspotDiff, null,
                    React.createElement(HotspotCropSVG, { crop: crop && !isDefaultCrop(crop) ? crop : undefined, diff: diff, hash: simpleHash(`${imageSource.toString() || ''}-${is}`), hotspot: hotspot && !isDefaultHotspot(hotspot) ? hotspot : undefined, width: dimensions.width, height: dimensions.height })))),
        React.createElement(MetaInfo, { title: title, icon: ImageIcon, markRemoved: assetChanged && is === 'from' }, metaAction ? (React.createElement("div", null, metaAction)) : (React.createElement("div", null,
            dimensions.width,
            " \u00D7 ",
            dimensions.height)))));
}
//# sourceMappingURL=ImagePreview.js.map