import React from 'react';
import { DiffTooltip, useDiffAnnotationColor } from '../../../diff';
import { hexToRgba } from './helpers';
export function HotspotCropSVG(props) {
    const { crop, diff, hash, hotspot, width = 100, height = 100, ...restProps } = props;
    const cropColor = useDiffAnnotationColor(diff, 'crop');
    const hotspotColor = useDiffAnnotationColor(diff, 'hotspot');
    return (React.createElement("svg", { ...restProps, fill: "none", width: width, height: height, viewBox: `0 0 ${width} ${height}` },
        React.createElement("defs", null, crop && hotspot && (React.createElement("mask", { id: `mask-hotspot-${hash}` },
            React.createElement("rect", { x: 0, y: 0, width: width, height: height, fill: "#fff" }),
            React.createElement(HotspotSVG, { hotspot: hotspot, fill: "#000", offset: 1, width: width, height: height, stroke: "#000", strokeWidth: 3 })))),
        crop && (React.createElement(DiffTooltip, { diff: diff, path: "crop", description: "Crop changed" },
            React.createElement("g", null,
                React.createElement(CropSVG, { crop: crop, fill: hexToRgba(cropColor.border, 0.25), mask: hotspot ? `url(#mask-hotspot-${hash})` : undefined, stroke: cropColor.border, strokeWidth: 1, width: width, height: height })))),
        hotspot && (React.createElement(DiffTooltip, { diff: diff, path: "hotspot", description: "Hotspot changed" },
            React.createElement("g", null,
                React.createElement(HotspotSVG, { hotspot: hotspot, fill: hexToRgba(hotspotColor.border, 0.25), stroke: hotspotColor.border, strokeWidth: 1, width: width, height: height }))))));
}
function CropSVG({ crop, width, height, ...restProps }) {
    const rectProps = {
        x: crop.left * width,
        y: crop.top * height,
        width: (1 - crop.right - crop.left) * width,
        height: (1 - crop.bottom - crop.top) * height,
    };
    return React.createElement("rect", { ...restProps, ...rectProps, style: { vectorEffect: 'non-scaling-stroke' } });
}
function HotspotSVG({ hotspot, offset = 0, width, height, ...restProps }) {
    const ellipseProps = {
        cx: hotspot.x * width,
        cy: hotspot.y * height,
        rx: (hotspot.width / 2) * width + offset,
        ry: (hotspot.height / 2) * height + offset,
    };
    return React.createElement("ellipse", { ...restProps, ...ellipseProps, style: { vectorEffect: 'non-scaling-stroke' } });
}
//# sourceMappingURL=HotspotCropSVG.js.map