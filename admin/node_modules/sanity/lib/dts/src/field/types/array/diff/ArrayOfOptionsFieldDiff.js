import { isKeyedObject } from '@sanity/types';
import React from 'react';
import { Box, Flex } from '@sanity/ui';
import { SanityPreview } from '../../../../preview';
import { useUserColorManager } from '../../../../user-color';
import { DiffTooltip, FromToArrow, getAnnotationColor } from '../../../diff';
import { Checkbox } from '../../boolean/preview';
import { isEqual } from '../util/arrayUtils';
export const ArrayOfOptionsFieldDiff = ({ diff, schemaType }) => {
    const options = schemaType.options?.list;
    const colorManager = useUserColorManager();
    if (!Array.isArray(options)) {
        // Shouldn't happen, because the resolver should only resolve here if it does
        return null;
    }
    return (React.createElement("div", null, diff.items
        .map((item) => normalizeItems(item, diff, schemaType))
        .filter((item) => item !== null)
        .sort(sortItems)
        .map((item, index) => {
        const { annotation, isPresent, value, memberType, title } = item;
        const color = getAnnotationColor(colorManager, annotation);
        const action = isPresent ? 'Added' : 'Removed';
        return (React.createElement(Flex, { align: "center", key: getItemKey(diff, index) },
            React.createElement(DiffTooltip, { annotations: annotation ? [annotation] : [], description: action },
                React.createElement(Flex, { align: "center" },
                    React.createElement(Checkbox, { checked: !isPresent, color: color }),
                    React.createElement(Box, { margin: 2 },
                        React.createElement(FromToArrow, null)),
                    React.createElement(Checkbox, { checked: isPresent, color: color }))),
            React.createElement(Flex, { align: "center" },
                React.createElement(ItemPreview, { value: title || value, memberType: memberType }))));
    })));
};
function normalizeItems(item, parentDiff, schemaType) {
    if (item.diff.action === 'unchanged') {
        return null;
    }
    const { fromValue, toValue } = parentDiff;
    const value = getValue(item.diff);
    const wasPresent = isInArray(value, fromValue);
    const isPresent = isInArray(value, toValue);
    if (wasPresent === isPresent) {
        return null;
    }
    return {
        title: getItemTitle(value, schemaType),
        memberType: resolveMemberType(getValue(item.diff), schemaType),
        itemIndex: getOptionIndex(value, schemaType),
        annotation: item.annotation,
        isPresent,
        value,
    };
}
function sortItems(itemA, itemB) {
    return itemA.itemIndex - itemB.itemIndex;
}
function ItemPreview({ value, memberType }) {
    return (React.createElement(Box, { marginX: 2, marginY: 1 }, typeof value === 'string' || typeof value === 'number' ? (value) : (React.createElement(SanityPreview, { schemaType: memberType, value: value, layout: "default" }))));
}
function isInArray(value, parent) {
    const array = parent || [];
    return typeof value === 'object' && value !== null
        ? array.some((item) => isEqual(item, value))
        : array.includes(value);
}
function getItemKey(diff, index) {
    const value = diff.toValue || diff.fromValue;
    return isKeyedObject(value) ? value._key : index;
}
function getValue(diff) {
    return typeof diff.toValue === 'undefined' ? diff.fromValue : diff.toValue;
}
function resolveMemberType(item, schemaType) {
    const itemTypeName = resolveTypeName(item);
    return schemaType.of.find((memberType) => memberType.name === itemTypeName);
}
function resolveTypeName(value) {
    const jsType = resolveJSType(value);
    if (jsType !== 'object') {
        return jsType;
    }
    const obj = value;
    return ('_type' in obj && obj._type) || jsType;
}
function resolveJSType(val) {
    if (val === null) {
        return 'null';
    }
    if (Array.isArray(val)) {
        return 'array';
    }
    return typeof val;
}
function isNamedOption(item) {
    return typeof item === 'object' && item !== null && 'title' in item;
}
function getOptionIndex(item, schemaType) {
    const list = schemaType.options?.list || [];
    return list.findIndex((opt) => isEqual(isNamedOption(opt) ? opt.value : opt, item));
}
function getItemTitle(item, schemaType) {
    const list = (schemaType.options?.list || []);
    const index = getOptionIndex(item, schemaType);
    return index === -1 ? undefined : list[index].title || undefined;
}
//# sourceMappingURL=ArrayOfOptionsFieldDiff.js.map