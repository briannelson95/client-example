import { Path, Reference, ArraySchemaType, BooleanSchemaType, NumberSchemaType, ObjectSchemaType, StringSchemaType, ObjectFieldType, ConditionalProperty, SchemaType } from '@sanity/types';
import { ComponentType } from 'react';
import { ArrayDiff as AgnosticArrayDiff, BooleanDiff as AgnosticBooleanDiff, NullDiff as AgnosticNullDiff, NumberDiff as AgnosticNumberDiff, ObjectDiff as AgnosticObjectDiff, StringDiff as AgnosticStringDiff, TypeChangeDiff as AgnosticTypeChangeDiff, ItemDiff as AgnosticItemDiff, StringSegmentChanged as AgnosticStringSegmentChanged, StringSegmentUnchanged as AgnosticStringSegmentUnchanged } from '@sanity/diff';
import { FormInsertPatch } from '../form';
import { FieldValueError } from './validation';
/**
 * History timeline / chunking
 */
export declare type ChunkType = 'initial' | 'create' | 'editDraft' | 'delete' | 'publish' | 'unpublish' | 'discardDraft' | 'editLive';
export declare type Chunk = {
    index: number;
    id: string;
    type: ChunkType;
    start: number;
    end: number;
    startTimestamp: string;
    endTimestamp: string;
    authors: Set<string>;
    draftState: 'present' | 'missing' | 'unknown';
    publishedState: 'present' | 'missing' | 'unknown';
};
/**
 * Annotation connected to a change
 */
export declare type AnnotationDetails = {
    chunk: Chunk;
    timestamp: string;
    author: string;
};
export declare type Annotation = AnnotationDetails | null;
/**
 * Diff types with annotation type set automatically
 */
export declare type ArrayDiff<V = unknown> = AgnosticArrayDiff<Annotation, V>;
export declare type BooleanDiff = AgnosticBooleanDiff<Annotation>;
export declare type NullDiff = AgnosticNullDiff<Annotation>;
export declare type NumberDiff = AgnosticNumberDiff<Annotation>;
export declare type ObjectDiff<T extends object = Record<string, any>> = AgnosticObjectDiff<Annotation, T>;
export declare type StringDiff = AgnosticStringDiff<Annotation>;
export declare type ReferenceDiff = ObjectDiff<Reference>;
export declare type TypeChangeDiff = AgnosticTypeChangeDiff<Annotation>;
export declare type Diff<A = unknown, O extends object = Record<string, any>> = ArrayDiff<A> | BooleanDiff | NullDiff | NumberDiff | ObjectDiff<O> | StringDiff | TypeChangeDiff;
export declare type StringDiffSegment = StringSegmentChanged | StringSegmentUnchanged;
export declare type StringSegmentChanged = AgnosticStringSegmentChanged<Annotation>;
export declare type StringSegmentUnchanged = AgnosticStringSegmentUnchanged;
export declare type ItemDiff = AgnosticItemDiff<Annotation>;
/**
 * Diff extensions for presentational concerns
 */
export interface ArrayItemMetadata {
    fromType?: SchemaType;
    toType?: SchemaType;
}
/**
 * Diff components
 */
export declare type DiffComponent<T extends Diff = Diff> = ComponentType<DiffProps<T>>;
export declare type DiffComponentOptions<T extends Diff = Diff> = {
    component: DiffComponent<T>;
    showHeader?: boolean;
};
export declare type DiffProps<T extends Diff = Diff> = {
    diff: T;
    schemaType: T extends ObjectDiff ? ObjectSchemaType : T extends ArrayDiff ? ArraySchemaType : T extends BooleanDiff ? BooleanSchemaType : T extends StringDiff ? StringSchemaType : T extends NumberDiff ? NumberSchemaType : SchemaType;
};
/**
 * Resolvers
 */
export declare type DiffComponentResolver = (options: {
    schemaType: SchemaType;
    parentSchemaType?: ArraySchemaType | ObjectSchemaType;
}) => React.ComponentType<any> | DiffComponentOptions<any> | undefined;
/**
 * Schema
 */
/**
 * "Changes" (presentation-oriented grouping of diffs)
 */
export interface GroupChangeNode {
    type: 'group';
    changes: ChangeNode[];
    key: string;
    path: Path;
    titlePath: ChangeTitlePath;
    schemaType?: SchemaType;
    readOnly?: ConditionalProperty;
    hidden?: ConditionalProperty;
    fieldsetName?: string;
}
export interface FieldChangeNode {
    type: 'field';
    diff: Diff;
    itemDiff?: ItemDiff;
    parentDiff?: ObjectDiff | ArrayDiff;
    key: string;
    path: Path;
    error?: FieldValueError;
    titlePath: ChangeTitlePath;
    schemaType: ObjectFieldType;
    showHeader: boolean;
    showIndex: boolean;
    diffComponent?: DiffComponent;
    parentSchema?: ArraySchemaType | ObjectSchemaType;
    readOnly?: ConditionalProperty;
    hidden?: ConditionalProperty;
}
export declare type ChangeNode = GroupChangeNode | FieldChangeNode;
export interface FromToIndex {
    hasMoved: boolean;
    fromIndex?: number;
    toIndex?: number;
    annotation?: Annotation;
}
export declare type ChangeTitlePath = (string | FromToIndex)[];
export interface PatchOperations {
    set?: {
        [key: string]: unknown;
    };
    setIfMissing?: {
        [key: string]: unknown;
    };
    merge?: {
        [key: string]: unknown;
    };
    diffMatchPatch?: {
        [key: string]: unknown;
    };
    unset?: string[];
    inc?: {
        [key: string]: number;
    };
    dec?: {
        [key: string]: number;
    };
    insert?: FormInsertPatch;
    ifRevisionID?: string;
}
export interface FieldOperationsAPI {
    patch: {
        execute: (patches: PatchOperations[]) => void;
    };
}
/**
 * From sanity-diff-patch
 */
export interface SetDiffPatch {
    op: 'set';
    path: Path;
    value: unknown;
}
export interface UnsetDiffPatch {
    op: 'unset';
    path: Path;
}
export interface InsertDiffPatch {
    op: 'insert';
    after: Path;
    items: unknown[];
}
export declare type DiffPatch = SetDiffPatch | UnsetDiffPatch | InsertDiffPatch;
//# sourceMappingURL=types.d.ts.map