import React from 'react';
import { Tooltip, Text, Stack, Flex, Inline, Label } from '@sanity/ui';
import { LegacyLayerProvider } from '../../../components/transitional';
import { UserAvatar } from '../../../components/UserAvatar';
import { useTimeAgo } from '../../../hooks';
import { getAnnotationAtPath, useAnnotationColor } from '../annotations';
import { useUser } from '../../../datastores';
export function DiffTooltip(props) {
    if ('diff' in props) {
        const { diff, path = [], ...restProps } = props;
        const annotation = getAnnotationAtPath(diff, path);
        return React.createElement(DiffTooltipWithAnnotation, { ...restProps, annotations: annotation ? [annotation] : [] });
    }
    return React.createElement(DiffTooltipWithAnnotation, { ...props });
}
function DiffTooltipWithAnnotation(props) {
    const { annotations, children, description = 'Changed', ...restProps } = props;
    if (!annotations) {
        return children;
    }
    const content = (React.createElement(Stack, { padding: 3, space: 2 },
        React.createElement(Label, { size: 1, style: { textTransform: 'uppercase' }, muted: true }, description),
        React.createElement(Stack, { space: 2 }, annotations.map((annotation, idx) => (React.createElement(AnnotationItem, { annotation: annotation, key: idx }))))));
    return (React.createElement(LegacyLayerProvider, { zOffset: "paneFooter" },
        React.createElement(Tooltip, { content: content, 
            // data-placement={restProps.placement}
            portal: true, allowedAutoPlacements: ['top', 'bottom'], ...restProps }, children)));
}
function AnnotationItem({ annotation }) {
    const { author, timestamp } = annotation;
    const [user] = useUser(author);
    const color = useAnnotationColor(annotation);
    const timeAgo = useTimeAgo(timestamp, { minimal: true });
    return (React.createElement(Inline, { space: 2 },
        React.createElement(Flex, { align: "center", paddingRight: 3, style: {
                backgroundColor: color.background,
                color: color.text,
                borderRadius: 'calc(23px / 2)',
            } },
            React.createElement(UserAvatar, { user: author }),
            React.createElement(Inline, { paddingLeft: 2 },
                React.createElement(Text, { muted: true, size: 1, style: { color: color.text } }, user ? user.displayName : 'Loadingâ€¦'))),
        React.createElement(Text, { as: "time", muted: true, size: 1, dateTime: timestamp }, timeAgo)));
}
//# sourceMappingURL=DiffTooltip.js.map