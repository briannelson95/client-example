import * as React from 'react';
import { Box, rem, Text } from '@sanity/ui';
import styled from 'styled-components';
import { getAnnotationAtPath } from '../annotations';
import { DiffCard } from './DiffCard';
const RoundedCard = styled.div `
  border-radius: ${({ theme }) => rem(theme.sanity.radius[2])};
  padding: ${({ theme }) => rem(theme.sanity.space[1])};
`;
const AnnotationText = styled(Text) `
  &:not([hidden]) {
    color: inherit;
  }
`;
export function ChangeTitleSegment(props) {
    const { change, segment } = props;
    if (typeof segment === 'string') {
        return (React.createElement(Box, { style: segment.length > 30 ? { maxWidth: 100 } : {} },
            React.createElement(Text, { title: segment, size: 1, weight: "semibold", textOverflow: "ellipsis" }, segment)));
    }
    const { hasMoved, fromIndex, toIndex, annotation } = segment;
    const created = typeof fromIndex === 'undefined';
    const deleted = typeof toIndex === 'undefined';
    if (created) {
        // Item was created
        return React.createElement(CreatedTitleSegment, { annotation: annotation, change: change, toIndex: toIndex });
    }
    if (deleted) {
        // Item was deleted
        return React.createElement(DeletedTitleSegment, { annotation: annotation, fromIndex: fromIndex });
    }
    if (hasMoved && typeof toIndex !== 'undefined' && typeof fromIndex !== 'undefined') {
        // Item was moved
        return React.createElement(MovedTitleSegment, { annotation: annotation, fromIndex: fromIndex, toIndex: toIndex });
    }
    // Changed/unchanged
    const readableIndex = (toIndex || 0) + 1;
    return (React.createElement(Box, { padding: 1 },
        React.createElement(Text, { size: 1, weight: "semibold" },
            "#",
            readableIndex)));
}
function CreatedTitleSegment(props) {
    const { annotation: annotationProp, change, toIndex = 0 } = props;
    const readableIndex = toIndex + 1;
    const description = `Added in position ${readableIndex}`;
    const content = React.createElement(React.Fragment, null,
        "#",
        readableIndex);
    const diffAnnotation = change?.diff ? getAnnotationAtPath(change.diff, []) : undefined;
    const annotation = diffAnnotation || annotationProp;
    if (annotation) {
        return (React.createElement(DiffCard, { annotation: annotation, tooltip: { description }, as: RoundedCard },
            React.createElement(AnnotationText, { size: 1, weight: "semibold", forwardedAs: "ins", style: { textDecoration: 'none' } }, content)));
    }
    return (React.createElement(Text, { size: 1, weight: "semibold" }, content));
}
function DeletedTitleSegment(props) {
    const { annotation, fromIndex = 0 } = props;
    const readableIndex = fromIndex + 1;
    const description = `Removed from position ${readableIndex}`;
    return (React.createElement(DiffCard, { annotation: annotation || null, as: RoundedCard, tooltip: { description } },
        React.createElement(AnnotationText, { size: 1, weight: "semibold", forwardedAs: "del" },
            "#",
            readableIndex)));
}
function MovedTitleSegment(props) {
    const { annotation, fromIndex, toIndex } = props;
    const indexDiff = toIndex - fromIndex;
    const indexSymbol = indexDiff < 0 ? '↑' : '↓';
    const positions = Math.abs(indexDiff);
    const description = `Moved ${positions} position${positions === 1 ? '' : 's'} ${indexDiff < 0 ? 'up' : 'down'}`;
    return (React.createElement(React.Fragment, null,
        React.createElement(Box, { padding: 1 },
            React.createElement(AnnotationText, { size: 1, weight: "semibold" },
                "#",
                toIndex + 1)),
        React.createElement(DiffCard, { annotation: annotation, as: RoundedCard, tooltip: { description } },
            React.createElement(AnnotationText, { size: 1, weight: "semibold" },
                indexSymbol,
                Math.abs(indexDiff)))));
}
//# sourceMappingURL=ChangeTitleSegment.js.map