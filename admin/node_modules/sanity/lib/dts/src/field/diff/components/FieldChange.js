import React, { useCallback, useMemo, useState } from 'react';
import { Stack, Box, Button, Text, Grid, useClickOutside } from '@sanity/ui';
import { useConditionalReadOnly } from '../../../conditional-property/conditionalReadOnly';
import { useDocumentOperation } from '../../../hooks';
import { undoChange } from '../changes/undoChange';
import { DiffContext } from '../contexts/DiffContext';
import { useDocumentChange } from '../hooks';
import { useDocumentPairPermissions } from '../../../datastores';
import { ChangeBreadcrumb } from './ChangeBreadcrumb';
import { DiffErrorBoundary } from './DiffErrorBoundary';
import { DiffInspectWrapper } from './DiffInspectWrapper';
import { FallbackDiff } from './FallbackDiff';
import { RevertChangesButton } from './RevertChangesButton';
import { ValueError } from './ValueError';
import { FieldChangeContainer, DiffBorder, PopoverWrapper } from './FieldChange.styled';
export function FieldChange(props) {
    const { change, hidden, readOnly } = props;
    const conditionalReadOnly = useConditionalReadOnly() ?? readOnly;
    const DiffComponent = change.diffComponent || FallbackDiff;
    const { documentId, schemaType, rootDiff, isComparingCurrent, FieldWrapper = React.Fragment, } = useDocumentChange();
    const ops = useDocumentOperation(documentId, schemaType.name);
    const [confirmRevertOpen, setConfirmRevertOpen] = useState(false);
    const [revertHovered, setRevertHovered] = useState(false);
    const [revertButtonElement, setRevertButtonElement] = useState(null);
    const [permissions, isPermissionsLoading] = useDocumentPairPermissions({
        id: documentId,
        type: schemaType.name,
        permission: 'update',
    });
    const handleRevertChanges = useCallback(() => {
        undoChange(change, rootDiff, ops);
    }, [change, rootDiff, ops]);
    const handleRevertChangesConfirm = useCallback(() => {
        setConfirmRevertOpen(true);
    }, []);
    const closeRevertChangesConfirmDialog = React.useCallback(() => {
        setConfirmRevertOpen(false);
    }, []);
    const handleRevertButtonMouseEnter = useCallback(() => {
        setRevertHovered(true);
    }, []);
    const handleRevertButtonMouseLeave = useCallback(() => {
        setRevertHovered(false);
    }, []);
    const handleClickOutside = useCallback(() => setConfirmRevertOpen(false), []);
    useClickOutside(handleClickOutside, [revertButtonElement]);
    const content = useMemo(() => hidden ? null : (React.createElement(Stack, { space: 1, as: FieldChangeContainer },
        change.showHeader && React.createElement(ChangeBreadcrumb, { change: change, titlePath: change.titlePath }),
        React.createElement(FieldWrapper, { path: change.path, hasHover: revertHovered },
            React.createElement(DiffInspectWrapper, { change: change, as: DiffBorder, "data-revert-field-hover": revertHovered ? '' : undefined, "data-error": change.error ? '' : undefined, "data-revert-all-hover": true },
                change.error ? (React.createElement(ValueError, { error: change.error })) : (React.createElement(DiffErrorBoundary, null,
                    React.createElement(DiffContext.Provider, { value: { path: change.path } },
                        React.createElement(DiffComponent, { diff: change.diff, schemaType: change.schemaType })))),
                isComparingCurrent && !isPermissionsLoading && permissions?.granted && (React.createElement(PopoverWrapper, { content: React.createElement(Box, { padding: 3, sizing: "border" },
                        "Are you sure you want to revert the changes?",
                        React.createElement(Grid, { columns: 2, gap: 2, marginTop: 2 },
                            React.createElement(Button, { mode: "ghost", onClick: closeRevertChangesConfirmDialog },
                                React.createElement(Text, { align: "center" }, "Cancel")),
                            React.createElement(Button, { tone: "critical", onClick: handleRevertChanges },
                                React.createElement(Text, { align: "center" }, "Revert change")))), open: confirmRevertOpen, portal: true, placement: "left", ref: setRevertButtonElement },
                    React.createElement(Box, { flex: 1 },
                        React.createElement(RevertChangesButton, { onClick: handleRevertChangesConfirm, onMouseEnter: handleRevertButtonMouseEnter, onMouseLeave: handleRevertButtonMouseLeave, selected: confirmRevertOpen, disabled: conditionalReadOnly, "data-testid": `single-change-revert-button-${change?.key}` })))))))), [
        change,
        closeRevertChangesConfirmDialog,
        conditionalReadOnly,
        confirmRevertOpen,
        DiffComponent,
        FieldWrapper,
        hidden,
        handleRevertButtonMouseEnter,
        handleRevertButtonMouseLeave,
        handleRevertChanges,
        handleRevertChangesConfirm,
        isComparingCurrent,
        isPermissionsLoading,
        permissions,
        revertHovered,
    ]);
    return content;
}
//# sourceMappingURL=FieldChange.js.map