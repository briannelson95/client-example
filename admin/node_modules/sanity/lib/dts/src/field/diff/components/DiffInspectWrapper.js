import { Box, Card, Code, Label, Stack } from '@sanity/ui';
import React, { useCallback, useEffect, useRef, useState } from 'react';
import styled from 'styled-components';
import { pathToString } from '../../paths';
import { FromToArrow } from './FromToArrow';
const CodeWrapper = styled.pre `
  overflow-x: auto;
  position: relative;
`;
const Meta = styled.div `
  position: absolute;
  top: 0;
  right: 0;
`;
export function DiffInspectWrapper(props) {
    const { children, as, change, ...restProps } = props;
    const isHovering = useRef(false);
    const [isInspecting, setIsInspecting] = useState(false);
    const toggleInspect = useCallback(() => setIsInspecting((state) => !state), [setIsInspecting]);
    const handleMouseEnter = useCallback(() => (isHovering.current = true), []);
    const handleMouseLeave = useCallback(() => (isHovering.current = false), [isHovering]);
    useEffect(() => {
        function onKeyDown(evt) {
            const { metaKey, key } = evt;
            if (metaKey && key === 'i' && isHovering.current) {
                toggleInspect();
            }
        }
        window.addEventListener('keydown', onKeyDown, false);
        return () => window.removeEventListener('keydown', onKeyDown, false);
    }, [toggleInspect]);
    return (React.createElement(Box, { as: as, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, ...restProps }, isInspecting ? React.createElement(DiffInspector, { change: change }) : children));
}
const MetaLabel = ({ title }) => (React.createElement(Box, { padding: 3, display: "inline-block", as: Meta },
    React.createElement(Label, { size: 1, muted: true }, title)));
function DiffInspector({ change }) {
    return (React.createElement(Stack, { space: 3 },
        React.createElement(Card, { padding: 3, tone: "transparent", as: CodeWrapper, radius: 1 },
            React.createElement(MetaLabel, { title: "meta" }),
            React.createElement(Code, { language: "json", size: 1 }, printMeta({
                path: pathToString(change.path),
                fromIndex: change.itemDiff?.fromIndex,
                toIndex: change.itemDiff?.toIndex,
                hasMoved: change.itemDiff?.hasMoved,
                action: change.diff.action,
                isChanged: change.diff.isChanged,
            }))),
        React.createElement(Card, { as: CodeWrapper, tone: "critical", padding: 3, radius: 1 },
            React.createElement(MetaLabel, { title: "from" }),
            React.createElement(Code, { language: "json", size: 1 }, jsonify(change.diff.fromValue))),
        React.createElement(Card, null,
            React.createElement(FromToArrow, { direction: "down", align: "center" })),
        React.createElement(Card, { as: CodeWrapper, tone: "positive", padding: 3, radius: 1 },
            React.createElement(MetaLabel, { title: "to" }),
            React.createElement(Code, { language: "json", size: 1 }, jsonify(change.diff.toValue)))));
}
function jsonify(value) {
    if (typeof value === 'undefined') {
        return 'undefined';
    }
    return JSON.stringify(value, null, 2);
}
function printMeta(keys) {
    const lines = [];
    Object.entries(keys).forEach(([key, value]) => {
        if (typeof value !== 'undefined' && value !== null) {
            lines.push(`${key}: ${value}`);
        }
    });
    return lines.join('\n');
}
//# sourceMappingURL=DiffInspectWrapper.js.map