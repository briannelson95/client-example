import React from 'react';
import { Text } from '@sanity/ui';
import { unstable_useConditionalProperty as useConditionalProperty } from '../../../conditional-property';
import { useDocumentChange } from '../hooks';
import { FieldChange } from './FieldChange';
import { GroupChange } from './GroupChange';
export function ChangeResolver(props) {
    const { change, hidden, readOnly } = props;
    const { value } = useDocumentChange();
    const isHidden = useConditionalProperty({
        // @todo: is parent missing here?
        document: value,
        checkProperty: hidden || change.schemaType?.hidden,
        checkPropertyKey: 'hidden',
        value: change.type === 'field' ? change.diff.toValue : undefined,
    });
    const isReadOnly = useConditionalProperty({
        // @todo: is parent missing here?
        document: value,
        checkProperty: readOnly || change.schemaType?.readOnly,
        checkPropertyKey: 'readOnly',
        value: change.type === 'field' ? change.diff.toValue : undefined,
    });
    if (isHidden)
        return null;
    if (change.type === 'field') {
        return React.createElement(FieldChange, { change: change, readOnly: isReadOnly });
    }
    if (change.type === 'group') {
        return (React.createElement(GroupChange, { change: change, "data-testid": `group-change-${change.fieldsetName}`, readOnly: isReadOnly }));
    }
    return (React.createElement(Text, null,
        "Unknown change type: ",
        React.createElement("code", null, change.type || 'undefined')));
}
//# sourceMappingURL=ChangeResolver.js.map