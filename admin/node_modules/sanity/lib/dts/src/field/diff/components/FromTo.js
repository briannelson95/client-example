import React, { forwardRef, useMemo } from 'react';
import { Flex, Grid, rem, useTheme } from '@sanity/ui';
import { FromToArrow } from './FromToArrow';
const INLINE_COLUMN_STYLES = { flexShrink: 0 };
const BLOCK_COLUMN_STYLES = { alignItems: 'stretch' };
const FLEX_ALIGN = {
    top: 'flex-start',
    center: 'center',
    bottom: 'flex-end',
    default: 'flex-start',
};
export const FromTo = forwardRef(function FromTo(props, ref) {
    const { align = 'top', layout = 'inline', from, to, style, ...restProps } = props;
    const theme = useTheme();
    const Layout = layout === 'inline' ? Flex : Grid;
    const layoutStyles = useMemo(() => ({
        ...style,
        ...(layout === 'inline'
            ? { maxWidth: '100%', display: 'inline-flex' }
            : { gridTemplateColumns: `minmax(0, 1fr) ${rem(theme.sanity.space[5])} minmax(0, 1fr)` }),
    }), [layout, style, theme]);
    const columnStyles = layout === 'inline' ? INLINE_COLUMN_STYLES : BLOCK_COLUMN_STYLES;
    return (React.createElement(Layout, { ...restProps, ref: ref, style: layoutStyles, "data-from-to-layout": true },
        from && (React.createElement(React.Fragment, null,
            React.createElement(Flex, { align: FLEX_ALIGN[align], style: columnStyles }, from),
            React.createElement(Flex, { align: "center", justify: "center", padding: 2 },
                React.createElement(FromToArrow, null)))),
        React.createElement(Flex, { align: FLEX_ALIGN[align], style: columnStyles }, to)));
});
//# sourceMappingURL=FromTo.js.map