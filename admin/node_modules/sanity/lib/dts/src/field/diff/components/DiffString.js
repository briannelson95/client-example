import { Text, Card, rem } from '@sanity/ui';
import * as React from 'react';
import styled from 'styled-components';
import { DiffCard } from './DiffCard';
const RoundedCard = styled.span `
  border-radius: ${({ theme }) => rem(theme.sanity.radius[1])};
`;
const ChangeSegment = styled(Text) `
  &:not([hidden]) {
    display: inline;
    line-height: calc(1.25em + 2px);
  }

  &:hover {
    background-color: none !important;
    background-image: linear-gradient(
      to bottom,
      var(--card-bg-color) 0,
      var(--card-bg-color) 33.333%,
      currentColor 33.333%,
      currentColor 100%
    );
    background-size: 1px 3px;
    background-repeat: repeat-x;
    background-position-y: bottom;
    padding-bottom: 3px;
    box-shadow: 0 0 0 1px var(--card-bg-color);
    z-index: 1;
  }
`;
export function DiffStringSegment(props) {
    const { segment } = props;
    const { text } = segment;
    if (segment.action === 'added') {
        return (React.createElement(DiffCard, { annotation: segment.annotation, disableHoverEffect: true, tooltip: { description: 'Added' }, as: RoundedCard },
            React.createElement(ChangeSegment, { as: "ins", style: { textDecoration: 'none' } }, text)));
    }
    if (segment.action === 'removed') {
        return (React.createElement(DiffCard, { annotation: segment.annotation, as: RoundedCard, disableHoverEffect: true, tooltip: { description: 'Removed' } },
            React.createElement(ChangeSegment, { as: "del" }, text)));
    }
    return (React.createElement(Card, { as: "span", radius: 2, style: { display: 'inline' } }, text));
}
export function DiffString(props) {
    const { diff } = props;
    return (React.createElement(React.Fragment, null, (diff.segments || []).map((segment, segmentIndex) => (React.createElement(DiffStringSegment
    // eslint-disable-next-line react/no-array-index-key
    , { 
        // eslint-disable-next-line react/no-array-index-key
        key: segmentIndex, segment: segment })))));
}
//# sourceMappingURL=DiffString.js.map