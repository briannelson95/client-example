import React, { useCallback, useContext, useMemo, useState } from 'react';
import { Box, Stack, Button, Grid, Text, useClickOutside } from '@sanity/ui';
import { useDocumentOperation } from '../../../hooks';
import { undoChange } from '../changes/undoChange';
import { isFieldChange } from '../helpers';
import { isPTSchemaType } from '../../types/portableText/diff';
import { useHover } from '../../utils/useHover';
import { pathsAreEqual } from '../../paths';
import { DiffContext } from '../contexts/DiffContext';
import { useDocumentChange } from '../hooks';
import { useDocumentPairPermissions } from '../../../datastores';
import { ChangeBreadcrumb } from './ChangeBreadcrumb';
import { ChangeResolver } from './ChangeResolver';
import { RevertChangesButton } from './RevertChangesButton';
import { ChangeListWrapper, GroupChangeContainer, PopoverWrapper } from './GroupChange.styled';
export function GroupChange(props) {
    const { change: group, readOnly, hidden, 
    // 'data-revert-all-changes-hover': dataRevertAllChangesHover,
    ...restProps } = props;
    const { titlePath, changes, path: groupPath } = group;
    const { path: diffPath } = useContext(DiffContext);
    const { documentId, schemaType, FieldWrapper, rootDiff, isComparingCurrent } = useDocumentChange();
    const isPortableText = changes.every((change) => isFieldChange(change) && isPTSchemaType(change.schemaType));
    const isNestedInDiff = pathsAreEqual(diffPath, groupPath);
    const [revertButtonRef, isRevertButtonHovered] = useHover();
    const docOperations = useDocumentOperation(documentId, schemaType.name);
    const [confirmRevertOpen, setConfirmRevertOpen] = useState(false);
    const [revertPopoverElement, setRevertPopoverElement] = useState(null);
    const [permissions, isPermissionsLoading] = useDocumentPairPermissions({
        id: documentId,
        type: schemaType.name,
        permission: 'update',
    });
    const handleRevertChanges = useCallback(() => undoChange(group, rootDiff, docOperations), [group, rootDiff, docOperations]);
    const handleRevertChangesConfirm = useCallback(() => {
        setConfirmRevertOpen(true);
    }, []);
    const closeRevertChangesConfirmDialog = useCallback(() => {
        setConfirmRevertOpen(false);
    }, []);
    useClickOutside(() => setConfirmRevertOpen(false), [revertPopoverElement]);
    const content = useMemo(() => hidden ? null : (React.createElement(Stack, { space: 1, as: GroupChangeContainer, "data-revert-group-hover": isRevertButtonHovered ? '' : undefined, "data-portable-text": isPortableText ? '' : undefined },
        React.createElement(Stack, { as: ChangeListWrapper, space: 5 }, changes.map((change) => (React.createElement(ChangeResolver, { key: change.key, change: change, readOnly: readOnly, hidden: hidden })))),
        isComparingCurrent && !isPermissionsLoading && permissions?.granted && (React.createElement(PopoverWrapper, { content: React.createElement(Box, null,
                "Are you sure you want to revert the changes?",
                React.createElement(Grid, { columns: 2, gap: 2, marginTop: 2 },
                    React.createElement(Button, { mode: "ghost", onClick: closeRevertChangesConfirmDialog },
                        React.createElement(Text, { align: "center" }, "Cancel")),
                    React.createElement(Button, { tone: "critical", onClick: handleRevertChanges },
                        React.createElement(Text, { align: "center" }, "Revert change")))), portal: true, padding: 4, placement: 'left', open: confirmRevertOpen, ref: setRevertPopoverElement },
            React.createElement(Box, null,
                React.createElement(RevertChangesButton, { onClick: handleRevertChangesConfirm, ref: revertButtonRef, selected: confirmRevertOpen, disabled: readOnly, "data-testid": `group-change-revert-button-${group.fieldsetName}` })))))), [
        changes,
        closeRevertChangesConfirmDialog,
        confirmRevertOpen,
        readOnly,
        group.fieldsetName,
        handleRevertChanges,
        handleRevertChangesConfirm,
        hidden,
        isComparingCurrent,
        isRevertButtonHovered,
        isPermissionsLoading,
        isPortableText,
        permissions,
        revertButtonRef,
    ]);
    return hidden ? null : (React.createElement(Stack, { space: 1, ...restProps },
        React.createElement(ChangeBreadcrumb, { titlePath: titlePath }),
        isNestedInDiff || !FieldWrapper ? (content) : (React.createElement(FieldWrapper, { hasHover: isRevertButtonHovered, path: group.path }, content))));
}
//# sourceMappingURL=GroupChange.js.map