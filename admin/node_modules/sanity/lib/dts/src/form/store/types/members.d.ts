import { FieldsetState } from './fieldsetState';
import { BaseFormNode, ObjectFormNode, PrimitiveFormNode } from './nodes';
import { ArrayItemError, FieldError } from './memberErrors';
export declare type ObjectMember = FieldMember | FieldSetMember | FieldError;
export declare type ArrayOfObjectsMember = ArrayOfObjectsItemMember | ArrayItemError;
export declare type ArrayOfPrimitivesMember = ArrayOfPrimitivesItemMember | ArrayItemError;
export interface ArrayOfObjectsItemMember<Node extends ObjectFormNode = ObjectFormNode> {
    kind: 'item';
    key: string;
    index: number;
    collapsed: undefined | boolean;
    collapsible: true;
    open: boolean;
    item: Node;
}
export interface ArrayOfPrimitivesItemMember<Node extends PrimitiveFormNode = PrimitiveFormNode> {
    kind: 'item';
    key: string;
    index: number;
    open: boolean;
    item: Node;
}
export interface FieldMember<Node extends BaseFormNode = BaseFormNode> {
    kind: 'field';
    key: string;
    name: string;
    index: number;
    collapsed: boolean | undefined;
    collapsible: boolean | undefined;
    open: boolean;
    field: Node;
}
export interface FieldSetMember {
    kind: 'fieldSet';
    key: string;
    fieldSet: FieldsetState;
}
//# sourceMappingURL=members.d.ts.map