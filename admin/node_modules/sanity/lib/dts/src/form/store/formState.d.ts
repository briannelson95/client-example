import { CurrentUser, ObjectSchemaType, Path, ValidationMarker } from '@sanity/types';
import { FormFieldPresence } from '../../presence';
import { StateTree } from './types';
import { ObjectFormNode } from './types/nodes';
interface RawState<SchemaType, T> {
    schemaType: SchemaType;
    value?: T;
    comparisonValue?: T | null;
    changed?: boolean;
    document: FIXME_SanityDocument;
    currentUser: Omit<CurrentUser, 'role'> | null;
    parent?: unknown;
    hidden?: boolean;
    readOnly?: boolean;
    path: Path;
    openPath: Path;
    focusPath: Path;
    presence: FormFieldPresence[];
    validation: ValidationMarker[];
    fieldGroupState?: StateTree<string>;
    collapsedPaths?: StateTree<boolean>;
    collapsedFieldSets?: StateTree<boolean>;
    level: number;
}
export declare type FIXME_SanityDocument = Record<string, unknown>;
export declare function prepareFormState<T extends FIXME_SanityDocument>(props: RawState<ObjectSchemaType, T>): ObjectFormNode | null;
export {};
//# sourceMappingURL=formState.d.ts.map