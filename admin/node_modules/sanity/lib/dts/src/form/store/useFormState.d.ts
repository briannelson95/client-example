import { ObjectSchemaType, Path, ValidationMarker } from '@sanity/types';
import { FormFieldPresence } from '../../presence';
import { StateTree, ObjectFormNode } from './types';
import { FIXME_SanityDocument } from './formState';
export declare type FormState<T extends {
    [key in string]: unknown;
} = {
    [key in string]: unknown;
}, S extends ObjectSchemaType = ObjectSchemaType> = ObjectFormNode<T, S>;
export declare function useFormState<T extends {
    [key in string]: unknown;
} = {
    [key in string]: unknown;
}, S extends ObjectSchemaType = ObjectSchemaType>(schemaType: ObjectSchemaType, { comparisonValue, value, fieldGroupState, collapsedFieldSets, collapsedPaths, focusPath, openPath, presence, validation, }: {
    fieldGroupState?: StateTree<string> | undefined;
    collapsedFieldSets?: StateTree<boolean> | undefined;
    collapsedPaths?: StateTree<boolean> | undefined;
    value: Partial<FIXME_SanityDocument>;
    comparisonValue: Partial<FIXME_SanityDocument> | null;
    openPath: Path;
    focusPath: Path;
    presence: FormFieldPresence[];
    validation: ValidationMarker[];
}): FormState<T, S> | null;
//# sourceMappingURL=useFormState.d.ts.map