interface CollapsibleOptions {
    collapsible: boolean;
    collapsed: boolean;
}
/**
 * Takes an option object that can optionally have a 'collapsed' property
 * (`{collapsed?: boolean, collapsible?: boolean}`)
 * and returns a resolved collapsed state based on configuration and whether it's below a certain nesting level threshold
 - collapsible: boolean - whether the field can be collapsed
 - collapsed: boolean - whether the field is initially collapsed
 * NOTE: If a field is configured with ´collapsed: true´, ignore any ´collapsible´ configuration and make it collapsible no matter what, otherwise it will be left forever collapsed.
 *
 * If the nesting level is deeper than or equal to AUTO_COLLAPSE_DEPTH, the default for the field/fieldset becomes "collapsed"
 *
 * @param options - Whether the field or fieldset should be collapsed
 * @param level - Nesting level
 */
export declare function getCollapsedWithDefaults(options: (import("@sanity/types").CollapseOptions & {
    columns?: number | undefined;
}) | undefined, level: number): CollapsibleOptions;
export {};
//# sourceMappingURL=getCollapsibleOptions.d.ts.map