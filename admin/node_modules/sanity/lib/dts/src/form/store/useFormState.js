/* eslint-disable camelcase */
import { useLayoutEffect, useMemo, useRef } from 'react';
import { pathFor } from '@sanity/util/paths';
import { useCurrentUser } from '../../datastores';
import { prepareFormState } from './formState';
import { immutableReconcile } from './utils/immutableReconcile';
export function useFormState(schemaType, { comparisonValue, value, fieldGroupState, collapsedFieldSets, collapsedPaths, focusPath, openPath, presence, validation, }) {
    // note: feel free to move these state pieces out of this hook
    const currentUser = useCurrentUser();
    const prev = useRef(null);
    useLayoutEffect(() => {
        prev.current = null;
    }, [schemaType]);
    return useMemo(() => {
        // console.time('derive form state')
        const next = prepareFormState({
            schemaType,
            document: value,
            fieldGroupState,
            collapsedFieldSets,
            collapsedPaths,
            value,
            comparisonValue,
            focusPath,
            openPath,
            path: pathFor([]),
            level: 0,
            currentUser,
            presence,
            validation,
        }); // TODO: remove type cast
        const reconciled = immutableReconcile(prev.current, next);
        prev.current = reconciled;
        // console.timeEnd('derive form state')
        return reconciled;
    }, [
        schemaType,
        value,
        fieldGroupState,
        collapsedFieldSets,
        collapsedPaths,
        comparisonValue,
        focusPath,
        openPath,
        currentUser,
        presence,
        validation,
    ]);
}
//# sourceMappingURL=useFormState.js.map