import { Card, Container } from '@sanity/ui';
import React, { useCallback, useMemo, useState } from 'react';
import { useUnique } from '../../util';
import { useDocumentOperation, useEditState, useSchema, useValidationStatus } from '../../hooks';
import { createPatchChannel } from '../patch/PatchChannel';
export default function FormBuilderStory() {
    const documentId = '8ab96211-501c-45e3-9eb0-4ed1da1b50df';
    const documentType = 'author';
    // @todo: there should be a hook for this
    const initialValue = useMemo(() => ({ loaded: true, value: { _id: documentId, _type: documentType } }), []);
    const schema = useSchema();
    const schemaType = schema.get(documentType);
    const editState = useEditState(documentId, documentType);
    const { patch } = useDocumentOperation(documentId, documentType);
    const value = editState.draft || editState.published;
    const { validation: validationRaw } = useValidationStatus(documentId, documentType);
    const validation = useUnique(validationRaw);
    const [focusPath, setFocusPath] = useState([]);
    const presence = useMemo(() => [], []);
    // Create a patch channel
    const patchChannel = useMemo(() => createPatchChannel(), []);
    const filterField = useCallback(() => true, []);
    const handleBlur = useCallback(() => {
        console.warn('handleBlur');
        // setFocusPath([])
    }, []);
    const handleChange = useCallback((patches) => {
        patch.execute(patches, initialValue.value);
    }, [patch, initialValue.value]);
    const handleFocus = useCallback((nextFocusPath) => {
        if (Array.isArray(nextFocusPath)) {
            setFocusPath(nextFocusPath);
        }
    }, []);
    if (!schemaType) {
        return (React.createElement("div", null,
            "Schema type not found: ",
            React.createElement(React.Fragment, null, documentType)));
    }
    return (React.createElement(Card, { paddingX: 4, paddingY: [4, 5, 6, 7], style: { minHeight: '100%', position: 'relative' } },
        React.createElement(Container, { width: 1 }, "TODO")));
}
//# sourceMappingURL=FormBuilderStory.js.map