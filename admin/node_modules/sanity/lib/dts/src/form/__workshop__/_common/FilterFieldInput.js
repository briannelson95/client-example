import React, { useCallback, useMemo } from 'react';
import { Button, Card, Code, Grid, Label, Stack, TextArea } from '@sanity/ui';
import styled from 'styled-components';
const ExampleCode = styled(Code) `
  cursor: pointer;
`;
const EXAMPLE_FILTER_FUNCTION = `(type, field) => field.name === 'title'`;
export const FilterFieldInput = React.forwardRef(function FilterFieldInput(props, ref) {
    const { value, onChange, onFilter } = props;
    const handleChange = useCallback((event) => {
        onChange(event.target.value);
    }, [onChange]);
    const handleFilterExample = useCallback(() => {
        onChange(EXAMPLE_FILTER_FUNCTION);
    }, [onChange]);
    const handleFilter = useCallback(() => {
        onFilter(value);
    }, [onFilter, value]);
    const handleReset = useCallback(() => {
        onFilter(``);
    }, [onFilter]);
    const isDisabled = useMemo(() => {
        return value?.length === 0;
    }, [value]);
    return (React.createElement(Card, { padding: 4, tone: "default", border: true },
        React.createElement(Stack, { space: 4 },
            React.createElement(Label, { size: 0 }, "Function value"),
            React.createElement(TextArea, { rows: 4, ref: ref, onChange: handleChange, value: value || '' }),
            React.createElement(ExampleCode, { title: "Use example code", size: 1, onClick: handleFilterExample }, `Example: ${EXAMPLE_FILTER_FUNCTION}`),
            React.createElement(Grid, { columns: 2, gap: 3 },
                React.createElement(Button, { text: "Filter", onClick: handleFilter, disabled: isDisabled }),
                React.createElement(Button, { text: "Reset", mode: "ghost", onClick: handleReset, disabled: isDisabled })))));
});
//# sourceMappingURL=FilterFieldInput.js.map