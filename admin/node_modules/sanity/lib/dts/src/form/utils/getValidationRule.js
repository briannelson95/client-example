const normalizeRules = (validation, type) => {
    if (typeof validation === 'function') {
        throw new Error(`Schema type "${type?.name || '<not-found>'}"'s \`validation\` was not run though \`inferFromSchema\``);
    }
    if (!validation)
        return [];
    if (Array.isArray(validation))
        return validation;
    return [validation];
};
/**
 * Finds the first matching validation rule spec from a Rule class instance.
 *
 * @internal
 * Note: This accesses private fields of the rule.
 */
export function getValidationRule(type, ruleName) {
    for (const rule of normalizeRules(type?.validation, type)) {
        for (const ruleSpec of rule._rules) {
            if (ruleSpec.flag === ruleName) {
                return ruleSpec;
            }
        }
    }
    return null;
}
//# sourceMappingURL=getValidationRule.js.map