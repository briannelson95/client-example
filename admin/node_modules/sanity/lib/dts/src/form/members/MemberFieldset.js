import React, { memo, useCallback } from 'react';
import { FormFieldSet } from '../components/formField';
import { useFormCallbacks } from '../studio/contexts/FormCallbacks';
import { MemberField } from './MemberField';
import { MemberFieldError } from './MemberFieldError';
export const MemberFieldSet = memo(function MemberFieldSet(props) {
    const { member, renderField, renderInput, renderItem, renderPreview } = props;
    const { onSetFieldSetCollapsed } = useFormCallbacks();
    const handleCollapse = useCallback(() => {
        onSetFieldSetCollapsed(member.fieldSet.path, true);
    }, [member.fieldSet.path, onSetFieldSetCollapsed]);
    const handleExpand = useCallback(() => {
        onSetFieldSetCollapsed(member.fieldSet.path, false);
    }, [member.fieldSet.path, onSetFieldSetCollapsed]);
    return (React.createElement(FormFieldSet, { title: member.fieldSet.title, description: member.fieldSet.description, level: member.fieldSet.level, collapsible: member.fieldSet.collapsible, collapsed: member.fieldSet.collapsed, onCollapse: handleCollapse, onExpand: handleExpand, columns: member?.fieldSet?.columns, "data-testid": `fieldset-${member.fieldSet.name}` }, member.fieldSet.members.map((fieldsetMember) => {
        if (fieldsetMember.kind === 'error') {
            return React.createElement(MemberFieldError, { key: member.key, member: fieldsetMember });
        }
        return (React.createElement(MemberField, { member: fieldsetMember, renderField: renderField, renderInput: renderInput, renderItem: renderItem, renderPreview: renderPreview, key: fieldsetMember.key }));
    })));
});
//# sourceMappingURL=MemberFieldset.js.map