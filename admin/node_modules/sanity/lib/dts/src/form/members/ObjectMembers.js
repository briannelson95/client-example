import React from 'react';
import { MemberField } from './MemberField';
import { MemberFieldError } from './MemberFieldError';
import { MemberFieldSet } from './MemberFieldset';
export function ObjectMembers(props) {
    const { members, renderInput, renderField, renderItem, renderPreview } = props;
    return (React.createElement(React.Fragment, null, members.map((member) => {
        if (member.kind === 'field') {
            return (React.createElement(MemberField, { key: member.key, member: member, renderInput: renderInput, renderField: renderField, renderItem: renderItem, renderPreview: renderPreview }));
        }
        if (member.kind === 'error') {
            return React.createElement(MemberFieldError, { key: member.key, member: member });
        }
        if (member.kind === 'fieldSet') {
            return (React.createElement(MemberFieldSet, { key: member.key, member: member, renderInput: renderInput, renderField: renderField, renderItem: renderItem, renderPreview: renderPreview }));
        }
        //@ts-expect-error The branching above should cover all possible cases
        console.warn(new Error(`Unhandled member kind ${member.kind}`));
        return null;
    })));
}
//# sourceMappingURL=ObjectMembers.js.map