import React, { useCallback } from 'react';
import { Box } from '@sanity/ui';
import { useFormCallbacks } from '../studio/contexts/FormCallbacks';
import { PatchEvent } from '../patch';
import { InvalidValueInput } from '../inputs/InvalidValueInput';
import { MissingKeysAlert } from '../inputs/arrays/errors/MissingKeysAlert';
import { DuplicateKeysAlert } from '../inputs/arrays/errors/DuplicateKeysAlert';
export function MemberFieldError(props) {
    const { member } = props;
    const { onChange } = useFormCallbacks();
    const handleChange = useCallback((event) => {
        onChange(PatchEvent.from(event).prefixAll(member.fieldName));
    }, [onChange, member.fieldName]);
    if (member.error.type === 'INCOMPATIBLE_TYPE') {
        return (React.createElement(InvalidValueInput, { value: member.error.value, onChange: handleChange, actualType: member.error.resolvedValueType, validTypes: [member.error.expectedSchemaType.name] }));
    }
    if (member.error.type === 'MISSING_KEYS') {
        return React.createElement(MissingKeysAlert, { error: member.error, onChange: handleChange });
    }
    if (member.error.type === 'DUPLICATE_KEYS') {
        return React.createElement(DuplicateKeysAlert, { error: member.error, onChange: handleChange });
    }
    return React.createElement(Box, null,
        "Unexpected error: ",
        props.member.error.type);
}
//# sourceMappingURL=MemberFieldError.js.map