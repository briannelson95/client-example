import React from 'react';
import { MemberItem } from './MemberItem';
import { MemberItemError } from './MemberItemError';
export function ArrayOfObjectsMembers(props) {
    const { members, renderInput, renderField, renderItem, renderPreview } = props;
    return (React.createElement(React.Fragment, null, members.map((member) => {
        if (member.kind === 'item') {
            return (React.createElement(MemberItem, { key: member.key, member: member, renderInput: renderInput, renderField: renderField, renderItem: renderItem, renderPreview: renderPreview }));
        }
        if (member.kind === 'error') {
            return React.createElement(MemberItemError, { key: member.key, member: member });
        }
        //@ts-expect-error The branching above should cover all possible cases
        console.warn(new Error(`Unhandled member kind ${member.kind}`));
        return null;
    })));
}
//# sourceMappingURL=ArrayOfObjectsMembers.js.map