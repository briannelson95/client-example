import { Box, Flex, rem, Text } from '@sanity/ui';
import React, { memo } from 'react';
import { ToggleArrowRightIcon } from '@sanity/icons';
import styled, { css } from 'styled-components';
import { focusRingStyle } from './styles';
const Root = styled.legend `
  /* See: https://thatemil.com/blog/2015/01/03/reset-your-fieldset/ */
  padding: 0;
  display: table;
`;
const ToggleButton = styled(Flex).attrs({ forwardedAs: 'button' })((props) => {
    const { theme } = props;
    const { focusRing, radius } = theme.sanity;
    const { base } = theme.sanity.color;
    return css `
    appearance: none;
    border: 0;
    background: none;
    color: inherit;
    -webkit-font-smoothing: inherit;
    font: inherit;
    outline: none;
    border-radius: ${rem(radius[1])};

    &:not([hidden]) {
      display: flex;
    }

    &:focus {
      box-shadow: ${focusRingStyle({ base, focusRing })};
    }

    &:focus:not(:focus-visible) {
      box-shadow: none;
    }
  `;
});
const ToggleIconBox = styled(Box) `
  width: 9px;
  height: 9px;
  margin-right: 3px;

  & svg {
    transition: transform 100ms;
  }
`;
export const FormFieldSetLegend = memo(function FormFieldSetLegend(props) {
    const { collapsed, collapsible, onClick, title } = props;
    const text = (React.createElement(Text, { weight: "semibold", size: 1 }, title || React.createElement("span", { style: { color: 'var(--card-muted-fg-color)' } }, "Untitled")));
    if (!collapsible) {
        return React.createElement(Root, null, text);
    }
    return (React.createElement(Root, null,
        React.createElement(ToggleButton, { type: "button", onClick: onClick },
            React.createElement(ToggleIconBox, null,
                React.createElement(Text, { muted: true, size: 1 },
                    React.createElement(ToggleArrowRightIcon, { style: {
                            transform: `rotate(${collapsed ? '0' : '90deg'}) translate3d(0, 0, 0)`,
                        } }))),
            text)));
});
//# sourceMappingURL=FormFieldSetLegend.js.map