/* eslint-disable camelcase */
import { hues } from '@sanity/color';
import { ErrorOutlineIcon, InfoOutlineIcon, WarningOutlineIcon } from '@sanity/icons';
import { Box, Flex, Stack, Text, Tooltip } from '@sanity/ui';
import React, { useMemo } from 'react';
const EMPTY_ARRAY = [];
const VALIDATION_COLORS = {
    error: hues.red[500].hex,
    warning: hues.yellow[500].hex,
    info: hues.blue[500].hex,
};
const VALIDATION_ICONS = {
    error: React.createElement(ErrorOutlineIcon, { "data-testid": "input-validation-icon-error" }),
    warning: React.createElement(WarningOutlineIcon, { "data-testid": "input-validation-icon-warning" }),
    info: React.createElement(InfoOutlineIcon, { "data-testid": "input-validation-icon-info" }),
};
export function FormFieldValidationStatus(props) {
    const { validation = EMPTY_ARRAY, __unstable_showSummary: showSummary, fontSize, placement = 'top', portal, } = props;
    const errors = validation.filter((v) => v.level === 'error');
    const warnings = validation.filter((v) => v.level === 'warning');
    const info = validation.filter((v) => v.level === 'info');
    const hasErrors = errors.length > 0;
    const hasWarnings = warnings.length > 0;
    const hasInfo = info.length > 0;
    const statusIcon = useMemo(() => {
        if (hasErrors)
            return VALIDATION_ICONS.error;
        if (hasWarnings)
            return VALIDATION_ICONS.warning;
        if (hasInfo)
            return VALIDATION_ICONS.info;
        return undefined;
    }, [hasErrors, hasInfo, hasWarnings]);
    const statusColor = useMemo(() => {
        if (hasErrors)
            return VALIDATION_COLORS.error;
        if (hasWarnings)
            return VALIDATION_COLORS.warning;
        if (hasInfo)
            return VALIDATION_COLORS.info;
        return undefined;
    }, [hasErrors, hasInfo, hasWarnings]);
    return (React.createElement(Tooltip, { content: React.createElement(Stack, { padding: 3, space: 3 },
            showSummary && React.createElement(FormFieldValidationSummary, { validation: validation }),
            !showSummary && (React.createElement(React.Fragment, null, validation.map((item, itemIndex) => (
            // eslint-disable-next-line react/no-array-index-key
            React.createElement(FormFieldValidationStatusItem, { validation: item, key: itemIndex })))))), portal: portal, placement: placement, fallbackPlacements: ['bottom', 'right', 'left'] },
        React.createElement("div", null,
            React.createElement(Text, { muted: true, size: fontSize, weight: "semibold", style: { color: statusColor } }, statusIcon))));
}
function FormFieldValidationStatusItem(props) {
    const { validation } = props;
    const statusIcon = useMemo(() => {
        if (validation.level === 'error')
            return VALIDATION_ICONS.error;
        if (validation.level === 'warning')
            return VALIDATION_ICONS.warning;
        if (validation.level === 'info')
            return VALIDATION_ICONS.info;
        return undefined;
    }, [validation]);
    const statusColor = useMemo(() => {
        if (validation.level === 'error')
            return VALIDATION_COLORS.error;
        if (validation.level === 'warning')
            return VALIDATION_COLORS.warning;
        if (validation.level === 'info')
            return VALIDATION_COLORS.info;
        return undefined;
    }, [validation]);
    return (React.createElement(Flex, null,
        React.createElement(Box, { marginRight: 2 },
            React.createElement(Text, { size: 1, style: { color: statusColor } }, statusIcon)),
        React.createElement(Box, { flex: 1 },
            React.createElement(Text, { muted: true, size: 1 }, validation.message))));
}
function FormFieldValidationSummary({ validation }) {
    const errorMarkers = validation.filter((item) => item.level === 'error');
    const warningMarkers = validation.filter((item) => item.level === 'warning');
    const errorLen = errorMarkers.length;
    const warningLen = warningMarkers.length;
    const errorsStr = `error${errorLen === 1 ? '' : 's'}`;
    const warningsStr = `warning${warningLen === 1 ? '' : 's'}`;
    const errorText = errorLen && `${errorLen} ${errorsStr}`;
    const warningText = warningLen && `${warningLen} ${warningsStr}`;
    const hasErrors = errorLen > 0;
    const hasWarnings = warningLen > 0;
    const hasBoth = hasErrors && hasWarnings;
    return (React.createElement(Text, { muted: true, size: 1 },
        errorText || '',
        hasBoth && React.createElement(React.Fragment, null, " and "),
        warningText || ''));
}
//# sourceMappingURL=FormFieldValidationStatus.js.map