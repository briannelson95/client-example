/* eslint-disable camelcase */
import { Box, Flex, Grid, rem, Stack, Text, useForwardedRef } from '@sanity/ui';
import React, { forwardRef, useCallback, useMemo } from 'react';
import styled, { css } from 'styled-components';
import { FieldPresence } from '../../../presence';
import { FormFieldValidationStatus } from './FormFieldValidationStatus';
import { FormFieldSetLegend } from './FormFieldSetLegend';
import { focusRingStyle } from './styles';
function getChildren(children) {
    return typeof children === 'function' ? children() : children;
}
const Root = styled(Box).attrs({ forwardedAs: 'fieldset' }) `
  border: none;

  /* See: https://thatemil.com/blog/2015/01/03/reset-your-fieldset/ */
  body:not(:-moz-handler-blocked) & {
    display: table-cell;
  }
`;
const Content = styled(Box)((props) => {
    const { $borderLeft, theme } = props;
    const { focusRing, radius } = theme.sanity;
    const { base } = theme.sanity.color;
    return css `
    outline: none;
    border-left: ${$borderLeft ? '1px solid var(--card-border-color)' : undefined};
    border-radius: ${rem(radius[1])};

    &:focus {
      box-shadow: ${focusRingStyle({ base, focusRing: { ...focusRing, offset: 2 } })};
    }

    &:focus:not(:focus-visible) {
      box-shadow: none;
    }
  `;
});
const EMPTY_ARRAY = [];
export const FormFieldSet = forwardRef(function FormFieldSet(props, ref) {
    const { validation = EMPTY_ARRAY, __unstable_presence: presence = EMPTY_ARRAY, children, collapsible, columns, description, level = 0, onFocus, onCollapse, onExpand, collapsed, tabIndex, title, ...restProps } = props;
    const hasValidationMarkers = validation.length > 0;
    const forwardedRef = useForwardedRef(ref);
    const handleFocus = useCallback((event) => {
        const element = forwardedRef.current;
        if (element === event.target) {
            if (onFocus)
                onFocus(event);
        }
    }, [forwardedRef, onFocus]);
    const handleToggle = useCallback(() => (collapsed ? onExpand?.() : onCollapse?.()), [collapsed, onCollapse, onExpand]);
    const content = useMemo(() => {
        if (collapsed) {
            return null;
        }
        return (React.createElement(Grid, { columns: columns, gapX: 4, gapY: 5 }, getChildren(children)));
    }, [children, collapsed, columns]);
    return (React.createElement(Root, { "data-level": level, ...restProps },
        title && (React.createElement(Flex, { align: "flex-end" },
            React.createElement(Box, { flex: 1, paddingY: 2 },
                React.createElement(Stack, { space: 2 },
                    React.createElement(Flex, null,
                        React.createElement(FormFieldSetLegend, { collapsed: Boolean(collapsed), collapsible: collapsible, onClick: collapsible ? handleToggle : undefined, title: title }),
                        hasValidationMarkers && (React.createElement(Box, { marginLeft: 2 },
                            React.createElement(FormFieldValidationStatus, { fontSize: 1, validation: validation })))),
                    description && (React.createElement(Text, { muted: true, size: 1 }, description)))),
            presence.length > 0 && (React.createElement(Box, null,
                React.createElement(FieldPresence, { maxAvatars: 4, presence: presence }))))),
        React.createElement(Content, { "$borderLeft": level > 0, hidden: collapsed, marginTop: 1, paddingLeft: level === 0 ? 0 : 3, onFocus: typeof tabIndex === 'number' && tabIndex > -1 ? handleFocus : undefined, ref: forwardedRef, tabIndex: tabIndex }, !collapsed && content)));
});
//# sourceMappingURL=FormFieldSet.js.map