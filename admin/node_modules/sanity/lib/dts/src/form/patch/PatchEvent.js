import { flatten } from 'lodash';
import { prefixPath } from './patch';
/**
 * @internal
 */
export class PatchEvent {
    constructor(patches) {
        this.patches = patches;
    }
    static from(input) {
        if (input instanceof PatchEvent) {
            return input;
        }
        return new PatchEvent(Array.isArray(input) ? flatten(input) : [input]);
    }
    prepend(...patches) {
        return PatchEvent.from([...flatten(patches), ...this.patches]);
    }
    append(...patches) {
        return PatchEvent.from([...this.patches, ...flatten(patches)]);
    }
    prefixAll(segment) {
        return PatchEvent.from(this.patches.map((patch) => prefixPath(patch, segment)));
    }
}
//# sourceMappingURL=PatchEvent.js.map