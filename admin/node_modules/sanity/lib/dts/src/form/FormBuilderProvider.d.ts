import { ObjectSchemaType, Path, ValidationMarker } from '@sanity/types';
import React from 'react';
import { Source } from '../config';
import { FormFieldPresence } from '../presence';
import { FormBuilderFilterFieldFn, FormFieldGroup, RenderFieldCallback, RenderInputCallback, RenderItemCallback, RenderPreviewCallback } from './types';
import { ObjectMember, StateTree } from './store';
import { PatchChannel, PatchEvent } from './patch';
export interface FormBuilderProviderProps {
    /**
     * @internal
     */
    __internal_patchChannel?: PatchChannel;
    autoFocus?: boolean;
    changesOpen?: boolean;
    children?: React.ReactNode;
    collapsedFieldSets: StateTree<boolean> | undefined;
    collapsedPaths: StateTree<boolean> | undefined;
    file: Source['form']['file'];
    filterField?: FormBuilderFilterFieldFn;
    focusPath: Path;
    focused?: boolean;
    groups: FormFieldGroup[];
    id: string;
    image: Source['form']['image'];
    members: ObjectMember[];
    onChange: (event: PatchEvent) => void;
    onFieldGroupSelect: (path: Path, groupName: string) => void;
    onPathBlur: (path: Path) => void;
    onPathFocus: (path: Path) => void;
    onPathOpen: (path: Path) => void;
    onSetFieldSetCollapsed: (path: Path, collapsed: boolean) => void;
    onSetPathCollapsed: (path: Path, collapsed: boolean) => void;
    presence: FormFieldPresence[];
    readOnly?: boolean;
    renderField: RenderFieldCallback;
    renderInput: RenderInputCallback;
    renderItem: RenderItemCallback;
    renderPreview: RenderPreviewCallback;
    schemaType: ObjectSchemaType;
    unstable?: Source['form']['unstable'];
    validation: ValidationMarker[];
    value: {
        [field in string]: unknown;
    } | undefined;
}
export declare function FormBuilderProvider(props: FormBuilderProviderProps): JSX.Element;
//# sourceMappingURL=FormBuilderProvider.d.ts.map