/* eslint-disable react/no-unused-prop-types */
import { isReferenceSchemaType } from '@sanity/types';
import { AddIcon } from '@sanity/icons';
import React, { useMemo } from 'react';
import { Box, Button, Grid, Menu, MenuButton, MenuItem, Tooltip, Text } from '@sanity/ui';
import { useId } from '@reach/auto-id';
export function DefaultArrayInputFunctions(props) {
    const { type, readOnly, children, onCreateValue, onAppendItem } = props;
    const menuButtonId = useId();
    const insertItem = React.useCallback((itemType) => {
        const item = onCreateValue(itemType);
        onAppendItem(item);
    }, [onCreateValue, onAppendItem]);
    const handleAddBtnClick = React.useCallback(() => {
        insertItem(type.of[0]);
    }, [type, insertItem]);
    const popoverProps = useMemo(() => ({ constrainSize: true, portal: true }), []);
    if (readOnly) {
        return (React.createElement(Tooltip, { portal: true, content: React.createElement(Box, { padding: 2, sizing: "border" },
                React.createElement(Text, { size: 1, muted: true }, "This field is read-only")) },
            React.createElement(Grid, null,
                React.createElement(Button, { icon: AddIcon, mode: "ghost", disabled: true, text: type.of.length === 1 ? 'Add item' : 'Add item...' }))));
    }
    return (React.createElement(Grid, { gap: 1, style: { gridTemplateColumns: 'repeat(auto-fit, minmax(100px, 1fr))' } },
        type.of.length === 1 ? (React.createElement(Button, { icon: AddIcon, mode: "ghost", onClick: handleAddBtnClick, text: "Add item" })) : (React.createElement(MenuButton, { button: React.createElement(Button, { icon: AddIcon, mode: "ghost", text: "Add item\u2026" }), id: menuButtonId || '', menu: React.createElement(Menu, null, type.of.map((memberDef, i) => {
                // Use reference icon if reference is to one type only
                const referenceIcon = isReferenceSchemaType(memberDef) &&
                    (memberDef.to || []).length === 1 &&
                    memberDef.to[0].icon;
                const icon = memberDef.icon || memberDef.type?.icon || referenceIcon;
                return (React.createElement(MenuItem, { key: i, text: memberDef.title || memberDef.type?.name, onClick: () => insertItem(memberDef), icon: icon }));
            })), popover: popoverProps })),
        children));
}
DefaultArrayInputFunctions.__SANITY_INTERNAL_IMPLEMENTATION = true;
//# sourceMappingURL=ArrayFunctions.js.map