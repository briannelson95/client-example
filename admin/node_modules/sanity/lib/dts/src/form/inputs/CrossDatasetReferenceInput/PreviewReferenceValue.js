import React from 'react';
import { Stack, Text, TextSkeleton } from '@sanity/ui';
import { CrossDatasetReferencePreview } from './CrossDatasetReferencePreview';
export function PreviewReferenceValue(props) {
    const { value, type, showStudioUrlIcon, hasStudioUrl, referenceInfo } = props;
    if (referenceInfo.isLoading || referenceInfo.error) {
        return (React.createElement(Stack, { space: 2, padding: 1 },
            React.createElement(TextSkeleton, { style: { maxWidth: 320 }, radius: 1, animated: !referenceInfo.error }),
            React.createElement(TextSkeleton, { style: { maxWidth: 200 }, radius: 1, size: 1, animated: !referenceInfo.error })));
    }
    const showTypeLabel = type.to.length > 1;
    const refTypeName = referenceInfo.result?.type;
    const refType = type.to.find((toType) => toType.type === refTypeName);
    if (referenceInfo.result.availability?.available && !refType) {
        return (React.createElement(Stack, { space: 2, padding: 2 },
            React.createElement(Text, { as: "p" },
                "The referenced document is of invalid type: (",
                refTypeName || 'unknown',
                ")",
                React.createElement("pre", null, JSON.stringify(value, null, 2)))));
    }
    return (React.createElement(CrossDatasetReferencePreview, { availability: referenceInfo.result.availability, hasStudioUrl: hasStudioUrl, showStudioUrlIcon: showStudioUrlIcon, preview: referenceInfo.result.preview, refType: refType, projectId: type.projectId, dataset: type.dataset, id: value._ref, showTypeLabel: showTypeLabel }));
}
//# sourceMappingURL=PreviewReferenceValue.js.map