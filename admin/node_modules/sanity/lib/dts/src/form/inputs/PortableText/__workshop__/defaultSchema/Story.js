import { Card, Container, Flex } from '@sanity/ui';
import { useAction, useSelect } from '@sanity/ui-workshop';
import React, { useCallback, useMemo, useRef, useState } from 'react';
import { createMockSanityClient } from '../../../../../../test/mocks/mockSanityClient';
import { createConfig } from '../../../../../config';
import { useSchema } from '../../../../../hooks';
import { StudioProvider } from '../../../../../studio';
import { createPatchChannel } from '../../../../patch/PatchChannel';
import { applyAll } from '../../../../patch/applyPatch';
import { PatchEvent } from '../../../../patch';
import { values, valueOptions } from './values';
const ptType = {
    type: 'array',
    name: 'body',
    of: [{ type: 'block' }],
};
const config = createConfig({
    name: 'test',
    dataset: 'test',
    projectId: 'test',
    schema: { types: [ptType] },
    unstable_clientFactory: () => createMockSanityClient(),
});
export default function Story() {
    return (React.createElement(StudioProvider, { config: config },
        React.createElement(Card, { height: "fill", padding: 4, sizing: "border" },
            React.createElement(Flex, { align: "center", height: "fill", justify: "center" },
                React.createElement(Container, { width: 1 },
                    React.createElement(TestForm, null))))));
}
function TestForm() {
    const schema = useSchema();
    // const readOnly = useBoolean('Read only', false)
    // const withError = useBoolean('With error', false)
    // const withWarning = useBoolean('With warning', false)
    const selectedValue = useSelect('Values', valueOptions) || 'empty';
    const [value, setValue] = useState(values[selectedValue]);
    const type = schema.get('body');
    const patchChannel = useMemo(() => createPatchChannel(), []);
    const [focusPath, setFocusPath] = useState([]);
    const changed = false;
    const focusRef = useRef();
    const handleAppendItem = useAction('onAppendItem');
    const handleBlur = useAction('onBlur');
    const handleFocus = useAction('onFocus');
    const handleInsert = useAction('onInsert');
    const handleMoveItem = useAction('onMoveItem');
    const handlePrependItem = useAction('onPrependItem');
    const handleRemoveItem = useAction('onRemoveItem');
    const handleOpenItem = useAction('onOpenItem');
    const handleCloseItem = useAction('onCloseItem');
    const handleExpand = useAction('onExpand');
    const handleCollapse = useAction('onCollapse');
    const handleCollapseItem = useAction('onCollapseItem');
    const handleExpandItem = useAction('onExpandItem');
    const members = useMemo(() => [], []);
    const path = useMemo(() => [], []);
    const presence = useMemo(() => [], []);
    const renderField = useCallback(() => React.createElement(React.Fragment, null, "TODO"), []);
    const renderInput = useCallback(() => React.createElement(React.Fragment, null, "TODO"), []);
    const renderItem = useCallback(() => React.createElement(React.Fragment, null, "TODO"), []);
    const renderPreview = useCallback(() => React.createElement(React.Fragment, null, "TODO"), []);
    const resolveInitialValue = useCallback(() => Promise.resolve({}), []);
    const validation = useMemo(() => [], []);
    const handleChange = useCallback((arg) => {
        if (arg instanceof PatchEvent) {
            setValue((prevValue) => applyAll(prevValue, arg.patches));
        }
        else if (Array.isArray(arg)) {
            setValue((prevValue) => applyAll(prevValue, arg));
        }
        else {
            setValue((prevValue) => applyAll(prevValue, [arg]));
        }
    }, []);
    if (!type) {
        return React.createElement(React.Fragment, null, "Type not found");
    }
    return React.createElement(React.Fragment, null, "TODO");
    // return (
    //   <StudioFormBuilderProvider
    //     __internal_patchChannel={patchChannel}
    //     onChange={handleChange}
    //     value={value}
    //   >
    //     <PortableTextInput
    //       compareValue={compareValue}
    //       focusPath={focusPath}
    //       focusRef={focusRef}
    //       id="test"
    //       level={0}
    //       members={members}
    //       onAppendItem={handleAppendItem}
    //       onBlur={handleBlur}
    //       onChange={handleChange}
    //       onFocus={handleFocus}
    //       onFocusPath={setFocusPath}
    //       onInsert={handleInsert}
    //       onMoveItem={handleMoveItem}
    //       onPrependItem={handlePrependItem}
    //       onRemoveItem={handleRemoveItem}
    //       onCollapse={handleCollapse}
    //       onOpenItem={handleOpenItem}
    //       onCloseItem={handleCloseItem}
    //       onExpand={handleExpand}
    //       onCollapseItem={handleCollapseItem}
    //       onExpandItem={handleExpandItem}
    //       path={path}
    //       presence={presence}
    //       renderField={renderField}
    //       renderInput={renderInput}
    //       renderItem={renderItem}
    //       resolveInitialValue={resolveInitialValue}
    //       schemaType={type as ArraySchemaType}
    //       validation={validation}
    //       value={value}
    //     />
    //   </StudioFormBuilderProvider>
    // )
}
//# sourceMappingURL=Story.js.map