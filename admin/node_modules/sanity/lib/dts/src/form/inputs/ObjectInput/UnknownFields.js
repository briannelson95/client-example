import React, { useCallback } from 'react';
import { Box, Button, Card, Code, Stack, Text } from '@sanity/ui';
import { TrashIcon } from '@sanity/icons';
import { isDev } from '../../../environment';
import { unset } from '../../patch';
import { Details } from '../../components/Details';
import { Alert } from '../../components/Alert';
export function UnknownFields(props) {
    const { fieldNames, onChange, readOnly, value } = props;
    const fieldsLen = fieldNames.length;
    const handleUnsetClick = useCallback((fieldName) => {
        onChange(unset([fieldName]));
    }, [onChange]);
    return (React.createElement(Alert, { status: "warning", title: React.createElement(React.Fragment, null,
            fieldsLen === 1 && React.createElement(React.Fragment, null, "Unknown field found"),
            fieldsLen > 1 && React.createElement(React.Fragment, null, "Unknown fields found")) },
        React.createElement(Text, { as: "p", muted: true, size: 1 }, fieldsLen === 1 ? (React.createElement(React.Fragment, null, "Encountered a field that is not defined in the schema.")) : (React.createElement(React.Fragment, null,
            "Encountered ",
            fieldsLen,
            " fields that are not defined in the schema."))),
        React.createElement(Details, { marginTop: 4, open: isDev, title: React.createElement(React.Fragment, null, "Developer info") },
            React.createElement(Box, { marginBottom: 3 },
                React.createElement(Text, { as: "p", muted: true, size: 1 }, fieldsLen === 1 ? (React.createElement(React.Fragment, null, "This field is not defined in the schema, which could mean that the field definition has been removed or that someone else has added it to their own local project and have not deployed their changes yet.")) : (React.createElement(React.Fragment, null, "These fields are not defined in the document\u2019s schema, which could mean that the field definitions have been removed or that someone else has added them to their own local project and have not deployed their changes yet.")))),
            React.createElement(Stack, { as: "ul", space: 3 }, fieldNames.map((fieldName) => {
                return (React.createElement(UnknownField, { key: fieldName, fieldName: fieldName, onUnsetClick: handleUnsetClick, readOnly: readOnly, value: value?.[fieldName] }));
            })))));
}
function UnknownField({ fieldName, onUnsetClick, readOnly, value, }) {
    const handleUnsetClick = useCallback(() => {
        onUnsetClick(fieldName);
    }, [fieldName, onUnsetClick]);
    return (React.createElement(Card, { as: "li", padding: 3, radius: 2, shadow: 1, tone: "caution" },
        React.createElement(Stack, { space: 2 },
            React.createElement(Card, { border: true, radius: 1 },
                React.createElement(Card, { borderBottom: true, padding: 3 },
                    React.createElement(Code, { weight: "medium" }, fieldName)),
                React.createElement(Box, { overflow: "auto", padding: 3 },
                    React.createElement(Code, { language: "json" }, JSON.stringify(value, null, 2)))),
            readOnly && (React.createElement(Text, { as: "p", muted: true, size: 1 },
                "This field is ",
                React.createElement("strong", null, "read only"),
                " according to the document\u2019s schema and cannot be unset. If you want to be able to unset this in Studio, make sure you remove the",
                ' ',
                React.createElement("code", null, "readOnly"),
                " field from the enclosing type in the schema.")),
            !readOnly && (React.createElement(Button, { icon: TrashIcon, onClick: handleUnsetClick, tone: "critical", text: React.createElement(React.Fragment, null, "Remove field") })))));
}
//# sourceMappingURL=UnknownFields.js.map