import { CopyIcon as DuplicateIcon, EllipsisVerticalIcon, TrashIcon, WarningOutlineIcon, } from '@sanity/icons';
import React, { useCallback, useMemo } from 'react';
import { Badge, Box, Button, Card, Flex, Menu, MenuButton, MenuItem, Text, Tooltip } from '@sanity/ui';
import styled from 'styled-components';
import { useId } from '@reach/auto-id';
import { FormFieldValidationStatus } from '../../../../components/formField';
import { FieldPresence } from '../../../../../presence';
import { DragHandle } from '../../common/DragHandle';
import { randomKey } from '../../common/randomKey';
import { createProtoValue } from '../ArrayInput';
import { InsertMenu } from '../InsertMenu';
import { EMPTY_ARRAY } from '../../../../utils/empty';
import { ItemWithMissingType } from './ItemWithMissingType';
const dragHandle = React.createElement(DragHandle, { grid: true, padding: 2, mode: "ghost" });
const DragHandleCard = styled(Card) `
  position: absolute;
  top: 0;
  left: 0;
`;
const PresenceFlex = styled(Flex) `
  position: absolute;
  top: 0;
  right: 0;
  height: 35px;
`;
const Root = styled(Card) `
  transition: border-color 250ms;
  position: relative;

  @media (hover: hover) {
    ${DragHandleCard} {
      opacity: 0;
    }

    &:hover,
    &:focus-within {
      ${DragHandleCard} {
        opacity: 1;
      }
    }
  }

  &[aria-selected='true'] {
    box-shadow: 0 0 0 2px var(--card-focus-ring-color);
  }
`;
const FooterFlex = styled(Flex) `
  min-height: 35px;
`;
const PreviewCard = styled(Card) `
  border-top-right-radius: inherit;
  border-top-left-radius: inherit;
  height: 100%;

  @media (hover: hover) {
    &:hover {
      filter: brightness(95%);
    }
  }

  &:focus:focus-visible {
    box-shadow: 0 0 0 2px var(--card-focus-ring-color);
  }
`;
const MissingTypeBox = styled(Box) `
  padding-bottom: 100%;
`;
const StyledItemWithMissingType = styled(ItemWithMissingType) `
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
`;
export const CellItem = React.forwardRef(function ItemCell(props, ref) {
    const focusRef = React.useRef(null);
    const { isSortable, value, onClick, onFocus, onInsert, insertableTypes, type, readOnly, presence, onRemove, renderPreview, validation = EMPTY_ARRAY, ...rest } = props;
    const hasError = validation.filter((item) => item.level === 'error').length > 0;
    const hasWarning = validation.filter((item) => item.level === 'warning').length > 0;
    const tone = useMemo(() => {
        if (!value._key) {
            return 'caution';
        }
        if (hasError) {
            return 'critical';
        }
        if (hasWarning) {
            return 'caution';
        }
        return undefined;
    }, [hasError, hasWarning, value._key]);
    const handleDuplicate = useCallback(() => {
        onInsert?.({
            items: [{ ...value, _key: randomKey() }],
            position: 'after',
        });
    }, [onInsert, value]);
    const handleInsert = useCallback((pos, insertType) => {
        onInsert?.({
            items: [createProtoValue(insertType)],
            position: pos,
        });
    }, [onInsert, value._key]);
    const id = useId();
    return (React.createElement(Root, { ...rest, radius: 2, ref: ref, border: true, tone: tone },
        type ? (React.createElement(PreviewCard, { tone: "inherit", "data-ui": "PreviewCard", forwardedAs: 'button', type: "button", overflow: "auto", flex: 1, tabIndex: 0, onClick: onClick, ref: focusRef, onFocus: onFocus, __unstable_focusRing: true }, renderPreview({
            layout: 'media',
            schemaType: type,
            value,
            withBorder: false,
            withRadius: false,
        }))) : (React.createElement(MissingTypeBox, { flex: 1 },
            React.createElement(StyledItemWithMissingType, { value: value, onFocus: onFocus, vertical: true }))),
        React.createElement(DragHandleCard, { margin: 1, radius: 2, display: "flex", tone: "inherit", "data-ui": "DragHandleCard" }, !readOnly && isSortable && dragHandle),
        React.createElement(PresenceFlex, { align: "center", marginX: 1 }, !readOnly && React.createElement(FieldPresence, { presence: presence, maxAvatars: 1 })),
        React.createElement(FooterFlex, { align: "center", paddingX: 1, sizing: "border", justify: "space-between" },
            React.createElement(Flex, null,
                value?._key && validation.length > 0 && (React.createElement(Box, { marginLeft: 1, paddingX: 1, paddingY: 3 },
                    React.createElement(FormFieldValidationStatus, { validation: validation, __unstable_showSummary: !value?._ref, placement: "bottom", portal: true }))),
                !value._key && (React.createElement(Tooltip, { portal: true, content: React.createElement(Card, { padding: 2 },
                        React.createElement(Text, { size: 1 },
                            "This item is missing a required ",
                            React.createElement("code", null, "_key"),
                            " property.")) },
                    React.createElement(Badge, { mode: "outline", tone: "caution", margin: 1, padding: 2, fontSize: 1 },
                        React.createElement(WarningOutlineIcon, null),
                        " key")))),
            !readOnly && (React.createElement(Box, null,
                React.createElement(MenuButton, { button: React.createElement(Button, { padding: 2, mode: "bleed", icon: EllipsisVerticalIcon }), id: `${id}-menuButton`, portal: true, menu: React.createElement(Menu, null,
                        React.createElement(MenuItem, { text: "Remove", tone: "critical", icon: TrashIcon, onClick: onRemove }),
                        React.createElement(MenuItem, { text: "Duplicate", icon: DuplicateIcon, onClick: handleDuplicate }),
                        React.createElement(InsertMenu, { types: insertableTypes, onInsert: handleInsert })) }))))));
});
//# sourceMappingURL=CellItem.js.map