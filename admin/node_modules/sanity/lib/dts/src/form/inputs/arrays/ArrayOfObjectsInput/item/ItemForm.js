/* eslint-disable camelcase */
import { isReferenceSchemaType } from '@sanity/types';
import React, { forwardRef, useMemo } from 'react';
export const ItemForm = forwardRef(function ItemForm(props, ref) {
    const { schemaType, value, validation, focusPath, ReferenceItemComponent, insertableTypes, isSortable, filterField, presence, onChange, onInsert, changed, onFocus, onBlur, readOnly, } = props;
    const isReference = isReferenceSchemaType(schemaType);
    const Input = useMemo(() => isReference
        ? function Input_(givenProps) {
            return (React.createElement(ReferenceItemComponent, { ...givenProps, insertableTypes: insertableTypes, onInsert: onInsert, isSortable: isSortable, onChange: onChange }));
        }
        : undefined, [ReferenceItemComponent, insertableTypes, isReference, isSortable, onInsert, onChange]);
    const path = useMemo(() => [{ _key: value?._key }], [value?._key]);
    return (React.createElement(React.Fragment, null, "TODO")
    // <FormBuilderInput
    //   type={type}
    //   level={0}
    //   value={value}
    //   onChange={onChange}
    //   onFocus={onFocus}
    //   onBlur={onBlur}
    //   inputComponent={Input}
    //   changed={changed}
    //   focusPath={focusPath}
    //   readOnly={readOnly || type.readOnly || false}
    //   validation={validation}
    //   path={path}
    //   // filterField={filterField}
    //   presence={presence}
    //   ref={ref}
    // />
    );
});
//# sourceMappingURL=ItemForm.js.map