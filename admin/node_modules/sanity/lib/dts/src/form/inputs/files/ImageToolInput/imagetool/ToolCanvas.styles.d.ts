/// <reference types="react" />
export declare const DragAwareCanvas: {
    new (props: import("./makeDragAware").DragAwareProps | Readonly<import("./makeDragAware").DragAwareProps>): {
        domNode: HTMLCanvasElement | null;
        currentPos: import("./types").Coordinate | null;
        isDragging: boolean;
        componentDidMount(): void;
        componentWillUnmount(): void;
        handleTouchMove: (event: MouseEvent | TouchEvent) => void;
        handleDragStart: (event: {
            touches: import("react").TouchList | TouchList;
        } | {
            clientX: number;
            clientY: number;
        }) => void;
        handleDrag: (event: {
            touches: import("react").TouchList | TouchList;
        } | {
            clientX: number;
            clientY: number;
        }) => void;
        handleDragEnd: (event: MouseEvent | TouchEvent) => void;
        handleDragCancel: () => void;
        setDomNode: (node: HTMLCanvasElement) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<import("./makeDragAware").DragAwareProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<import("./makeDragAware").DragAwareProps> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<import("./makeDragAware").DragAwareProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<import("./makeDragAware").DragAwareProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<import("./makeDragAware").DragAwareProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<import("./makeDragAware").DragAwareProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import("./makeDragAware").DragAwareProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<import("./makeDragAware").DragAwareProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<import("./makeDragAware").DragAwareProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: import("./makeDragAware").DragAwareProps, context: any): {
        domNode: HTMLCanvasElement | null;
        currentPos: import("./types").Coordinate | null;
        isDragging: boolean;
        componentDidMount(): void;
        componentWillUnmount(): void;
        handleTouchMove: (event: MouseEvent | TouchEvent) => void;
        handleDragStart: (event: {
            touches: import("react").TouchList | TouchList;
        } | {
            clientX: number;
            clientY: number;
        }) => void;
        handleDrag: (event: {
            touches: import("react").TouchList | TouchList;
        } | {
            clientX: number;
            clientY: number;
        }) => void;
        handleDragEnd: (event: MouseEvent | TouchEvent) => void;
        handleDragCancel: () => void;
        setDomNode: (node: HTMLCanvasElement) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<import("./makeDragAware").DragAwareProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<import("./makeDragAware").DragAwareProps> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<import("./makeDragAware").DragAwareProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<import("./makeDragAware").DragAwareProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<import("./makeDragAware").DragAwareProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<import("./makeDragAware").DragAwareProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import("./makeDragAware").DragAwareProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<import("./makeDragAware").DragAwareProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<import("./makeDragAware").DragAwareProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextType?: import("react").Context<any> | undefined;
};
export declare const RootContainer: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {}, never>;
export declare const CanvasContainer: import("styled-components").StyledComponent<{
    new (props: import("./makeDragAware").DragAwareProps | Readonly<import("./makeDragAware").DragAwareProps>): {
        domNode: HTMLCanvasElement | null;
        currentPos: import("./types").Coordinate | null;
        isDragging: boolean;
        componentDidMount(): void;
        componentWillUnmount(): void;
        handleTouchMove: (event: MouseEvent | TouchEvent) => void;
        handleDragStart: (event: {
            touches: import("react").TouchList | TouchList;
        } | {
            clientX: number;
            clientY: number;
        }) => void;
        handleDrag: (event: {
            touches: import("react").TouchList | TouchList;
        } | {
            clientX: number;
            clientY: number;
        }) => void;
        handleDragEnd: (event: MouseEvent | TouchEvent) => void;
        handleDragCancel: () => void;
        setDomNode: (node: HTMLCanvasElement) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<import("./makeDragAware").DragAwareProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<import("./makeDragAware").DragAwareProps> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<import("./makeDragAware").DragAwareProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<import("./makeDragAware").DragAwareProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<import("./makeDragAware").DragAwareProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<import("./makeDragAware").DragAwareProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import("./makeDragAware").DragAwareProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<import("./makeDragAware").DragAwareProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<import("./makeDragAware").DragAwareProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: import("./makeDragAware").DragAwareProps, context: any): {
        domNode: HTMLCanvasElement | null;
        currentPos: import("./types").Coordinate | null;
        isDragging: boolean;
        componentDidMount(): void;
        componentWillUnmount(): void;
        handleTouchMove: (event: MouseEvent | TouchEvent) => void;
        handleDragStart: (event: {
            touches: import("react").TouchList | TouchList;
        } | {
            clientX: number;
            clientY: number;
        }) => void;
        handleDrag: (event: {
            touches: import("react").TouchList | TouchList;
        } | {
            clientX: number;
            clientY: number;
        }) => void;
        handleDragEnd: (event: MouseEvent | TouchEvent) => void;
        handleDragCancel: () => void;
        setDomNode: (node: HTMLCanvasElement) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<import("./makeDragAware").DragAwareProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<import("./makeDragAware").DragAwareProps> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<import("./makeDragAware").DragAwareProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<import("./makeDragAware").DragAwareProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<import("./makeDragAware").DragAwareProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<import("./makeDragAware").DragAwareProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import("./makeDragAware").DragAwareProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<import("./makeDragAware").DragAwareProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<import("./makeDragAware").DragAwareProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextType?: import("react").Context<any> | undefined;
}, import("styled-components").DefaultTheme, {}, never>;
//# sourceMappingURL=ToolCanvas.styles.d.ts.map