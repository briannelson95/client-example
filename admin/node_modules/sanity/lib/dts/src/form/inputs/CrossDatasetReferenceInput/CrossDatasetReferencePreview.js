import React, { createElement, useMemo } from 'react';
import { Box, Flex, Inline, Label, Text, Tooltip } from '@sanity/ui';
import { AccessDeniedIcon, HelpCircleIcon, LaunchIcon } from '@sanity/icons';
import imageUrlBuilder from '@sanity/image-url';
import { DefaultPreview } from '../../../components/previews';
import { TextWithTone } from '../../../components/TextWithTone';
function UnavailableMessage(props) {
    const Icon = props.icon;
    return (React.createElement(Flex, { padding: 3 },
        React.createElement(Box, null,
            React.createElement(Text, { size: 1 },
                React.createElement(Icon, null))),
        React.createElement(Box, { flex: 1, marginLeft: 3 },
            React.createElement(Text, { size: 1, weight: "semibold" }, props.title),
            React.createElement(Box, { marginTop: 3 },
                React.createElement(Text, { as: "p", muted: true, size: 1 }, props.children)))));
}
/**
 * Used to preview a referenced type
 * Takes the reference type as props
 */
export function CrossDatasetReferencePreview(props) {
    const { refType, showStudioUrlIcon, hasStudioUrl, showTypeLabel, availability, preview, id, dataset, projectId, } = props;
    const notFound = availability?.reason === 'NOT_FOUND';
    const insufficientPermissions = availability?.reason === 'PERMISSION_DENIED';
    const previewMedia = preview.published?.media;
    const media = useMemo(() => {
        if (previewMedia) {
            return function MediaPreview({ dimensions }) {
                return React.isValidElement(previewMedia) ? (previewMedia) : (React.createElement("img", { src: imageUrlBuilder({ dataset, projectId })
                        .image(previewMedia)
                        .withOptions(dimensions)
                        .url(), alt: "Image preview of referenced document", referrerPolicy: "strict-origin-when-cross-origin" }));
            };
        }
        return refType?.icon ? createElement(refType.icon) : null;
    }, [previewMedia, dataset, projectId, refType?.icon]);
    return (React.createElement(Flex, { align: "center", "data-testid": "preview" },
        availability?.available ? (React.createElement(Box, { flex: 1, paddingX: 2, paddingY: 1 },
            React.createElement(DefaultPreview, { title: preview.published?.title, subtitle: preview.published?.subtitle, media: media || false }))) : (React.createElement(Box, { flex: 1, padding: 2 },
            React.createElement(Flex, { align: "center", justify: "center" },
                React.createElement(Box, { flex: 1, paddingY: 2 },
                    React.createElement(Text, { muted: true }, "Document unavailable"))))),
        React.createElement(Box, { paddingLeft: 3 },
            React.createElement(Inline, { space: 4 },
                refType && showTypeLabel && (React.createElement(Label, { size: 1, muted: true }, refType.title || refType.type)),
                (insufficientPermissions || notFound) && (React.createElement(Box, null,
                    React.createElement(Tooltip, { portal: true, content: notFound ? (React.createElement(UnavailableMessage, { title: "Not found", icon: HelpCircleIcon },
                            "The referenced document does not exist",
                            React.createElement("br", null),
                            "(id: ",
                            React.createElement("code", null, id),
                            ")")) : (React.createElement(UnavailableMessage, { title: "Insufficient permissions", icon: AccessDeniedIcon }, "The referenced document could not be accessed due to insufficient permissions")) },
                        React.createElement(TextWithTone, { tone: "default" }, insufficientPermissions ? React.createElement(AccessDeniedIcon, null) : React.createElement(HelpCircleIcon, null))))),
                !(notFound || insufficientPermissions) && showStudioUrlIcon && (React.createElement(Box, null,
                    React.createElement(Tooltip, { portal: true, content: React.createElement(Box, { padding: 2 }, hasStudioUrl ? (React.createElement(Text, { size: 1 }, "This document opens in another Studio")) : (React.createElement(Text, { size: 1 }, "This document cannot be opened (unable to resolve URL to Studio)"))) },
                        React.createElement(TextWithTone, { size: 1, tone: "default", muted: !hasStudioUrl },
                            React.createElement(LaunchIcon, null)))))))));
}
//# sourceMappingURL=CrossDatasetReferencePreview.js.map