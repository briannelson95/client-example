import { KeyedSegment, SchemaType } from '@sanity/types';
import React from 'react';
import { Subscription } from 'rxjs';
import { SanityClient } from '@sanity/client';
import { Uploader, UploaderResolver } from '../../../studio/uploads/types';
import { ItemProps } from '../../../types/itemProps';
import { ArrayOfObjectsMember } from '../../../store';
import { ArrayOfObjectsInputProps } from '../../../types';
import type { _ArrayInput_ArrayMember, _InsertEvent } from './types';
export declare function createProtoValue(type: SchemaType): _ArrayInput_ArrayMember;
/**
 * @internal
 */
export interface _ArrayInputState {
    isResolvingInitialValue: boolean;
}
export interface ArrayInputProps extends ArrayOfObjectsInputProps<_ArrayInput_ArrayMember> {
    resolveUploader: UploaderResolver;
    client: SanityClient;
}
export declare class ArrayInput extends React.PureComponent<ArrayInputProps> {
    _focusArea: HTMLElement | null;
    toast: any | null;
    uploadSubscriptions: Record<string, Subscription>;
    state: _ArrayInputState;
    insert: (item: _ArrayInput_ArrayMember, position: 'before' | 'after', referenceItem: number | KeyedSegment) => void;
    handlePrepend: (value: _ArrayInput_ArrayMember) => void;
    handleAppend: (value: _ArrayInput_ArrayMember) => void;
    handleInsert: (event: _InsertEvent) => void;
    getMemberTypeOfItem(item: _ArrayInput_ArrayMember): SchemaType | undefined;
    handleRemoveItem: (item: _ArrayInput_ArrayMember) => void;
    handleFocus: (event: React.FocusEvent) => void;
    handleBlur: (event: React.FocusEvent) => void;
    removeItem(item: _ArrayInput_ArrayMember): void;
    handleSortEnd: (event: {
        newIndex: number;
        oldIndex: number;
    }) => void;
    focus(): void;
    setFocusArea: (el: HTMLElement | null) => void;
    setToast: (toast: any | null) => void;
    handleRemoveNonObjectValues: () => void;
    handleUpload: ({ file, type, uploader }: {
        file: File;
        type: SchemaType;
        uploader: Uploader;
    }) => void;
    renderItem: (itemProps: ItemProps) => React.ReactNode;
    renderMember(member: ArrayOfObjectsMember): JSX.Element;
    render(): JSX.Element;
}
//# sourceMappingURL=ArrayInput.d.ts.map