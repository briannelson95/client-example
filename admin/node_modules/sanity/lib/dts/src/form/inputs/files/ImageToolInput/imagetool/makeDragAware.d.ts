import React from 'react';
import type { Coordinate } from './types';
declare type PositionableEvent = {
    touches: React.TouchEvent['touches'] | TouchEvent['touches'];
} | {
    clientX: number;
    clientY: number;
};
export interface DragAwareProps {
    onDragStart: (pos: {
        x: number;
        y: number;
    }) => void;
    onDrag: (pos: {
        x: number;
        y: number;
    }) => void;
    onDragEnd: (pos: {
        x: number;
        y: number;
    }) => void;
    readOnly?: boolean;
    [key: string]: unknown | undefined;
}
export declare function makeDragAware(Component: 'canvas'): {
    new (props: DragAwareProps | Readonly<DragAwareProps>): {
        domNode: HTMLCanvasElement | null;
        currentPos: Coordinate | null;
        isDragging: boolean;
        componentDidMount(): void;
        componentWillUnmount(): void;
        handleTouchMove: (event: TouchEvent | MouseEvent) => void;
        handleDragStart: (event: PositionableEvent) => void;
        handleDrag: (event: PositionableEvent) => void;
        handleDragEnd: (event: MouseEvent | TouchEvent) => void;
        handleDragCancel: () => void;
        setDomNode: (node: HTMLCanvasElement) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<DragAwareProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<DragAwareProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<DragAwareProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<DragAwareProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<DragAwareProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<DragAwareProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<DragAwareProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<DragAwareProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<DragAwareProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: DragAwareProps, context: any): {
        domNode: HTMLCanvasElement | null;
        currentPos: Coordinate | null;
        isDragging: boolean;
        componentDidMount(): void;
        componentWillUnmount(): void;
        handleTouchMove: (event: TouchEvent | MouseEvent) => void;
        handleDragStart: (event: PositionableEvent) => void;
        handleDrag: (event: PositionableEvent) => void;
        handleDragEnd: (event: MouseEvent | TouchEvent) => void;
        handleDragCancel: () => void;
        setDomNode: (node: HTMLCanvasElement) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<DragAwareProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<DragAwareProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<DragAwareProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<DragAwareProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<DragAwareProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<DragAwareProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<DragAwareProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<DragAwareProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<DragAwareProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextType?: React.Context<any> | undefined;
};
export {};
//# sourceMappingURL=makeDragAware.d.ts.map