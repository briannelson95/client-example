import React, { forwardRef, useCallback, useImperativeHandle, useMemo, useRef } from 'react';
import { set, unset } from '../patch';
import { TagInput } from '../components/tagInput';
import { ChangeIndicator } from '../../components/changeIndicators';
export const TagsArrayInput = forwardRef(function TagsArrayInput(props, ref) {
    const { id, onChange, onFocus, readOnly, value = [], path, focused, changed } = props;
    const tagInputValue = useMemo(() => value?.map((v) => ({ value: v })), [value]);
    const inputRef = useRef(null);
    const handleChange = useCallback((nextValue) => {
        onChange(nextValue.length === 0 ? unset() : set(nextValue.map((v) => v.value)));
    }, [onChange]);
    useImperativeHandle(ref, () => ({
        focus: () => inputRef.current?.focus(),
    }));
    return (React.createElement(ChangeIndicator, { path: path, isChanged: changed, hasFocus: !!focused },
        React.createElement(TagInput, { id: id, onChange: handleChange, onFocus: onFocus, readOnly: readOnly, ref: inputRef, value: tagInputValue })));
});
//# sourceMappingURL=TagsArrayInput.js.map