import { Button, Card, Code, Stack, Text } from '@sanity/ui';
import React, { forwardRef, useCallback, useImperativeHandle, useMemo } from 'react';
import { isDev } from '../../../environment';
import { PatchEvent, set, unset } from '../../patch';
import { Alert } from '../../components/Alert';
import { Details } from '../../components/Details';
import { converters as CONVERTERS } from './converters';
import { UntypedValueInput } from './UntypedValueInput';
function getConverters(value, actualType, validTypes) {
    if (!(actualType in CONVERTERS)) {
        return [];
    }
    return Object.keys(CONVERTERS[actualType])
        .filter((targetType) => validTypes.includes(targetType))
        .map((targetType) => ({
        from: actualType,
        to: targetType,
        ...CONVERTERS[actualType][targetType],
    }))
        .filter((converter) => converter.test(value));
}
export const InvalidValueInput = forwardRef((props, ref) => {
    const { value, actualType, validTypes, onChange } = props;
    useImperativeHandle(ref, () => ({
        // @todo
        focus: () => undefined,
    }));
    const handleClearClick = useCallback(() => {
        onChange(PatchEvent.from(unset()));
    }, [onChange]);
    const handleConvertTo = useCallback((converted) => {
        onChange(PatchEvent.from(set(converted)));
    }, [onChange]);
    const converters = useMemo(() => getConverters(value, actualType, validTypes), [value, actualType, validTypes]);
    if (typeof value === 'object' && value !== null && !('_type' in value)) {
        return (React.createElement(UntypedValueInput, { value: value, validTypes: validTypes, onChange: onChange }));
    }
    const suffix = (React.createElement(Stack, { padding: 2 },
        React.createElement(Button, { onClick: handleClearClick, tone: "critical", text: "Reset value" })));
    return (React.createElement(Alert, { status: "error", suffix: suffix, title: React.createElement(React.Fragment, null, "Invalid property value") },
        React.createElement(Text, { as: "p", muted: true, size: 1 }, "The property value is stored as a value type that does not match the expected type."),
        React.createElement(Details, { marginTop: 4, open: isDev, title: React.createElement(React.Fragment, null, "Developer info") },
            React.createElement(Stack, { space: 3 },
                validTypes.length === 1 && (React.createElement(Text, { as: "p", muted: true, size: 1 },
                    "The value of this property must be of type ",
                    React.createElement("code", null, validTypes[0]),
                    " according to the schema.")),
                validTypes.length === 1 && (React.createElement(Text, { as: "p", muted: true, size: 1 }, "Mismatching value types typically occur when the schema has recently been changed.")),
                validTypes.length !== 1 && (React.createElement(Text, { as: "p", muted: true, size: 1 }, "Only the following types are valid here according to schema:")),
                validTypes.length !== 1 && (React.createElement(Stack, { as: "ul", space: 2 }, validTypes.map((validType) => (React.createElement(Text, { as: "li", key: validType },
                    React.createElement("code", null, validType)))))),
                React.createElement(Stack, { marginTop: 2, space: 2 },
                    React.createElement(Text, { size: 1, weight: "semibold" },
                        "The current value (",
                        React.createElement("code", null, actualType),
                        ")"),
                    React.createElement(Card, { border: true, padding: 2, radius: 2, tone: "inherit" },
                        React.createElement(Code, { language: "json", size: 1 }, JSON.stringify(value, null, 2)))),
                converters.length > 0 && (React.createElement(Stack, { space: 1 }, converters.map((converter) => (React.createElement(ConvertButton, { converter: converter, key: `${converter.from}-${converter.to}`, onConvert: handleConvertTo, value: value })))))))));
});
InvalidValueInput.displayName = 'InvalidValueInput';
function ConvertButton({ converter, onConvert, value, }) {
    const handleClick = useCallback(() => onConvert(converter.convert(value)), [converter, onConvert, value]);
    return (React.createElement(Button, { onClick: handleClick, text: React.createElement(React.Fragment, null,
            "Convert to ",
            React.createElement("code", null, converter.to)) }));
}
//# sourceMappingURL=InvalidValueInput.js.map