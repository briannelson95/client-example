import React, { useCallback, useMemo } from 'react';
import { Box, Button, Card, Flex, Menu, MenuButton, MenuItem } from '@sanity/ui';
import { CopyIcon as DuplicateIcon, EllipsisVerticalIcon, TrashIcon } from '@sanity/icons';
import { useId } from '@reach/auto-id';
import { FormFieldValidationStatus } from '../../../components/formField';
import { DragHandle } from '../common/DragHandle';
import { ItemWithMissingType } from '../ArrayOfObjectsInput/item/ItemWithMissingType';
import { InsertMenu } from '../ArrayOfObjectsInput/InsertMenu';
import { getEmptyValue } from './getEmptyValue';
const dragHandle = React.createElement(DragHandle, { paddingX: 1, paddingY: 3 });
export const ItemRow = React.forwardRef(function ItemRow(props, ref) {
    const { isSortable, value, index, onEscapeKey, onEnterKey, insertableTypes, onInsert, onRemove, readOnly, onFocus, validation, schemaType, } = props;
    const hasError = validation.filter((item) => item.level === 'error').length > 0;
    const hasWarning = validation.filter((item) => item.level === 'warning').length > 0;
    const showValidationStatus = !readOnly && validation.length > 0 && !schemaType?.title;
    const handleRemove = useCallback(() => {
        onRemove();
    }, [onRemove]);
    const handleInsert = useCallback((pos, insertType) => {
        onInsert({ position: pos, items: [getEmptyValue(insertType)] });
    }, [onInsert]);
    const handleDuplicate = useCallback(() => {
        if (value)
            onInsert({ position: 'after', items: [value] });
    }, [onInsert, value]);
    const handleKeyPress = useCallback((event) => {
        if (event.key === 'Enter') {
            onEnterKey(index);
        }
    }, [index, onEnterKey]);
    const handleKeyUp = useCallback((event) => {
        if (event.shiftKey && event.key === 'Backspace' && value === '') {
            onRemove();
        }
        if (event.key === 'Escape') {
            onEscapeKey(index);
        }
    }, [index, onEscapeKey, onRemove, value]);
    const tone = useMemo(() => {
        if (hasError) {
            return 'critical';
        }
        if (hasWarning) {
            return 'caution';
        }
        return undefined;
    }, [hasError, hasWarning]);
    const id = useId();
    return (React.createElement(Card, { tone: tone, radius: 2, paddingX: 1, paddingY: 2 },
        React.createElement(Flex, { align: schemaType ? 'flex-end' : 'center', ref: ref },
            schemaType ? (React.createElement(Flex, { align: "flex-end", flex: 1 },
                isSortable && React.createElement(Box, { marginRight: 1 }, dragHandle),
                React.createElement(Box, { flex: 1, marginRight: 2 }, props.children))) : (React.createElement(Box, { flex: 1 },
                React.createElement(ItemWithMissingType, { value: value, onFocus: onFocus }))),
            React.createElement(Flex, { align: "center", marginLeft: 2 },
                showValidationStatus && (React.createElement(Box, { marginRight: 3 },
                    React.createElement(FormFieldValidationStatus, { validation: validation }))),
                !readOnly && (React.createElement(Box, { paddingY: 1 },
                    React.createElement(MenuButton, { button: React.createElement(Button, { padding: 2, mode: "bleed", icon: EllipsisVerticalIcon }), id: `${id}-menuButton`, portal: true, popover: { portal: true, tone: 'default' }, menu: React.createElement(Menu, null,
                            React.createElement(MenuItem, { text: "Remove", tone: "critical", icon: TrashIcon, onClick: handleRemove }),
                            React.createElement(MenuItem, { text: "Duplicate", icon: DuplicateIcon, onClick: handleDuplicate }),
                            React.createElement(InsertMenu, { types: insertableTypes, onInsert: handleInsert })) })))))));
});
//# sourceMappingURL=ItemRow.js.map