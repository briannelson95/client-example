import React, { forwardRef, useCallback } from 'react';
import { Autocomplete, Box, Flex, Popover, Text } from '@sanity/ui';
import styled from 'styled-components';
const StyledPopover = styled(Popover) `
  & > div {
    overflow: auto;
    -webkit-overflow-scrolling: touch;
  }
`;
const StyledText = styled(Text) `
  word-break: break-word;
`;
export const ReferenceAutocomplete = forwardRef(function ReferenceAutocomplete(props, ref) {
    const hasResults = props.options && props.options.length > 0;
    const renderPopover = useCallback(({ content, hidden, inputElement, onMouseEnter, onMouseLeave, }, contentRef) => (React.createElement(StyledPopover, { placement: "bottom-start", arrow: false, constrainSize: true, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, content: React.createElement("div", { ref: contentRef }, hasResults ? (content) : (React.createElement(Box, { padding: 4 },
            React.createElement(Flex, { align: "center", height: "fill", justify: "center" },
                React.createElement(StyledText, { align: "center", muted: true },
                    "No results for ",
                    React.createElement("strong", null,
                        "\u201C",
                        props.searchString,
                        "\u201D"),
                    props.searchString?.toLowerCase() === 'capybara' ? (React.createElement(React.Fragment, null, ". What a shame. There should be more Capybaras.")) : null))))), open: !props.loading && !hidden, ref: props.portalRef, portal: true, referenceElement: props.referenceElement || inputElement, matchReferenceWidth: true })), [hasResults, props.searchString, props.loading, props.portalRef, props.referenceElement]);
    return React.createElement(Autocomplete, { ...props, ref: ref, renderPopover: renderPopover });
});
//# sourceMappingURL=ReferenceAutocomplete.js.map