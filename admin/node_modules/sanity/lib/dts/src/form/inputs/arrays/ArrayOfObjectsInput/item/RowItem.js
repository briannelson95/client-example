/* eslint-disable no-nested-ternary */
import React, { useCallback } from 'react';
import { Badge, Box, Button, Card, Flex, Menu, MenuButton, MenuItem, Text, Tooltip, } from '@sanity/ui';
import { CopyIcon as DuplicateIcon, EllipsisVerticalIcon, TrashIcon } from '@sanity/icons';
import { useId } from '@reach/auto-id';
import { FormFieldValidationStatus } from '../../../../components/formField';
import { FieldPresence } from '../../../../../presence';
import { DragHandle } from '../../common/DragHandle';
import { randomKey } from '../../common/randomKey';
import { createProtoValue } from '../ArrayInput';
import { InsertMenu } from '../InsertMenu';
import { EMPTY_ARRAY } from '../../../../utils/empty';
import { ItemWithMissingType } from './ItemWithMissingType';
import { RowWrapper } from './components/RowWrapper';
const dragHandle = React.createElement(DragHandle, { paddingX: 1, paddingY: 3 });
const MENU_POPOVER_PROPS = { portal: true, tone: 'default' };
export const RowItem = React.forwardRef(function RegularItem(props, ref) {
    const focusRef = React.useRef(null);
    const { isSortable, value, onClick, onFocus, type, readOnly, presence, onInsert, insertableTypes, onRemove, renderPreview, validation = EMPTY_ARRAY, ...rest } = props;
    const hasErrors = validation.some((v) => v.level === 'error');
    const hasWarnings = validation.some((v) => v.level === 'warning');
    const handleDuplicate = useCallback(() => {
        onInsert({
            items: [{ ...value, _key: randomKey() }],
            position: 'after',
        });
    }, [onInsert, value]);
    const handleInsert = useCallback((pos, insertType) => {
        onInsert({
            items: [{ ...createProtoValue(insertType), _key: randomKey() }],
            position: pos,
        });
    }, [onInsert]);
    const id = useId();
    return (React.createElement(RowWrapper, { ...rest, ref: ref, radius: 2, padding: 1, tone: (readOnly
            ? 'transparent'
            : hasErrors
                ? 'critical'
                : hasWarnings
                    ? 'caution'
                    : 'default') },
        React.createElement(Flex, { align: "center" },
            isSortable && (React.createElement(Card, { className: "dragHandle", tone: "inherit", marginRight: 1 }, dragHandle)),
            type ? (React.createElement(Card, { as: "button", type: "button", tone: "inherit", radius: 2, padding: 1, flex: 1, onClick: onClick, ref: focusRef, onFocus: onFocus, __unstable_focusRing: true }, renderPreview({
                layout: type.options && 'layout' in type.options && type.options?.layout === 'grid'
                    ? 'media'
                    : 'default',
                schemaType: type,
                value,
            }))) : (React.createElement(Box, { flex: 1 },
                React.createElement(ItemWithMissingType, { value: value, onFocus: onFocus }))),
            React.createElement(Flex, { align: "center" },
                !readOnly && presence.length > 0 && (React.createElement(Box, { marginLeft: 1 },
                    React.createElement(FieldPresence, { presence: presence, maxAvatars: 1 }))),
                validation.length > 0 && (React.createElement(Box, { marginLeft: 1, paddingX: 1, paddingY: 3 },
                    React.createElement(FormFieldValidationStatus, { __unstable_showSummary: !value?._ref }))),
                !readOnly && (React.createElement(MenuButton, { button: React.createElement(Button, { padding: 2, mode: "bleed", icon: EllipsisVerticalIcon }), id: `${id}-menuButton`, menu: React.createElement(Menu, null,
                        React.createElement(MenuItem, { text: "Remove", tone: "critical", icon: TrashIcon, onClick: onRemove }),
                        React.createElement(MenuItem, { text: "Duplicate", icon: DuplicateIcon, onClick: handleDuplicate }),
                        React.createElement(InsertMenu, { types: insertableTypes, onInsert: handleInsert })), placement: "right", popover: MENU_POPOVER_PROPS })),
                !value._key && (React.createElement(Box, { marginLeft: 1 },
                    React.createElement(Tooltip, { content: React.createElement(Box, { padding: 2 },
                            React.createElement(Text, { muted: true, size: 1 },
                                "This item is missing the required ",
                                React.createElement("code", null, "_key"),
                                " property.")), placement: "top" },
                        React.createElement(Badge, { mode: "outline", tone: "caution" }, "Missing key"))))))));
});
//# sourceMappingURL=RowItem.js.map