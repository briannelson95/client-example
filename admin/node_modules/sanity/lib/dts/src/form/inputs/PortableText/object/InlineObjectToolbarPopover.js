import React, { useRef, useCallback, useEffect } from 'react';
import { Box, Button, Inline, Popover, Text, useGlobalKeyDown, useTheme, } from '@sanity/ui';
import styled from 'styled-components';
import { EditIcon, TrashIcon } from '@sanity/icons';
const ToolbarPopover = styled(Popover) `
  &[data-popper-reference-hidden='true'] {
    display: none !important;
  }
`;
const POPOVER_FALLBACK_PLACEMENTS = ['top', 'bottom'];
export function InlineObjectToolbarPopover(props) {
    const { open, onEdit, onDelete, referenceElement, scrollElement, setOpen, title } = props;
    const { sanity } = useTheme();
    const editButtonRef = useRef(null);
    const popoverScheme = sanity.color.dark ? 'light' : 'dark';
    const isTabbing = useRef(false);
    // Close floating toolbar on Escape
    // Focus to edit button on Tab
    useGlobalKeyDown(useCallback((event) => {
        if (!open) {
            return;
        }
        if (event.key === 'Escape') {
            event.preventDefault();
            event.stopPropagation();
            isTabbing.current = false;
            setOpen(false);
        }
        if (event.key === 'Tab') {
            if (!isTabbing.current) {
                event.preventDefault();
                event.stopPropagation();
                editButtonRef.current?.focus();
                isTabbing.current = true;
            }
        }
    }, [open, setOpen]));
    useEffect(() => {
        if (open && isTabbing.current) {
            editButtonRef.current?.focus();
        }
    }, [open]);
    return (React.createElement("div", { contentEditable: false },
        React.createElement(ToolbarPopover, { boundaryElement: scrollElement, constrainSize: true, content: React.createElement(Box, { padding: 1 },
                React.createElement(Inline, { space: 1 },
                    React.createElement(Box, { padding: 2 },
                        React.createElement(Text, { weight: "semibold", size: 1 }, title)),
                    React.createElement(Button, { icon: EditIcon, mode: "bleed", onClick: onEdit, padding: 2, ref: editButtonRef, alt: "Edit object" }),
                    React.createElement(Button, { icon: TrashIcon, mode: "bleed", padding: 2, onClick: onDelete, tone: "critical", alt: "Remove object" }))), fallbackPlacements: POPOVER_FALLBACK_PLACEMENTS, open: true, placement: "top", portal: "editor", referenceElement: referenceElement, scheme: popoverScheme })));
}
//# sourceMappingURL=InlineObjectToolbarPopover.js.map