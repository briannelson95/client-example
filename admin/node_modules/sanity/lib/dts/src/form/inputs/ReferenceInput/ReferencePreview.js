import React, { useMemo } from 'react';
import { Box, Flex, Inline, Label, Text, Tooltip, useRootTheme } from '@sanity/ui';
import { AccessDeniedIcon, EditIcon, HelpCircleIcon, PublishIcon } from '@sanity/icons';
import { TextWithTone } from '../../../components/TextWithTone';
import { DocumentPreviewPresence } from '../../../presence';
import { useDocumentPresence } from '../../../datastores';
import { TimeAgo } from './utils/TimeAgo';
function UnavailableMessage(props) {
    const Icon = props.icon;
    return (React.createElement(Flex, { padding: 3 },
        React.createElement(Box, null,
            React.createElement(Text, { size: 1 },
                React.createElement(Icon, null))),
        React.createElement(Box, { flex: 1, marginLeft: 3 },
            React.createElement(Text, { size: 1, weight: "semibold" }, props.title),
            React.createElement(Box, { marginTop: 3 },
                React.createElement(Text, { as: "p", muted: true, size: 1 }, props.children)))));
}
/**
 * Used to preview a referenced type
 * Takes the reference type as props
 */
export function ReferencePreview(props) {
    const { availability, id, layout, preview, refType, renderPreview, showTypeLabel } = props;
    const theme = useRootTheme();
    const documentPresence = useDocumentPresence(id);
    const notFound = availability.reason === 'NOT_FOUND';
    const insufficientPermissions = availability.reason === 'PERMISSION_DENIED';
    const previewId = preview.draft?._id ||
        preview.published?._id ||
        // note: during publish of the referenced document we might have both a missing draft and a missing published version
        // this happens because the preview system tries to optimistically re-fetch as soon as it sees a mutation, but
        // when publishing, the draft is deleted, and therefore both the draft and the published may be missing for a brief
        // moment before the published version appears. In this case, it's safe to fallback to the given id, which is always
        // the published id
        id;
    // Note: we can't pass the preview values as-is to the Preview-component here since it's a "prepared" value and the
    // Preview component expects the "raw"/unprepared value. By passing only _id and _type we make sure the Preview-component
    // resolve the preview value it needs (this is cached in the runtime, so not likely to cause any fetch overhead)
    const previewStub = useMemo(() => ({ _id: previewId, _type: refType.name }), [previewId, refType.name]);
    return (React.createElement(Flex, { align: "center" },
        availability.available ? (React.createElement(Box, { flex: 1 }, renderPreview({
            layout,
            schemaType: refType,
            value: previewStub,
        }))) : (React.createElement(Box, { flex: 1 },
            React.createElement(Flex, { align: "center" },
                React.createElement(Box, { flex: 1, paddingY: 2 },
                    React.createElement(Text, { muted: true }, "Document unavailable"))))),
        React.createElement(Box, { paddingLeft: 3 },
            React.createElement(Inline, { space: 3 },
                showTypeLabel && (React.createElement(Label, { size: 1, muted: true }, refType.title)),
                insufficientPermissions || notFound ? (React.createElement(Box, null,
                    React.createElement(Tooltip, { portal: true, content: notFound ? (React.createElement(UnavailableMessage, { title: "Not found", icon: HelpCircleIcon },
                            "The referenced document does not exist",
                            React.createElement("br", null),
                            "(id: ",
                            React.createElement("code", null, id),
                            ")")) : (React.createElement(UnavailableMessage, { title: "Insufficcient permissions", icon: AccessDeniedIcon }, "The referenced document could not be accessed due to insufficient permissions")) },
                        React.createElement(TextWithTone, { tone: "default" },
                            React.createElement(HelpCircleIcon, null))))) : null,
                documentPresence && documentPresence.length > 0 && (React.createElement(DocumentPreviewPresence, { presence: documentPresence })),
                React.createElement(Inline, { space: 4 },
                    React.createElement(Box, null,
                        React.createElement(Tooltip, { content: React.createElement(Box, { padding: 2 },
                                React.createElement(Text, { size: 1 }, preview.published?._updatedAt ? (React.createElement(React.Fragment, null,
                                    "Published ",
                                    React.createElement(TimeAgo, { time: preview.published._updatedAt }))) : (React.createElement(React.Fragment, null, "Not published")))) },
                            React.createElement(TextWithTone, { tone: theme.tone === 'default' ? 'positive' : 'default', size: 1, dimmed: !preview.published, muted: !preview.published },
                                React.createElement(PublishIcon, null)))),
                    React.createElement(Box, null,
                        React.createElement(Tooltip, { content: React.createElement(Box, { padding: 2 },
                                React.createElement(Text, { size: 1 }, preview.draft?._updatedAt ? (React.createElement(React.Fragment, null,
                                    "Edited ",
                                    React.createElement(TimeAgo, { time: preview.draft._updatedAt }))) : (React.createElement(React.Fragment, null, "No unpublished edits")))) },
                            React.createElement(TextWithTone, { tone: theme.tone === 'default' ? 'caution' : 'default', size: 1, dimmed: !preview.draft, muted: !preview.draft },
                                React.createElement(EditIcon, null)))))))));
}
//# sourceMappingURL=ReferencePreview.js.map