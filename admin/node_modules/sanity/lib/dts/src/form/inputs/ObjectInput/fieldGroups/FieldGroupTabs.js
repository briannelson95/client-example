import React, { useCallback } from 'react';
import { ElementQuery, Select, TabList } from '@sanity/ui';
import styled from 'styled-components';
import { GroupOption, GroupTab } from './GroupTab';
const Root = styled(ElementQuery) `
  /* Hide on small screens */
  &[data-eq-max~='0'] [data-ui='TabList'] {
    display: none;
  }

  /* Hide on medium to large screens */
  [data-ui='Select'] {
    display: none;
  }

  /* Show on small screens */
  &[data-eq-max~='0'] [data-ui='Select'] {
    display: block;
  }
`;
/* For medium to large screens, use TabList and Tab from Sanity UI  */
const GroupTabs = ({ inputId, groups, onClick, shouldAutoFocus = true, disabled, }) => (React.createElement(TabList, { space: 2, "data-testid": "field-group-tabs" }, groups
    .map((group) => {
    return (React.createElement(GroupTab, { "aria-controls": `${inputId}-field-group-fields`, autoFocus: shouldAutoFocus && group.selected, disabled: disabled, icon: group?.icon, key: `${inputId}-${group.name}-tab`, name: group.name, onClick: onClick, selected: Boolean(group.selected), title: group.title || group.name }));
})
    .filter(Boolean)));
/* For small screens, use Select from Sanity UI  */
const GroupSelect = ({ groups, inputId, onSelect, shouldAutoFocus = true, disabled, }) => {
    const handleSelect = useCallback((event) => {
        onSelect(event.currentTarget.value);
    }, [onSelect]);
    return (React.createElement(Select, { fontSize: 2, onChange: handleSelect, muted: true, "data-testid": "field-group-select", "aria-label": "Field groups", autoFocus: shouldAutoFocus, disabled: disabled, value: groups.find((g) => g.selected)?.name }, groups.map((group) => {
        // Separate hidden in order to resolve it to a boolean type
        return (React.createElement(GroupOption, { key: `${inputId}-${group.name}-tab`, "aria-controls": `${inputId}-field-group-fields`, selected: Boolean(group.selected), disabled: group.disabled, name: group.name, title: group.title || group.name }));
    })));
};
export const FieldGroupTabs = React.memo(function FieldGroupTabs({ onClick, disabled = false, ...props }) {
    const handleClick = useCallback((groupName) => {
        onClick?.(groupName);
    }, [onClick]);
    return (React.createElement(Root, { "data-testid": "field-group-root" },
        React.createElement(GroupTabs, { ...props, disabled: disabled, onClick: handleClick }),
        React.createElement(GroupSelect, { ...props, disabled: disabled, onSelect: handleClick })));
});
//# sourceMappingURL=FieldGroupTabs.js.map