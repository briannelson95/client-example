import React, { MouseEvent } from 'react';
import { Rect } from './2d/shapes';
import type { Coordinate, CropHandles, ToolCanvasProps, ToolCanvasState } from './types';
export declare class ToolCanvas extends React.PureComponent<ToolCanvasProps, ToolCanvasState> {
    state: ToolCanvasState;
    canvas?: {
        domNode: HTMLCanvasElement;
    };
    getHotspotRect(): Rect;
    getCropRect(): Rect;
    getCropHandles(): CropHandles;
    getActiveCropHandleFor({ x, y }: Coordinate): false | keyof CropHandles;
    emitMove(pos: Coordinate): void;
    emitCropMove(pos: Coordinate): void;
    emitCrop(side: string | boolean, pos: Coordinate): void;
    emitResize(pos: Coordinate): void;
    getClampedValue(): {
        crop: Rect;
        hotspot: Rect;
    };
    paintHotspot(context: CanvasRenderingContext2D, opacity: number): void;
    getActualSize(): {
        height: number;
        width: number;
    };
    getDragHandleCoords(): {
        x: number;
        y: number;
        radius: number;
    };
    debug(context: CanvasRenderingContext2D): void;
    paintBackground(context: CanvasRenderingContext2D): void;
    paint(context: CanvasRenderingContext2D): void;
    paintMousePosition(context: CanvasRenderingContext2D): void;
    paintCropBorder(context: CanvasRenderingContext2D): void;
    highlightCropHandles(context: CanvasRenderingContext2D, opacity: number): void;
    getScale(): number;
    getCursor(): string;
    componentDidMount(): void;
    componentDidUpdate(): void;
    draw(): void;
    handleDragStart: ({ x, y }: Coordinate) => void;
    handleDrag: (pos: Coordinate) => void;
    handleDragEnd: () => void;
    handleMouseOut: () => void;
    handleMouseMove: (event: MouseEvent<HTMLCanvasElement>) => void;
    setCanvas: (node: {
        domNode: HTMLCanvasElement;
    }) => void;
    render(): JSX.Element;
}
//# sourceMappingURL=ToolCanvas.d.ts.map