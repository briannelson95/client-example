import React, { useMemo } from 'react';
import { BinaryDocumentIcon, AccessDeniedIcon, ImageIcon, ReadOnlyIcon } from '@sanity/icons';
import { Flex, Text } from '@sanity/ui';
import styled from 'styled-components';
const RootFlex = styled(Flex) `
  pointer-events: none;
`;
export function PlaceholderText(props) {
    const { hoveringFiles, type, readOnly, acceptedFiles, rejectedFilesCount, directUploads } = props;
    const isFileType = type === 'file';
    const messageIcon = useMemo(() => {
        if (readOnly) {
            return React.createElement(ReadOnlyIcon, null);
        }
        if ((hoveringFiles && rejectedFilesCount > 0) || !directUploads) {
            return React.createElement(AccessDeniedIcon, null);
        }
        return isFileType ? React.createElement(BinaryDocumentIcon, null) : React.createElement(ImageIcon, null);
    }, [directUploads, hoveringFiles, isFileType, readOnly, rejectedFilesCount]);
    const messageText = useMemo(() => {
        let message = `Drag or paste ${type} here`;
        if (!directUploads) {
            return `Can't upload files here`;
        }
        if (readOnly) {
            message = 'Read only';
        }
        if (hoveringFiles && directUploads && !readOnly) {
            if (acceptedFiles.length > 0) {
                message = `Drop to upload ${type}`;
            }
            if (rejectedFilesCount > 0) {
                message = `Can't upload ${rejectedFilesCount} file${rejectedFilesCount > 1 ? 's' : ''} here`;
            }
        }
        return message;
    }, [acceptedFiles.length, directUploads, hoveringFiles, readOnly, rejectedFilesCount, type]);
    return (React.createElement(RootFlex, { align: "center", gap: 2, justify: "center" },
        React.createElement(Text, { muted: true }, messageIcon),
        React.createElement(Text, { size: 1, muted: true }, messageText)));
}
//# sourceMappingURL=PlaceholderText.js.map