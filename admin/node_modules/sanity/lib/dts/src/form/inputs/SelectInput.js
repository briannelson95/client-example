import { useId } from '@reach/auto-id';
import { isTitledListValue } from '@sanity/types';
import { Box, Card, Flex, Inline, Radio, Select, Stack, Text } from '@sanity/ui';
import { capitalize } from 'lodash';
import React, { forwardRef, useCallback, useMemo } from 'react';
import { ChangeIndicator } from '../../components/changeIndicators';
import { PatchEvent, set, unset } from '../patch';
function toSelectItem(option) {
    return isTitledListValue(option) ? option : { title: capitalize(`${option}`), value: option };
}
const EMPTY_ITEM = { title: '', value: undefined };
export const SelectInput = React.forwardRef(function SelectInput(props, forwardedRef) {
    const { value, readOnly, validationError, schemaType, onChange, onFocus, path, changed, focused } = props;
    const items = useMemo(() => (schemaType.options?.list || []).map(toSelectItem), [schemaType.options?.list]);
    const currentItem = items.find((item) => item.value === value);
    const isRadio = schemaType.options && schemaType.options.layout === 'radio';
    const itemFromOptionValue = useCallback((optionValue) => {
        const index = Number(optionValue);
        return items[index];
    }, [items]);
    const optionValueFromItem = useCallback((item) => {
        return String(items.indexOf(item));
    }, [items]);
    const inputId = useId();
    const handleChange = React.useCallback((nextItem) => {
        onChange(PatchEvent.from(typeof nextItem?.value === 'undefined' ? unset() : set(nextItem.value)));
    }, [onChange]);
    const handleSelectChange = useCallback((event) => {
        const nextItem = itemFromOptionValue(event.currentTarget.value);
        if (!nextItem) {
            handleChange(EMPTY_ITEM);
            return;
        }
        handleChange(nextItem);
    }, [handleChange, itemFromOptionValue]);
    const content = isRadio ? (React.createElement(RadioSelect, { inputId: inputId, items: items, value: currentItem, onChange: handleChange, direction: schemaType.options?.direction || 'vertical', ref: forwardedRef, readOnly: readOnly, onFocus: onFocus, customValidity: validationError })) : (React.createElement(Select, { onChange: handleSelectChange, onFocus: onFocus, id: inputId, ref: forwardedRef, readOnly: readOnly, customValidity: validationError, value: optionValueFromItem(currentItem) }, [EMPTY_ITEM, ...items].map((item, i) => (React.createElement("option", { key: `${i - 1}`, value: i - 1 }, item.title)))));
    return (React.createElement(ChangeIndicator, { path: path, isChanged: changed, hasFocus: !!focused }, content));
});
const RadioSelect = forwardRef(function RadioSelect(props, ref) {
    const { items, value, onChange, onFocus, readOnly, customValidity, direction, inputId } = props;
    const Layout = direction === 'horizontal' ? Inline : Stack;
    return (React.createElement(Card, { border: true, padding: 3, radius: 1 },
        React.createElement(Layout, { space: 3, role: "group" }, items.map((item, index) => (React.createElement(RadioSelectItem, { customValidity: customValidity, inputId: inputId, item: item, key: index, onChange: onChange, onFocus: onFocus, readOnly: readOnly, ref: index === 0 ? ref : null, value: value }))))));
});
const RadioSelectItem = forwardRef(function RadioSelectItem(props, ref) {
    const { customValidity, inputId, item, onChange, onFocus, readOnly, value } = props;
    const handleChange = useCallback(() => {
        onChange(item);
    }, [item, onChange]);
    return (React.createElement(Flex, { as: "label", align: "center" },
        React.createElement(Radio, { ref: ref, checked: value === item, onChange: handleChange, onFocus: onFocus, readOnly: readOnly, customValidity: customValidity, name: inputId }),
        React.createElement(Box, { marginLeft: 2 },
            React.createElement(Text, { size: 1, weight: "semibold" }, item.title))));
});
//# sourceMappingURL=SelectInput.js.map