import { Grid, useElementRect } from '@sanity/ui';
import React, { forwardRef, useCallback, useState } from 'react';
import styled, { css } from 'styled-components';
const NARROW_LAYOUT = css `
  grid-template-columns: minmax(0px, 1fr);
`;
const WIDE_LAYOUT = css `
  grid-template-columns: 1fr min-content;
`;
const Root = styled(Grid)((props) => props.$narrow ? NARROW_LAYOUT : WIDE_LAYOUT);
export const AutocompleteContainer = forwardRef(function AutocompleteContainer(props, forwardedRef) {
    const [rootElement, setRootElement] = useState(null);
    const handleNewRef = useCallback((element) => {
        // there's a bit of "double bookkeeping" here. since useElementRect needs to re-run whenever the ref updates,
        // and thus we need to keep it in the state
        setForwardedRef(forwardedRef, element);
        setRootElement(element);
    }, [forwardedRef]);
    const inputWrapperRect = useElementRect(rootElement);
    return (React.createElement(Root, { ref: handleNewRef, gap: 1, "$narrow": (inputWrapperRect?.width || 0) < 480 }, props.children));
});
function setForwardedRef(ref, instance) {
    if (typeof ref === 'function') {
        ref(instance);
    }
    else if (ref) {
        ref.current = instance;
    }
}
//# sourceMappingURL=AutocompleteContainer.js.map