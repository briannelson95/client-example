import React from 'react';
import { Box, Flex, Inline, Label, Stack } from '@sanity/ui';
import { SanityDefaultPreview } from '../../../preview';
import { ReferencePreview } from './ReferencePreview';
export function PreviewReferenceValue(props) {
    const { referenceInfo, renderPreview, type, value } = props;
    if (referenceInfo.isLoading || referenceInfo.error) {
        return React.createElement(SanityDefaultPreview, { isPlaceholder: true });
    }
    const showTypeLabel = type.to.length > 1;
    if (referenceInfo.result?.availability.reason === 'NOT_FOUND' && value._strengthenOnPublish) {
        const refType = type.to.find((toType) => toType.name === value?._strengthenOnPublish?.type);
        if (!refType) {
            return React.createElement("div", null, "Invalid reference type");
        }
        if (value._strengthenOnPublish) {
            const stub = value._strengthenOnPublish?.type
                ? {
                    _id: value._ref,
                    _type: value._strengthenOnPublish?.type,
                }
                : value;
            return (React.createElement(Flex, { align: "center" },
                React.createElement(Box, { flex: 1 }, renderPreview({
                    layout: 'default',
                    schemaType: refType,
                    value: stub,
                })),
                React.createElement(Box, null,
                    React.createElement(Inline, { space: 4 }, showTypeLabel && (React.createElement(Label, { size: 1, muted: true }, refType.title))))));
        }
    }
    const refTypeName = referenceInfo.result?.type;
    const refType = type.to.find((toType) => toType.name === refTypeName);
    if (!refType) {
        return (React.createElement(Stack, { space: 2, padding: 2 },
            "The referenced document is of invalid type: (",
            refTypeName || 'unknown',
            ")",
            React.createElement("pre", null, JSON.stringify(value, null, 2))));
    }
    return (React.createElement(ReferencePreview, { availability: referenceInfo.result?.availability, id: value._ref, layout: "default", preview: referenceInfo.result?.preview, refType: refType, renderPreview: renderPreview, showTypeLabel: showTypeLabel }));
}
//# sourceMappingURL=PreviewReferenceValue.js.map