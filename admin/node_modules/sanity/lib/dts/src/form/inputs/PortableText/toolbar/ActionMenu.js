import React, { memo, useCallback, useMemo } from 'react';
import { Button } from '@sanity/ui';
import { EllipsisVerticalIcon } from '@sanity/icons';
import { PortableTextEditor, usePortableTextEditor } from '@sanity/portable-text-editor';
import { CollapseMenuButton, CollapseMenu } from '../../../../components/collapseMenu';
import { useActiveActionKeys, useFeatures, useFocusBlock } from './hooks';
import { getActionIcon } from './helpers';
const CollapseMenuMemo = memo(CollapseMenu);
const MENU_POPOVER_PROPS = { constrainSize: true, portal: true };
const COLLAPSE_BUTTON_PROPS = { padding: 2, mode: 'bleed' };
export const ActionMenu = memo(function ActionMenu(props) {
    const { disabled: disabledProp, groups, isFullscreen, collapsed } = props;
    const focusBlock = useFocusBlock();
    const features = useFeatures();
    const editor = usePortableTextEditor();
    const isVoidBlock = focusBlock?._type !== features.types.block.name;
    const isEmptyTextBlock = !isVoidBlock && focusBlock?.children.length === 1 && focusBlock?.children[0].text === '';
    const disabled = disabledProp || isVoidBlock;
    const actions = useMemo(() => groups.reduce((acc, group) => {
        return acc.concat(group.actions.map(
        // eslint-disable-next-line max-nested-callbacks
        (action, actionIndex) => {
            if (actionIndex === 0)
                return { ...action, firstInGroup: true };
            return action;
        }));
    }, []), [groups]);
    const activeKeys = useActiveActionKeys({ actions });
    const handleMenuClose = useCallback(() => {
        PortableTextEditor.focus(editor);
    }, [editor]);
    const children = useMemo(() => actions.map((action) => {
        const annotationDisabled = action.type === 'annotation' && isEmptyTextBlock;
        const active = activeKeys.includes(action.key);
        return (React.createElement(CollapseMenuButton, { disabled: disabled || annotationDisabled, ...COLLAPSE_BUTTON_PROPS, dividerBefore: action.firstInGroup, icon: getActionIcon(action, active), key: action.key, 
            // eslint-disable-next-line react/jsx-no-bind
            onClick: () => action.handle(active), selected: active, text: action.title || action.key, tooltipText: action.title || action.key, tooltipProps: {
                disabled: disabled || annotationDisabled,
                placement: isFullscreen ? 'bottom' : 'top',
                portal: 'default',
            } }));
    }), [actions, activeKeys, disabled, isEmptyTextBlock, isFullscreen]);
    const menuButtonProps = useMemo(() => ({
        button: React.createElement(Button, { icon: EllipsisVerticalIcon, mode: "bleed", padding: 2, disabled: disabled }),
        popover: MENU_POPOVER_PROPS,
    }), [disabled]);
    return (React.createElement(CollapseMenuMemo, { collapsed: collapsed, disableRestoreFocusOnClose: true, gap: 1, menuButtonProps: menuButtonProps, onMenuClose: handleMenuClose }, children));
});
//# sourceMappingURL=ActionMenu.js.map