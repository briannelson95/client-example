import React, { useCallback } from 'react';
import { UploadIcon, ClipboardIcon, ResetIcon, DownloadIcon } from '@sanity/icons';
import { Box, MenuItem, MenuDivider, Label, useToast } from '@sanity/ui';
import { FileInputMenuItem } from './FileInputMenuItem/FileInputMenuItem';
export function ActionsMenu(props) {
    const { onUpload, onReset, readOnly, accept, directUploads, browse, downloadUrl, copyUrl } = props;
    const { push: pushToast } = useToast();
    const handleCopyURL = useCallback(() => {
        navigator.clipboard.writeText(copyUrl || '');
        pushToast({ closable: true, status: 'success', title: 'The url is copied to the clipboard' });
    }, [pushToast, copyUrl]);
    return (React.createElement(React.Fragment, null,
        React.createElement(Box, { padding: 2 },
            React.createElement(Label, { muted: true, size: 1 }, "Replace")),
        React.createElement(FileInputMenuItem, { icon: UploadIcon, mode: "bleed", onSelect: onUpload, accept: accept, text: "Upload", "data-testid": "file-input-upload-button", disabled: readOnly || !directUploads, fontSize: 2 }),
        browse,
        (downloadUrl || copyUrl) && React.createElement(MenuDivider, null),
        downloadUrl && React.createElement(MenuItem, { as: "a", icon: DownloadIcon, text: "Download", href: downloadUrl }),
        copyUrl && React.createElement(MenuItem, { icon: ClipboardIcon, text: "Copy URL", onClick: handleCopyURL }),
        React.createElement(MenuDivider, null),
        React.createElement(MenuItem, { tone: "critical", icon: ResetIcon, text: "Clear field", onClick: onReset, disabled: readOnly, "data-testid": "file-input-clear" })));
}
//# sourceMappingURL=ActionsMenu.js.map