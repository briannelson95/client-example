import React from 'react';
import { Observable, Subscription } from 'rxjs';
import { AssetFromSource, AssetSource, File as BaseFile, FileAsset, FileSchemaType, Path, UploadState } from '@sanity/types';
import { ThemeColorToneKey, ToastParams } from '@sanity/ui';
import { SanityClient } from '@sanity/client';
import { Uploader, UploaderResolver, UploadOptions } from '../../../studio/uploads/types';
import { FileInfo } from '../common/styles';
import { FIXME, InputProps, ObjectInputProps } from '../../../types';
declare type DOMFile = globalThis.File;
export interface File extends Partial<BaseFile> {
    _upload?: UploadState;
}
export interface FileInputProps extends ObjectInputProps<File, FileSchemaType> {
    assetSources: AssetSource[];
    directUploads?: boolean;
    observeAsset: (documentId: string) => Observable<FileAsset>;
    resolveUploader: UploaderResolver;
    client: SanityClient;
}
declare type FileInputState = {
    isUploading: boolean;
    selectedAssetSource: AssetSource | null;
    hoveringFiles: FileInfo[];
    isStale: boolean;
    isMenuOpen: boolean;
};
declare type Focusable = {
    focus: () => void;
};
export declare class FileInput extends React.PureComponent<FileInputProps, FileInputState> {
    _focusRef: Focusable | null;
    _assetFieldPath: Path;
    uploadSubscription: Subscription | null;
    state: FileInputState;
    constructor(props: FileInputProps);
    toast: {
        push: (params: ToastParams) => void;
    } | null;
    handleRemoveButtonClick: () => void;
    clearUploadStatus(): void;
    cancelUpload(): void;
    handleCancelUpload: () => void;
    handleClearUploadState: () => void;
    handleStaleUpload: () => void;
    handleClearField: () => void;
    handleSelectFiles: (files: DOMFile[]) => void;
    handleSelectFileFromAssetSource: (source: AssetSource) => void;
    handleAssetSourceClosed: () => void;
    uploadFirstAccepted(files: DOMFile[]): void;
    uploadWith: (uploader: Uploader, file: DOMFile, assetDocumentProps?: UploadOptions) => void;
    renderUploadState(uploadState: UploadState): JSX.Element;
    renderAssetSource(): JSX.Element | null;
    handleSelectAssetFromSource: (assetFromSource: AssetFromSource[]) => void;
    hasFileTargetFocus(): boolean;
    handleFileTargetFocus: (event: FIXME) => void;
    handleFilesOver: (fileInfo: FileInfo[]) => void;
    handleFilesOut: () => void;
    renderAsset(): (inputProps: InputProps) => JSX.Element;
    renderPreview(): JSX.Element | null;
    renderAssetMenu(tone: ThemeColorToneKey): JSX.Element;
    renderBrowser(): JSX.Element | null;
    renderUploadPlaceholder(): JSX.Element;
    focus(): void;
    setFocusElement: (ref: Focusable | null) => void;
    handleUpload: ({ file, uploader }: {
        file: DOMFile;
        uploader: Uploader;
    }) => void;
    setToast: (toast: {
        push: (params: ToastParams) => void;
    }) => void;
    getFileTone(): "default" | "transparent" | "primary" | "critical";
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=FileInput.d.ts.map