import { TextArea } from '@sanity/ui';
import React, { forwardRef, useImperativeHandle, useRef } from 'react';
import styled, { css } from 'styled-components';
import { PortableTextInput } from '../../PortableTextInput';
import { defaultResolveInputComponent } from '../../../../studio/inputResolver/inputResolver';
const DebugTextArea = styled(TextArea)(({ theme }) => {
    return css `
    font-family: ${theme.sanity.fonts.code.family};
  `;
});
const DebugInput = forwardRef(function DebugInput(props, ref) {
    const rootRef = useRef(null);
    useImperativeHandle(ref, () => ({
        blur: () => rootRef.current?.blur(),
        focus: () => rootRef.current?.focus(),
    }));
    return (React.createElement(DebugTextArea, { padding: 3, radius: 1, readOnly: true, ref: rootRef, rows: 10, value: JSON.stringify(props.value, null, 2) }));
});
export function inputResolver(input, form) {
    if (!input.type) {
        throw new Error('inputResolver: missing subtype');
    }
    if (input.type.name === 'block') {
        return PortableTextInput;
    }
    // if (input.type.name === 'document') {
    //   // @TODO: remove this mutation
    //   input.type.name = 'object'
    // }
    return defaultResolveInputComponent(input.type) || DebugInput;
}
//# sourceMappingURL=input.js.map