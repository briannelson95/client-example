/// <reference types="lodash" />
import React from 'react';
import type { Crop, Hotspot } from './types';
export interface HotspotImageProps {
    src: string;
    srcAspectRatio: number;
    srcSet?: string;
    hotspot?: Hotspot;
    crop?: Crop;
    aspectRatio?: number | 'auto' | 'none';
    alignX?: 'left' | 'center' | 'right';
    alignY?: 'top' | 'center' | 'bottom';
    className?: string;
    style?: React.CSSProperties;
    alt?: string;
    onError?: (event: React.SyntheticEvent<HTMLImageElement, Event>) => void;
    onLoad?: () => void;
}
export interface HotspotImageState {
    containerAspect: number | null;
}
export declare class HotspotImage extends React.PureComponent<HotspotImageProps, HotspotImageState> {
    static defaultProps: {
        alignX: string;
        alignY: string;
        className: string;
        crop: Crop;
        hotspot: Hotspot;
        aspectRatio: string;
    };
    state: HotspotImageState;
    containerElement: HTMLDivElement | null;
    imageElement: HTMLImageElement | null;
    componentDidMount(): void;
    componentWillUnmount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: HotspotImageProps): void;
    updateContainerAspect(props: HotspotImageProps): void;
    getTargetAspectValue(): number | null;
    setImageElement: (el: HTMLImageElement | null) => void;
    handleResize: import("lodash").DebouncedFunc<() => void>;
    setContainerElement: (el: HTMLDivElement | null) => void;
    render(): JSX.Element;
}
//# sourceMappingURL=HotspotImage.d.ts.map