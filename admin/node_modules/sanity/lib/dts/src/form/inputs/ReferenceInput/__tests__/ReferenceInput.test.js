import { render } from '@testing-library/react';
import React, { forwardRef, useImperativeHandle } from 'react';
import Schema from '@sanity/schema';
import { LayerProvider, studioTheme, ThemeProvider, ToastProvider } from '@sanity/ui';
import { of } from 'rxjs';
import { noop } from 'lodash';
import { RouterProvider, route } from '../../../../router';
import { ReferenceInput } from '../ReferenceInput';
const EMPTY_SEARCH = () => of([]);
const AVAILABLE = {
    available: true,
    reason: 'READABLE',
};
const UNAVAILABLE_NOT_FOUND = {
    available: false,
    reason: 'NOT_FOUND',
};
const UNAVAILABLE_PERMISSION_DENIED = {
    available: false,
    reason: 'PERMISSION_DENIED',
};
const infinityNoop = new Proxy(() => infinityNoop, { get: () => infinityNoop });
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const StubComponent = forwardRef(({ documentId, documentType }, ref) => {
    useImperativeHandle(ref, () => infinityNoop, []);
    return null;
});
StubComponent.displayName = 'StubComponent';
function ReferenceInputTester(props) {
    const onFocus = jest.fn();
    const onChange = jest.fn();
    return (React.createElement(RouterProvider, { router: route.intents('/intents'), state: {}, onNavigate: noop },
        React.createElement(ThemeProvider, { scheme: "light", theme: studioTheme },
            React.createElement(ToastProvider, null,
                React.createElement(LayerProvider, null,
                    React.createElement(ReferenceInput, { onFocus: onFocus, onChange: onChange, validation: [], level: 0, liveEdit: false, focusPath: [], presence: [], onSearch: EMPTY_SEARCH, createOptions: [], editReferenceLinkComponent: StubComponent, onEditReference: noop, ...props }))))));
}
function ReferenceInfoTester(props) {
    const schema = Schema.compile({
        types: [
            { name: 'actor', type: 'document', fields: [{ name: 'name', type: 'string' }] },
            { name: 'actorReference', type: 'reference', weak: props.typeIsWeakRef, to: [{ type: 'actor' }] },
        ],
    });
    return (React.createElement(ReferenceInputTester, { getReferenceInfo: (id) => of(props.referenceInfo), onSearch: EMPTY_SEARCH, focusPath: props.isEditing ? ['_ref'] : [], schemaType: schema.get('actorReference'), value: props.value }));
}
const PUBLISHED_PREVIEW = { title: 'Actor (published)', description: '' };
const DRAFT_PREVIEW = { title: 'Actor (draft)', description: '' };
describe('if schema type is a strong reference', () => {
    test('the UI does *NOT* show a warning if the draft exist and the reference value is weak and has a _strengthenOnPublish flag', () => {
        const { getByTestId, queryByTestId } = render(React.createElement(ReferenceInfoTester, { value: {
                _type: 'reference',
                _ref: 'someActor',
                _weak: true,
                _strengthenOnPublish: { type: 'actor' },
            }, referenceInfo: {
                id: 'someActor',
                type: 'actorReference',
                availability: AVAILABLE,
                preview: {
                    published: undefined,
                    draft: DRAFT_PREVIEW,
                },
            } }));
        expect(queryByTestId('alert-nonexistent-document')).toBe(null);
    });
    test('the UI shows a warning if the document is published and the value is is weak', () => {
        const { getByTestId, queryByTestId } = render(React.createElement(ReferenceInfoTester, { value: { _type: 'reference', _weak: true, _ref: 'someActor' }, referenceInfo: {
                id: 'someActor',
                type: 'actorReference',
                availability: AVAILABLE,
                preview: {
                    published: undefined,
                    draft: DRAFT_PREVIEW,
                },
            } }));
        expect(queryByTestId('alert-reference-strength-mismatch')).toBeInTheDocument();
    });
});
describe('if schema type is a weak reference', () => {
    test('the UI indicates that the referenced document does not exist', () => {
        const { getByTestId } = render(React.createElement(ReferenceInfoTester, { typeIsWeakRef: true, value: { _type: 'reference', _weak: true, _ref: 'someActor' }, referenceInfo: {
                id: 'someActor',
                type: 'actorReference',
                availability: UNAVAILABLE_NOT_FOUND,
                preview: {
                    published: PUBLISHED_PREVIEW,
                    draft: DRAFT_PREVIEW,
                },
            } }));
        expect(getByTestId('alert-nonexistent-document')).toBeInTheDocument();
    });
    test('a warning is visible if the reference value is strong while the schema says it should be weak', () => {
        const { getByTestId } = render(React.createElement(ReferenceInfoTester, { typeIsWeakRef: true, value: { _type: 'reference', _ref: 'someActor' }, referenceInfo: {
                id: 'someActor',
                type: 'actorReference',
                availability: AVAILABLE,
                preview: {
                    published: PUBLISHED_PREVIEW,
                    draft: DRAFT_PREVIEW,
                },
            } }));
        expect(getByTestId('alert-reference-strength-mismatch')).toBeInTheDocument();
    });
});
//# sourceMappingURL=ReferenceInput.test.js.map