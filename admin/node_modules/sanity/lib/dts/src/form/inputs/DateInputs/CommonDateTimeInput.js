/* eslint-disable no-nested-ternary */
import React, { useEffect } from 'react';
import { TextInput, useForwardedRef } from '@sanity/ui';
import { DateTimeInput } from './base/DateTimeInput';
const DEFAULT_PLACEHOLDER_TIME = new Date();
export const CommonDateTimeInput = React.forwardRef(function CommonDateTimeInput(props, ref) {
    const { id, deserialize, formatInputValue, onChange, parseInputValue, placeholder, readOnly, selectTime, serialize, timeStep, value, ...restProps } = props;
    const [localValue, setLocalValue] = React.useState(null);
    useEffect(() => {
        setLocalValue(null);
    }, [value]);
    const handleDatePickerInputChange = React.useCallback((event) => {
        const nextInputValue = event.currentTarget.value;
        const result = nextInputValue === '' ? null : parseInputValue(nextInputValue);
        if (result === null) {
            onChange(null);
            // If the field value is undefined and we are clearing the invalid value
            // the above useEffect won't trigger, so we do some extra clean up here
            if (typeof value === 'undefined' && localValue) {
                setLocalValue(null);
            }
        }
        else if (result.isValid) {
            onChange(serialize(result.date));
        }
        else {
            setLocalValue(nextInputValue);
        }
    }, [localValue, serialize, onChange, parseInputValue]);
    const handleDatePickerChange = React.useCallback((nextDate) => {
        onChange(nextDate ? serialize(nextDate) : null);
    }, [serialize, onChange]);
    const forwardedRef = useForwardedRef(ref);
    const parseResult = localValue ? parseInputValue(localValue) : value ? deserialize(value) : null;
    const inputValue = localValue
        ? localValue
        : parseResult?.isValid
            ? formatInputValue(parseResult.date)
            : value;
    return readOnly ? (React.createElement(TextInput, { value: inputValue, readOnly: true })) : (React.createElement(DateTimeInput, { ...restProps, id: id, selectTime: selectTime, timeStep: timeStep, placeholder: placeholder || `e.g. ${formatInputValue(DEFAULT_PLACEHOLDER_TIME)}`, ref: forwardedRef, value: parseResult?.date, inputValue: inputValue || '', readOnly: Boolean(readOnly), onInputChange: handleDatePickerInputChange, onChange: handleDatePickerChange, customValidity: parseResult?.error }));
});
//# sourceMappingURL=CommonDateTimeInput.js.map