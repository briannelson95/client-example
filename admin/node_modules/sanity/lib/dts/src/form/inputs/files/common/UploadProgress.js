import React, { useEffect } from 'react';
import { Flex, Text, Button, Inline, Card } from '@sanity/ui';
import { LinearProgress } from '../../../../components/progress';
import { CardWrapper, FlexWrapper, LeftSection, CodeWrapper } from './UploadProgress.styled';
// If it's more than this amount of milliseconds since last time upload state was reported,
// the upload will be marked as stale/interrupted.
const STALE_UPLOAD_MS = 1000 * 60 * 2; // 2 minutes
const elapsedMs = (date) => new Date().getTime() - new Date(date).getTime();
export function UploadProgress({ uploadState, onCancel, onStale, height }) {
    const filename = uploadState.file.name;
    useEffect(() => {
        if (elapsedMs(uploadState.updated) > STALE_UPLOAD_MS) {
            onStale?.();
        }
    }, [uploadState.updated, onStale]);
    return (React.createElement(CardWrapper, { tone: "primary", padding: 4, border: true, style: { height: `${height}px` } },
        React.createElement(FlexWrapper, { align: "center", justify: "space-between", height: "fill", direction: "row", gap: 2 },
            React.createElement(LeftSection, null,
                React.createElement(Flex, { justify: "center", gap: [3, 3, 2, 2], direction: ['column', 'column', 'row'] },
                    React.createElement(Text, { size: 1 },
                        React.createElement(Inline, { space: 2 },
                            "Uploading",
                            React.createElement(CodeWrapper, { size: 1 }, filename ? filename : '...')))),
                React.createElement(Card, { marginTop: 3, radius: 5, shadow: 1 },
                    React.createElement(LinearProgress, { value: uploadState.progress }))),
            onCancel ? (React.createElement(Button, { fontSize: 2, text: "Cancel upload", mode: "ghost", tone: "critical", onClick: onCancel })) : null)));
}
//# sourceMappingURL=UploadProgress.js.map