import { ErrorOutlineIcon, InfoOutlineIcon, WarningOutlineIcon } from '@sanity/icons';
import { Box, Flex, Stack, Text } from '@sanity/ui';
import React from 'react';
import styled, { css } from 'styled-components';
import { useFormBuilder } from '../../../useFormBuilder';
const getIcon = (level) => {
    if (level === 'error') {
        return React.createElement(ErrorOutlineIcon, null);
    }
    if (level === 'warning') {
        return React.createElement(WarningOutlineIcon, null);
    }
    return React.createElement(InfoOutlineIcon, null);
};
const IconText = styled(Text)(({ theme }) => {
    return css `
    &[data-info] {
      color: ${theme.sanity.color.muted.primary.enabled.fg};
    }

    &[data-warning] {
      color: ${theme.sanity.color.muted.caution.enabled.fg};
    }

    &[data-error] {
      color: ${theme.sanity.color.muted.critical.enabled.fg};
    }
  `;
});
export function DefaultMarkers(props) {
    const { markers, validation, renderCustomMarkers } = props;
    const { CustomMarkers } = useFormBuilder().__internal.components;
    if (markers.length === 0 && validation.length === 0) {
        return null;
    }
    return (React.createElement(Stack, { space: 1 },
        validation.length > 0 &&
            validation.map(({ message, level }, index) => (
            // eslint-disable-next-line react/no-array-index-key
            React.createElement(Flex, { key: `validationItem-${index}` },
                React.createElement(Box, { marginRight: 2, marginBottom: index + 1 === validation.length ? 0 : 2 },
                    React.createElement(IconText, { size: 1, "data-error": level === 'error' ? '' : undefined, "data-warning": level === 'warning' ? '' : undefined, "data-info": level === 'info' ? '' : undefined }, getIcon(level))),
                React.createElement(Box, null,
                    React.createElement(Text, { size: 1 }, message || 'Error'))))),
        markers.length > 0 && (React.createElement(Box, { marginTop: validation.length > 0 ? 3 : 0 },
            renderCustomMarkers && renderCustomMarkers(markers),
            !renderCustomMarkers && React.createElement(CustomMarkers, { markers: markers })))));
}
//# sourceMappingURL=Markers.js.map