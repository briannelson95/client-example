import { Card, Grid } from '@sanity/ui';
import React from 'react';
import styled from 'styled-components';
import { MOVING_ITEM_CLASS_NAME, sortableGrid, sortableItem, sortableList } from './sortable';
const ListItem = styled(Card) `
  &.${MOVING_ITEM_CLASS_NAME} {
    z-index: 10000;
    border-radius: ${({ theme }) => theme.sanity.radius[2]}px;
    box-shadow: 0 0 0 0, 0 8px 17px 2px var(--card-shadow-umbra-color),
      0 3px 14px 2px var(--card-shadow-penumbra-color),
      0 5px 5px -3px var(--card-shadow-ambient-color);

    // Used inside CellItem
    [data-ui='DragHandleCard'] {
      opacity: 1;
    }

    [data-ui='DragHandleButton'] {
      background-color: ${({ theme }) => theme.sanity.color.button.bleed.primary.pressed.bg};
      color: ${({ theme }) => theme.sanity.color.button.bleed.primary.pressed.fg};
      [data-ui='Text'] {
        color: inherit;
      }
    }
  }
`;
const GridItem = ListItem;
const SortableList = sortableList(Grid);
const SortableListItem = sortableItem(ListItem);
const SortableGrid = sortableGrid(Grid);
const SortableGridItem = SortableListItem;
export function List(props) {
    const { isSortable, isGrid, onSortEnd, ...rest } = props;
    if (isGrid) {
        return isSortable ? (React.createElement(SortableGrid, { columns: [2, 3, 4], gap: 3, onSortEnd: onSortEnd, ...rest })) : (React.createElement(Grid, { columns: [2, 3, 4], gap: 3, ...rest }));
    }
    return isSortable ? (React.createElement(SortableList, { gap: 1, onSortEnd: onSortEnd, ...rest })) : (React.createElement(Grid, { gap: 1, ...rest }));
}
export function Item(props) {
    const { isSortable, isGrid, ...rest } = props;
    if (isGrid) {
        const ItemComponent = isSortable ? SortableGridItem : GridItem;
        return React.createElement(ItemComponent, { ...rest });
    }
    const ItemComponent = isSortable ? SortableListItem : ListItem;
    return React.createElement(ItemComponent, { ...rest });
}
//# sourceMappingURL=list.js.map