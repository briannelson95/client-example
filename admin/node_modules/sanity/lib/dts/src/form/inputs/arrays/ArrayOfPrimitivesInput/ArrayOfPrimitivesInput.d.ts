import React from 'react';
import { ArraySchemaType } from '@sanity/types';
import { ArrayOfPrimitivesInputProps, FormArrayInputFunctionsProps } from '../../../types';
import { PrimitiveItemProps } from '../../../types/itemProps';
import { PrimitiveValue } from './types';
export interface DefaultArrayOfPrimitivesInputProps extends ArrayOfPrimitivesInputProps {
    ArrayFunctionsImpl: React.ComponentType<FormArrayInputFunctionsProps<ArraySchemaType<PrimitiveValue[]>, PrimitiveValue>>;
}
export declare class ArrayOfPrimitivesInput extends React.PureComponent<DefaultArrayOfPrimitivesInputProps> {
    _element: HTMLElement | null;
    _lastAddedIndex: number;
    handleAppend: (itemValue: PrimitiveValue) => void;
    handlePrepend: (itemValue: PrimitiveValue) => void;
    handleItemEnterKey: (index: number) => void;
    handleItemEscapeKey: (index: number) => void;
    handleSortEnd: (event: {
        oldIndex: number;
        newIndex: number;
    }) => void;
    setElement: (el: HTMLElement | null) => void;
    focus(): void;
    handleFocusRoot: (event: React.FocusEvent<HTMLDivElement>) => void;
    getSnapshotBeforeUpdate(prevProps: ArrayOfPrimitivesInputProps): {
        prevFocusedIndex: import("@sanity/types").PathSegment;
        restoreSelection: {
            text: string;
            start: number | null;
            end: number | null;
            value: string;
        };
    } | {
        prevFocusedIndex?: undefined;
        restoreSelection?: undefined;
    } | null;
    componentDidUpdate(prevProps: ArrayOfPrimitivesInputProps, prevState: Record<string, unknown>, snapshot?: {
        restoreSelection: {
            start: number;
            end: number;
        };
        prevFocusedIndex: number;
    }): void;
    renderItem: (props: PrimitiveItemProps) => JSX.Element;
    render(): JSX.Element;
}
//# sourceMappingURL=ArrayOfPrimitivesInput.d.ts.map