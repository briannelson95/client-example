/* eslint-disable react/no-unused-prop-types */
import { CloseIcon } from '@sanity/icons';
import { Box, Button, Container, Flex, Popover, PortalProvider, Text, useBoundaryElement, useClickOutside, useElementRect, useGlobalKeyDown, usePortal, } from '@sanity/ui';
import React, { useCallback, useEffect, useMemo, useState } from 'react';
import styled from 'styled-components';
import { PresenceOverlay } from '../../../../../presence';
import { debugElement } from './debug';
const RootPopover = styled(Popover) `
  &[data-popper-reference-hidden='true'] {
    visibility: hidden;
    pointer-events: none;
  }

  & > div {
    overflow: hidden;
  }
`;
const ContentContainer = styled(Container) `
  &:not([hidden]) {
    display: flex;
  }
  direction: column;
`;
const ContentScrollerBox = styled(Box) `
  /* Prevent overflow caused by change indicator */
  overflow-x: hidden;
  overflow-y: auto;
`;
const ContentHeaderBox = styled(Box) `
  background-color: var(--card-bg-color);
  box-shadow: 0 1px 0 var(--card-shadow-outline-color);
  position: relative;
  z-index: 10;
  min-height: auto;
`;
const POPOVER_FALLBACK_PLACEMENTS = ['top', 'bottom'];
export function PopoverEditDialog(props) {
    const { width, elementRef, onClose, scrollElement } = props;
    useGlobalKeyDown(useCallback((event) => {
        if (event.key === 'Escape') {
            onClose();
        }
    }, [onClose]));
    const [forceUpdate, setForceUpdate] = useState(0);
    const virtualElement = useMemo(() => {
        if (!elementRef?.current?.getBoundingClientRect()) {
            return null;
        }
        return {
            contextElement: elementRef.current || undefined,
            getBoundingClientRect: () => {
                return elementRef.current?.getBoundingClientRect() || null;
            },
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [elementRef?.current, forceUpdate]);
    const [rootElement, setRootElement] = useState(null);
    const boundaryElement = useBoundaryElement();
    const boundaryElementRect = useElementRect(boundaryElement.element);
    const contentStyle = useMemo(() => ({
        opacity: boundaryElementRect ? undefined : 0,
        width: boundaryElementRect ? `${boundaryElementRect.width - 16}px` : undefined,
    }), [boundaryElementRect]);
    const handleScrollOrResize = useCallback(() => {
        setForceUpdate(forceUpdate + 1);
    }, [forceUpdate]);
    useEffect(() => {
        if (scrollElement) {
            scrollElement.addEventListener('scroll', handleScrollOrResize, true);
        }
        return () => {
            if (scrollElement) {
                scrollElement.removeEventListener('scroll', handleScrollOrResize, true);
            }
        };
    }, [handleScrollOrResize, scrollElement]);
    return (React.createElement(RootPopover, { constrainSize: true, content: React.createElement(Content, { ...props, rootElement: rootElement, style: contentStyle, width: width }), fallbackPlacements: POPOVER_FALLBACK_PLACEMENTS, placement: "bottom", open: true, portal: "default", ref: setRootElement, referenceElement: virtualElement || debugElement }));
}
function Content(props) {
    const { onClose, rootElement, style, width = 0, title } = props;
    const { element: boundaryElement } = useBoundaryElement();
    const portal = usePortal();
    useClickOutside(onClose, [rootElement], boundaryElement);
    return (React.createElement(ContentContainer, { style: style, width: width },
        React.createElement(Flex, { direction: "column", flex: 1 },
            React.createElement(ContentHeaderBox, { padding: 1 },
                React.createElement(Flex, { align: "center" },
                    React.createElement(Box, { flex: 1, padding: 2 },
                        React.createElement(Text, { weight: "semibold" }, title)),
                    React.createElement(Button, { icon: CloseIcon, mode: "bleed", onClick: onClose, padding: 2 }))),
            React.createElement(ContentScrollerBox, { flex: 1 },
                React.createElement(PresenceOverlay, { margins: [0, 0, 1, 0] },
                    React.createElement(Box, { padding: 3 },
                        React.createElement(PortalProvider, { element: portal.elements?.default }, props.children)))))));
}
//# sourceMappingURL=PopoverEditDialog.js.map