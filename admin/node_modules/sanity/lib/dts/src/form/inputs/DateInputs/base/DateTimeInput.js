import React, { forwardRef, useCallback, useRef, useState } from 'react';
import FocusLock from 'react-focus-lock';
import { Box, Button, LayerProvider, Popover, useClickOutside, useForwardedRef } from '@sanity/ui';
import { CalendarIcon } from '@sanity/icons';
import { DatePicker } from './DatePicker';
import { LazyTextInput } from './LazyTextInput';
export const DateTimeInput = forwardRef(function DateTimeInput(props, ref) {
    const { value, inputValue, onInputChange, onChange, selectTime, timeStep, ...rest } = props;
    const [popoverRef, setPopoverRef] = useState(null);
    const forwardedRef = useForwardedRef(ref);
    const buttonRef = useRef(null);
    const [isPickerOpen, setPickerOpen] = useState(false);
    useClickOutside(() => setPickerOpen(false), [popoverRef]);
    const handleDeactivation = useCallback(() => {
        forwardedRef.current?.focus();
        forwardedRef.current?.select();
    }, [forwardedRef]);
    const handleKeyUp = useCallback((e) => {
        if (e.key === 'Escape') {
            setPickerOpen(false);
        }
    }, []);
    const handleClick = useCallback(() => setPickerOpen(true), []);
    const suffix = (React.createElement(Box, { padding: 1 },
        React.createElement(Button, { ref: buttonRef, icon: CalendarIcon, mode: "bleed", padding: 2, onClick: handleClick, style: { display: 'block' }, "data-testid": "select-date-button" })));
    return (React.createElement(LazyTextInput, { ref: forwardedRef, ...rest, value: inputValue, onChange: onInputChange, suffix: isPickerOpen ? (
        // Note: we're conditionally inserting the popover here due to an
        // issue with popovers rendering incorrectly on subsequent renders
        // see https://github.com/sanity-io/design/issues/519
        React.createElement(LayerProvider, { zOffset: 1000 },
            React.createElement(Popover, { constrainSize: true, "data-testid": "date-input-dialog", portal: true, content: React.createElement(Box, { overflow: "auto" },
                    React.createElement(FocusLock, { onDeactivation: handleDeactivation },
                        React.createElement(DatePicker, { selectTime: selectTime, timeStep: timeStep, onKeyUp: handleKeyUp, value: value, onChange: onChange }))), open: true, placement: "bottom-end", ref: setPopoverRef, radius: 2 }, suffix))) : (suffix) }));
});
//# sourceMappingURL=DateTimeInput.js.map