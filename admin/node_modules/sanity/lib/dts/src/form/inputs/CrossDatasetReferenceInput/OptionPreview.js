/* eslint-disable max-nested-callbacks,no-nested-ternary */
import React from 'react';
import { Stack, TextSkeleton } from '@sanity/ui';
import { Alert } from '../../components/Alert';
import { useReferenceInfo } from './useReferenceInfo';
import { CrossDatasetReferencePreview } from './CrossDatasetReferencePreview';
/**
 * Used to preview a referenced type
 * Takes as props the referenced document, the reference type and a hook to subscribe to
 * in order to listen for the reference info
 * @param props
 * @constructor
 */
export function OptionPreview(props) {
    const { isLoading, result: referenceInfo, error, } = useReferenceInfo(props.document, props.getReferenceInfo);
    if (isLoading) {
        return (React.createElement(Stack, { space: 2, padding: 1 },
            React.createElement(TextSkeleton, { style: { maxWidth: 320 }, radius: 1, animated: true }),
            React.createElement(TextSkeleton, { style: { maxWidth: 200 }, radius: 1, size: 1, animated: true })));
    }
    if (error) {
        return (React.createElement(Stack, { space: 2, padding: 1 },
            React.createElement(Alert, { title: "Failed to load referenced document" },
                "Error: ",
                error.message)));
    }
    if (!referenceInfo) {
        return null;
    }
    if (referenceInfo.availability?.reason === 'PERMISSION_DENIED') {
        return (React.createElement(Stack, { space: 2, padding: 1 }, "Insufficient permissions to view this document"));
    }
    const refType = props.referenceType.to.find((toEntry) => toEntry.type === referenceInfo.type);
    if (!refType) {
        return (React.createElement(Stack, { space: 2, padding: 1 },
            "Search returned a type that's not valid for this reference: \"$",
            referenceInfo.type,
            "\""));
    }
    return (referenceInfo &&
        refType && (React.createElement(CrossDatasetReferencePreview, { id: referenceInfo.id, availability: referenceInfo.availability, preview: referenceInfo.preview, refType: refType, dataset: props.referenceType.dataset, projectId: props.referenceType.projectId, showTypeLabel: props.referenceType.to.length > 1 })));
}
//# sourceMappingURL=OptionPreview.js.map