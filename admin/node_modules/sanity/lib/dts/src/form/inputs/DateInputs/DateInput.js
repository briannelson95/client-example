import React, { useCallback } from 'react';
import { format, parse } from '@sanity/util/legacyDateFormat';
import { set, unset } from '../../patch';
import { ChangeIndicator } from '../../../components/changeIndicators';
import { CommonDateTimeInput } from './CommonDateTimeInput';
// This is the format dates are stored on
const VALUE_FORMAT = 'YYYY-MM-DD';
// default to how they are stored
const DEFAULT_DATE_FORMAT = VALUE_FORMAT;
function parseOptions(options = {}) {
    return {
        dateFormat: options.dateFormat || DEFAULT_DATE_FORMAT,
        calendarTodayLabel: options.calendarTodayLabel || 'Today',
    };
}
const deserialize = (value) => parse(value, VALUE_FORMAT);
const serialize = (date) => format(date, VALUE_FORMAT);
export function DateInput(props) {
    const { id, readOnly, onChange, schemaType, focusRef, path, focused, changed, value } = props;
    const { dateFormat } = parseOptions(schemaType.options);
    const handleChange = useCallback((nextDate) => {
        onChange(nextDate === null ? unset() : set(nextDate));
    }, [onChange]);
    const formatInputValue = useCallback((date) => format(date, dateFormat), [dateFormat]);
    const parseInputValue = useCallback((inputValue) => parse(inputValue, dateFormat), [dateFormat]);
    return (React.createElement(ChangeIndicator, { path: path, isChanged: changed, hasFocus: !!focused },
        React.createElement(CommonDateTimeInput, { deserialize: deserialize, formatInputValue: formatInputValue, id: id, onChange: handleChange, parseInputValue: parseInputValue, placeholder: schemaType.placeholder, readOnly: readOnly, ref: focusRef, selectTime: false, serialize: serialize, value: value })));
}
//# sourceMappingURL=DateInput.js.map