import { ToastParams } from '@sanity/ui';
import { Observable, Subscription } from 'rxjs';
import { AssetFromSource, AssetSource, Image as BaseImage, ImageAsset, ImageSchemaType, Path, UploadState } from '@sanity/types';
import React from 'react';
import { SanityClient } from '@sanity/client';
import { PatchEvent } from '../../../patch';
import { InputProps, ObjectInputProps } from '../../../types';
import { ResolvedUploader, Uploader, UploaderResolver, UploadOptions } from '../../../studio/uploads/types';
import { ImageUrlBuilder } from '../types';
export interface Image extends Partial<BaseImage> {
    _upload?: UploadState;
}
export interface ImageInputProps extends ObjectInputProps<Image, ImageSchemaType> {
    assetSources: AssetSource[];
    directUploads?: boolean;
    imageUrlBuilder: ImageUrlBuilder;
    observeAsset: (documentId: string) => Observable<ImageAsset>;
    resolveUploader: UploaderResolver;
    client: SanityClient;
}
declare type FileInfo = {
    type: string;
    kind: string;
};
declare type ImageInputState = {
    isUploading: boolean;
    selectedAssetSource: AssetSource | null;
    hoveringFiles: FileInfo[];
    isStale: boolean;
    isMenuOpen: boolean;
};
declare type Focusable = {
    focus: () => void;
    offsetHeight: number;
};
export declare class ImageInput extends React.PureComponent<ImageInputProps, ImageInputState> {
    _assetElementRef: null | Focusable;
    _assetPath: Path;
    uploadSubscription: null | Subscription;
    state: ImageInputState;
    constructor(props: ImageInputProps);
    toast: {
        push: (params: ToastParams) => void;
    } | null;
    focus(): void;
    setFocusElement: (el: HTMLElement | null) => void;
    isImageToolEnabled(): boolean;
    clearUploadStatus(): void;
    cancelUpload(): void;
    getUploadOptions: (file: File) => ResolvedUploader[];
    uploadFirstAccepted(files: File[]): void;
    uploadWith: (uploader: Uploader, file: File, assetDocumentProps?: UploadOptions) => void;
    handleRemoveButtonClick: () => void;
    handleFieldChange: (event: PatchEvent) => void;
    eventIsUnsettingLastFilledField: (event: PatchEvent) => boolean;
    valueIsArrayElement: () => boolean;
    handleOpenDialog: () => void;
    handleCloseDialog: () => void;
    handleSelectAssetFromSource: (assetFromSource: AssetFromSource[]) => void;
    handleFilesOver: (hoveringFiles: FileInfo[]) => void;
    handleFilesOut: () => void;
    handleCancelUpload: () => void;
    handleClearUploadState: () => void;
    handleStaleUpload: () => void;
    handleClearField: () => void;
    handleSelectFiles: (files: File[]) => void;
    handleSelectImageFromAssetSource: (source: AssetSource) => void;
    handleAssetSourceClosed: () => void;
    renderHotspotInput: (hotspotInputProps: InputProps) => JSX.Element;
    renderPreview: () => JSX.Element | null;
    renderAssetMenu(): JSX.Element | null;
    renderBrowser(): JSX.Element | null;
    renderUploadPlaceholder(): JSX.Element;
    renderUploadState(uploadState: UploadState): JSX.Element;
    renderAssetSource(): JSX.Element | null;
    setToast: (toast: {
        push: (params: ToastParams) => void;
    }) => void;
    getFileTone(): "default" | "transparent" | "primary" | "critical";
    renderAsset(): (inputProps: InputProps) => JSX.Element;
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=ImageInput.d.ts.map