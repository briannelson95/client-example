/* eslint-disable react/no-unused-prop-types */
import React from 'react';
import { decodePath, encodePath } from '../../utils/path';
function getHash() {
    return decodeURIComponent(document.location.hash.substring(1));
}
function getPathFromHash() {
    const hash = getHash();
    return hash ? decodePath(hash) : [];
}
/**
 * An example of how to sync focus path through document.location.hash
 */
export class HashFocusManager extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            focusPath: getPathFromHash(),
        };
        this.handleHashChange = () => {
            this.setState({ focusPath: getPathFromHash() });
        };
        this.handleFocus = (focusPath) => {
            document.location.hash = encodePath(focusPath);
        };
        this.handleBlur = () => {
            // this.setState({focusPath: []})
        };
    }
    componentDidMount() {
        window.addEventListener('hashchange', this.handleHashChange, false);
    }
    componentWillUnmount() {
        window.removeEventListener('hashchange', this.handleHashChange, false);
    }
    render() {
        return this.props.children({
            onBlur: this.handleBlur,
            onFocus: this.handleFocus,
            focusPath: this.state.focusPath,
        });
    }
}
//# sourceMappingURL=HashFocusManager.js.map