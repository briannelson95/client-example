import { of as observableOf } from 'rxjs';
import { map, concat } from 'rxjs/operators';
import { set } from '../../patch';
import { uploadFileAsset } from '../inputs/client-adapters/assets';
import { UPLOAD_STATUS_KEY } from './constants';
import { createUploadEvent, createInitialUploadEvent, CLEANUP_EVENT } from './utils';
export function uploadFile(client, file, options) {
    const upload$ = uploadFileAsset(client, file, options).pipe(map((event) => {
        if (event.type === 'complete') {
            return createUploadEvent([
                set({ _type: 'reference', _ref: event.asset._id }, ['asset']),
                set(100, [UPLOAD_STATUS_KEY, 'progress']),
                set(new Date().toISOString(), [UPLOAD_STATUS_KEY, 'updated']),
            ]);
        }
        return createUploadEvent([
            set(event.percent, [UPLOAD_STATUS_KEY, 'progress']),
            set(new Date().toISOString(), [UPLOAD_STATUS_KEY, 'updated']),
        ]);
    }));
    return observableOf(createInitialUploadEvent(file)).pipe(concat(upload$), concat(observableOf(CLEANUP_EVENT)));
}
//# sourceMappingURL=uploadFile.js.map