import React, { useMemo, useRef, useState } from 'react';
import styled, { css } from 'styled-components';
import { Button, Box, Card, Flex, Stack, Label, Text, Tooltip, Grid, useToast } from '@sanity/ui';
import { DocumentIcon, ChevronUpIcon, ChevronDownIcon, LinkIcon, TrashIcon } from '@sanity/icons';
import { useClient, useTimeAgo } from '../../../hooks';
import { prettyBytes } from './prettyBytes';
import { AssetUsageDialog } from './AssetUsageDialog';
import { AssetMenu } from './AssetMenu';
import { formatMimeType } from './utils/mimeType';
const CardIconWrapper = styled.span `
  background-color: transparent;
  flex-shrink: 0;
`;
// These are here because using vanilla UI components caused a type issue inside of styled-components
const CustomFlex = styled(Flex) ``;
const CustomText = styled(Text) ``;
const CustomCard = styled(Card) `
  &:hover-within ${CustomText} {
    --card-muted-fg-color: var(--card-muted-fg-color);
    --card-fg-color: var(--card-fg-color);
  }

  ${(props) => props.isSelected &&
    css `
      --card-muted-fg-color: var(--card-bg-color);
      --card-fg-color: var(--card-bg-color);
    `}
`;
const RowButton = styled(Button) `
  box-shadow: none;
  min-width: 0;
  cursor: pointer;
  position: initial;

  &:before,
  &:after {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
  }

  &:before {
    z-index: 0;
    pointer-events: none;
    border-radius: 0.1875rem;
  }

  ${(props) => props.isSelected &&
    css `
      --card-muted-fg-color: var(--card-bg-color);
      --card-fg-color: var(--card-bg-color);

      &:before {
        background-color: var(--card-focus-ring-color);
      }

      ${CardIconWrapper} {
        --card-muted-fg-color: var(--card-bg-color);
      }

      ${CustomFlex} {
        --card-muted-fg-color: var(--card-bg-color);
        --card-fg-color: var(--card-bg-color);
      }
    `}

  ${(props) => !props.isSelected &&
    css `
      &:hover:before {
        background-color: var(--card-bg-color);
      }

      &:focus:before {
        background-color: var(--card-code-bg-color);
      }

      &:focus-within:before {
        background-color: var(--card-bg-color);
      }
    `}
`;
const STYLES_ROW_CARD = { position: 'relative' };
const STYLES_ICON_CARD = { flexShrink: 0 };
const STYLES_BUTTON_TEXT = { minWidth: 0 };
const STYLES_ASSETMENU_WRAPPER = {
    zIndex: 3,
    marginTop: '-0.5rem',
    marginBottom: '-0.5rem',
};
const DISABLED_DELETE_TITLE = 'Cannot delete current file';
export const AssetRow = (props) => {
    const client = useClient();
    const versionedClient = useMemo(() => client.withConfig({ apiVersion: '1' }), [client]);
    const toast = useToast();
    const deleteRef$ = useRef();
    const [showUsageDialog, setShowUsageDialog] = useState(false);
    const [showDeleteDialog, setShowDeleteDialog] = useState(false);
    const [isDeleting, setIsDeleting] = useState(false);
    const [isOpen, setIsOpen] = useState(false);
    const { asset, onClick, onKeyPress, onDeleteFinished, isSelected, isMobile } = props;
    const { originalFilename, _id, mimeType, size, _createdAt } = asset;
    const formattedTime = useTimeAgo(_createdAt, { agoSuffix: true });
    const formattedMimeType = formatMimeType(mimeType);
    const formattedSize = prettyBytes(size);
    const showTooltip = (originalFilename || '').length > 37;
    const handleConfirmDelete = () => {
        setShowDeleteDialog(true);
    };
    const handleDeleteError = (error) => {
        toast.push({
            closable: true,
            status: 'error',
            title: 'File could not be deleted',
            description: error.message,
        });
    };
    const handleDeleteSuccess = () => {
        toast.push({
            status: 'success',
            title: 'File was deleted',
        });
    };
    const handleDeleteAsset = () => {
        setIsDeleting(true);
        deleteRef$.current = versionedClient.observable.delete(asset._id).subscribe({
            next: () => {
                setIsDeleting(false);
                onDeleteFinished?.(asset._id);
                setShowDeleteDialog(false);
                handleDeleteSuccess();
            },
            error: (err) => {
                setIsDeleting(false);
                handleDeleteError(err);
                // eslint-disable-next-line no-console
                console.error('Could not delete asset', err);
            },
        });
    };
    const handleDialogClose = () => {
        setShowUsageDialog(false);
        setShowDeleteDialog(false);
    };
    const handleToggleUsageDialog = () => {
        setShowUsageDialog(true);
    };
    const handleToggleOpen = () => {
        setIsOpen(!isOpen);
    };
    const handleMenuAction = (action) => {
        if (action.type === 'delete') {
            handleConfirmDelete();
        }
        if (action.type === 'showUsage') {
            handleToggleUsageDialog();
        }
    };
    if (isMobile) {
        return (React.createElement(Card, { paddingBottom: 2, style: STYLES_ROW_CARD },
            React.createElement(Grid, { columns: 4, gap: 1, style: {
                    position: 'relative',
                    gridTemplateColumns: '1fr 30px',
                    opacity: isDeleting ? 0.5 : 1,
                } },
                React.createElement(RowButton, { asset: asset, mode: "bleed", padding: 0, "data-id": _id, onClick: onClick, paddingY: 1 },
                    React.createElement(Flex, { gap: 2, flex: 2, align: "center" },
                        React.createElement(Card, { as: CardIconWrapper, padding: 2, tone: "transparent", radius: 2 },
                            React.createElement(Text, { muted: true, size: 2, style: STYLES_ICON_CARD },
                                React.createElement(DocumentIcon, null))),
                        React.createElement(Text, { size: 1, align: "left", textOverflow: "ellipsis", style: STYLES_BUTTON_TEXT }, originalFilename))),
                React.createElement(Flex, { justify: "flex-end", align: "center", paddingRight: 1, style: STYLES_ASSETMENU_WRAPPER },
                    React.createElement(Button, { mode: "bleed", fontSize: 1, padding: 2, onClick: handleToggleOpen, icon: isOpen ? ChevronUpIcon : ChevronDownIcon }))),
            isOpen && (React.createElement(React.Fragment, null,
                React.createElement(Grid, { marginTop: 3, columns: 3, gap: 1 },
                    React.createElement(Stack, { space: 2 },
                        React.createElement(Label, { size: 1, muted: true }, "Size"),
                        React.createElement(Text, { size: 1, muted: true }, formattedSize)),
                    React.createElement(Stack, { space: 2 },
                        React.createElement(Label, { size: 1, muted: true }, "Type"),
                        React.createElement(Text, { size: 1, muted: true }, formattedMimeType)),
                    React.createElement(Stack, { space: 2 },
                        React.createElement(Label, { size: 1, muted: true }, "Date added"),
                        React.createElement(Text, { size: 1, muted: true }, formattedTime))),
                React.createElement(Stack, { space: 2, marginTop: 3 },
                    React.createElement(Button, { fontSize: 1, tone: "default", mode: "ghost", text: "Show uses", onClick: handleToggleUsageDialog, icon: LinkIcon }),
                    React.createElement(Button, { fontSize: 1, tone: "critical", mode: "ghost", text: "Delete", icon: TrashIcon, disabled: isSelected, title: isSelected ? DISABLED_DELETE_TITLE : 'Delete file', onClick: handleConfirmDelete })))),
            (showUsageDialog || showDeleteDialog) && (React.createElement(AssetUsageDialog, { assetType: "file", asset: asset, mode: showDeleteDialog ? 'confirmDelete' : 'listUsage', onClose: handleDialogClose, onDelete: handleDeleteAsset, isDeleting: isDeleting }))));
    }
    return (React.createElement(CustomCard, { asset: asset, paddingBottom: 1, style: STYLES_ROW_CARD, radius: 0, overflow: 'hidden', isSelected: isSelected, "aria-selected": "true" },
        React.createElement(Grid, { columns: 4, gap: 1, "data-id": _id, paddingY: 1, style: {
                position: 'relative',
                gridTemplateColumns: '3fr 1fr 1fr 2fr 30px',
                opacity: isDeleting ? 0.5 : 1,
            } },
            React.createElement(RowButton, { asset: asset, mode: "bleed", "data-id": _id, onClick: onClick, padding: 0, onKeyPress: onKeyPress, title: `Select the file ${originalFilename}`, isSelected: isSelected },
                React.createElement(CustomFlex, { gap: 2, flex: 2, paddingRight: 1, align: "center", onClick: onClick, onKeyPress: onKeyPress, "data-id": _id, title: `Select the file ${originalFilename}` },
                    React.createElement(Card, { as: CardIconWrapper, padding: 2, tone: "transparent", radius: 2, style: STYLES_ICON_CARD },
                        React.createElement(Text, { muted: true, size: 2 },
                            React.createElement(DocumentIcon, null))),
                    showTooltip && (React.createElement(Tooltip, { content: React.createElement(Box, { padding: 2 },
                            React.createElement(Text, { size: 1 }, originalFilename)), fallbackPlacements: ['right', 'left'], placement: "top", portal: true },
                        React.createElement(Text, { size: 1, align: "left", textOverflow: "ellipsis", style: STYLES_BUTTON_TEXT }, originalFilename))),
                    !showTooltip && (React.createElement(Text, { size: 1, align: "left", textOverflow: "ellipsis", style: STYLES_BUTTON_TEXT }, originalFilename)))),
            React.createElement(CustomFlex, { align: "center" },
                React.createElement(Text, { size: 1, muted: true }, formattedSize)),
            React.createElement(CustomFlex, { align: "center" },
                React.createElement(Text, { size: 1, muted: true }, formattedMimeType)),
            React.createElement(CustomFlex, { align: "center" },
                React.createElement(Text, { as: "time", size: 1, muted: true, dateTime: _createdAt }, formattedTime)),
            React.createElement(CustomFlex, { justify: "flex-end", align: "center", paddingX: 1, paddingY: 1, style: STYLES_ASSETMENU_WRAPPER },
                React.createElement(AssetMenu, { border: false, isSelected: false, onAction: handleMenuAction }))),
        (showUsageDialog || showDeleteDialog) && (React.createElement(AssetUsageDialog, { assetType: "file", asset: asset, mode: showDeleteDialog ? 'confirmDelete' : 'listUsage', onClose: handleDialogClose, onDelete: handleDeleteAsset, isDeleting: isDeleting }))));
};
//# sourceMappingURL=AssetRow.js.map