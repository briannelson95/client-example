import React, { useCallback, useMemo } from 'react';
import { FileInput } from '../../inputs/files/FileInput';
import { resolveUploader as defaultResolveUploader } from '../uploads/resolveUploader';
import { useFormBuilder } from '../../useFormBuilder';
import { useDocumentPreviewStore } from '../../../datastores';
import { useClient } from '../../../hooks';
import { observeFileAsset } from './client-adapters/assets';
export function StudioFileInput(props) {
    const sourcesFromSchema = props.schemaType.options?.sources;
    const documentPreviewStore = useDocumentPreviewStore();
    const { file: fileConfig } = useFormBuilder().__internal;
    const client = useClient();
    const resolveUploader = useCallback((type, file) => {
        if (!fileConfig.directUploads) {
            return null;
        }
        return defaultResolveUploader(type, file);
    }, [fileConfig.directUploads]);
    // NOTE: type.options.sources may be an empty array and in that case we're
    // disabling selecting images from asset source  (it's a feature, not a bug)
    const assetSources = useMemo(() => sourcesFromSchema || fileConfig.assetSources, [fileConfig, sourcesFromSchema]);
    const observeAsset = useCallback((id) => observeFileAsset(documentPreviewStore, id), [documentPreviewStore]);
    return (React.createElement(FileInput, { ...props, client: client, assetSources: assetSources, directUploads: fileConfig.directUploads, observeAsset: observeAsset, resolveUploader: resolveUploader }));
}
//# sourceMappingURL=StudioFileInput.js.map