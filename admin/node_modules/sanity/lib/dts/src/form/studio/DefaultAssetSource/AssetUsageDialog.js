import React, { useEffect, useState } from 'react';
import { TrashIcon } from '@sanity/icons';
import { Box, Dialog, Grid, Button, Stack } from '@sanity/ui';
import { WithReferringDocuments } from '../../../components/WithReferringDocuments';
import { useDocumentStore } from '../../../datastores';
import { SpinnerWithText } from '../../components/SpinnerWithText';
import { DocumentList } from './DocumentList';
import { ConfirmMessage } from './ConfirmMessage';
const MODE_CONFIRM_DELETE = 'confirmDelete';
const MODE_LIST_USAGE = 'listUsage';
export function AssetUsageDialog(props) {
    const documentStore = useDocumentStore();
    return (React.createElement(WithReferringDocuments, { documentStore: documentStore, id: props.asset._id }, ({ isLoading, referringDocuments }) => (React.createElement(InnerAssetUsageDialog, { ...props, assetIsLoading: isLoading, referringDocuments: referringDocuments }))));
}
const InnerAssetUsageDialog = ({ asset, assetType = 'image', mode = MODE_LIST_USAGE, isDeleting = false, assetIsLoading = false, referringDocuments = [], onClose, onDelete, }) => {
    const isListMode = mode === MODE_LIST_USAGE;
    const defaultHeaderTitle = isListMode ? `Documents using ${assetType}` : `Delete ${assetType}`;
    const [canDelete, setCanDelete] = useState(false);
    const [isLoadingParent, setIsLoadingParent] = useState(true);
    const [publishedDocuments, setPublishedDocuments] = useState([]);
    const showActionFooter = mode === MODE_CONFIRM_DELETE;
    const hasResults = publishedDocuments.length > 0;
    const showDocumentList = mode === MODE_LIST_USAGE || hasResults;
    const noPaddingOnStack = mode === MODE_CONFIRM_DELETE && !hasResults;
    const footer = showActionFooter ? (React.createElement(Grid, { padding: 2, gap: 2, columns: 2 },
        React.createElement(Button, { mode: "bleed", text: "Cancel", onClick: onClose }),
        React.createElement(Button, { text: "Delete", tone: "critical", icon: TrashIcon, onClick: onDelete, loading: isDeleting, disabled: !canDelete }))) : undefined;
    useEffect(() => {
        const drafts = referringDocuments.reduce((acc, doc) => (doc._id.startsWith('drafts.') ? acc.concat(doc._id.slice(7)) : acc), []);
        const documentsWithoutDrafts = referringDocuments.filter((doc) => !drafts.includes(doc._id));
        setPublishedDocuments(documentsWithoutDrafts);
        setCanDelete(documentsWithoutDrafts.length === 0 && !assetIsLoading);
        setIsLoadingParent(assetIsLoading);
    }, [assetIsLoading, referringDocuments]);
    return (React.createElement(Dialog, { id: "asset-dialog", header: defaultHeaderTitle, width: 1, onClose: onClose, footer: footer, __unstable_autoFocus: !isLoadingParent },
        isLoadingParent && (React.createElement(Box, { padding: 4 },
            React.createElement(SpinnerWithText, { text: "Loading..." }))),
        !isLoadingParent && (React.createElement(Stack, { paddingX: noPaddingOnStack ? 0 : [2, 3, 4], paddingY: noPaddingOnStack ? 0 : [3, 3, 3, 4], space: 1 },
            mode === MODE_CONFIRM_DELETE && (React.createElement(ConfirmMessage, { asset: asset, assetType: assetType, hasResults: hasResults })),
            showDocumentList && (React.createElement(DocumentList, { asset: asset, referringDocuments: publishedDocuments, assetType: assetType }))))));
};
//# sourceMappingURL=AssetUsageDialog.js.map