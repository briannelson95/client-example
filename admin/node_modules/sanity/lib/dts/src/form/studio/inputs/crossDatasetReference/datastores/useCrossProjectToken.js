import { useMemoObservable } from 'react-rx';
import { map, startWith } from 'rxjs/operators';
import { useCrossProjectTokenStore, useDocumentPreviewStore } from '../../../../../datastores';
import { isRecord } from '../../../../../util';
export function useCrossProjectToken(client, { projectId, tokenId }) {
    const documentPreviewStore = useDocumentPreviewStore();
    const crossProjectTokenStore = useCrossProjectTokenStore();
    return useMemoObservable(() => {
        return documentPreviewStore
            .observePaths({
            _type: 'reference',
            _ref: crossProjectTokenStore.getTokenDocumentId({ projectId, tokenId }),
        }, ['token'])
            .pipe(map((documentValue) => {
            const value = isRecord(documentValue)
                ? documentValue
                : undefined;
            return {
                status: 'loaded',
                result: typeof value?.token === 'string' ? value?.token : undefined,
            };
        }), startWith({ status: 'loading' }));
    }, [client, crossProjectTokenStore, documentPreviewStore, projectId, tokenId]);
}
//# sourceMappingURL=useCrossProjectToken.js.map