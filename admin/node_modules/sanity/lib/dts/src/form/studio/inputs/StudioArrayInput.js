import React, { forwardRef, useCallback } from 'react';
import { resolveUploader as defaultResolveUploader } from '../uploads/resolveUploader';
import { ArrayInput } from '../../inputs/arrays/ArrayOfObjectsInput';
import { ArrayOfPrimitivesInput } from '../../inputs/arrays/ArrayOfPrimitivesInput';
import * as is from '../../utils/is';
import { useFormBuilder } from '../../useFormBuilder';
import { useClient } from '../../../hooks';
import { resolveInitialValueForType } from '../../../templates';
export function StudioArrayInput(props) {
    const formBuilder = useFormBuilder();
    // todo abstract the client away
    const client = useClient();
    const supportsImageUploads = formBuilder.__internal.image.directUploads;
    const supportsFileUploads = formBuilder.__internal.file.directUploads;
    const resolveUploader = useCallback((type, file) => {
        if (is.type('image', type) && !supportsImageUploads) {
            return null;
        }
        if (is.type('file', type) && !supportsFileUploads) {
            return null;
        }
        return defaultResolveUploader(type, file);
    }, [supportsFileUploads, supportsImageUploads]);
    return (React.createElement(ArrayInput, { ...props, resolveInitialValue: resolveInitialValueForType, resolveUploader: resolveUploader, client: client }));
}
export const StudioArrayOfPrimitivesInput = forwardRef(function StudioArrayOfPrimitivesInput(props, ref) {
    const formBuilder = useFormBuilder();
    return (React.createElement(ArrayOfPrimitivesInput, { ...props, ArrayFunctionsImpl: formBuilder.__internal.components.ArrayFunctions, ref: ref }));
});
//# sourceMappingURL=StudioArrayInput.js.map