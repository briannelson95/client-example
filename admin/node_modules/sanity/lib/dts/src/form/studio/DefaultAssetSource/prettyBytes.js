const BYTE_UNITS = ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
const BIBYTE_UNITS = ['B', 'kiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
const BIT_UNITS = ['b', 'kbit', 'Mbit', 'Gbit', 'Tbit', 'Pbit', 'Ebit', 'Zbit', 'Ybit'];
const BIBIT_UNITS = ['b', 'kibit', 'Mibit', 'Gibit', 'Tibit', 'Pibit', 'Eibit', 'Zibit', 'Yibit'];
/**
 * Formats the given number using `Number#toLocaleString`.
 * - If locale is a string, the value is expected to be a locale-key (for example: `de`).
 * - If locale is true, the system default locale is used for translation.
 * - If no value for locale is specified, the number is returned unmodified.
 */
const toLocaleString = (number, locale, options) => {
    let result = number;
    if (typeof locale === 'string' || Array.isArray(locale)) {
        result = number.toLocaleString(locale, options);
    }
    else if (locale === true || options !== undefined) {
        result = number.toLocaleString(undefined, options);
    }
    return result;
};
/**
 * Taken from here:
 * https://github.com/sindresorhus/pretty-bytes/blob/a0335ab397a1bc88831f317e4d6d46b7e03ea6be/index.js
 */
export function prettyBytes(input, { bits = false, binary = false, signed = false, minimumFractionDigits, maximumFractionDigits, locale, } = {}) {
    let number = input;
    if (!Number.isFinite(number)) {
        throw new TypeError(`Expected a finite number, got ${typeof number}: ${number}`);
    }
    // eslint-disable-next-line no-nested-ternary
    const UNITS = bits ? (binary ? BIBIT_UNITS : BIT_UNITS) : binary ? BIBYTE_UNITS : BYTE_UNITS;
    if (signed && number === 0) {
        return ` 0 ${UNITS[0]}`;
    }
    const isNegative = number < 0;
    // eslint-disable-next-line no-nested-ternary
    const prefix = isNegative ? '-' : signed ? '+' : '';
    if (isNegative) {
        number = -number;
    }
    let localeOptions;
    if (minimumFractionDigits !== undefined) {
        localeOptions = { minimumFractionDigits };
    }
    if (maximumFractionDigits !== undefined) {
        localeOptions = { maximumFractionDigits, ...localeOptions };
    }
    if (number < 1) {
        const numberString = toLocaleString(number, locale, localeOptions);
        return `${prefix + numberString} ${UNITS[0]}`;
    }
    const exponent = Math.min(Math.floor(binary ? Math.log(number) / Math.log(1024) : Math.log10(number) / 3), UNITS.length - 1);
    number /= (binary ? 1024 : 1000) ** exponent;
    if (!localeOptions) {
        number = number.toPrecision(3);
    }
    const numberString = toLocaleString(Number(number), locale, localeOptions);
    const unit = UNITS[exponent];
    return `${prefix + numberString} ${unit}`;
}
//# sourceMappingURL=prettyBytes.js.map