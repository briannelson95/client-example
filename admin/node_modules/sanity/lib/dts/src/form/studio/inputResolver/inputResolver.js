/* eslint-disable react/jsx-handler-names */
import { isBooleanSchemaType, } from '@sanity/types';
import React from 'react';
import * as is from '../../utils/is';
import { FormField, FormFieldSet } from '../../components/formField';
import { SanityPreview } from '../../../preview';
import { resolveReferenceInput } from './resolveReferenceInput';
import { resolveArrayInput } from './resolveArrayInput';
import { resolveStringInput } from './resolveStringInput';
import { resolveNumberInput } from './resolveNumberInput';
import { defaultInputs } from './defaultInputs';
import { getArrayFieldLevel, getObjectFieldLevel } from './helpers';
import { isObjectField } from '../../utils/asserters';
function resolveComponentFromTypeVariants(type) {
    if (is.type('array', type)) {
        return resolveArrayInput(type);
    }
    if (is.type('reference', type)) {
        return resolveReferenceInput(type);
    }
    // String input with a select
    if (is.type('string', type)) {
        return resolveStringInput(type);
    }
    if (is.type('number', type)) {
        return resolveNumberInput(type);
    }
    return undefined;
}
function getTypeChain(type, visited) {
    if (!type)
        return [];
    if (visited.has(type))
        return [];
    visited.add(type);
    const next = type.type ? getTypeChain(type.type, visited) : [];
    return [type, ...next];
}
export function defaultResolveInputComponent(schemaType) {
    if (schemaType.components?.input)
        return schemaType.components.input;
    const componentFromTypeVariants = resolveComponentFromTypeVariants(schemaType);
    if (componentFromTypeVariants) {
        return componentFromTypeVariants;
    }
    const typeChain = getTypeChain(schemaType, new Set());
    const deduped = typeChain.reduce((acc, type) => {
        acc[type.name] = type;
        return acc;
    }, {});
    // using an object + Object.values to de-dupe the type chain by type name
    const subType = Object.values(deduped).find((t) => defaultInputs[t.name]);
    if (subType) {
        return defaultInputs[subType.name];
    }
    throw new Error(`Could not find input component for schema type \`${schemaType.name}\``);
}
function NoopField({ children }) {
    return React.createElement(React.Fragment, null, children);
}
function PrimitiveField(field) {
    return (React.createElement(FormField, { "data-testid": `field-${field.inputId}`, level: field.level, title: field.title, description: field.description, validation: field.validation, __unstable_presence: field.presence }, field.children));
}
function ObjectOrArrayField(field) {
    const level = isObjectField(field) ? getObjectFieldLevel(field) : getArrayFieldLevel(field);
    return (React.createElement(FormFieldSet, { "data-testid": `field-${field.inputId}`, level: level, title: field.title, description: field.description, collapsed: field.collapsed, collapsible: field.collapsible, onCollapse: field.onCollapse, onExpand: field.onExpand, validation: field.validation, __unstable_presence: field.presence }, field.children));
}
function ImageOrFileField(field) {
    // unless the hotspot tool dialog is open we want to show whoever is in there as the field presence
    const hotspotField = field.inputProps.members.find((member) => member.kind === 'field' && member.name === 'hotspot');
    const presence = hotspotField?.open
        ? field.presence
        : field.presence.concat(hotspotField?.field.presence || []);
    const level = getObjectFieldLevel(field);
    return (React.createElement(FormFieldSet, { level: level, title: field.title, description: field.description, collapsed: field.collapsed, collapsible: field.collapsible, onCollapse: field.onCollapse, onExpand: field.onExpand, validation: field.validation, __unstable_presence: presence }, field.children));
}
export function defaultResolveFieldComponent(schemaType) {
    if (schemaType.components?.field)
        return schemaType.components.field;
    if (isBooleanSchemaType(schemaType)) {
        return NoopField;
    }
    if (getTypeChain(schemaType, new Set()).some((t) => t.name === 'image' || t.name === 'file')) {
        return ImageOrFileField;
    }
    if (schemaType.jsonType !== 'object' && schemaType.jsonType !== 'array') {
        return PrimitiveField;
    }
    return ObjectOrArrayField;
}
export function defaultResolveItemComponent(schemaType) {
    if (schemaType.components?.item)
        return schemaType.components.item;
    return NoopField;
}
// TODO: add PreviewProps interface
export function defaultResolvePreviewComponent(schemaType) {
    if (schemaType.components?.preview)
        return schemaType.components.preview;
    return SanityPreview; // TODO
}
//# sourceMappingURL=inputResolver.js.map