import { map } from 'rxjs/operators';
import { set } from '../../patch';
import { uploadImage } from './uploadImage';
import { uploadFile } from './uploadFile';
const UPLOAD_IMAGE = {
    type: 'image',
    accepts: 'image/*',
    upload: (client, file, type, options) => uploadImage(client, file, options),
};
const UPLOAD_FILE = {
    type: 'file',
    accepts: '',
    upload: (client, file, type, options) => uploadFile(client, file, options),
};
const UPLOAD_TEXT = {
    type: 'string',
    accepts: 'text/*',
    upload: (client, file, type, options) => uploadFile(client, file, options).pipe(map((content) => ({
        type: 'uploadEvent',
        patches: [set(content)],
    }))),
    // Todo: promote this to a "first-class" form-builder abstraction
    // and make it possible to register custom uploaders
};
export const uploaders = [UPLOAD_IMAGE, UPLOAD_TEXT, UPLOAD_FILE].map((uploader, i) => ({
    ...uploader,
    priority: i,
}));
//# sourceMappingURL=uploaders.js.map