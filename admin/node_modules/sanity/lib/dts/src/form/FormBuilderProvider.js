/* eslint-disable camelcase */
import React, { useEffect, useMemo, useRef } from 'react';
import { FormBuilderContext } from './FormBuilderContext';
import { DefaultArrayInputFunctions } from './inputs/arrays/common/ArrayFunctions';
import { DefaultMarkers } from './inputs/PortableText/_legacyDefaultParts/Markers';
import { DefaultCustomMarkers } from './inputs/PortableText/_legacyDefaultParts/CustomMarkers';
import { FormCallbacksProvider } from './studio/contexts/FormCallbacks';
import { PresenceProvider } from './studio/contexts/Presence';
import { ValidationProvider } from './studio/contexts/Validation';
import { defaultFileAssetSources, defaultImageAssetSources } from './defaults';
const missingPatchChannel = {
    publish: () => undefined,
    subscribe: () => {
        console.warn('No patch channel provided to form-builder. If you need input based patch updates, please provide one');
        return () => undefined;
    },
};
export function FormBuilderProvider(props) {
    const { __internal_patchChannel: patchChannel = missingPatchChannel, autoFocus, changesOpen, children, collapsedFieldSets, collapsedPaths, file, filterField, focusPath, focused, groups, id, image, members, onChange, onFieldGroupSelect, onPathBlur, onPathFocus, onPathOpen, onSetFieldSetCollapsed, onSetPathCollapsed, presence, readOnly, renderField, renderInput, renderItem, renderPreview, schemaType, unstable, validation, value: documentValue, } = props;
    const documentValueRef = useRef(documentValue);
    useEffect(() => {
        documentValueRef.current = documentValue;
    }, [documentValue]);
    const __internal = useMemo(() => ({
        patchChannel,
        components: {
            ArrayFunctions: unstable?.ArrayFunctions || DefaultArrayInputFunctions,
            CustomMarkers: unstable?.CustomMarkers || DefaultCustomMarkers,
            Markers: unstable?.Markers || DefaultMarkers,
        },
        file: {
            assetSources: file?.assetSources
                ? _ensureArrayOfSources(file.assetSources) || defaultFileAssetSources
                : defaultFileAssetSources,
            directUploads: file?.directUploads !== false,
        },
        filterField: filterField || (() => true),
        image: {
            assetSources: image?.assetSources
                ? _ensureArrayOfSources(image.assetSources) || defaultImageAssetSources
                : defaultImageAssetSources,
            directUploads: image?.directUploads !== false,
        },
        getDocument: () => documentValueRef.current,
        onChange,
    }), [file, filterField, image, onChange, patchChannel, unstable]);
    const formBuilder = useMemo(() => ({
        __internal,
        autoFocus,
        changesOpen,
        collapsedFieldSets,
        collapsedPaths,
        focusPath,
        focused,
        groups,
        id,
        members,
        readOnly,
        renderField,
        renderInput,
        renderItem,
        renderPreview,
        schemaType,
        value: documentValue,
    }), [
        __internal,
        autoFocus,
        changesOpen,
        collapsedFieldSets,
        collapsedPaths,
        documentValue,
        focusPath,
        focused,
        groups,
        id,
        members,
        readOnly,
        renderField,
        renderInput,
        renderItem,
        renderPreview,
        schemaType,
    ]);
    return (React.createElement(FormBuilderContext.Provider, { value: formBuilder },
        React.createElement(FormCallbacksProvider, { onChange: onChange, onFieldGroupSelect: onFieldGroupSelect, onPathBlur: onPathBlur, onPathFocus: onPathFocus, onPathOpen: onPathOpen, onSetPathCollapsed: onSetPathCollapsed, onSetFieldSetCollapsed: onSetFieldSetCollapsed },
            React.createElement(PresenceProvider, { presence: presence },
                React.createElement(ValidationProvider, { validation: validation }, children)))));
}
function _ensureArrayOfSources(sources) {
    if (Array.isArray(sources)) {
        return sources;
    }
    console.warn('Configured asset sources is not an array:', sources);
    return null;
}
//# sourceMappingURL=FormBuilderProvider.js.map