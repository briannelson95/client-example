import { Avatar, Box, Text, Tooltip } from '@sanity/ui';
import React, { forwardRef, useState } from 'react';
import { useUser } from '../datastores';
import { useUserColor } from '../user-color';
import { isRecord } from '../util';
const symbols = /[^\p{Alpha}\p{White_Space}]/gu;
const whitespace = /\p{White_Space}+/u;
const LEGACY_TO_UI_AVATAR_SIZES = {
    small: 0,
    medium: 1,
    large: 2,
};
function nameToInitials(fullName) {
    const namesArray = fullName.replace(symbols, '').split(whitespace);
    if (namesArray.length === 1) {
        return `${namesArray[0].charAt(0)}`.toUpperCase();
    }
    return `${namesArray[0].charAt(0)}${namesArray[namesArray.length - 1].charAt(0)}`;
}
export function UserAvatar(props) {
    const { user, ...restProps } = props;
    if (isRecord(user)) {
        if (restProps.withTooltip) {
            return React.createElement(TooltipUserAvatar, { ...restProps, user: user });
        }
        return React.createElement(StaticUserAvatar, { ...restProps, user: user });
    }
    return React.createElement(UserAvatarLoader, { ...props, user: user });
}
function TooltipUserAvatar(props) {
    const { user: { displayName }, } = props;
    return (React.createElement(Tooltip, { content: React.createElement(Box, { padding: 2 },
            React.createElement(Text, { size: 1 }, displayName)), placement: "top", portal: true },
        React.createElement("div", { style: { display: 'inline-block' } },
            React.createElement(StaticUserAvatar, { ...props }))));
}
const StaticUserAvatar = forwardRef(function StaticUserAvatar(props, ref) {
    const { user, animateArrowFrom, position, size, status, tone } = props;
    const [imageLoadError, setImageLoadError] = useState(null);
    const userColor = useUserColor(user.id);
    const imageUrl = imageLoadError ? undefined : user?.imageUrl;
    return (React.createElement(Avatar, { animateArrowFrom: animateArrowFrom, arrowPosition: position, color: userColor.name, "data-legacy-tone": tone, initials: user?.displayName && nameToInitials(user.displayName), src: imageUrl, onImageLoadError: setImageLoadError, ref: ref, size: typeof size === 'string' ? LEGACY_TO_UI_AVATAR_SIZES[size] : size, status: status }));
});
function UserAvatarLoader({ user, ...loadedProps }) {
    const [value] = useUser(user);
    if (!value) {
        // @todo How do we handle this?
        return null;
    }
    return React.createElement(UserAvatar, { ...loadedProps, user: value });
}
//# sourceMappingURL=UserAvatar.js.map