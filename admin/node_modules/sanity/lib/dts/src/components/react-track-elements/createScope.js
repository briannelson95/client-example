import React from 'react';
import { createUseReporter } from './createUseReporter';
import { createStore } from './createStore';
// Todo: consider memozing individual functions or move the context assertion/guard to a separate step.
let didWarn = false;
const useReporterGuard = (id) => {
    if (!didWarn) {
        // eslint-disable-next-line no-console
        console.warn(new Error(`No context provided for reporter. Make sure that the component calling "useReporter(${id}, ...)", is wrapped in a <Tracker> element`));
    }
    didWarn = true;
};
function useReportedValueGuard() {
    if (!didWarn) {
        // eslint-disable-next-line no-console
        console.warn(new Error('No context provided for reporter. Make sure that the component calling "useReportedValues()", is wrapped inside a <Tracker> element'));
    }
    didWarn = true;
    return [];
}
const useSubscribeGuard = () => {
    if (!didWarn) {
        // eslint-disable-next-line no-console
        console.warn(new Error('No context provided for reporter. Make sure that the component calling "useReportedValues()", is wrapped inside a <Tracker> element'));
    }
    didWarn = true;
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    return () => { };
};
const DEFAULT_CONTEXT = {
    add: useReporterGuard,
    update: useReporterGuard,
    remove: useReporterGuard,
    subscribe: useSubscribeGuard,
    read: useReportedValueGuard,
};
let id = 0;
const getNextId = () => ++id;
export function createScope() {
    const Context = React.createContext(DEFAULT_CONTEXT);
    function useReportedValues() {
        const context = React.useContext(Context);
        const [values, setValues] = React.useState(context.read());
        React.useLayoutEffect(() => {
            setValues(context.read());
            return context.subscribe(setValues);
        }, [context]);
        return values;
    }
    function Tracker(props) {
        const store = React.useMemo(() => createStore(), []);
        return React.createElement(Context.Provider, { value: store }, props.children);
    }
    const useReporter = createUseReporter(Context);
    return {
        Tracker,
        useReportedValues,
        useReporter,
        useAutoIdReporter: (value, isEqual = Object.is) => useReporter(`element-${React.useRef(getNextId()).current}`, value, isEqual),
    };
}
//# sourceMappingURL=createScope.js.map