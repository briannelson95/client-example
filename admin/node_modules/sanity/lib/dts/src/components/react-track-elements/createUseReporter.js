import * as React from 'react';
function isFunc(value) {
    return typeof value === 'function';
}
function read(value) {
    return isFunc(value) ? value() : value;
}
// eslint-disable-next-line @typescript-eslint/no-empty-function
const noop = () => undefined;
export function createUseReporter(Context) {
    return function useReporter(
    // No reporting will happen if id=null
    id, value, isEqual = Object.is) {
        const { add, update, remove } = React.useContext(Context);
        const previous = React.useRef();
        React.useLayoutEffect(() => {
            if (id === null) {
                return noop;
            }
            const current = read(value);
            add(id, current);
            previous.current = current;
            return () => {
                remove(id);
            };
        }, [add, id, remove, value]);
        React.useLayoutEffect(() => {
            const current = read(value);
            if (typeof previous.current !== 'undefined' &&
                !isEqual(previous.current, current) &&
                id !== null) {
                update(id, current);
            }
            previous.current = current;
        });
    };
}
//# sourceMappingURL=createUseReporter.js.map