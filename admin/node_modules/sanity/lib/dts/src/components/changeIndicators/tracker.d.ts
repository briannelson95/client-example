/// <reference types="react" />
import { Path } from '@sanity/types';
export interface TrackedChange {
    element: HTMLElement;
    path: Path;
    isChanged: boolean;
    hasFocus: boolean;
    hasHover: boolean;
    hasRevertHover: boolean;
    zIndex: number;
}
export interface TrackedArea {
    element: HTMLElement;
}
declare const Tracker: (({ children }: {
    children: import("react").ReactNode;
}) => JSX.Element) | ((props: {
    children: import("react").ReactNode;
}) => JSX.Element), useReportedValues: (() => import("../react-track-elements").Reported<TrackedChange | TrackedArea>[]) | (() => import("../react-track-elements").Reported<TrackedChange | TrackedArea>[]), useReporter: ((id: string | null, value: TrackedChange | TrackedArea | (() => TrackedChange | TrackedArea)) => void) | import("../react-track-elements").ReporterHook<TrackedChange | TrackedArea>;
export { Tracker, useReportedValues, useReporter };
//# sourceMappingURL=tracker.d.ts.map