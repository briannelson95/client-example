import { useLayer } from '@sanity/ui';
import React, { useCallback, useMemo, useState } from 'react';
import { ConnectorContext } from './ConnectorContext';
import { ChangeBarWrapper, FieldWrapper, ChangeBar, ChangeBarMarker, ChangeBarButton, } from './ElementWithChangeBar.styled';
export function ElementWithChangeBar(props) {
    const { children, disabled, hasFocus, isChanged, withHoverEffect = true } = props;
    const [hover, setHover] = useState(false);
    const { onOpenReviewChanges, isReviewChangesOpen } = React.useContext(ConnectorContext);
    const { zIndex } = useLayer();
    const handleMouseEnter = useCallback(() => setHover(true), []);
    const handleMouseLeave = useCallback(() => setHover(false), []);
    const changeBar = useMemo(() => disabled || !isChanged ? null : (React.createElement(ChangeBar, { "data-testid": "change-bar", "$zIndex": zIndex },
        React.createElement(ChangeBarMarker, { "data-testid": "change-bar__marker" }),
        React.createElement(ChangeBarButton, { "aria-label": "Review changes", "data-testid": "change-bar__button", onClick: isReviewChangesOpen ? undefined : onOpenReviewChanges, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, tabIndex: -1, type: "button", "$withHoverEffect": withHoverEffect }))), [
        disabled,
        isChanged,
        zIndex,
        isReviewChangesOpen,
        onOpenReviewChanges,
        handleMouseEnter,
        handleMouseLeave,
        withHoverEffect,
    ]);
    return (React.createElement(ChangeBarWrapper, { changed: isChanged, "data-testid": "change-bar-wrapper", disabled: disabled, focus: hasFocus, hover: hover, isReviewChangeOpen: isReviewChangesOpen },
        React.createElement(FieldWrapper, { "data-testid": "change-bar__field-wrapper" }, children),
        changeBar));
}
//# sourceMappingURL=ElementWithChangeBar.js.map