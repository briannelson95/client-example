import React, { memo } from 'react';
import { ARROW_MARGIN_X, ARROW_MARGIN_Y, ARROW_THRESHOLD, DEBUG, INTERACTIVE_STROKE_WIDTH, STROKE_WIDTH, } from '../constants';
import { arrowPath, generateConnectorPath } from './connectorPath';
import { mapConnectorToLine } from './mapConnectorToLine';
import { DebugRect, ConnectorPath, InteractivePath, RightBarWrapper } from './Connector.styled';
export const Connector = memo(function Connector({ from, to }) {
    const line = mapConnectorToLine({ from, to });
    // If both ends of the connector are out of bounds, then do not render
    if (line.from.outOfBounds && line.to.outOfBounds) {
        return null;
    }
    const linePathDescription = generateConnectorPath(line);
    return (React.createElement(React.Fragment, null,
        React.createElement(InteractivePath, { d: linePathDescription, strokeWidth: INTERACTIVE_STROKE_WIDTH }),
        React.createElement(ConnectorPath, { d: linePathDescription, strokeWidth: STROKE_WIDTH }),
        React.createElement(RightBarWrapper, { top: to.rect.top, left: to.rect.left, height: to.rect.height, width: STROKE_WIDTH, bounds: to.bounds }),
        line.from.isAbove && (React.createElement(ConnectorPath, { d: arrowPath(line.from.left + ARROW_MARGIN_X, line.from.bounds.top - ARROW_THRESHOLD + ARROW_MARGIN_Y, -1), strokeWidth: STROKE_WIDTH })),
        line.from.isBelow && (React.createElement(ConnectorPath, { d: arrowPath(line.from.left + ARROW_MARGIN_X, line.from.bounds.top + line.from.bounds.height + ARROW_THRESHOLD - ARROW_MARGIN_Y, 1), strokeWidth: STROKE_WIDTH })),
        line.to.isAbove && (React.createElement(ConnectorPath, { d: arrowPath(line.to.bounds.left + ARROW_MARGIN_X, line.to.bounds.top - ARROW_THRESHOLD + ARROW_MARGIN_Y, -1), strokeWidth: STROKE_WIDTH })),
        line.to.isBelow && (React.createElement(ConnectorPath, { d: arrowPath(line.to.bounds.left + ARROW_MARGIN_X, line.to.bounds.top + line.to.bounds.height + ARROW_THRESHOLD - ARROW_MARGIN_Y, 1), strokeWidth: STROKE_WIDTH })),
        DEBUG && (React.createElement(React.Fragment, null,
            React.createElement(DebugRect, { x: line.from.bounds.left, y: line.from.bounds.top, width: line.from.bounds.width, height: line.from.bounds.height, stroke: "green" }),
            React.createElement(DebugRect, { x: line.to.bounds.left, y: line.to.bounds.top, width: line.to.bounds.width, height: line.to.bounds.height, stroke: "yellow" }),
            !line.from.outOfBounds && (React.createElement("g", { transform: `translate(${line.from.bounds.left} ${line.from.bounds.top})` },
                React.createElement(DebugRect, { width: line.from.bounds.width, height: line.from.bounds.height, strokeWidth: STROKE_WIDTH, stroke: "green" }))),
            !line.to.outOfBounds && (React.createElement("g", { transform: `translate(${line.to.bounds.left} ${line.to.bounds.top})` },
                React.createElement(DebugRect, { width: line.to.bounds.width, height: line.to.bounds.height, strokeWidth: STROKE_WIDTH, stroke: "red" })))))));
});
//# sourceMappingURL=Connector.js.map