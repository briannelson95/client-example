import React, { useMemo } from 'react';
import { ScrollContainer } from '../../scroll';
import { ConnectorContext } from '../ConnectorContext';
import { ENABLED } from '../constants';
import { Tracker } from '../tracker';
import { ConnectorsOverlay } from './ConnectorsOverlay';
export function EnabledChangeConnectorRoot({ children, className, isReviewChangesOpen, onOpenReviewChanges, onSetFocus, ...restProps }) {
    const [rootElement, setRootElement] = React.useState();
    const contextValue = useMemo(() => ({
        isReviewChangesOpen,
        onOpenReviewChanges,
        onSetFocus,
    }), [isReviewChangesOpen, onOpenReviewChanges, onSetFocus]);
    return (React.createElement(ConnectorContext.Provider, { value: contextValue },
        React.createElement(Tracker, null,
            React.createElement(ScrollContainer, { ...restProps, ref: setRootElement, className: className },
                children,
                rootElement && React.createElement(ConnectorsOverlay, { rootElement: rootElement, onSetFocus: onSetFocus })))));
}
export function DisabledChangeConnectorRoot({ children, className, }) {
    return React.createElement(ScrollContainer, { className: className }, children);
}
export const ChangeConnectorRoot = ENABLED
    ? EnabledChangeConnectorRoot
    : DisabledChangeConnectorRoot;
//# sourceMappingURL=ChangeConnectorRoot.js.map