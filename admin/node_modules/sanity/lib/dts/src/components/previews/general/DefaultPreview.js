import React from 'react';
import { Box, Flex, Stack, Text, Skeleton, TextSkeleton, rem } from '@sanity/ui';
import classNames from 'classnames';
import styled from 'styled-components';
import { getDevicePixelRatio } from 'use-device-pixel-ratio';
import { Media } from '../_common/Media';
import { PREVIEW_MEDIA_SIZE } from '../constants';
import { renderPreviewNode } from '../helpers';
const DEFAULT_MEDIA_DIMENSIONS = {
    ...PREVIEW_MEDIA_SIZE.default,
    aspect: 1,
    fit: 'crop',
    dpr: getDevicePixelRatio(),
};
const Root = styled(Flex) `
  height: ${rem(PREVIEW_MEDIA_SIZE.default.height)};
`;
const TitleSkeleton = styled(TextSkeleton).attrs({ animated: true, radius: 1 }) `
  max-width: ${rem(160)};
  width: 80%;
`;
const SubtitleSkeleton = styled(TextSkeleton).attrs({ animated: true, radius: 1, size: 1 }) `
  max-width: ${rem(120)};
  width: 60%;
`;
export function DefaultPreview(props) {
    const { title, subtitle, media, status, isPlaceholder, children, styles } = props;
    const rootClassName = classNames(styles?.root, Boolean(subtitle) && styles?.hasSubtitle);
    const statusNode = status && (React.createElement(Box, { className: styles?.status, "data-testid": "default-preview__status", paddingLeft: 3, paddingRight: 1 }, renderPreviewNode(status, 'default')));
    if (isPlaceholder) {
        return (React.createElement(Root, { align: "center", className: styles?.placeholder, "data-testid": "default-preview" },
            media !== false && (React.createElement(Skeleton, { animated: true, marginRight: 2, radius: 2, style: PREVIEW_MEDIA_SIZE.default })),
            React.createElement(Stack, { "data-testid": "default-preview__heading", flex: 1, paddingLeft: media === false ? 1 : 2, paddingRight: status ? 0 : 1, space: 2 },
                React.createElement(TitleSkeleton, null),
                React.createElement(SubtitleSkeleton, null)),
            statusNode));
    }
    return (React.createElement(Root, { align: "center", className: rootClassName, "data-testid": "default-preview" },
        media !== false && media !== undefined && (React.createElement(Media, { dimensions: DEFAULT_MEDIA_DIMENSIONS, layout: "default", media: media, styles: styles })),
        React.createElement(Stack, { className: styles?.heading, "data-testid": "default-preview__header", flex: 1, paddingLeft: media ? 2 : 1, paddingRight: status ? 0 : 1, space: 2 },
            React.createElement(Text, { className: styles?.title, style: { color: 'inherit' }, textOverflow: "ellipsis" },
                title && renderPreviewNode(title, 'default'),
                !title && React.createElement("span", { style: { color: 'var(--card-muted-fg-color)' } }, "Untitled")),
            subtitle && (React.createElement(Text, { muted: true, size: 1, textOverflow: "ellipsis", className: styles?.subtitle }, renderPreviewNode(subtitle, 'default'))),
            children && React.createElement("div", { className: styles?.children }, children)),
        statusNode));
}
//# sourceMappingURL=DefaultPreview.js.map