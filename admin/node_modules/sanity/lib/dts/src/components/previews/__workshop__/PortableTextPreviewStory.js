import { DocumentIcon, EditIcon, EllipsisVerticalIcon } from '@sanity/icons';
import { Button, Card, Container, Flex, Text } from '@sanity/ui';
import { useBoolean, useSelect, useString } from '@sanity/ui-workshop';
import React, { createElement, useMemo } from 'react';
import { InlinePreview } from '../portableText/InlinePreview';
import { BlockPreview } from '../portableText/BlockPreview';
import { BlockImagePreview } from '../portableText/BlockImagePreview';
import { PREVIEW_MEDIA_SIZE } from '../constants';
const MEDIA_OPTIONS = {
    None: 'none',
    Image: 'image',
    Icon: 'icon',
};
const LAYOUT_OPTIONS = {
    Block: 'block',
    'Block image': 'blockImage',
    Inline: 'inline',
};
// const mediaValues: Record<string, React.ReactNode> = {
//   image: <img src="https://source.unsplash.com/70x70/?abstract" />,
//   icon: <DocumentIcon />,
// }
const previewComponents = {
    block: BlockPreview,
    blockImage: BlockImagePreview,
    inline: InlinePreview,
};
const padding = {
    block: 1,
    blockImage: 0,
    inline: 1,
};
export default function PortableTextPreviewStory() {
    const layout = useSelect('Layout', LAYOUT_OPTIONS, 'block');
    const withActions = useBoolean('With actions', false);
    const isPlaceholder = useBoolean('Is placeholder', false);
    const mediaKey = useSelect('Media', MEDIA_OPTIONS) || 'none';
    const title = useString('Title', 'Title', 'Props');
    const subtitle = useString('Subtitle', 'Subtitle', 'Props');
    const status = useBoolean('Status', false);
    const media = useMemo(() => {
        const { width, height } = layout ? PREVIEW_MEDIA_SIZE[layout] : PREVIEW_MEDIA_SIZE.default;
        if (mediaKey === 'image') {
            return React.createElement("img", { src: `https://source.unsplash.com/${width * 2}x${height * 2}/?abstract` });
        }
        if (mediaKey === 'icon') {
            return React.createElement(DocumentIcon, null);
        }
        if (mediaKey === 'text') {
            return 'T';
        }
        return false;
    }, [layout, mediaKey]);
    const component = layout && previewComponents[layout];
    if (!component) {
        return (React.createElement(Flex, { align: "center", height: "fill", justify: "center", padding: 4, sizing: "border" },
            React.createElement(Text, null,
                "Unknown layout: ",
                layout)));
    }
    return (React.createElement(Card, { height: "fill" },
        React.createElement(Flex, { align: "center", height: "fill", justify: "center", padding: 4, sizing: "border" },
            React.createElement(Container, { width: 1 },
                React.createElement(Card, { border: true, padding: padding[layout], radius: 1, style: { lineHeight: 0 } }, createElement(component, {
                    actions: withActions && (React.createElement(Button, { fontSize: 1, icon: EllipsisVerticalIcon, mode: "bleed", paddingX: 2 })),
                    isPlaceholder,
                    media,
                    status: status && (React.createElement(Text, { muted: true, size: 1 },
                        React.createElement(EditIcon, null))),
                    title,
                    subtitle,
                }))))));
}
//# sourceMappingURL=PortableTextPreviewStory.js.map