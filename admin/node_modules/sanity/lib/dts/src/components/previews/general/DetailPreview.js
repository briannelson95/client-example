import React from 'react';
import { Box, Flex, Stack, Text } from '@sanity/ui';
import { getDevicePixelRatio } from 'use-device-pixel-ratio';
import { Media } from '../_common/Media';
import { PREVIEW_MEDIA_SIZE } from '../constants';
import { renderPreviewNode } from '../helpers';
import { DescriptionSkeleton, DescriptionText, MediaSkeleton, RootFlex, StatusBox, SubtitleSkeleton, TitleSkeleton, } from './DetailPreview.styled';
const DEFAULT_MEDIA_DIMENSIONS = {
    ...PREVIEW_MEDIA_SIZE.detail,
    fit: 'crop',
    aspect: 1,
    dpr: getDevicePixelRatio(),
};
export function DetailPreview(props) {
    const { title, subtitle, description, mediaDimensions = DEFAULT_MEDIA_DIMENSIONS, media, status, children, isPlaceholder, } = props;
    const statusNode = status && (React.createElement(StatusBox, { marginLeft: 3, paddingRight: 1 }, renderPreviewNode(status, 'detail')));
    if (isPlaceholder) {
        return (React.createElement(RootFlex, { "data-testid": "detail-preview" },
            media !== false && React.createElement(MediaSkeleton, { "data-testid": "detail-preview__media" }),
            React.createElement(Box, { flex: 1, paddingLeft: media === false ? 1 : 2 },
                React.createElement(Flex, { align: "center", "data-testid": "detail-preview__header" },
                    React.createElement(Stack, { flex: 1, space: 2 },
                        React.createElement(TitleSkeleton, null),
                        React.createElement(SubtitleSkeleton, null)),
                    statusNode),
                description && (React.createElement(Box, { marginTop: 3 },
                    React.createElement(DescriptionSkeleton, null))))));
    }
    return (React.createElement(RootFlex, { "data-testid": "detail-preview" },
        media !== false && React.createElement(Media, { dimensions: mediaDimensions, layout: "detail", media: media }),
        React.createElement(Box, { flex: 1, paddingLeft: media === false ? 1 : 2 },
            React.createElement(Flex, { align: "center", "data-testid": "detail-preview__header" },
                React.createElement(Stack, { flex: 1, space: 2 },
                    React.createElement(Text, { textOverflow: "ellipsis", style: { color: 'inherit' } },
                        title && renderPreviewNode(title, 'detail'),
                        !title && React.createElement(React.Fragment, null, "Untitled")),
                    subtitle && (React.createElement(Text, { muted: true, size: 1, textOverflow: "ellipsis" }, renderPreviewNode(subtitle, 'detail')))),
                statusNode),
            description && (React.createElement(Box, { marginTop: 3 },
                React.createElement(DescriptionText, { muted: true, size: 1 }, renderPreviewNode(description, 'detail'))))),
        children));
}
//# sourceMappingURL=DetailPreview.js.map