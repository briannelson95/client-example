import React from 'react';
import { Box, Flex, rem, Stack, Text, TextSkeleton } from '@sanity/ui';
import styled from 'styled-components';
import { getDevicePixelRatio } from 'use-device-pixel-ratio';
import { Media } from '../_common/Media';
import { PREVIEW_MEDIA_SIZE } from '../constants';
const DEFAULT_MEDIA_DIMENSION = {
    ...PREVIEW_MEDIA_SIZE.default,
    aspect: 1,
    fit: 'crop',
    dpr: getDevicePixelRatio(),
};
const Root = styled(Box) `
  height: 100%;

  a {
    color: currentColor;
    text-decoration: none;
  }

  svg[data-sanity-icon] {
    margin: 0;
  }
`;
const HeaderFlex = styled(Flex).attrs({ align: 'center' }) `
  height: ${rem(PREVIEW_MEDIA_SIZE.default.height)};
`;
const TitleSkeleton = styled(TextSkeleton).attrs({ animated: true, radius: 1 }) `
  max-width: ${rem(160)};
  width: 80%;
`;
const SubtitleSkeleton = styled(TextSkeleton).attrs({ animated: true, radius: 1, size: 1 }) `
  max-width: ${rem(120)};
  width: 60%;
`;
export function TemplatePreview(props) {
    const { description, isPlaceholder, media, mediaDimensions = DEFAULT_MEDIA_DIMENSION, subtitle, title = 'Untitled', } = props;
    if (isPlaceholder) {
        return (React.createElement(Root, null,
            React.createElement(HeaderFlex, null,
                React.createElement(Stack, { flex: 1, space: 2 },
                    React.createElement(TitleSkeleton, null),
                    React.createElement(SubtitleSkeleton, null)))));
    }
    return (React.createElement(Root, null,
        React.createElement(HeaderFlex, null,
            React.createElement(Stack, { flex: 1, space: 2 },
                React.createElement(Text, { textOverflow: "ellipsis" },
                    typeof title !== 'function' && title,
                    typeof title === 'function' && title({ layout: 'default' })),
                subtitle && (React.createElement(Text, { muted: true, size: 1, textOverflow: "ellipsis" }, (typeof subtitle === 'function' && subtitle({ layout: 'default' })) || subtitle))),
            media && (React.createElement(Flex, { align: "flex-start", paddingLeft: 2 },
                React.createElement(Media, { dimensions: mediaDimensions, layout: "default", media: media })))),
        description && (React.createElement(Box, { marginTop: 3 },
            React.createElement(Text, { muted: true, size: 1, style: { whiteSpace: 'break-spaces' } }, description)))));
}
//# sourceMappingURL=TemplatePreview.js.map