import { Card, Container, Flex, LayerProvider, Stack, Text } from '@sanity/ui';
import React, { useCallback, useState } from 'react';
import styled from 'styled-components';
import { ScrollContainer } from '../scroll';
import { ChangeFieldWrapper } from '../changeIndicators/ChangeFieldWrapper';
import { ChangeIndicator } from '../changeIndicators/ChangeIndicator';
import { ChangeConnectorRoot } from '../changeIndicators/overlay/ChangeConnectorRoot';
const TestContainer = styled(Container).attrs({
    height: 'fill',
    width: 1,
}) `
  max-height: 320px;
`;
const Root = styled(ChangeConnectorRoot) `
  height: 100%;
  outline: 1px solid var(--card-border-color);
  position: relative;
`;
export default function ChangeConnectorStory() {
    const isReviewChangesOpen = true;
    const onOpenReviewChanges = useCallback(() => undefined, []);
    const onSetFocus = useCallback(() => undefined, []);
    const [focusPath, setFocusPath] = useState([]);
    return (React.createElement(LayerProvider, null,
        React.createElement(Card, { height: "fill", tone: "transparent" },
            React.createElement(Flex, { align: "center", height: "fill", justify: "center", padding: 4, sizing: "border" },
                React.createElement(TestContainer, null,
                    React.createElement(Root, { isReviewChangesOpen: isReviewChangesOpen, onOpenReviewChanges: onOpenReviewChanges, onSetFocus: onSetFocus },
                        React.createElement(Flex, { height: "fill" },
                            React.createElement(Card, { as: ScrollContainer, "data-ui": "ScrollContainer", flex: 1, overflow: "auto", padding: 5, style: { position: 'relative' } },
                                React.createElement(Stack, { space: 9 },
                                    React.createElement(DebugFormField, { path: ['a'], focusPath: focusPath, setFocusPath: setFocusPath, value: "A", compareValue: "B" },
                                        React.createElement(Text, null, "Field A")),
                                    React.createElement(DebugFormField, { path: ['b'], focusPath: focusPath, setFocusPath: setFocusPath, value: "B", compareValue: "C" },
                                        React.createElement(Text, null, "Field B")),
                                    React.createElement(DebugFormField, { path: ['c'], focusPath: focusPath, setFocusPath: setFocusPath, value: "C", compareValue: "D" },
                                        React.createElement(Text, null, "Field C")))),
                            React.createElement(Card, { as: ScrollContainer, "data-ui": "ScrollContainer", borderLeft: true, flex: 1, overflow: "auto", padding: 5, style: { position: 'relative' } },
                                React.createElement(Stack, { flex: 1, space: 9 },
                                    React.createElement(DebugDiffField, { path: ['a'] },
                                        React.createElement(Text, null, "Diff A")),
                                    React.createElement(DebugDiffField, { path: ['b'] },
                                        React.createElement(Text, null, "Diff B")),
                                    React.createElement(DebugDiffField, { path: ['c'] },
                                        React.createElement(Text, null, "Diff C")))))))))));
}
function DebugFormField(props) {
    const { children, focusPath, path, value, compareValue, setFocusPath } = props;
    const handleBlur = useCallback(() => setFocusPath([]), [setFocusPath]);
    const handleFocus = useCallback(() => setFocusPath(path), [path, setFocusPath]);
    return (React.createElement(ChangeIndicator, { hasFocus: false, path: path, isChanged: false },
        React.createElement(Card, { border: true, onBlur: handleBlur, onFocus: handleFocus, padding: 3, radius: 1, tabIndex: 0 }, children)));
}
function DebugDiffField(props) {
    const { children, path } = props;
    const [hovered, setHovered] = useState(false);
    const handleMouseEnter = useCallback(() => setHovered(true), []);
    const handleMouseLeave = useCallback(() => setHovered(false), []);
    return (React.createElement(ChangeFieldWrapper, { hasHover: hovered, path: path },
        React.createElement(Card, { borderLeft: true, padding: 3, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave }, children)));
}
//# sourceMappingURL=changeConnector.js.map