/// <reference types="react" />
import { InitialValueProperty, SchemaType } from '@sanity/types';
export interface Template<Params = any, Value = any> {
    id: string;
    title: string;
    description?: string;
    schemaType: string;
    icon?: SchemaType['icon'];
    value: InitialValueProperty<Params, Value>;
    parameters?: TemplateParameter[];
}
export declare type TemplateParameter = FieldDefinition | ArrayFieldDefinition;
export interface TypeTarget {
    type: string;
}
export interface ReferenceTarget {
    type: 'reference';
    to: TypeTarget | TypeTarget[];
}
export interface FieldDefinition {
    name: string;
    type: string;
    title?: string;
    description?: string;
    options?: {
        [key: string]: any;
    };
}
export declare type ReferenceFieldDefinition = FieldDefinition & ReferenceTarget;
export declare type ArrayFieldDefinition = FieldDefinition & {
    type: 'array';
    of: (ReferenceTarget | TypeTarget)[];
};
export interface InitialValueTemplateItem extends TemplateResponse {
    id: string;
    type: 'initialValueTemplateItem';
    schemaType: string;
}
export declare type TemplateResponse = {
    templateId: string;
    title?: string;
    subtitle?: string;
    description?: string;
    parameters?: {
        [key: string]: any;
    };
    icon?: React.ElementType | React.ReactElement;
    /**
     * @experimental
     */
    initialDocumentId?: string;
};
//# sourceMappingURL=types.d.ts.map