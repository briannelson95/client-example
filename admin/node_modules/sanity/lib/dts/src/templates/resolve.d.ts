import { Schema, ArraySchemaType, ObjectSchemaType, SchemaType, InitialValueProperty } from '@sanity/types';
import { Template } from './types';
declare type Serializeable<T> = {
    serialize(): T;
};
export declare function isBuilder(template: unknown): template is Serializeable<Template>;
export declare function resolveValue<Params, InitialValue>(initialValueOpt: InitialValueProperty<Params, InitialValue>, params?: Params): Promise<InitialValue | undefined>;
export declare function resolveInitialValue(schema: Schema, template: Template, params?: {
    [key: string]: any;
}): Promise<{
    [key: string]: any;
}>;
export declare function getItemType(arrayType: ArraySchemaType, item: unknown): SchemaType | undefined;
/**
 * Resolve initial value for the given schema type (recursively)
 */
export declare function resolveInitialValueForType<Params extends Record<string, unknown>>(
/**
 * This is the name of the document.
 */
type: SchemaType, 
/**
 * Params is a sanity context object passed to every initial value function.
 */
params: Params, 
/**
 * Maximum recursion depth (default 9).
 */
maxDepth?: number): Promise<any>;
export declare function resolveInitialObjectValue<Params extends Record<string, unknown>>(type: ObjectSchemaType, params: Params, maxDepth: number): Promise<any>;
export {};
//# sourceMappingURL=resolve.d.ts.map