/* eslint-disable react/no-array-index-key */
import { Box, Card, Code, Flex, Radio, Stack, Text } from '@sanity/ui';
import React, { useCallback, useState } from 'react';
import { LOADING_PANE } from '../constants';
import { DeskToolProvider } from '../DeskToolProvider';
import { useResolvedPanes } from '../structureResolvers';
const testPaths = [
    [],
    // Opened the `Author` document type list
    [[{ id: 'author' }]],
    // Opened the `Author` document type list
    // Opened the `foo` document editor
    [[{ id: 'author' }], [{ id: 'foo' }]],
];
export default function ResolvePanesStoryWrapper() {
    return (React.createElement(DeskToolProvider, { structure: useCallback((S) => S.list().title('Content'), []) },
        React.createElement(ResolvePanesStory, null)));
}
function ResolvePanesStory() {
    const { paneDataItems, resolvedPanes, routerPanes } = useResolvedPanes();
    const [testKey, setTestKey] = useState('0');
    const handleChange = useCallback((event) => {
        const inputValue = event.currentTarget.value;
        setTestKey(inputValue);
    }, []);
    return (React.createElement(Box, { padding: 4 },
        React.createElement(Stack, { marginBottom: 5, space: 3 }, testPaths.map((testPath, idx) => (React.createElement(Flex, { align: "center", as: "label", key: idx },
            React.createElement(Radio, { checked: String(idx) === testKey, name: "path", onChange: handleChange, value: String(idx) }),
            React.createElement(Box, { flex: 1, marginLeft: 3 },
                React.createElement(Text, null,
                    React.createElement("code", null, JSON.stringify(testPath)))))))),
        React.createElement(Code, { language: "json", size: 1 }, JSON.stringify(routerPanes)),
        React.createElement(Stack, { marginTop: 5, space: 1 }, resolvedPanes.map((resolvedPane, idx) => {
            const paneData = paneDataItems[idx];
            if (resolvedPane === LOADING_PANE) {
                return (React.createElement(Card, { border: true, key: idx, padding: 4, tone: paneData.active ? 'primary' : undefined },
                    React.createElement(Text, null, "[Loading\u2026]")));
            }
            if (resolvedPane.type === 'list') {
                return (React.createElement(Card, { border: true, key: idx, padding: 4, tone: paneData.active ? 'primary' : undefined },
                    React.createElement(Stack, { space: 3 },
                        React.createElement(Text, null,
                            "[List] ",
                            resolvedPane.title),
                        React.createElement(Text, { size: 1 },
                            React.createElement("code", null, paneData.path)),
                        React.createElement(Code, { language: "json", size: 1 }, `${JSON.stringify(resolvedPane.items?.length)} items`))));
            }
            if (resolvedPane.type === 'documentList') {
                return (React.createElement(Card, { border: true, key: idx, padding: 4, tone: paneData.active ? 'primary' : undefined },
                    React.createElement(Stack, { space: 3 },
                        React.createElement(Text, null,
                            "[DocumentList] ",
                            resolvedPane.title),
                        React.createElement(Text, { size: 1 },
                            React.createElement("code", null, paneData.path)),
                        React.createElement(Code, { language: "json", size: 1 }, JSON.stringify(resolvedPane.options, null, 2)))));
            }
            if (resolvedPane.type === 'document') {
                return (React.createElement(Card, { border: true, key: idx, padding: 4, tone: paneData.active ? 'primary' : undefined },
                    React.createElement(Stack, { space: 3 },
                        React.createElement(Text, null, "[Document]"),
                        React.createElement(Text, { size: 1 },
                            React.createElement("code", null, paneData.path)),
                        React.createElement(Code, { language: "json", size: 1 }, JSON.stringify(resolvedPane.options, null, 2)))));
            }
            return (React.createElement(Card, { border: true, key: idx, padding: 4, tone: paneData.active ? 'primary' : undefined },
                React.createElement(Text, null,
                    "[",
                    resolvedPane.type,
                    "] ",
                    resolvedPane.title)));
        }))));
}
//# sourceMappingURL=ResolvePanesStory.js.map