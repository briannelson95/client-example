import React, { useCallback, createElement, useState } from 'react';
import { Box, Flex, Stack, Text } from '@sanity/ui';
import { useTimeAgo } from '../../../../hooks';
import { formatTimelineEventLabel, getTimelineEventIconComponent } from './helpers';
import { UserAvatarStack } from './userAvatarStack';
import { EventLabel, IconBox, IconWrapper, Root } from './timelineItem.styled';
const TIMELINE_ITEM_EVENT_TONE = {
    initial: 'primary',
    create: 'primary',
    publish: 'positive',
    editLive: 'caution',
    editDraft: 'caution',
    unpublish: 'critical',
    discardDraft: 'critical',
    delete: 'critical',
    withinSelection: 'primary',
};
export function TimelineItem(props) {
    const { isSelectionBottom, isSelectionTop, state, onSelect, timestamp, chunk, type } = props;
    const iconComponent = getTimelineEventIconComponent(type);
    const authorUserIds = Array.from(chunk.authors);
    const timeAgo = useTimeAgo(timestamp, { minimal: true });
    const isSelected = state === 'selected';
    const isWithinSelection = state === 'withinSelection';
    const [isHovered, setHovered] = useState(false);
    const handleClick = useCallback((evt) => {
        evt.preventDefault();
        evt.stopPropagation();
        onSelect(chunk);
    }, [onSelect, chunk]);
    return (React.createElement(Root, { "data-ui": "timelineItem", radius: 2, "data-chunk-id": chunk.id, paddingY: 0, paddingX: 2, tone: isHovered || isSelected || isWithinSelection ? 'default' : TIMELINE_ITEM_EVENT_TONE[type], pressed: isWithinSelection, state: state, selected: isSelected, isHovered: isHovered, disabled: state === 'disabled', "data-selection-bottom": isSelectionBottom, "data-selection-top": isSelectionTop, onClick: handleClick },
        React.createElement("div", { 
            // eslint-disable-next-line react/jsx-no-bind
            onMouseEnter: () => setHovered(true), 
            // eslint-disable-next-line react/jsx-no-bind
            onMouseLeave: () => setHovered(false) },
            React.createElement(Flex, { align: "stretch" },
                React.createElement(IconWrapper, { align: "center" },
                    React.createElement(IconBox, { padding: 2 },
                        React.createElement(Text, { size: 2 }, iconComponent && createElement(iconComponent)))),
                React.createElement(Stack, { space: 2, margin: 2 },
                    React.createElement(Box, null,
                        React.createElement(EventLabel, { size: 1, weight: "medium" }, formatTimelineEventLabel(type) || React.createElement("code", null, type))),
                    React.createElement(Text, { size: 0, muted: true }, timeAgo)),
                React.createElement(Flex, { flex: 1, justify: "flex-end", align: "center" },
                    React.createElement(UserAvatarStack, { maxLength: 3, userIds: authorUserIds }))))));
}
//# sourceMappingURL=timelineItem.js.map