import { useId } from '@reach/auto-id';
import { ChevronDownIcon } from '@sanity/icons';
import { Box, Button, Flex, Hotkeys, Menu, MenuButton, MenuItem, Text, Tooltip, } from '@sanity/ui';
import React, { createElement, isValidElement, useCallback, useRef, useState, useMemo } from 'react';
import { isValidElementType } from 'react-is';
import { LegacyLayerProvider } from '../../../../components/transitional';
import { ActionStateDialog } from './ActionStateDialog';
export function ActionMenuButton(props) {
    const { actionStates, disabled } = props;
    const idPrefix = useId() || '';
    const buttonRef = useRef(null);
    const [actionIndex, setActionIndex] = useState(-1);
    const [referenceElement, setReferenceElement] = useState(null);
    const handleAction = useCallback((idx) => {
        setActionIndex(idx);
    }, []);
    const popoverProps = useMemo(() => ({
        placement: 'top-end',
        portal: true,
        preventOverflow: true,
    }), []);
    const currentAction = actionStates[actionIndex];
    return (React.createElement(React.Fragment, null,
        React.createElement(MenuButton, { id: `${idPrefix}-action-menu`, button: React.createElement(Button, { "data-testid": "action-menu-button", "aria-label": "Open document actions", disabled: disabled, icon: ChevronDownIcon, mode: "ghost", ref: buttonRef }), menu: React.createElement(Menu, { padding: 1 }, actionStates.map((actionState, idx) => (React.createElement(ActionMenuListItem, { actionState: actionState, disabled: disabled, index: idx, 
                // eslint-disable-next-line react/no-array-index-key
                key: idx, onAction: handleAction })))), popover: popoverProps, ref: setReferenceElement }),
        currentAction && currentAction.modal && (React.createElement(LegacyLayerProvider, { zOffset: "paneFooter" },
            React.createElement(ActionStateDialog, { modal: currentAction.modal, referenceElement: referenceElement })))));
}
function ActionMenuListItem(props) {
    const { actionState, disabled, index, onAction } = props;
    const { onHandle } = actionState;
    const handleClick = useCallback(() => {
        onAction(index);
        if (onHandle)
            onHandle();
    }, [index, onAction, onHandle]);
    const tooltipContent = actionState.title && (React.createElement(Box, { padding: 2 },
        React.createElement(Text, { size: 1 }, actionState.title)));
    return (React.createElement(MenuItem, { "data-testid": `action-${actionState.label.replace(' ', '')}`, disabled: disabled || Boolean(actionState.disabled), onClick: handleClick, padding: 0, tone: actionState.tone },
        React.createElement(Tooltip, { content: tooltipContent, disabled: !tooltipContent, fallbackPlacements: ['left', 'bottom'], placement: "top", portal: true },
            React.createElement(Flex, { align: "center", paddingX: 3 },
                React.createElement(Flex, { flex: 1, paddingY: 3 },
                    actionState.icon && (React.createElement(Box, { marginRight: 3 },
                        React.createElement(Text, null,
                            isValidElement(actionState.icon) && actionState.icon,
                            isValidElementType(actionState.icon) && createElement(actionState.icon)))),
                    React.createElement(Text, null, actionState.label)),
                actionState.shortcut && (React.createElement(Box, { marginLeft: 3 },
                    React.createElement(Hotkeys, { keys: String(actionState.shortcut)
                            .split('+')
                            .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1)) })))))));
}
//# sourceMappingURL=ActionMenuButton.js.map