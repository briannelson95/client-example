import { useId } from '@reach/auto-id';
import { Box, Dialog } from '@sanity/ui';
import React from 'react';
import { ConfirmDialog } from './dialogs/ConfirmDialog';
// import {DeprecatedErrorDialog} from './dialogs/DeprecatedErrorDialog'
// import {DeprecatedSuccessDialog} from './dialogs/DeprecatedSuccessDialog'
import { ModalDialog } from './dialogs/ModalDialog';
import { PopoverDialog } from './dialogs/PopoverDialog';
export function ActionStateDialog(props) {
    const { modal, referenceElement = null } = props;
    const modalId = useId() || '';
    // @todo: rename this type type "component" or "node"?
    // if (modal.type === 'legacy') {
    //   return <>{modal.content}</>
    // }
    if (modal.type === 'confirm') {
        return React.createElement(ConfirmDialog, { modal: modal, referenceElement: referenceElement });
    }
    if (modal.type === 'dialog') {
        return React.createElement(ModalDialog, { modal: modal });
    }
    if (modal.type === 'popover') {
        return React.createElement(PopoverDialog, { modal: modal, referenceElement: referenceElement });
    }
    // if (modal.type === 'success') {
    //   return <DeprecatedSuccessDialog modal={modal} />
    // }
    // if (modal.type === 'error') {
    //   return <DeprecatedErrorDialog modal={modal} />
    // }
    // @todo: add validation?
    const unknownModal = modal;
    // eslint-disable-next-line no-console
    console.warn(`Unsupported modal type ${unknownModal.type}`);
    return (React.createElement(Dialog, { id: modalId, 
        // eslint-disable-next-line react/jsx-handler-names
        onClose: unknownModal.onClose, 
        // eslint-disable-next-line react/jsx-handler-names
        onClickOutside: unknownModal.onClose, width: 2 },
        React.createElement(Box, { padding: 4 }, unknownModal.content || (React.createElement(React.Fragment, null,
            "Unexpected modal type (",
            React.createElement("code", null, unknownModal.type),
            ")")))));
}
//# sourceMappingURL=ActionStateDialog.js.map