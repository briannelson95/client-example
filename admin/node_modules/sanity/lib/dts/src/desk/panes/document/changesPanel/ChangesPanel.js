import { CloseIcon } from '@sanity/icons';
import { AvatarStack, BoundaryElementProvider, Box, Button, Flex } from '@sanity/ui';
import React, { useRef } from 'react';
import styled from 'styled-components';
import { DiffTooltip, NoChanges, DocumentChangeContext, ChangeList, } from '../../../../field';
import { PaneContent, PaneHeader, usePane } from '../../../components';
import { TimelineMenu } from '../timeline';
import { useDocumentPane } from '../useDocumentPane';
import { ScrollContainer } from '../../../../components/scroll';
import { ChangeFieldWrapper } from '../../../../components/changeIndicators';
import { UserAvatar } from '../../../../components/UserAvatar';
import { collectLatestAuthorAnnotations } from './helpers';
import { LoadingContent } from './content/LoadingContent';
const Scroller = styled(ScrollContainer) `
  height: 100%;
  overflow: auto;
  position: relative;
  scroll-behavior: smooth;
`;
export function ChangesPanel() {
    const { documentId, onHistoryClose, historyController, schemaType, value } = useDocumentPane();
    const { collapsed } = usePane();
    const scrollRef = useRef(null);
    const historyState = historyController.selectionState;
    const loading = historyState === 'loading';
    const since = historyController.sinceTime;
    const diff = historyController.currentObjectDiff();
    const isComparingCurrent = !historyController.onOlderRevision();
    const documentContext = React.useMemo(() => ({
        documentId,
        schemaType,
        FieldWrapper: ChangeFieldWrapper,
        rootDiff: diff,
        isComparingCurrent,
        value,
    }), [documentId, diff, isComparingCurrent, schemaType, value]);
    const changeAnnotations = React.useMemo(() => (diff ? collectLatestAuthorAnnotations(diff) : []), [diff]);
    if (collapsed) {
        return null;
    }
    return (React.createElement(Flex, { direction: "column", flex: 1, style: {
            borderLeft: '1px dashed var(--card-border-color)',
            overflow: 'hidden',
            minWidth: 320,
        }, "data-testid": "review-changes-pane" },
        React.createElement(PaneHeader, { actions: React.createElement(Button, { icon: CloseIcon, mode: "bleed", onClick: onHistoryClose, padding: 3, title: "Hide changes panel" }), subActions: changeAnnotations.length > 0 && (React.createElement(Box, { paddingRight: 1 },
                React.createElement(DiffTooltip, { annotations: changeAnnotations, description: "Changes by", placement: "bottom-end" },
                    React.createElement(AvatarStack, { maxLength: 4 }, changeAnnotations.map(({ author }) => (React.createElement(UserAvatar, { key: author, user: author }))))))), tabs: React.createElement(TimelineMenu, { mode: "since", chunk: since }), title: "Changes" }),
        React.createElement(PaneContent, null,
            React.createElement(BoundaryElementProvider, { element: scrollRef.current },
                React.createElement(Scroller, { "data-ui": "Scroller", ref: scrollRef },
                    React.createElement(Box, { flex: 1, padding: 4 },
                        React.createElement(Content, { diff: diff, documentContext: documentContext, loading: loading })))))));
}
function Content({ diff, documentContext, loading, }) {
    const { schemaType } = useDocumentPane();
    if (loading) {
        return React.createElement(LoadingContent, null);
    }
    if (!diff) {
        return React.createElement(NoChanges, null);
    }
    return (React.createElement(DocumentChangeContext.Provider, { value: documentContext },
        React.createElement(ChangeList, { diff: diff, schemaType: schemaType })));
}
//# sourceMappingURL=ChangesPanel.js.map