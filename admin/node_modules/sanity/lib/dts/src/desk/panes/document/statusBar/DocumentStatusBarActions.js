import React, { memo, 
// useCallback,
useMemo, useState, } from 'react';
import { Box, Flex, Tooltip, Stack, Button, Hotkeys, LayerProvider, Text } from '@sanity/ui';
import { useDocumentPane } from '../useDocumentPane';
import { RenderActionCollectionState, HistoryRestoreAction, } from '../../../actions';
import { ActionMenuButton } from './ActionMenuButton';
import { ActionStateDialog } from './ActionStateDialog';
function DocumentStatusBarActionsInner(props) {
    const { disabled, showMenu, states } = props;
    const [firstActionState, ...menuActionStates] = states;
    const [buttonElement, setButtonElement] = useState(null);
    const tooltipContent = useMemo(() => {
        if (!firstActionState || (!firstActionState.title && !firstActionState.shortcut))
            return null;
        return (React.createElement(Flex, { padding: 2, style: { maxWidth: 300 }, align: "center" },
            React.createElement(Text, { size: 1 }, firstActionState.title),
            firstActionState.shortcut && (React.createElement(Box, { marginLeft: firstActionState.title ? 2 : 0 },
                React.createElement(Hotkeys, { keys: String(firstActionState.shortcut)
                        .split('+')
                        .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1).toLowerCase()) })))));
    }, [firstActionState]);
    return (React.createElement(Flex, null,
        firstActionState && (React.createElement(LayerProvider, { zOffset: 200 },
            React.createElement(Tooltip, { disabled: !tooltipContent, content: tooltipContent, portal: true, placement: "top" },
                React.createElement(Stack, { flex: 1 },
                    React.createElement(Button, { "data-testid": `action-${firstActionState.label}`, disabled: disabled || Boolean(firstActionState.disabled), icon: firstActionState.icon, 
                        // eslint-disable-next-line react/jsx-handler-names
                        onClick: firstActionState.onHandle, ref: setButtonElement, text: firstActionState.label, tone: firstActionState.tone || 'primary' }))))),
        showMenu && menuActionStates.length > 0 && (React.createElement(Box, { marginLeft: 1 },
            React.createElement(ActionMenuButton, { actionStates: menuActionStates, disabled: disabled }))),
        firstActionState && firstActionState.modal && (React.createElement(ActionStateDialog, { modal: firstActionState.modal, referenceElement: buttonElement }))));
}
export const DocumentStatusBarActions = memo(function DocumentStatusBarActions() {
    const { actions, connectionState, editState } = useDocumentPane();
    // const [isMenuOpen, setMenuOpen] = useState(false)
    // const handleMenuOpen = useCallback(() => setMenuOpen(true), [])
    // const handleMenuClose = useCallback(() => setMenuOpen(false), [])
    // const handleActionComplete = useCallback(() => setMenuOpen(false), [])
    if (!actions || !editState) {
        return null;
    }
    return (React.createElement(RenderActionCollectionState
    // component={}
    // onActionComplete={handleActionComplete}
    , { 
        // component={}
        // onActionComplete={handleActionComplete}
        actions: actions, 
        // @ts-expect-error TODO: fix the document actions
        actionProps: editState }, ({ states }) => (React.createElement(DocumentStatusBarActionsInner, { disabled: connectionState !== 'connected', 
        // isMenuOpen={isMenuOpen}
        // onMenuOpen={handleMenuOpen}
        // onMenuClose={handleMenuClose}
        showMenu: actions.length > 1, states: states }))));
});
export const HistoryStatusBarActions = memo(function HistoryStatusBarActions() {
    const { connectionState, editState, historyController } = useDocumentPane();
    const revision = historyController.revTime?.id || '';
    const disabled = (editState?.draft || editState?.published || {})._rev === revision;
    const actionProps = useMemo(() => ({ ...(editState || {}), revision }), [editState, revision]);
    const historyActions = useMemo(() => [HistoryRestoreAction], []);
    return (React.createElement(RenderActionCollectionState, { actions: historyActions, actionProps: actionProps }, ({ states }) => (React.createElement(DocumentStatusBarActionsInner, { disabled: connectionState !== 'connected' || Boolean(disabled), showMenu: false, states: states }))));
});
//# sourceMappingURL=DocumentStatusBarActions.js.map