import { Box, Flex, Spinner, Text, _raf2 } from '@sanity/ui';
import React, { memo, useMemo, useState, useEffect } from 'react';
import styled from 'styled-components';
import { Delay } from '../../components/Delay';
import { Pane, PaneContent } from '../../components/pane';
import { getWaitMessages } from './getWaitMessages';
const DELAY = false;
const DEFAULT_MESSAGE = 'Loadingâ€¦';
const Content = styled(Flex) `
  opacity: 0;
  transition: opacity 200ms;

  &[data-mounted] {
    opacity: 1;
  }
`;
/**
 * @internal
 */
export const LoadingPane = memo((props) => {
    const { delay = 300, flex, message: messageProp = getWaitMessages, minWidth, paneKey, path, selected, title, tone, } = props;
    const resolvedMessage = useMemo(() => {
        if (typeof messageProp === 'function') {
            return messageProp(path ? path.split(';') : []);
        }
        return messageProp;
    }, [messageProp, path]);
    const [currentMessage, setCurrentMessage] = useState(() => {
        if (typeof resolvedMessage === 'string')
            return resolvedMessage;
        return DEFAULT_MESSAGE;
    });
    useEffect(() => {
        if (typeof resolvedMessage !== 'object')
            return undefined;
        if (typeof resolvedMessage.subscribe === 'function')
            return undefined;
        const sub = resolvedMessage.subscribe(setCurrentMessage);
        return () => sub.unsubscribe();
    }, [resolvedMessage]);
    const [contentElement, setContentElement] = useState(null);
    const [mounted, setMounted] = useState(false);
    useEffect(() => {
        if (!contentElement)
            return undefined;
        return _raf2(() => setMounted(true));
    }, [contentElement]);
    const content = (React.createElement(Content, { align: "center", "data-mounted": mounted ? '' : undefined, direction: "column", height: "fill", justify: "center", ref: setContentElement },
        React.createElement(Spinner, { muted: true }),
        (title || currentMessage) && (React.createElement(Box, { marginTop: 3 },
            React.createElement(Text, { align: "center", muted: true, size: 1 }, title || currentMessage)))));
    return (React.createElement(Pane, { flex: flex, id: paneKey, minWidth: minWidth, selected: selected, tone: tone },
        React.createElement(PaneContent, null, DELAY ? React.createElement(Delay, { ms: delay }, content) : content)));
});
LoadingPane.displayName = 'LoadingPane';
//# sourceMappingURL=LoadingPane.js.map