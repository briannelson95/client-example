import isHotkey from 'is-hotkey';
import React, { useCallback, useMemo, useState } from 'react';
import { ActionStateDialog } from '../statusBar';
import { Pane } from '../../../components';
import { useDocumentPane } from '../useDocumentPane';
import { RenderActionCollectionState, } from '../../../actions';
import { LegacyLayerProvider } from '../../../../components/transitional';
function KeyboardShortcutResponder(props) {
    const { actionsBoxElement, activeIndex, children, id, onActionStart, onKeyDown, rootRef, states, ...rest } = props;
    const activeAction = states[activeIndex];
    const handleKeyDown = useCallback((event) => {
        const matchingStates = states.filter((state) => state.shortcut && isHotkey(state.shortcut, event));
        const matchingState = matchingStates[0];
        if (matchingStates.length > 1) {
            // eslint-disable-next-line no-console
            console.warn(`Keyboard shortcut conflict: More than one document action matches the shortcut "${matchingState.shortcut}"`);
        }
        if (matchingState && !matchingState.disabled && matchingState.onHandle) {
            event.preventDefault();
            matchingState.onHandle();
            onActionStart(states.indexOf(matchingState));
            return;
        }
        if (onKeyDown) {
            onKeyDown(event);
        }
    }, [onActionStart, onKeyDown, states]);
    return (React.createElement(Pane, { id: id, onKeyDown: handleKeyDown, tabIndex: -1, ...rest, ref: rootRef },
        children,
        activeAction && activeAction.modal && (React.createElement(LegacyLayerProvider, { zOffset: "paneFooter" },
            React.createElement(ActionStateDialog, { modal: activeAction.modal, referenceElement: actionsBoxElement })))));
}
export const DocumentActionShortcuts = React.memo((props) => {
    const { actionsBoxElement, children, ...rest } = props;
    const { actions, editState } = useDocumentPane();
    const [activeIndex, setActiveIndex] = useState(-1);
    const onActionStart = useCallback((idx) => {
        setActiveIndex(idx);
    }, []);
    const actionProps = useMemo(() => editState && {
        ...editState,
        // @todo: what to call here?
        onComplete: () => undefined,
        // @todo: get revision string
        revision: undefined,
    }, [editState]);
    if (!actionProps || !actions)
        return null;
    return (React.createElement(RenderActionCollectionState, { actionProps: actionProps, actions: actions }, ({ states }) => (React.createElement(KeyboardShortcutResponder, { ...rest, activeIndex: activeIndex, actionsBoxElement: actionsBoxElement, onActionStart: onActionStart, states: states }, children))));
});
DocumentActionShortcuts.displayName = 'DocumentActionShortcuts';
//# sourceMappingURL=DocumentActionShortcuts.js.map