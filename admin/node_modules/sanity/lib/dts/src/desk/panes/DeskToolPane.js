import React, { memo, lazy, Suspense } from 'react';
import { isEqual } from 'lodash';
import { PaneRouterProvider } from '../components/paneRouter';
import { UnknownPane } from './unknown';
import { LoadingPane } from './loading';
// TODO: audit this creates separate chunks
const paneMap = {
    component: lazy(() => import('./userComponent')),
    document: lazy(() => import('./document')),
    documentList: lazy(() => import('./documentList')),
    list: lazy(() => import('./list')),
};
/**
 * NOTE: The same pane might appear multiple times (split pane), so use index as tiebreaker
 *
 * @internal
 */
export const DeskToolPane = memo(function DeskToolPane(props) {
    const { active, childItemId, groupIndex, index, itemId, pane, paneKey, params, payload, selected, siblingIndex, } = props;
    const PaneComponent = paneMap[pane.type] || UnknownPane;
    return (React.createElement(PaneRouterProvider, { flatIndex: index, index: groupIndex, params: params, payload: payload, siblingIndex: siblingIndex },
        React.createElement(Suspense, { fallback: React.createElement(LoadingPane, { paneKey: paneKey }) },
            React.createElement(PaneComponent, { childItemId: childItemId || '', index: index, itemId: itemId, isActive: active, isSelected: selected, paneKey: paneKey, 
                // @ts-expect-error TS doesn't know how to handle this intersection
                pane: pane }))));
}, ({ params: prevParams = {}, payload: prevPayload = null, ...prev }, { params: nextParams = {}, payload: nextPayload = null, ...next }) => {
    // deeply compare these objects (it's okay, they're small)
    if (!isEqual(prevParams, nextParams))
        return false;
    if (!isEqual(prevPayload, nextPayload))
        return false;
    const keys = new Set([...Object.keys(prev), ...Object.keys(next)]);
    // then shallow equal the rest
    for (const key of keys) {
        if (prev[key] !== next[key])
            return false;
    }
    return true;
});
//# sourceMappingURL=DeskToolPane.js.map