import { Box, Button, Flex, Stack, Text, Tooltip } from '@sanity/ui';
import { PlayIcon, PublishIcon } from '@sanity/icons';
import React from 'react';
import styled from 'styled-components';
import { useTimeAgo } from '../../../../../hooks';
const Root = styled(Flex) `
  cursor: default;
`;
export function PublishStatus(props) {
    const { collapsed, disabled, lastPublished, lastUpdated, liveEdit } = props;
    const lastPublishedTimeAgo = useTimeAgo(lastPublished || '', { minimal: true, agoSuffix: true });
    const lastPublishedTime = useTimeAgo(lastPublished || '', { minimal: true });
    const lastUpdatedTimeAgo = useTimeAgo(lastUpdated || '', { minimal: true, agoSuffix: true });
    const lastUpdatedTime = useTimeAgo(lastUpdated || '', { minimal: true });
    return (React.createElement(Root, { align: "center", "data-ui": "SessionLayout", sizing: "border" },
        React.createElement(Tooltip, { portal: true, content: React.createElement(Stack, { padding: 3, space: 3 },
                React.createElement(Text, { size: 1, muted: true }, liveEdit ? (React.createElement(React.Fragment, null,
                    "Last updated ",
                    lastUpdated ? lastUpdatedTimeAgo : lastPublishedTimeAgo)) : (React.createElement(React.Fragment, null,
                    "Last published ",
                    lastPublishedTimeAgo)))) },
            React.createElement(Button, { mode: "bleed", tone: liveEdit ? 'critical' : 'positive', tabIndex: -1, disabled: disabled },
                React.createElement(Flex, { align: "center" },
                    React.createElement(Box, { marginRight: collapsed ? 0 : 3 },
                        React.createElement(Text, { size: 2 }, liveEdit ? React.createElement(PlayIcon, null) : React.createElement(PublishIcon, null))),
                    !collapsed && (React.createElement(Text, { size: 1, weight: "medium" }, liveEdit ? (React.createElement(React.Fragment, null, lastUpdated ? lastUpdatedTime : lastPublishedTime)) : (lastPublishedTime))))))));
}
//# sourceMappingURL=PublishStatus.js.map