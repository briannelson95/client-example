import { ArrowLeftIcon, CloseIcon, SplitVerticalIcon } from '@sanity/icons';
import { Button, Inline } from '@sanity/ui';
import { negate } from 'lodash';
import React, { createElement, memo, forwardRef, useMemo } from 'react';
import { PaneHeader, PaneContextMenuButton, usePaneRouter } from '../../../../components';
import { TimelineMenu } from '../../timeline';
import { useDocumentPane } from '../../useDocumentPane';
import { useDeskTool } from '../../../../useDeskTool';
import { DocumentHeaderTabs } from './DocumentHeaderTabs';
import { ValidationMenu } from './ValidationMenu';
import { DocumentHeaderTitle } from './DocumentHeaderTitle';
const isActionButton = (item) => Boolean(item.showAsAction);
const isMenuButton = negate(isActionButton);
export const DocumentPanelHeader = memo(forwardRef(({ rootElement }, ref) => {
    const { onMenuAction, onPaneClose, onPaneSplit, historyController, validation, menuItems, menuItemGroups, schemaType, ready, views, unstable_languageFilter, } = useDocumentPane();
    const { revTime: rev } = historyController;
    const { features } = useDeskTool();
    const { index, BackLink, hasGroupSiblings } = usePaneRouter();
    const contextMenuItems = useMemo(() => menuItems.filter(isMenuButton), [menuItems]);
    const [isValidationOpen, setValidationOpen] = React.useState(false);
    const showTabs = views.length > 1;
    const showVersionMenu = features.reviewChanges;
    // there are three kinds of buttons possible:
    //
    // 1. split pane - creates a new split pane
    // 2. close split pane — closes the current split pane
    // 3. close pane group — closes the current pane group
    // show the split pane button if they're enabled and there is more than one
    // view available to use to create a split view
    const showSplitPaneButton = features.splitViews && onPaneSplit && views.length > 1;
    // show the split pane button close button if the split button is showing
    // and there is more than one split pane open (aka has-siblings)
    const showSplitPaneCloseButton = showSplitPaneButton && hasGroupSiblings;
    // show the pane group close button if the `showSplitPaneCloseButton` is
    // _not_ showing (the split pane button replaces the group close button)
    // and if the back button is not showing (the back button and the close
    // button) do the same thing and shouldn't be shown at the same time)
    const showPaneGroupCloseButton = !showSplitPaneCloseButton && !features.backButton;
    return (React.createElement(PaneHeader, { ref: ref, loading: !ready, title: React.createElement(DocumentHeaderTitle, null), tabs: showTabs && React.createElement(DocumentHeaderTabs, null), backButton: features.backButton &&
            index > 0 && React.createElement(Button, { as: BackLink, "data-as": "a", icon: ArrowLeftIcon, mode: "bleed" }), subActions: showVersionMenu && React.createElement(TimelineMenu, { chunk: rev, mode: "rev" }), actions: React.createElement(Inline, { space: 1 },
            unstable_languageFilter.length > 0 && (React.createElement(React.Fragment, null, unstable_languageFilter.map((languageFilterComponent, idx) => {
                return createElement(languageFilterComponent, {
                    // eslint-disable-next-line react/no-array-index-key
                    key: `language-filter-${idx}`,
                    schemaType,
                });
            }))),
            validation.length > 0 && (React.createElement(ValidationMenu, { boundaryElement: rootElement, isOpen: isValidationOpen, key: "validation-menu", setOpen: setValidationOpen })),
            React.createElement(PaneContextMenuButton, { itemGroups: menuItemGroups, items: contextMenuItems, key: "context-menu", onAction: onMenuAction }),
            showSplitPaneButton && (React.createElement(Button, { icon: SplitVerticalIcon, key: "split-pane-button", mode: "bleed", onClick: onPaneSplit, title: "Split pane right" })),
            showSplitPaneCloseButton && (React.createElement(Button, { icon: CloseIcon, key: "close-view-button", mode: "bleed", onClick: onPaneClose, title: "Close split pane" })),
            showPaneGroupCloseButton && (React.createElement(Button, { icon: CloseIcon, key: "close-view-button", mode: "bleed", title: "Close pane group", as: BackLink }))) }));
}));
DocumentPanelHeader.displayName = 'DocumentPanelHeader';
//# sourceMappingURL=DocumentPanelHeader.js.map