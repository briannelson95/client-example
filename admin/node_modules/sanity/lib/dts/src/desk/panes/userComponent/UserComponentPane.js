import React, { createElement, isValidElement, useState } from 'react';
import { isValidElementType } from 'react-is';
import { Pane, usePaneRouter } from '../../components';
import { UserComponentPaneHeader } from './UserComponentPaneHeader';
import { UserComponentPaneContent } from './UserComponentPaneContent';
/**
 * @internal
 */
export function UserComponentPane(props) {
    const { index, pane, paneKey, ...restProps } = props;
    const { params } = usePaneRouter();
    const { child, component, menuItems, menuItemGroups, title = '', 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    type: _unused, __preserveInstance = false, ...restPane } = pane;
    const [ref, setRef] = useState(null);
    return (React.createElement(Pane, { id: paneKey, minWidth: 320, selected: restProps.isSelected },
        React.createElement(UserComponentPaneHeader, { actionHandlers: ref?.actionHandlers, index: index, menuItems: menuItems, menuItemGroups: menuItemGroups, title: title }),
        React.createElement(UserComponentPaneContent, null,
            isValidElementType(component) &&
                createElement(component, {
                    // this forces a re-render when the router panes change. note: in
                    // theory, this shouldn't be necessary and the downstream user
                    // component could internally handle these updates, but this was done
                    // to preserve older desk tool behavior. if the experimental flag
                    // `__preserveInstance` is true, then no key will be applied.
                    ...(!__preserveInstance && {
                        key: `${restProps.itemId}-${restProps.childItemId}`,
                    }),
                    ...restProps,
                    ...restPane,
                    // NOTE: here we're utilizing the function form of refs so setting
                    // the ref causes a re-render for `UserComponentPaneHeader`
                    ...{ ref: setRef },
                    child: child,
                    paneKey,
                    // NOTE: this is for backwards compatibility (<= 2.20.0)
                    urlParams: params,
                }),
            isValidElement(component) && component)));
}
//# sourceMappingURL=UserComponentPane.js.map