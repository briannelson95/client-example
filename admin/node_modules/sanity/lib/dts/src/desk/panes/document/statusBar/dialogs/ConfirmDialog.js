import { Box, Button, Flex, Grid, Popover, useClickOutside, useGlobalKeyDown, useLayer, } from '@sanity/ui';
import React, { useCallback, useState } from 'react';
import { POPOVER_FALLBACK_PLACEMENTS } from './constants';
export function ConfirmDialog(props) {
    const { modal, referenceElement } = props;
    return (React.createElement(Popover, { content: React.createElement(ConfirmDialogContent, { modal: modal }), fallbackPlacements: POPOVER_FALLBACK_PLACEMENTS, open: true, placement: "top", portal: true, preventOverflow: true, referenceElement: referenceElement }));
}
function ConfirmDialogContent(props) {
    const { modal } = props;
    const { cancelButtonIcon, cancelButtonText, confirmButtonIcon, confirmButtonText, 
    // color,
    message, onCancel, onConfirm, tone, } = modal;
    const { isTopLayer } = useLayer();
    const [element, setElement] = useState(null);
    const handleClickOutside = useCallback(() => {
        if (isTopLayer)
            onCancel();
    }, [isTopLayer, onCancel]);
    const handleGlobalKeyDown = useCallback((event) => {
        if (event.key === 'Escape' && isTopLayer)
            onCancel();
    }, [isTopLayer, onCancel]);
    useClickOutside(handleClickOutside, [element]);
    useGlobalKeyDown(handleGlobalKeyDown);
    return (React.createElement(Flex, { direction: "column", ref: setElement, style: { minWidth: 320 - 16, maxWidth: 400 } },
        React.createElement(Box, { flex: 1, overflow: "auto", padding: 4 }, message),
        React.createElement(Box, { paddingX: 4, paddingY: 3, style: { borderTop: '1px solid var(--card-border-color)' } },
            React.createElement(Grid, { columns: 2, gap: 2 },
                React.createElement(Button, { icon: cancelButtonIcon, onClick: onCancel, mode: "ghost", text: cancelButtonText || 'Cancel' }),
                React.createElement(Button, { icon: confirmButtonIcon, onClick: onConfirm, text: confirmButtonText || 'Confirm', tone: tone })))));
}
//# sourceMappingURL=ConfirmDialog.js.map