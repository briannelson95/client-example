import { BoundaryElementProvider, Flex, PortalProvider, usePortal, useElementRect } from '@sanity/ui';
import React, { createElement, useEffect, useMemo, useRef, useState } from 'react';
import styled, { css } from 'styled-components';
import { PaneContent, usePaneLayout } from '../../../components';
import { ScrollContainer } from '../../../../components/scroll';
import { useDocumentValuePermissions } from '../../../../datastores';
import { getPublishedId, getDraftId } from '../../../../util';
import { useDocumentPane } from '../useDocumentPane';
import { InspectDialog } from '../inspectDialog';
import { useSchema } from '../../../../hooks';
import { useDeskTool } from '../../../useDeskTool';
import { ReferenceChangedBanner } from './ReferenceChangedBanner';
import { PermissionCheckBanner } from './PermissionCheckBanner';
import { FormView } from './documentViews';
import { DocumentPanelHeader } from './header';
const Scroller = styled(ScrollContainer)(({ $disabled }) => {
    if ($disabled) {
        return { height: '100%' };
    }
    return css `
    height: 100%;
    overflow: auto;
    position: relative;
    scroll-behavior: smooth;
    outline: none;
  `;
});
export const DocumentPanel = function DocumentPanel(props) {
    const { footerHeight, isInspectOpen, rootElement } = props;
    const schema = useSchema();
    const { activeViewId, displayed, documentId, documentType, editState, value, views, ready, schemaType, } = useDocumentPane();
    const { collapsed: layoutCollapsed } = usePaneLayout();
    const parentPortal = usePortal();
    const { features } = useDeskTool();
    const [headerElement, setHeaderElement] = useState(null);
    const headerRect = useElementRect(headerElement);
    const portalRef = useRef(null);
    const [documentScrollElement, setDocumentScrollElement] = useState(null);
    const requiredPermission = value._createdAt ? 'update' : 'create';
    const liveEdit = useMemo(() => Boolean(schema.get(documentType)?.liveEdit), [documentType, schema]);
    const docId = value._id ? value._id : 'dummy-id';
    const docPermissionsInput = useMemo(() => {
        return {
            ...value,
            _id: liveEdit ? getPublishedId(docId) : getDraftId(docId),
        };
    }, [liveEdit, value, docId]);
    const [permissions, isPermissionsLoading] = useDocumentValuePermissions({
        document: docPermissionsInput,
        permission: requiredPermission,
    });
    const activeView = useMemo(() => views.find((view) => view.id === activeViewId) || views[0] || { type: 'form' }, [activeViewId, views]);
    // Use a local portal container when split panes is supported
    const portalElement = features.splitPanes
        ? portalRef.current || parentPortal.element
        : parentPortal.element;
    // Calculate the height of the header
    const margins = useMemo(() => {
        if (layoutCollapsed) {
            return [headerRect?.height || 0, 0, footerHeight ? footerHeight + 2 : 2, 0];
        }
        return [0, 0, 2, 0];
    }, [layoutCollapsed, footerHeight, headerRect]);
    const formViewHidden = activeView.type !== 'form';
    const activeViewNode = useMemo(() => activeView.type === 'component' &&
        activeView.component &&
        createElement(activeView.component, {
            document: {
                draft: editState?.draft || null,
                displayed: displayed || value,
                historical: displayed,
                published: editState?.published || null,
            },
            documentId,
            options: activeView.options,
            schemaType,
        }), [activeView, displayed, documentId, editState?.draft, editState?.published, schemaType, value]);
    // Scroll to top as `documentId` changes
    useEffect(() => {
        if (!documentScrollElement?.scrollTo)
            return;
        documentScrollElement.scrollTo(0, 0);
    }, [documentId, documentScrollElement]);
    const inspectDialog = useMemo(() => {
        return isInspectOpen ? React.createElement(InspectDialog, { value: displayed || value }) : null;
    }, [isInspectOpen, displayed, value]);
    return (React.createElement(Flex, { direction: "column", flex: 2, overflow: layoutCollapsed ? undefined : 'hidden' },
        React.createElement(DocumentPanelHeader, { rootElement: rootElement, ref: setHeaderElement }),
        React.createElement(PaneContent, null,
            React.createElement(PortalProvider, { element: portalElement, __unstable_elements: { documentScrollElement: documentScrollElement } },
                React.createElement(BoundaryElementProvider, { element: documentScrollElement },
                    activeView.type === 'form' && !isPermissionsLoading && ready && (React.createElement(React.Fragment, null,
                        React.createElement(PermissionCheckBanner, { granted: Boolean(permissions?.granted), requiredPermission: requiredPermission }),
                        React.createElement(ReferenceChangedBanner, null))),
                    React.createElement(Scroller, { "$disabled": layoutCollapsed || false, "data-testid": "document-panel-scroller", ref: setDocumentScrollElement },
                        React.createElement(FormView, { hidden: formViewHidden, key: documentId + (ready ? '_ready' : '_pending'), margins: margins, granted: Boolean(permissions?.granted) }),
                        activeViewNode),
                    inspectDialog,
                    React.createElement("div", { "data-testid": "document-panel-portal", ref: portalRef }))))));
};
//# sourceMappingURL=DocumentPanel.js.map