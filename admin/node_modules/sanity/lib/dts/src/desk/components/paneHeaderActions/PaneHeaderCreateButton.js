import { ComposeIcon } from '@sanity/icons';
import React, { useMemo, forwardRef } from 'react';
import { Box, Button, Label, Menu, MenuButton, MenuItem } from '@sanity/ui';
import { IntentButton } from '../IntentButton';
import { useTemplatePermissions } from '../../../datastores';
import { IntentLink } from '../../../router';
import { useSchema, useTemplates } from '../../../hooks';
import { InsufficientPermissionsMessageTooltip } from './InsufficientPermissionsMessageTooltip';
const POPOVER_PROPS = {
    constrainSize: true,
    placement: 'bottom',
    portal: true,
};
const getIntent = (schema, templates, item) => {
    const typeName = templates.find((t) => t.id === item.templateId)?.schemaType;
    if (!typeName)
        return null;
    const baseParams = {
        template: item.templateId,
        type: typeName,
        id: item.initialDocumentId,
    };
    return {
        type: 'create',
        params: item.parameters ? [baseParams, item.parameters] : baseParams,
    };
};
export function PaneHeaderCreateButton({ templateItems }) {
    const schema = useSchema();
    const templates = useTemplates();
    const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({
        templateItems,
    });
    const nothingGranted = useMemo(() => {
        return (!isTemplatePermissionsLoading &&
            templatePermissions?.every((permission) => !permission.granted));
    }, [isTemplatePermissionsLoading, templatePermissions]);
    const permissionsById = useMemo(() => {
        if (!templatePermissions)
            return {};
        return templatePermissions.reduce((acc, permission) => {
            acc[permission.id] = permission;
            return acc;
        }, {});
    }, [templatePermissions]);
    if (nothingGranted) {
        return (React.createElement(InsufficientPermissionsMessageTooltip, { reveal: true, loading: isTemplatePermissionsLoading },
            React.createElement(Button, { "aria-label": "Insufficient permissions", icon: ComposeIcon, mode: "bleed", disabled: true, "data-testid": "action-intent-button" })));
    }
    if (templateItems.length === 1) {
        const firstItem = templateItems[0];
        const permissions = permissionsById[firstItem.id];
        const disabled = !permissions?.granted;
        const intent = getIntent(schema, templates, firstItem);
        if (!intent)
            return null;
        return (React.createElement(InsufficientPermissionsMessageTooltip, { reveal: disabled, loading: isTemplatePermissionsLoading },
            React.createElement(IntentButton, { "aria-label": firstItem.title, icon: firstItem.icon || ComposeIcon, intent: intent, mode: "bleed", disabled: disabled, "data-testid": "action-intent-button" })));
    }
    return (React.createElement(MenuButton, { button: React.createElement(Button, { icon: ComposeIcon, mode: "bleed", padding: 3, "data-testid": "multi-action-intent-button" }), id: "create-menu", menu: React.createElement(Menu, null,
            React.createElement(Box, { paddingX: 3, paddingTop: 3, paddingBottom: 2 },
                React.createElement(Label, { muted: true }, "Create")),
            templateItems.map((item, itemIndex) => {
                const permissions = permissionsById[item.id];
                const disabled = !permissions?.granted;
                const intent = getIntent(schema, templates, item);
                const template = templates.find((t) => t.id === item.templateId);
                if (!template || !intent)
                    return null;
                const Link = forwardRef((linkProps, linkRef) => disabled ? (React.createElement("button", { type: "button", disabled: true, ...linkProps, ref: linkRef })) : (React.createElement(IntentLink, { ...linkProps, intent: intent.type, params: intent.params, ref: linkRef })));
                Link.displayName = 'Link';
                return (React.createElement(InsufficientPermissionsMessageTooltip, { key: item.id, reveal: disabled, loading: isTemplatePermissionsLoading },
                    React.createElement(MenuItem, { as: Link, "data-as": disabled ? 'button' : 'a', text: item.title || template.title, "aria-label": disabled ? 'Insufficient permissions' : item.title || template.title, disabled: disabled, "data-testid": `action-intent-button-${itemIndex}` })));
            })), popover: POPOVER_PROPS }));
}
//# sourceMappingURL=PaneHeaderCreateButton.js.map