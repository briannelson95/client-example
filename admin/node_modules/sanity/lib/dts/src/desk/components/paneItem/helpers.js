import { WarningOutlineIcon } from '@sanity/icons';
import { assignWith } from 'lodash';
import React from 'react';
import { combineLatest, of } from 'rxjs';
import { map, startWith } from 'rxjs/operators';
import { getDraftId, getPublishedId } from '../../../util';
export const isLiveEditEnabled = (schemaType) => schemaType.liveEdit === true;
export const getMissingDocumentFallback = (item) => ({
    title: React.createElement("em", null, item.title ? String(item.title) : 'Missing document'),
    subtitle: React.createElement("em", null, item.title ? `Missing document ID: ${item._id}` : `Document ID: ${item._id}`),
    media: WarningOutlineIcon,
});
export const getValueWithFallback = ({ value, draft, published, }) => {
    const snapshot = draft || published;
    if (!snapshot) {
        return getMissingDocumentFallback(value);
    }
    return assignWith({}, snapshot, value, (objValue, srcValue) => {
        return typeof srcValue === 'undefined' ? objValue : srcValue;
    });
};
export function getPreviewStateObservable(documentPreviewStore, schemaType, documentId, title) {
    const draft$ = isLiveEditEnabled(schemaType)
        ? of({ snapshot: null })
        : documentPreviewStore.observeForPreview({ _type: 'reference', _ref: getDraftId(documentId) }, schemaType);
    const published$ = documentPreviewStore.observeForPreview({ _type: 'reference', _ref: getPublishedId(documentId) }, schemaType);
    return combineLatest([draft$, published$]).pipe(map(([draft, published]) => ({
        draft: draft.snapshot ? { title, ...(draft.snapshot || {}) } : null,
        isLoading: false,
        published: published.snapshot ? { title, ...(published.snapshot || {}) } : null,
    })), startWith({ draft: null, isLoading: true, published: null }));
}
//# sourceMappingURL=helpers.js.map