import { ArrowLeftIcon, ChevronRightIcon, EllipsisVerticalIcon } from '@sanity/icons';
import { Box, Button, Card, Flex, Stack, Text } from '@sanity/ui';
import React, { useCallback } from 'react';
import { usePaneLayout } from '../../../usePaneLayout';
import { Pane } from '../../../Pane';
import { PaneContent } from '../../../PaneContent';
import { PaneHeader } from '../../../PaneHeader';
export function ListPane(props) {
    const { active, childId, index, node, setPath } = props;
    const { collapsed: layoutCollapsed } = usePaneLayout();
    const handleBackClick = useCallback(() => {
        setPath((p) => p.slice(0, index));
    }, [index, setPath]);
    return (React.createElement(Pane, { currentMaxWidth: 350, flex: 1, id: String(index), minWidth: 320, maxWidth: 640 },
        React.createElement(PaneHeader, { actions: React.createElement(Button, { icon: EllipsisVerticalIcon, mode: "bleed" }), backButton: index > 0 &&
                layoutCollapsed && React.createElement(Button, { icon: ArrowLeftIcon, mode: "bleed", onClick: handleBackClick }), title: node.title }),
        React.createElement(PaneContent, null,
            React.createElement(Stack, { padding: 2, space: 1 }, node.items.map((item) => (React.createElement(Card, { as: "button", key: item.id, onClick: () => setPath((p) => p.slice(0, index + 1).concat([item.id])), padding: 3, radius: 2, pressed: !active && childId === item.id, selected: active && childId === item.id },
                React.createElement(Flex, null,
                    React.createElement(Box, { flex: 1 },
                        React.createElement(Text, null, item.title)),
                    React.createElement(Box, null,
                        React.createElement(Text, null,
                            React.createElement(ChevronRightIcon, null)))))))))));
}
//# sourceMappingURL=ListPane.js.map