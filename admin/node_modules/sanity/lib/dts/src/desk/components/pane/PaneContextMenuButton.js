import { useId } from '@reach/auto-id';
import { EllipsisVerticalIcon } from '@sanity/icons';
import { Box, Button, Label, Menu, MenuButton, MenuDivider, MenuItem } from '@sanity/ui';
import React, { forwardRef, Fragment, useCallback, useMemo } from 'react';
import { IntentLink } from '../../../router';
const CONTEXT_MENU_POPOVER_PROPS = {
    constrainSize: true,
    placement: 'bottom',
    portal: true,
};
/**
 * @beta This API will change. DO NOT USE IN PRODUCTION.
 */
export function PaneContextMenuButton(props) {
    const { items, itemGroups, onAction } = props;
    const id = useId() || '';
    const groups = useMemo(() => {
        if (!itemGroups || itemGroups.length === 0) {
            return [{ id: '$default', items }];
        }
        const defaultGroup = { id: '$default', items: [] };
        const groupMap = itemGroups.reduce((acc, group) => {
            acc[group.id] = { id: group.id, title: group.title, items: [] };
            return acc;
        }, {});
        for (const item of items) {
            const group = groupMap[item.group || '$default'] || defaultGroup;
            group.items.push(item);
        }
        return Object.values(groupMap)
            .concat([defaultGroup])
            .filter((g) => g.items.length > 0);
    }, [items, itemGroups]);
    return (React.createElement(MenuButton, { button: React.createElement(Button, { icon: EllipsisVerticalIcon, mode: "bleed", padding: 3, title: "Show menu" }), id: id, menu: React.createElement(Menu, null, groups.map((group, groupIndex) => (
        // eslint-disable-next-line react/no-array-index-key
        React.createElement(Fragment, { key: groupIndex },
            groupIndex > 0 && React.createElement(MenuDivider, null),
            group.title && (React.createElement(Box, { paddingX: 3, paddingTop: 3, paddingBottom: 2 },
                React.createElement(Label, { muted: true }, group.title))),
            group.items.map((item, itemIndex) => (React.createElement(PaneContextMenuItem, { item: item, 
                // eslint-disable-next-line react/no-array-index-key
                key: `${itemIndex}-${item.title}`, onAction: onAction }))))))), popover: CONTEXT_MENU_POPOVER_PROPS, portal: true }));
}
function PaneContextMenuItem(props) {
    const { item, onAction } = props;
    const handleClick = useCallback(() => {
        onAction(item);
    }, [item, onAction]);
    const hotkeys = useMemo(() => {
        if (!item.shortcut)
            return undefined;
        return item.shortcut.split('+');
    }, [item]);
    const IntentButtonOrActionButton = forwardRef((linkProps, linkRef) => item.intent ? (React.createElement(IntentLink, { ...linkProps, intent: item.intent.type, params: item.intent.params, ref: linkRef })) : (React.createElement("button", { type: "button", ...linkProps })));
    IntentButtonOrActionButton.displayName = 'Link';
    return (React.createElement(MenuItem, { as: IntentButtonOrActionButton, "data-as": item.intent ? 'a' : 'button', hotkeys: hotkeys, icon: item.icon, onClick: handleClick, text: item.title }));
}
//# sourceMappingURL=PaneContextMenuButton.js.map