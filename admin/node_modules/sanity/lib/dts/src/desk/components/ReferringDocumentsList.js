import { EditIcon } from '@sanity/icons';
import { Box, Card, Flex, Stack, Text } from '@sanity/ui';
import React, { useCallback, useMemo } from 'react';
import { useSchema } from '../../hooks';
import { SanityPreview } from '../../preview';
import { useRouter } from '../../router';
export function ReferringDocumentsList(props) {
    const { documents } = props;
    return (React.createElement(Card, { padding: 1, radius: 3, shadow: 1 },
        React.createElement(Stack, { space: 1 }, documents.map((document) => (React.createElement(DocumentPreviewLink, { document: document, key: document._id }))))));
}
function DocumentPreviewLink(props) {
    const { document } = props;
    const schema = useSchema();
    const router = useRouter();
    const intent = useMemo(() => ({ action: 'edit', params: { id: document._id, type: document._type } }), [document]);
    const href = router.resolveIntentLink(intent.action, intent.params);
    const schemaType = schema.get(document._type);
    const handleClick = useCallback((event) => {
        if (event.shiftKey || event.metaKey)
            return;
        event.preventDefault();
        router.navigateIntent(intent.action, intent.params);
    }, [intent, router]);
    if (!schemaType) {
        return (React.createElement(Text, { muted: true },
            "A document of the unknown type ",
            React.createElement("em", null, document._type)));
    }
    return (React.createElement(Card, { as: "a", href: href, onClick: handleClick, padding: 1, radius: 2 },
        React.createElement(Flex, { align: "center" },
            React.createElement(Box, { flex: 1 },
                React.createElement(SanityPreview, { layout: "default", schemaType: schemaType, value: document })),
            document._hasDraft && (React.createElement(Box, { marginLeft: 3 },
                React.createElement(Text, { muted: true },
                    React.createElement(EditIcon, null)))))));
}
//# sourceMappingURL=ReferringDocumentsList.js.map