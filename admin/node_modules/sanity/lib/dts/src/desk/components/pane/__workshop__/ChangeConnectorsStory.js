import { AddIcon, CloseIcon, RestoreIcon } from '@sanity/icons';
import { BoundaryElementProvider, Box, Button, Card, Container, Dialog, DialogProvider, Flex, LayerProvider, PortalProvider, Stack, Text, TextInput, } from '@sanity/ui';
import { useAction } from '@sanity/ui-workshop';
import React, { useCallback, useState } from 'react';
import styled from 'styled-components';
import { ChangeConnectorRoot, ChangeIndicator, ChangeFieldWrapper, } from '../../../../components/changeIndicators';
import { ScrollContainer } from '../../../../components/scroll';
import { Pane } from '../Pane';
import { PaneContent } from '../PaneContent';
import { PaneFooter } from '../PaneFooter';
import { PaneHeader } from '../PaneHeader';
import { PaneLayout } from '../PaneLayout';
const TestContainer = styled(Container).attrs({
    height: 'fill',
    width: 1,
}) `
  max-height: 600px;
`;
const Root = styled(ChangeConnectorRoot) `
  height: 100%;
  outline: 1px solid var(--card-border-color);
  position: relative;
`;
const Scroller = styled(ScrollContainer) `
  height: 100%;
  overflow: auto;
  position: relative;
  scroll-behavior: smooth;
`;
export default function ChangeConnectorsStory() {
    const [reviewChanges, setReviewChanges] = useState(false);
    const onSetFocus = useCallback(() => undefined, []);
    const [focusPath, setFocusPath] = useState([]);
    const toggleReviewChanges = useCallback(() => setReviewChanges((v) => !v), []);
    const openReviewChanges = useCallback(() => setReviewChanges(true), []);
    const closeReviewChanges = useCallback(() => setReviewChanges(false), []);
    const [portalElement, setPortalElement] = useState(null);
    const [documentContentElement, setdocumentContentElement] = useState(null);
    const handleLayoutCollapse = useAction('PaneLayout.onCollapse');
    const handleLayoutExpand = useAction('PaneLayout.onExpand');
    return (React.createElement(LayerProvider, null,
        React.createElement(Card, { height: "fill", tone: "transparent" },
            React.createElement(Flex, { align: "center", height: "fill", justify: "center", padding: 4, sizing: "border" },
                React.createElement(TestContainer, null,
                    React.createElement(Root, { isReviewChangesOpen: reviewChanges, onOpenReviewChanges: openReviewChanges, onSetFocus: onSetFocus },
                        React.createElement(PaneLayout, { height: "fill", minWidth: 512, onCollapse: handleLayoutCollapse, onExpand: handleLayoutExpand },
                            React.createElement(Pane, { id: "document-panel" },
                                React.createElement(PaneHeader, { title: "Document" }),
                                React.createElement(PaneContent, { ref: setdocumentContentElement },
                                    React.createElement(BoundaryElementProvider, { element: documentContentElement },
                                        React.createElement(PortalProvider, { element: portalElement },
                                            React.createElement(Scroller, null,
                                                React.createElement(Stack, { paddingX: 4, paddingY: 5, space: 5 },
                                                    React.createElement(StringField, { focusPath: focusPath, path: ['a'], value: "A", compareValue: "B", setFocusPath: setFocusPath }),
                                                    React.createElement(StringField, { focusPath: focusPath, path: ['b'], value: "B", compareValue: "C", setFocusPath: setFocusPath }),
                                                    React.createElement(StringField, { focusPath: focusPath, path: ['c'], value: "C", compareValue: "D", setFocusPath: setFocusPath }),
                                                    React.createElement(StringField, { focusPath: focusPath, path: ['d'], value: "D", compareValue: "D", setFocusPath: setFocusPath }),
                                                    React.createElement(StringField, { focusPath: focusPath, path: ['e'], value: "D", compareValue: "D", setFocusPath: setFocusPath }),
                                                    React.createElement(StringField, { focusPath: focusPath, path: ['f'], value: "D", compareValue: "D", setFocusPath: setFocusPath }),
                                                    React.createElement(StringField, { focusPath: focusPath, path: ['g'], value: "D", compareValue: "D", setFocusPath: setFocusPath }),
                                                    React.createElement(StringField, { focusPath: focusPath, path: ['h'], value: "D", compareValue: "D", setFocusPath: setFocusPath }))),
                                            React.createElement("div", { ref: setPortalElement })))),
                                React.createElement(PaneFooter, { padding: 2 },
                                    React.createElement(Button, { icon: RestoreIcon, mode: "bleed", onClick: toggleReviewChanges, selected: reviewChanges }))),
                            reviewChanges && (React.createElement(Pane, { id: "review-changes-panel" },
                                React.createElement(PaneHeader, { actions: React.createElement(Button, { icon: CloseIcon, mode: "bleed", onClick: closeReviewChanges }), title: "Changes" }),
                                React.createElement(PaneContent, null,
                                    React.createElement(Scroller, null,
                                        React.createElement(Stack, { flex: 1, paddingX: 4, paddingY: 5, space: 5 },
                                            React.createElement(DebugDiffField, { path: ['a'] },
                                                React.createElement(Text, null, "Diff A")),
                                            React.createElement(DebugDiffField, { path: ['b'] },
                                                React.createElement(Text, null, "Diff B")),
                                            React.createElement(DebugDiffField, { path: ['c'] },
                                                React.createElement(Text, null, "Diff C"))))))))))))));
}
function StringField(props) {
    const { focusPath, path, value, compareValue, setFocusPath } = props;
    const [open, setOpen] = useState(false);
    const handleBlur = useCallback(() => setFocusPath([]), [setFocusPath]);
    const handleFocus = useCallback(() => setFocusPath(path), [path, setFocusPath]);
    const handleClose = useCallback(() => setOpen(false), []);
    const handleOpen = useCallback(() => setOpen(true), []);
    return (React.createElement(Stack, { space: 2 },
        React.createElement(Text, { size: 1, weight: "semibold" }, "String"),
        React.createElement(DebugFormField, { path: path, focusPath: focusPath, value: value, compareValue: compareValue },
            React.createElement(TextInput, { onBlur: handleBlur, onFocus: handleFocus, value: value })),
        React.createElement("div", null,
            React.createElement(Button, { icon: React.createElement(AddIcon, null), mode: "ghost", onClick: handleOpen })),
        open && (React.createElement(DialogProvider, { position: "absolute" },
            React.createElement(Dialog, { id: `${path.join('-')}-dialog`, onClickOutside: handleClose },
                React.createElement(Box, { padding: 4 },
                    React.createElement(Text, null, "Dialog")))))));
}
function DebugFormField(props) {
    const { children, focusPath, path, value, compareValue } = props;
    return (React.createElement(ChangeIndicator, { path: path, isChanged: false, hasFocus: false }, children));
}
function DebugDiffField(props) {
    const { children, path } = props;
    const [hovered, setHovered] = useState(false);
    const handleMouseEnter = useCallback(() => setHovered(true), []);
    const handleMouseLeave = useCallback(() => setHovered(false), []);
    const handleClick = useCallback(() => {
        //
    }, []);
    return (React.createElement(Stack, { space: 2 },
        React.createElement(Text, { size: 1, weight: "semibold" }, "String"),
        React.createElement(ChangeFieldWrapper, { hasHover: hovered, path: path },
            React.createElement(Card, { borderLeft: true, onClick: handleClick, padding: 3, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave }, children))));
}
//# sourceMappingURL=ChangeConnectorsStory.js.map