import { generateHelpUrl } from '@sanity/generate-help-url';
import { Box, Button, Card, Code, Container, Heading, Label, Stack, Text } from '@sanity/ui';
import React, { useCallback } from 'react';
import styled from 'styled-components';
import { SyncIcon } from '@sanity/icons';
import { SerializeError } from '../../structureBuilder';
import { PaneResolutionError } from '../../structureResolvers';
const PathSegment = styled.span `
  &:not(:last-child)::after {
    content: ' ➝ ';
    opacity: 0.5;
  }
`;
function formatStack(stack) {
    return (stack
        // Prettify builder functions
        .replace(/\(\.\.\.\)\./g, '(...)\n  .')
        // Remove webpack cruft from function names
        .replace(/__WEBPACK_IMPORTED_MODULE_\d+_+/g, '')
        // Remove default export postfix from function names
        .replace(/___default\./g, '.')
        // Replace full host path, leave only path to JS-file
        .replace(new RegExp(` \\(https?:\\/\\/${window.location.host}`, 'g'), ' ('));
}
export function StructureError({ error }) {
    if (!(error instanceof PaneResolutionError)) {
        throw error;
    }
    const { cause } = error;
    // Serialize errors are well-formatted and should be readable, in these cases a stack trace is
    // usually not helpful. Build errors in dev (with HMR) usually also contains a bunch of garbage
    // instead of an actual error message, so make sure we show the message in these cases as well
    const stack = cause?.stack || error.stack;
    const showStack = stack && !(cause instanceof SerializeError) && !error.message.includes('Module build failed:');
    const path = cause instanceof SerializeError ? cause.path : [];
    const helpId = (cause instanceof SerializeError && cause.helpId) || error.helpId;
    const handleReload = useCallback(() => {
        window.location.reload();
    }, []);
    return (React.createElement(Card, { height: "fill", overflow: "auto", padding: 4, sizing: "border", tone: "critical" },
        React.createElement(Container, null,
            React.createElement(Heading, { as: "h2" }, "Encountered an error while reading structure"),
            React.createElement(Card, { marginTop: 4, padding: 4, radius: 2, overflow: "auto", shadow: 1, tone: "inherit" },
                path.length > 0 && (React.createElement(Stack, { space: 2 },
                    React.createElement(Label, null, "Structure path"),
                    React.createElement(Code, null, path.slice(1).map((segment, i) => (
                    // eslint-disable-next-line react/no-array-index-key
                    React.createElement(PathSegment, { key: `${segment}-${i}` }, segment)))))),
                React.createElement(Stack, { marginTop: 4, space: 2 },
                    React.createElement(Label, null, "Error"),
                    React.createElement(Code, null, showStack ? formatStack(stack) : error.message)),
                helpId && (React.createElement(Box, { marginTop: 4 },
                    React.createElement(Text, null,
                        React.createElement("a", { href: generateHelpUrl(helpId), rel: "noopener noreferrer", target: "_blank" }, "View documentation")))),
                React.createElement(Box, { marginTop: 4 },
                    React.createElement(Button, { text: "Reload", icon: SyncIcon, tone: "primary", onClick: handleReload }))))));
}
//# sourceMappingURL=StructureError.js.map