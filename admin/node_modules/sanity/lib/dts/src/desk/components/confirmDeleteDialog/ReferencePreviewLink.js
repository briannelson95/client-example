import React, { useCallback } from 'react';
import { getPublishedId } from '../../../util';
import { PreviewCard } from '../../../components/PreviewCard';
import { useDocumentPresence, useDocumentPreviewStore } from '../../../datastores';
import { PaneItemPreview } from '../paneItem/PaneItemPreview';
import { usePaneRouter } from '../paneRouter';
const EMPTY_ARRAY = [];
export function ReferencePreviewLink(props) {
    const { onClick, type, value } = props;
    const publishedId = getPublishedId(value?._id);
    const documentPresence = useDocumentPresence(publishedId);
    const documentPreviewStore = useDocumentPreviewStore();
    const { ReferenceChildLink } = usePaneRouter();
    const Link = useCallback((linkProps) => (React.createElement(ReferenceChildLink, { documentId: value?._id, documentType: type?.name, parentRefPath: EMPTY_ARRAY, ...linkProps })), [ReferenceChildLink, type?.name, value?._id]);
    return (React.createElement(PreviewCard, { __unstable_focusRing: true, as: Link, "data-as": "a", onClick: onClick, padding: 2, radius: 2 },
        React.createElement(PaneItemPreview, { documentPreviewStore: documentPreviewStore, icon: type?.icon, layout: "default", presence: documentPresence?.length > 0 ? documentPresence : EMPTY_ARRAY, schemaType: type, value: value })));
}
//# sourceMappingURL=ReferencePreviewLink.js.map