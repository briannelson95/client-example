import { useElementRect, Box, Card, Flex, LayerProvider } from '@sanity/ui';
import React, { useMemo, useCallback, forwardRef } from 'react';
import { LegacyLayerProvider } from '../../../components/transitional';
import { usePane } from './usePane';
import { Layout, Root, TabsBox, TitleBox, TitleTextSkeleton, TitleText } from './PaneHeader.styles';
/**
 * @beta This API will change. DO NOT USE IN PRODUCTION.
 */
export const PaneHeader = forwardRef(function PaneHeader(props, ref) {
    const { actions, backButton, loading, subActions, tabs, title } = props;
    const { collapse, collapsed, expand, rootElement: paneElement } = usePane();
    const paneRect = useElementRect(paneElement || null);
    const layoutStyle = useMemo(() => ({
        width: collapsed ? paneRect?.height || window.innerHeight : undefined,
    }), [collapsed, paneRect]);
    const handleTitleClick = useCallback(() => {
        if (collapsed)
            return;
        collapse();
    }, [collapse, collapsed]);
    const handleLayoutClick = useCallback(() => {
        if (!collapsed)
            return;
        expand();
    }, [collapsed, expand]);
    return (React.createElement(LayerProvider, { zOffset: 100 },
        React.createElement(Root, { "data-collapsed": collapsed ? '' : undefined, "data-testid": "pane-header", ref: ref },
            React.createElement(LegacyLayerProvider, { zOffset: "paneHeader" },
                React.createElement(Card, { "data-collapsed": collapsed ? '' : undefined, tone: "inherit" },
                    React.createElement(Layout, { onClick: handleLayoutClick, padding: 2, paddingBottom: tabs || subActions ? 1 : 2, sizing: "border", style: layoutStyle },
                        backButton,
                        React.createElement(TitleBox, { flex: 1, onClick: handleTitleClick, paddingY: 3, paddingLeft: backButton ? 1 : 3 },
                            loading && React.createElement(TitleTextSkeleton, { animated: true, radius: 1 }),
                            !loading && (React.createElement(TitleText, { tabIndex: 0, textOverflow: "ellipsis", weight: "semibold" }, title))),
                        actions && (React.createElement(Box, { hidden: collapsed, paddingLeft: 1 },
                            React.createElement(LegacyLayerProvider, { zOffset: "paneHeader" }, actions)))),
                    (tabs || subActions) && (React.createElement(Flex, { align: "center", hidden: collapsed, paddingTop: 0, paddingRight: 2, paddingBottom: 2, paddingLeft: 3, overflow: "auto" },
                        React.createElement(TabsBox, { flex: 1, marginRight: subActions ? 3 : 0 },
                            React.createElement("div", null, tabs)),
                        subActions && React.createElement(Box, null, subActions))))))));
});
//# sourceMappingURL=PaneHeader.js.map