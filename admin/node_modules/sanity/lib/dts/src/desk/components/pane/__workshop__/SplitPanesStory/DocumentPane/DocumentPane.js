import { Flex } from '@sanity/ui';
import React, { useState, useCallback, useEffect } from 'react';
import { Pane } from '../../../Pane';
import { usePaneLayout } from '../../../usePaneLayout';
import { DocumentViewPanel } from './DocumentViewPanel';
import { ReviewChangesPanel } from './ReviewChangesPanel';
export function DocumentPane(props) {
    const { index, node, setPath } = props;
    const { collapsed: layoutCollapsed } = usePaneLayout();
    const [reviewChanges, setReviewChanges] = useState(false);
    const toggleReviewChanges = useCallback(() => setReviewChanges((v) => !v), []);
    const closeReviewChanges = useCallback(() => setReviewChanges(false), []);
    useEffect(() => {
        if (layoutCollapsed)
            setReviewChanges(false);
    }, [layoutCollapsed]);
    const handleBackClick = useCallback(() => {
        setPath((p) => p.slice(0, index));
    }, [index, setPath]);
    return (React.createElement(Pane, { currentMinWidth: reviewChanges ? 600 + 320 : 600, flex: 2.5, id: String(index), minWidth: reviewChanges ? 320 + 320 : 320 },
        React.createElement(Flex, { flex: 1, height: "fill" },
            React.createElement(DocumentViewPanel, { onBackClick: handleBackClick, reviewChanges: reviewChanges, title: `Document #${node.id}`, toggleReviewChanges: toggleReviewChanges }),
            reviewChanges && React.createElement(ReviewChangesPanel, { onClose: closeReviewChanges }))));
}
//# sourceMappingURL=DocumentPane.js.map