import React, { isValidElement } from 'react';
import { isNumber, isString } from 'lodash';
import { Inline } from '@sanity/ui';
import { PublishedStatus } from '../PublishedStatus';
import { DraftStatus } from '../DraftStatus';
import { DocumentPreviewPresence } from '../../../presence';
import { SanityDefaultPreview } from '../../../preview';
import { isRecord } from '../../../util';
import { getPreviewStateObservable, getValueWithFallback } from './helpers';
export class PaneItemPreview extends React.Component {
    constructor(props) {
        super(props);
        this.state = {};
        const { value, schemaType } = props;
        // const {title} = value
        const title = (isRecord(value.title) && isValidElement(value.title)) ||
            isString(value.title) ||
            isNumber(value.title)
            ? value.title
            : null;
        let sync = true;
        this.subscription = getPreviewStateObservable(props.documentPreviewStore, schemaType, value._id, title).subscribe((state) => {
            if (sync) {
                this.state = state;
            }
            else {
                this.setState(state);
            }
        });
        sync = false;
    }
    componentWillUnmount() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    render() {
        const { icon, layout, presence, value } = this.props;
        const { draft, published, isLoading } = this.state;
        const status = isLoading ? null : (React.createElement(Inline, { space: 4 },
            presence && presence.length > 0 && React.createElement(DocumentPreviewPresence, { presence: presence }),
            React.createElement(PublishedStatus, { document: published }),
            React.createElement(DraftStatus, { document: draft })));
        return (React.createElement(SanityDefaultPreview, { ...getValueWithFallback({ value, draft, published }), isPlaceholder: isLoading, icon: icon, layout: layout, status: status }));
    }
}
//# sourceMappingURL=PaneItemPreview.js.map