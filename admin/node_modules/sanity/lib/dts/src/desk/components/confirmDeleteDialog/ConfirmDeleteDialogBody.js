import React, { useCallback } from 'react';
import { WarningOutlineIcon, DocumentsIcon, ClipboardIcon, UnknownIcon, ChevronDownIcon, } from '@sanity/icons';
import { useToast, Text, Box, Button, Flex, Label, Card, Stack } from '@sanity/ui';
import { CopyToClipboard } from 'react-copy-to-clipboard';
import { useSchema } from '../../../hooks';
import { SanityDefaultPreview } from '../../../preview';
import { ReferencePreviewLink } from './ReferencePreviewLink';
import { ReferencesCard, OtherReferenceCount, CrossDatasetReferencesDetails, CrossDatasetReferencesSummary, TableContainer, Table, ChevronWrapper, } from './ConfirmDeleteDialogBody.styles';
/**
 * The inner part of the `ConfirmDeleteDialog`. This is ran when both the
 * `crossDatasetReferences` and `internalReferences` are loaded.
 */
export function ConfirmDeleteDialogBody({ crossDatasetReferences, internalReferences, documentTitle, totalCount, action, projectIds, onReferenceLinkClick, }) {
    const schema = useSchema();
    const toast = useToast();
    const renderPreviewItem = useCallback((item) => {
        const type = schema.get(item._type);
        if (type) {
            return React.createElement(ReferencePreviewLink, { type: type, value: item, onClick: onReferenceLinkClick });
        }
        return (
        // Padding added to match the ReferencePreviewLink styling
        React.createElement(Box, { padding: 2 },
            React.createElement(SanityDefaultPreview, { icon: UnknownIcon, title: "Preview Unavailable", subtitle: `ID: ${item._id}`, layout: "default" })));
    }, [schema, onReferenceLinkClick]);
    if (internalReferences?.totalCount === 0 && crossDatasetReferences?.totalCount === 0) {
        return (React.createElement(Text, { as: "p" },
            "Are you sure you want to delete ",
            React.createElement("strong", null,
                "\u201C",
                documentTitle,
                "\u201D"),
            "?"));
    }
    const documentCount = crossDatasetReferences.totalCount === 1
        ? '1 document'
        : `${crossDatasetReferences.totalCount.toLocaleString()} documents`;
    const projectCount = projectIds.length === 1 ? 'another project' : `${projectIds.length} projects`;
    const projectIdList = `Project ID${projectIds.length === 1 ? '' : 's'}: ${projectIds.join(', ')}`;
    return (React.createElement(React.Fragment, null,
        React.createElement(Card, { padding: 3, radius: 2, tone: "caution", marginBottom: 4, flex: "none" },
            React.createElement(Flex, null,
                React.createElement(Text, { "aria-hidden": "true", size: 1 },
                    React.createElement(WarningOutlineIcon, null)),
                React.createElement(Box, { flex: 1, marginLeft: 3 },
                    React.createElement(Text, { size: 1 }, totalCount === 1 ? (React.createElement(React.Fragment, null,
                        "1 document refers to \u201C",
                        documentTitle,
                        "\u201D")) : (React.createElement(React.Fragment, null,
                        totalCount.toLocaleString(),
                        " documents refer to \u201C",
                        documentTitle,
                        "\u201D")))))),
        React.createElement(Box, { flex: "none", marginBottom: 4 },
            React.createElement(Text, null,
                "You may not be able to ",
                action,
                " \u201C",
                documentTitle,
                "\u201D because the following documents refer to it:")),
        React.createElement(ReferencesCard, null,
            React.createElement(Flex, { direction: "column", height: "fill" },
                internalReferences.totalCount > 0 && (React.createElement(Stack, { as: "ul", padding: 3, space: 3, overflow: "auto", "data-testid": "internal-references" },
                    internalReferences?.references.map((item) => (React.createElement(Box, { as: "li", key: item._id }, renderPreviewItem(item)))),
                    internalReferences.totalCount > internalReferences.references.length && (React.createElement(Box, { as: "li", padding: 3 },
                        React.createElement(OtherReferenceCount, { ...internalReferences }))))),
                crossDatasetReferences.totalCount > 0 && (React.createElement(CrossDatasetReferencesDetails, { "data-testid": "cross-dataset-references", style: {
                        // only add the border if needed
                        borderTop: internalReferences.totalCount > 0
                            ? '1px solid var(--card-shadow-outline-color)'
                            : undefined,
                    } },
                    React.createElement(CrossDatasetReferencesSummary, null,
                        React.createElement(Flex, { padding: 4, align: "center" },
                            React.createElement(Box, { marginRight: 4 },
                                React.createElement(Text, { size: 3 },
                                    React.createElement(DocumentsIcon, null))),
                            React.createElement(Flex, { marginRight: 4, direction: "column" },
                                React.createElement(Box, { marginBottom: 2 },
                                    React.createElement(Text, null,
                                        documentCount,
                                        " in ",
                                        projectCount)),
                                React.createElement(Box, null,
                                    React.createElement(Text, { title: projectIdList, textOverflow: "ellipsis", size: 1, muted: true }, projectIdList))),
                            React.createElement(ChevronWrapper, null,
                                React.createElement(Text, { muted: true },
                                    React.createElement(ChevronDownIcon, null))))),
                    React.createElement(TableContainer, null,
                        React.createElement(Table, null,
                            React.createElement("thead", null,
                                React.createElement("tr", null,
                                    React.createElement("th", null,
                                        React.createElement(Label, { muted: true, size: 0 }, "Project ID")),
                                    React.createElement("th", null,
                                        React.createElement(Label, { muted: true, size: 0 }, "Dataset")),
                                    React.createElement("th", null,
                                        React.createElement(Label, { muted: true, size: 0 }, "Document ID")))),
                            React.createElement("tbody", null, crossDatasetReferences.references
                                .filter((reference) => {
                                return ('projectId' in reference &&
                                    'datasetName' in reference &&
                                    'documentId' in reference);
                            })
                                .map(({ projectId, datasetName, documentId }, index) => (
                            // eslint-disable-next-line react/no-array-index-key
                            React.createElement("tr", { key: `${documentId}-${index}` },
                                React.createElement("td", null,
                                    React.createElement(Text, { size: 1 }, projectId)),
                                React.createElement("td", null,
                                    React.createElement(Text, { size: 1 }, datasetName)),
                                React.createElement("td", null,
                                    React.createElement(Flex, { align: "center", gap: 2, justify: "flex-end" },
                                        React.createElement(Text, { textOverflow: "ellipsis", size: 1 }, documentId),
                                        React.createElement(CopyToClipboard, { text: documentId, 
                                            // eslint-disable-next-line react/jsx-no-bind
                                            onCopy: () => {
                                                // TODO: this isn't visible with the dialog open
                                                toast.push({
                                                    title: 'Copied document ID to clipboard!',
                                                    status: 'success',
                                                });
                                            } },
                                            React.createElement(Button, { title: "Copy ID to clipboard", mode: "bleed", icon: ClipboardIcon, fontSize: 0 }))))))))),
                        React.createElement(Box, { padding: 2 },
                            React.createElement(OtherReferenceCount, { ...crossDatasetReferences }))))))),
        React.createElement(Box, { flex: "none" },
            React.createElement(Text, null,
                "If you ",
                action,
                " this document, documents that refer to it will no longer be able to access it."))));
}
//# sourceMappingURL=ConfirmDeleteDialogBody.js.map