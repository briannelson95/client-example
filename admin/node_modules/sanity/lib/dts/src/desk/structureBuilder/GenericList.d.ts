import { InitialValueTemplateItem } from '../../templates';
import { StructureNode, SerializeOptions, Serializable, Child } from './StructureNodes';
import { MenuItem, MenuItemBuilder } from './MenuItem';
import { MenuItemGroup, MenuItemGroupBuilder } from './MenuItemGroup';
import { IntentChecker } from './Intent';
import { InitialValueTemplateItemBuilder } from './InitialValueTemplateItem';
import { PreviewLayoutKey } from '../../components/previews';
export declare const shallowIntentChecker: IntentChecker;
export interface ListDisplayOptions {
    showIcons?: boolean;
}
export interface BaseGenericList extends StructureNode {
    defaultLayout?: PreviewLayoutKey;
    canHandleIntent?: IntentChecker;
    displayOptions?: ListDisplayOptions;
    child: Child;
    initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[];
}
export interface GenericList extends BaseGenericList {
    type: string;
    menuItems: MenuItem[];
    menuItemGroups: MenuItemGroup[];
}
export interface BuildableGenericList extends Partial<BaseGenericList> {
    menuItems?: (MenuItem | MenuItemBuilder)[];
    menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[];
}
export interface GenericListInput extends StructureNode {
    id: string;
    title: string;
    menuItems?: (MenuItem | MenuItemBuilder)[];
    menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[];
    initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[];
    defaultLayout?: PreviewLayoutKey;
    canHandleIntent?: IntentChecker;
    child?: Child;
}
export declare abstract class GenericListBuilder<TList extends BuildableGenericList, ConcreteImpl> implements Serializable<GenericList> {
    protected initialValueTemplatesSpecified: boolean;
    protected spec: TList;
    id(id: string): ConcreteImpl;
    getId(): TList['id'];
    title(title: string): ConcreteImpl;
    getTitle(): TList['title'];
    defaultLayout(defaultLayout: PreviewLayoutKey): ConcreteImpl;
    getDefaultLayout(): TList['defaultLayout'];
    menuItems(menuItems: (MenuItem | MenuItemBuilder)[] | undefined): ConcreteImpl;
    getMenuItems(): TList['menuItems'];
    menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ConcreteImpl;
    getMenuItemGroups(): TList['menuItemGroups'];
    child(child: Child): ConcreteImpl;
    getChild(): TList['child'];
    canHandleIntent(canHandleIntent: IntentChecker): ConcreteImpl;
    getCanHandleIntent(): TList['canHandleIntent'];
    showIcons(enabled?: boolean): ConcreteImpl;
    getShowIcons(): boolean | undefined;
    initialValueTemplates(templates: InitialValueTemplateItem | InitialValueTemplateItemBuilder | Array<InitialValueTemplateItem | InitialValueTemplateItemBuilder>): ConcreteImpl;
    getInitialValueTemplates(): TList['initialValueTemplates'];
    serialize(options?: SerializeOptions): GenericList;
    abstract clone(_withSpec?: object): ConcreteImpl;
}
//# sourceMappingURL=GenericList.d.ts.map