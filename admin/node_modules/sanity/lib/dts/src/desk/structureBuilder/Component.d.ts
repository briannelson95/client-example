import { SerializeOptions, StructureNode, Serializable, Child } from './StructureNodes';
import { MenuItem, MenuItemBuilder } from './MenuItem';
import { MenuItemGroup, MenuItemGroupBuilder } from './MenuItemGroup';
import { UserComponent } from './types';
export interface Component extends StructureNode {
    component: UserComponent;
    child?: Child;
    menuItems: MenuItem[];
    menuItemGroups: MenuItemGroup[];
    options: {
        [key: string]: unknown;
    };
}
export interface ComponentInput extends StructureNode {
    component: UserComponent;
    child?: Child;
    options?: {
        [key: string]: unknown;
    };
    menuItems?: (MenuItem | MenuItemBuilder)[];
    menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[];
}
export interface BuildableComponent extends Partial<StructureNode> {
    component?: UserComponent;
    child?: Child;
    options?: {
        [key: string]: unknown;
    };
    menuItems?: (MenuItem | MenuItemBuilder)[];
    menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[];
}
export declare class ComponentBuilder implements Serializable<Component> {
    protected spec: BuildableComponent;
    constructor(spec?: ComponentInput);
    id(id: string): ComponentBuilder;
    getId(): BuildableComponent['id'];
    title(title: string): ComponentBuilder;
    getTitle(): BuildableComponent['title'];
    child(child: Child): ComponentBuilder;
    getChild(): BuildableComponent['child'];
    component(component: UserComponent): ComponentBuilder;
    getComponent(): BuildableComponent['component'];
    options(options: {
        [key: string]: unknown;
    }): ComponentBuilder;
    getOptions(): NonNullable<BuildableComponent['options']>;
    menuItems(menuItems: (MenuItem | MenuItemBuilder)[]): ComponentBuilder;
    getMenuItems(): BuildableComponent['menuItems'];
    menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ComponentBuilder;
    getMenuItemGroups(): BuildableComponent['menuItemGroups'];
    serialize(options?: SerializeOptions): Component;
    clone(withSpec?: BuildableComponent): ComponentBuilder;
}
//# sourceMappingURL=Component.d.ts.map