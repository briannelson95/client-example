import { kebabCase } from 'lodash';
import { HELP_URL, SerializeError } from '../SerializeError';
import { validateId } from '../util/validateId';
export class GenericViewBuilder {
    constructor() {
        this.spec = {};
    }
    id(id) {
        return this.clone({ id });
    }
    getId() {
        return this.spec.id;
    }
    title(title) {
        return this.clone({ title, id: this.spec.id || kebabCase(title) });
    }
    getTitle() {
        return this.spec.title;
    }
    icon(icon) {
        return this.clone({ icon });
    }
    getIcon() {
        return this.spec.icon;
    }
    serialize(options = { path: [] }) {
        const { id, title, icon } = this.spec;
        if (!id) {
            throw new SerializeError('`id` is required for view item', options.path, options.index).withHelpUrl(HELP_URL.ID_REQUIRED);
        }
        if (!title) {
            throw new SerializeError('`title` is required for view item', options.path, options.index).withHelpUrl(HELP_URL.TITLE_REQUIRED);
        }
        return {
            id: validateId(id, options.path, options.index),
            title,
            icon,
        };
    }
}
function isSerializable(view) {
    return typeof view.serialize === 'function';
}
export function maybeSerializeView(item, index, path) {
    return isSerializable(item) ? item.serialize({ path, index }) : item;
}
//# sourceMappingURL=View.js.map