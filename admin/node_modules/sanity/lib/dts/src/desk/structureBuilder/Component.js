import { camelCase } from 'lodash';
import { SerializeError, HELP_URL } from './SerializeError';
import { maybeSerializeMenuItem } from './MenuItem';
import { maybeSerializeMenuItemGroup } from './MenuItemGroup';
import { validateId } from './util/validateId';
export class ComponentBuilder {
    constructor(spec) {
        this.spec = { options: {}, ...(spec ? spec : {}) };
    }
    id(id) {
        return this.clone({ id });
    }
    getId() {
        return this.spec.id;
    }
    title(title) {
        return this.clone({ title, id: this.spec.id || camelCase(title) });
    }
    getTitle() {
        return this.spec.title;
    }
    child(child) {
        return this.clone({ child });
    }
    getChild() {
        return this.spec.child;
    }
    component(component) {
        return this.clone({ component });
    }
    getComponent() {
        return this.spec.component;
    }
    options(options) {
        return this.clone({ options });
    }
    getOptions() {
        return this.spec.options || {};
    }
    menuItems(menuItems) {
        return this.clone({ menuItems });
    }
    getMenuItems() {
        return this.spec.menuItems;
    }
    menuItemGroups(menuItemGroups) {
        return this.clone({ menuItemGroups });
    }
    getMenuItemGroups() {
        return this.spec.menuItemGroups;
    }
    serialize(options = { path: [] }) {
        const { id, title, child, options: componentOptions, component } = this.spec;
        if (!id) {
            throw new SerializeError('`id` is required for `component` structure item', options.path, options.index).withHelpUrl(HELP_URL.ID_REQUIRED);
        }
        if (!component) {
            throw new SerializeError('`component` is required for `component` structure item', options.path, options.index).withHelpUrl(HELP_URL.ID_REQUIRED);
        }
        return {
            id: validateId(id, options.path, options.index),
            title,
            type: 'component',
            child,
            component,
            options: componentOptions || {},
            menuItems: (this.spec.menuItems || []).map((item, i) => maybeSerializeMenuItem(item, i, options.path)),
            menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) => maybeSerializeMenuItemGroup(item, i, options.path)),
        };
    }
    clone(withSpec) {
        const builder = new ComponentBuilder();
        builder.spec = { ...this.spec, ...(withSpec || {}) };
        return builder;
    }
}
//# sourceMappingURL=Component.js.map