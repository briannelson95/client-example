/// <reference types="react" />
import { Serializable, SerializeOptions, SerializePath } from '../StructureNodes';
import { ComponentViewBuilder } from './ComponentView';
import { FormViewBuilder } from './FormView';
import { View } from '../types';
export interface BaseView {
    id: string;
    title: string;
    icon?: React.ComponentType | React.ReactNode;
}
export declare abstract class GenericViewBuilder<TView extends Partial<BaseView>, ConcreteImpl> implements Serializable<BaseView> {
    protected spec: TView;
    id(id: string): ConcreteImpl;
    getId(): TView['id'];
    title(title: string): ConcreteImpl;
    getTitle(): TView['title'];
    icon(icon: React.ComponentType | React.ReactNode): ConcreteImpl;
    getIcon(): TView['icon'];
    serialize(options?: SerializeOptions): BaseView;
    abstract clone(withSpec?: Partial<BaseView>): ConcreteImpl;
}
export declare function maybeSerializeView(item: View | Serializable<View>, index: number, path: SerializePath): View;
export declare type ViewBuilder = ComponentViewBuilder | FormViewBuilder;
//# sourceMappingURL=View.d.ts.map