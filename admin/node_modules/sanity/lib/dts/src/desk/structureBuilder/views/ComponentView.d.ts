import { SerializeOptions } from '../StructureNodes';
import type { UserViewComponent } from '../types';
import { BaseView, GenericViewBuilder } from './View';
export interface ComponentView<TOptions = Record<string, any>> extends BaseView {
    type: 'component';
    component: UserViewComponent;
    options: TOptions;
}
export declare class ComponentViewBuilder extends GenericViewBuilder<Partial<ComponentView>, ComponentViewBuilder> {
    protected spec: Partial<ComponentView>;
    constructor(componentOrSpec?: UserViewComponent | Partial<ComponentView>);
    component(component: UserViewComponent): ComponentViewBuilder;
    getComponent(): Partial<ComponentView>['component'];
    options(options: {
        [key: string]: any;
    }): ComponentViewBuilder;
    getOptions(): ComponentView['options'];
    serialize(options?: SerializeOptions): ComponentView;
    clone(withSpec?: Partial<ComponentView>): ComponentViewBuilder;
}
//# sourceMappingURL=ComponentView.d.ts.map