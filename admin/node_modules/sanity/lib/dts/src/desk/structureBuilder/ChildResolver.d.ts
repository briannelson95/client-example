import { CollectionBuilder, Collection, SerializeOptions } from './StructureNodes';
import { StructureContext } from './types';
export interface ChildResolverOptions {
    parent: unknown;
    index: number;
    splitIndex: number;
    path: string[];
    params: Record<string, string | undefined>;
    structureContext: StructureContext;
    serializeOptions?: SerializeOptions;
}
export declare type ItemChild = CollectionBuilder | Collection | undefined;
export interface ChildObservable {
    subscribe: (child: ItemChild | Promise<ItemChild>) => Record<string, unknown>;
}
export interface ChildResolver {
    (itemId: string, options: ChildResolverOptions): ItemChild | Promise<ItemChild> | ChildObservable | undefined;
}
//# sourceMappingURL=ChildResolver.d.ts.map