import { isRecord } from '../../util';
import { ListItemBuilder } from './ListItem';
import { SerializeError, HELP_URL } from './SerializeError';
import { DocumentBuilder } from './Document';
const createDefaultChildResolver = (context, spec) => (documentId) => {
    const schemaType = spec.schemaType &&
        (typeof spec.schemaType === 'string' ? spec.schemaType : spec.schemaType.name);
    return schemaType
        ? context.resolveDocumentNode({ schemaType, documentId })
        : new DocumentBuilder(context).id('documentEditor').documentId(documentId);
};
export class DocumentListItemBuilder extends ListItemBuilder {
    constructor(_context, spec) {
        super(_context, spec);
        this._context = _context;
        this.spec = spec ? spec : {};
    }
    serialize(options = { path: [] }) {
        const spec = super.serialize({ ...options, titleIsOptional: true });
        if (!spec.schemaType) {
            throw new SerializeError('`schemaType` is required for document list items', options.path, options.index).withHelpUrl(HELP_URL.SCHEMA_TYPE_REQUIRED);
        }
        const child = spec.child || createDefaultChildResolver(this._context, spec);
        return { ...spec, child, schemaType: spec.schemaType, _id: spec.id };
    }
    clone(withSpec) {
        const builder = new DocumentListItemBuilder(this._context);
        builder.spec = { ...this.spec, ...(withSpec || {}) };
        return builder;
    }
}
export function isDocumentListItem(item) {
    return isRecord(item) && typeof item.schemaType !== 'undefined' && typeof item._id === 'string';
}
//# sourceMappingURL=DocumentListItem.js.map