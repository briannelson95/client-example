import { uniqueId } from 'lodash';
import { isValidElementType } from 'react-is';
import { getConfigContextFromSource } from '../../config';
import { getPublishedId } from '../../util';
import { ListBuilder } from './List';
import { getDocumentTypeListItems, getDocumentTypeListItem, getDocumentTypeList, } from './documentTypeListItems';
import { MenuItemBuilder, getOrderingMenuItemsForSchemaType, getOrderingMenuItem } from './MenuItem';
import { ListItemBuilder } from './ListItem';
import { MenuItemGroupBuilder } from './MenuItemGroup';
import { DocumentListBuilder } from './DocumentList';
import { DocumentBuilder, documentFromEditor, documentFromEditorWithInitialValue } from './Document';
import { ComponentBuilder } from './Component';
import { DocumentListItemBuilder } from './DocumentListItem';
import * as views from './views';
import { InitialValueTemplateItemBuilder, defaultInitialValueTemplateItems, menuItemsFromInitialValueTemplateItems, } from './InitialValueTemplateItem';
function hasIcon(schemaType) {
    if (!schemaType || typeof schemaType === 'string') {
        return false;
    }
    return Boolean(schemaType.icon);
}
function getDefaultStructure(context) {
    const items = getDocumentTypeListItems(context);
    return new ListBuilder(context)
        .id('__root__')
        .title('Content')
        .items(items)
        .showIcons(items.some((item) => hasIcon(item.getSchemaType())));
}
export function createStructureBuilder({ defaultDocumentNode, source, }) {
    const configContext = getConfigContextFromSource(source);
    const context = {
        ...source,
        getStructureBuilder: () => structureBuilder,
        resolveDocumentNode: (options) => {
            let builder = defaultDocumentNode?.(structureBuilder, { ...options, ...configContext }) ||
                new DocumentBuilder(context);
            if (!builder.getId()) {
                builder = builder.id('documentEditor');
            }
            if (options.documentId) {
                builder = builder.documentId(getPublishedId(options.documentId));
            }
            return builder.schemaType(options.schemaType);
        },
    };
    const structureBuilder = {
        defaults: () => getDefaultStructure(context),
        documentTypeList: (...args) => getDocumentTypeList(context, ...args),
        documentTypeListItem: (...args) => getDocumentTypeListItem(context, ...args),
        documentTypeListItems: (...args) => getDocumentTypeListItems(context, ...args),
        document: (...args) => new DocumentBuilder(context, ...args),
        documentWithInitialValueTemplate: (...args) => documentFromEditorWithInitialValue(context, ...args),
        defaultDocument: context.resolveDocumentNode,
        list: (...args) => new ListBuilder(context, ...args),
        listItem: (...args) => new ListItemBuilder(context, ...args),
        menuItem: (...args) => new MenuItemBuilder(context, ...args),
        menuItemGroup: (...args) => new MenuItemGroupBuilder(context, ...args),
        menuItemsFromInitialValueTemplateItems: (...args) => menuItemsFromInitialValueTemplateItems(context, ...args),
        documentList: (...args) => new DocumentListBuilder(context, ...args),
        documentListItem: (...args) => new DocumentListItemBuilder(context, ...args),
        orderingMenuItem: (...args) => getOrderingMenuItem(context, ...args),
        orderingMenuItemsForType: (...args) => getOrderingMenuItemsForSchemaType(context, ...args),
        editor: (...args) => documentFromEditor(context, ...args),
        defaultInitialValueTemplateItems: (...args) => defaultInitialValueTemplateItems(context, ...args),
        initialValueTemplateItem: (templateId, parameters) => new InitialValueTemplateItemBuilder(context, {
            id: templateId,
            parameters,
            templateId,
        }),
        component: (spec) => {
            return isValidElementType(spec)
                ? new ComponentBuilder().component(spec)
                : new ComponentBuilder(spec);
        },
        divider: () => ({ id: uniqueId('__divider__'), type: 'divider' }),
        view: views,
        context,
    };
    return structureBuilder;
}
//# sourceMappingURL=createStructureBuilder.js.map