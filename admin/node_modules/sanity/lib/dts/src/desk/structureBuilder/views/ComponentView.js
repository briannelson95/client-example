import { SerializeError, HELP_URL } from '../SerializeError';
import { isRecord } from '../../../util';
import { GenericViewBuilder } from './View';
const isComponentSpec = (spec) => isRecord(spec) && spec.type === 'component';
export class ComponentViewBuilder extends GenericViewBuilder {
    constructor(componentOrSpec) {
        const spec = isComponentSpec(componentOrSpec) ? { ...componentOrSpec } : { options: {} };
        super();
        this.spec = spec;
        const userComponent = typeof componentOrSpec === 'function' ? componentOrSpec : this.spec.component;
        if (userComponent) {
            // Because we're cloning, this'll return a new instance, so grab the spec from it
            this.spec = this.component(userComponent).spec;
        }
    }
    component(component) {
        return this.clone({ component });
    }
    getComponent() {
        return this.spec.component;
    }
    options(options) {
        return this.clone({ options });
    }
    getOptions() {
        return this.spec.options || {};
    }
    serialize(options = { path: [] }) {
        const base = super.serialize(options);
        const component = this.spec.component;
        if (typeof component !== 'function') {
            throw new SerializeError('`component` is required and must be a function for `component()` view item', options.path, options.index).withHelpUrl(HELP_URL.COMPONENT_REQUIRED);
        }
        return {
            ...base,
            component,
            options: this.spec.options || {},
            type: 'component',
        };
    }
    clone(withSpec) {
        const builder = new ComponentViewBuilder();
        builder.spec = { ...this.spec, ...(withSpec || {}) };
        return builder;
    }
}
//# sourceMappingURL=ComponentView.js.map