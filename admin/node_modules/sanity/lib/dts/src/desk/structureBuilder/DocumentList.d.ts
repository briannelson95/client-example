import { SchemaType, SortOrderingItem } from '@sanity/types';
import { SerializeOptions, Child } from './StructureNodes';
import { GenericListBuilder, BuildableGenericList, GenericList, GenericListInput } from './GenericList';
import { StructureContext } from './types';
export interface PartialDocumentList extends BuildableGenericList {
    options?: DocumentListOptions;
    schemaTypeName?: string;
}
export interface DocumentListInput extends GenericListInput {
    options: DocumentListOptions;
}
export interface DocumentList extends GenericList {
    type: 'documentList';
    options: DocumentListOptions;
    child: Child;
    schemaTypeName?: string;
}
export interface DocumentListOptions {
    filter: string;
    params?: Record<string, unknown>;
    apiVersion?: string;
    defaultOrdering?: SortOrderingItem[];
}
export declare class DocumentListBuilder extends GenericListBuilder<PartialDocumentList, DocumentListBuilder> {
    protected _context: StructureContext;
    protected spec: PartialDocumentList;
    constructor(_context: StructureContext, spec?: DocumentListInput);
    apiVersion(apiVersion: string): DocumentListBuilder;
    getApiVersion(): string | undefined;
    filter(filter: string): DocumentListBuilder;
    getFilter(): string | undefined;
    schemaType(type: SchemaType | string): DocumentListBuilder;
    getSchemaType(): string | undefined;
    params(params: Record<string, unknown>): DocumentListBuilder;
    getParams(): Record<string, unknown> | undefined;
    defaultOrdering(ordering: SortOrderingItem[]): DocumentListBuilder;
    getDefaultOrdering(): SortOrderingItem[] | undefined;
    serialize(options?: SerializeOptions): DocumentList;
    clone(withSpec?: PartialDocumentList): DocumentListBuilder;
    getSpec(): PartialDocumentList;
}
export declare function getTypeNamesFromFilter(filter: string, params?: Record<string, unknown>): string[];
//# sourceMappingURL=DocumentList.d.ts.map