import { SchemaType } from '@sanity/types';
import { SerializeOptions, Serializable, Child, DocumentNode, EditorNode } from './StructureNodes';
import { ViewBuilder } from './views/View';
import type { StructureContext, View } from './types';
export interface DocumentOptions {
    id: string;
    type: string;
    template?: string;
    templateParameters?: Record<string, unknown>;
}
export declare type PartialDocumentNode = {
    id?: string;
    title?: string;
    child?: Child;
    views?: (View | ViewBuilder)[];
    options?: Partial<DocumentOptions>;
};
export declare class DocumentBuilder implements Serializable<DocumentNode> {
    protected _context: StructureContext;
    protected spec: PartialDocumentNode;
    constructor(_context: StructureContext, spec?: PartialDocumentNode);
    id(id: string): DocumentBuilder;
    getId(): PartialDocumentNode['id'];
    title(title: string): DocumentBuilder;
    getTitle(): PartialDocumentNode['title'];
    child(child: Child): DocumentBuilder;
    getChild(): PartialDocumentNode['child'];
    documentId(documentId: string): DocumentBuilder;
    getDocumentId(): Partial<DocumentOptions>['id'];
    schemaType(documentType: SchemaType | string): DocumentBuilder;
    getSchemaType(): Partial<DocumentOptions>['type'];
    initialValueTemplate(templateId: string, parameters?: Record<string, unknown>): DocumentBuilder;
    getInitialValueTemplate(): Partial<DocumentOptions>['template'];
    getInitialValueTemplateParameters(): Partial<DocumentOptions>['templateParameters'];
    views(views: (View | ViewBuilder)[]): DocumentBuilder;
    getViews(): (View | ViewBuilder)[];
    serialize({ path, index, hint }?: SerializeOptions): DocumentNode;
    clone(withSpec?: PartialDocumentNode): DocumentBuilder;
}
export declare function documentFromEditor(context: StructureContext, spec?: EditorNode): DocumentBuilder;
export declare function documentFromEditorWithInitialValue({ resolveDocumentNode, templates }: StructureContext, templateId: string, parameters?: Record<string, unknown>): DocumentBuilder;
//# sourceMappingURL=Document.d.ts.map