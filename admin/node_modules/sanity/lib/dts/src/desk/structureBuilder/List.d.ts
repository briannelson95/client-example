import { SerializeOptions, Divider } from './StructureNodes';
import { ListItem, ListItemBuilder } from './ListItem';
import { GenericListBuilder, BuildableGenericList, GenericList, GenericListInput } from './GenericList';
import { StructureContext } from './types';
export interface List extends GenericList {
    type: 'list';
    items: (ListItem | Divider)[];
}
export interface ListInput extends GenericListInput {
    items?: (ListItem | ListItemBuilder | Divider)[];
}
export interface BuildableList extends BuildableGenericList {
    items?: (ListItem | ListItemBuilder | Divider)[];
}
export declare class ListBuilder extends GenericListBuilder<BuildableList, ListBuilder> {
    protected _context: StructureContext;
    protected spec: BuildableList;
    constructor(_context: StructureContext, spec?: ListInput);
    items(items: (ListItemBuilder | ListItem | Divider)[]): ListBuilder;
    getItems(): BuildableList['items'];
    serialize(options?: SerializeOptions): List;
    clone(withSpec?: BuildableList): ListBuilder;
}
//# sourceMappingURL=List.d.ts.map