import { throttle } from 'lodash';
import { useEffect, useMemo } from 'react';
/**
 * @internal
 *
 * @example
 * ```tsx
 * // First create a callback using Reactâ€™s `useCallback` hook
 * const myCallback = useCallback(() => {
 *   // this is not throttled
 * }, [])
 *
 * // Then make a throttled version using the `useThrottledCallback` hook
 * const myThrottledCallback = useThrottledCallback(myCallback, 100)
 *
 * // Call the throttled callback
 * <Button onClick={myThrottledCallback} />
 * ```
 */
export function useThrottledCallback(callback, wait, options) {
    const throttledCallback = useMemo(() => throttle(callback, wait, options), [callback, options, wait]);
    useEffect(() => () => {
        // cleanup: invoke the last value
        throttledCallback.flush();
    }, [throttledCallback]);
    return throttledCallback;
}
//# sourceMappingURL=useThrottledCallback.js.map