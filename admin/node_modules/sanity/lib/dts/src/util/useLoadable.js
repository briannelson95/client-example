import { useMemoObservable } from 'react-rx';
import { of } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
const LOADING_STATE = {
    isLoading: true,
    value: undefined,
    error: null,
};
export function useLoadable(value$, initialValue) {
    const initial = typeof initialValue === 'undefined'
        ? LOADING_STATE
        : { isLoading: false, value: initialValue, error: null };
    return useMemoObservable(() => value$.pipe(asLoadable()), [value$], initial);
}
export function asLoadable() {
    return (value$) => value$.pipe(map((value) => ({ isLoading: false, value, error: null })), catchError((error) => of({ isLoading: false, value: undefined, error })));
}
//# sourceMappingURL=useLoadable.js.map