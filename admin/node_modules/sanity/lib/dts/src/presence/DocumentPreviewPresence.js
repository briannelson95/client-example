import { AvatarStack, Box, Card, Text, Tooltip } from '@sanity/ui';
import React, { useMemo } from 'react';
import styled, { css, useTheme } from 'styled-components';
import { usePreviewCard } from '../components/PreviewCard';
import { UserAvatar } from '../components/UserAvatar';
import { isNonNullable } from '../util/isNonNullable';
const PRESENCE_MENU_POPOVER_PROPS = {
    portal: true,
};
const AvatarStackCard = styled(Card)(({ theme, $selected }) => {
    const { color } = theme.sanity;
    return css `
    --card-bg-color: inherit;
    --card-fg-color: inherit;
    --card-hairline-hard-color: ${$selected ? color.selectable?.default.pressed.border : undefined};
  `;
});
const TooltipContentBox = styled(Box) `
  max-width: 150px;
`;
const getTooltipText = (presence) => {
    if (presence.length === 1) {
        return `${presence[0].user.displayName} is editing this document`;
    }
    if (presence.length > 1) {
        return `${presence.length} people are editing this document right now`;
    }
    return undefined;
};
export function DocumentPreviewPresence(props) {
    const { presence } = props;
    const { color } = useTheme().sanity;
    const invertedScheme = color.dark ? 'light' : 'dark';
    const { selected } = usePreviewCard();
    const uniqueUsers = useMemo(() => Array.from(new Set(presence.map((a) => a.user.id)))
        .map((id) => {
        return presence.find((a) => a.user.id === id);
    })
        .filter(isNonNullable), [presence]);
    const tooltipContent = useMemo(() => {
        return (React.createElement(TooltipContentBox, { padding: 2 },
            React.createElement(Text, { align: "center", size: 1 }, getTooltipText(uniqueUsers))));
    }, [uniqueUsers]);
    return (React.createElement(Tooltip, { content: tooltipContent, ...PRESENCE_MENU_POPOVER_PROPS },
        React.createElement(AvatarStackCard, { scheme: selected ? invertedScheme : undefined, "$selected": selected },
            React.createElement(AvatarStack, { maxLength: 2 }, uniqueUsers.map((item) => (React.createElement(UserAvatar, { key: item.user.id, user: item.user })))))));
}
//# sourceMappingURL=DocumentPreviewPresence.js.map