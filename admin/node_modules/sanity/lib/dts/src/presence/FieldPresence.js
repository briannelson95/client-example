import React, { memo, useContext } from 'react';
import { sortBy, uniqBy } from 'lodash';
import { AvatarCounter } from '@sanity/ui';
import { useId } from '@reach/auto-id';
import { UserAvatar } from '../components/UserAvatar';
import { AVATAR_DISTANCE, AVATAR_SIZE, DEFAULT_MAX_AVATARS_FIELDS, DISABLE_OVERLAY, } from './constants';
import { splitRight } from './utils';
import { FlexWrapper, InnerBox } from './FieldPresence.styled';
import { FormFieldPresenceContext } from './context';
import { PresenceTooltip } from './PresenceTooltip';
import { useReporter } from './overlay/tracker';
export const FieldPresence = DISABLE_OVERLAY
    ? FieldPresenceWithoutOverlay
    : FieldPresenceWithOverlay;
export function FieldPresenceWithOverlay(props) {
    const contextPresence = useContext(FormFieldPresenceContext);
    const { presence = contextPresence, maxAvatars = DEFAULT_MAX_AVATARS_FIELDS } = props;
    const ref = React.useRef(null);
    useReporter(useId() || '', () => ({ presence, element: ref.current, maxAvatars: maxAvatars }));
    const minWidth = -AVATAR_DISTANCE + (AVATAR_SIZE + AVATAR_DISTANCE) * props.maxAvatars;
    return (React.createElement(FlexWrapper, { justify: "flex-end", ref: ref, style: { minWidth: minWidth, minHeight: AVATAR_SIZE } }));
}
export function FieldPresenceWithoutOverlay(props) {
    const contextPresence = useContext(FormFieldPresenceContext);
    const { presence = contextPresence, maxAvatars = DEFAULT_MAX_AVATARS_FIELDS } = props;
    if (!presence.length) {
        return null;
    }
    return React.createElement(FieldPresenceInner, { presence: presence, maxAvatars: maxAvatars });
}
function calcAvatarStackWidth(len) {
    return -AVATAR_DISTANCE + (AVATAR_SIZE + AVATAR_DISTANCE) * len;
}
export const FieldPresenceInner = memo(function FieldPresenceInner({ presence, position = 'inside', animateArrowFrom = 'inside', maxAvatars = DEFAULT_MAX_AVATARS_FIELDS, stack = true, }) {
    const uniquePresence = uniqBy(presence || [], (item) => item.user.id);
    const sorted = sortBy(uniquePresence, (_presence) => _presence.lastActiveAt);
    const [hidden, visible] = stack ? splitRight(sorted, maxAvatars) : [[], sorted];
    const avatars = [
        ...visible.reverse().map((_visible) => ({
            key: _visible.user.id,
            element: (React.createElement(UserAvatar, { animateArrowFrom: animateArrowFrom, position: position, status: "online", user: _visible.user })),
        })),
        hidden.length >= 2
            ? {
                key: 'counter',
                element: React.createElement(AvatarCounter, { count: hidden.length }),
            }
            : null,
    ].filter(Boolean);
    const maxWidth = calcAvatarStackWidth(maxAvatars);
    const currWidth = Math.min(calcAvatarStackWidth(uniquePresence.length), maxWidth);
    return (React.createElement(FlexWrapper, { justify: "flex-end", style: { width: maxWidth } },
        React.createElement("div", null),
        React.createElement(PresenceTooltip, { items: uniquePresence },
            React.createElement(InnerBox, { direction: "row-reverse", style: { width: currWidth } }, avatars.map((av, i) => av && (React.createElement("div", { key: av.key, style: {
                    position: 'absolute',
                    transform: `translate3d(${-i * (AVATAR_SIZE + AVATAR_DISTANCE)}px, 0px, 0px)`,
                    transitionProperty: 'transform',
                    transitionDuration: '200ms',
                    transitionTimingFunction: 'cubic-bezier(0.85, 0, 0.15, 1)',
                    zIndex: 100 - i,
                } }, av.element)))))));
});
//# sourceMappingURL=FieldPresence.js.map