import { isUnion } from '../helpers';
import { generateTypeFilters } from './generateTypeFilters';
import { generateTypeSortings } from './generateTypeSortings';
import { generateTypeQueries } from './generateTypeQueries';
export default (extracted) => {
    const documentInterface = extracted.interfaces.find((iface) => iface.name === 'Document');
    if (!documentInterface || isUnion(documentInterface)) {
        throw new Error('Failed to find document interface');
    }
    const types = [...extracted.types, documentInterface];
    const filters = generateTypeFilters(types);
    const sortings = generateTypeSortings(types);
    const queries = generateTypeQueries(types, sortings.filter((node) => node.kind === 'InputObject'));
    const graphqlTypes = [...extracted.types, ...filters, ...sortings];
    return { types: graphqlTypes, queries, interfaces: extracted.interfaces, generation: 'gen3' };
};
//# sourceMappingURL=index.js.map