import { RestoreIcon } from '@sanity/icons';
import { Box, Button, Card, Code, Flex, Inline, Stack, Text } from '@sanity/ui';
import { format } from 'date-fns';
import { omit } from 'lodash';
import React, { useCallback, useEffect, useMemo, useState } from 'react';
import { useMemoObservable } from 'react-rx';
import { ChangeFieldWrapper } from '../../components/changeIndicators';
import { ChangeList, DocumentChangeContext, } from '../../field';
import { useClient, useConnectionState, useEditState, useSchema } from '../../hooks';
import { useInitialValue } from '../document/useInitialValue';
import { useHistoryStore } from '../datastores';
export default function HistoryTimelineStory() {
    const client = useClient();
    const schema = useSchema();
    const documentId = useMemo(() => 'test', []);
    const documentType = useMemo(() => 'author', []);
    const schemaType = schema.get(documentType);
    const templateName = useMemo(() => undefined, []);
    const templateParams = useMemo(() => undefined, []);
    const [params, setParams] = useState({});
    const historyStore = useHistoryStore();
    const connectionState = useConnectionState(documentId, documentType);
    const editState = useEditState(documentId, documentType);
    const initialValue = useInitialValue({
        documentId,
        documentType,
        templateName,
        templateParams,
    });
    const value = editState?.draft || editState?.published || initialValue.value;
    const timeline = useMemo(() => historyStore.getTimeline({ publishedId: documentId, enableTrace: true }), [documentId, historyStore]);
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const { historyController } = useMemoObservable(() => historyStore.getTimelineController({ client, documentId, documentType, timeline }), [client, documentId, documentType, timeline]);
    const [, _forceUpdate] = useState(0);
    const forceUpdate = useCallback(() => _forceUpdate((p) => p + 1), []);
    useEffect(() => {
        historyController.setRange(params.since || null, params.rev || null);
        forceUpdate();
    }, [forceUpdate, historyController, params.rev, params.since]);
    const changesOpen = historyController.changesPanelActive();
    const compareValue = changesOpen
        ? historyController.sinceAttributes()
        : null;
    const ready = connectionState === 'connected' && editState.ready;
    const isPreviousVersion = historyController.onOlderRevision();
    const displayed = useMemo(() => (isPreviousVersion ? historyController.displayed() : value), 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [historyController, params.rev, params.since, value, isPreviousVersion]);
    const diff = changesOpen ? historyController.currentObjectDiff() : null;
    const handleHistoryOpen = useCallback(() => {
        setParams((prevParams) => ({ ...prevParams, since: '@lastPublished' }));
    }, []);
    const handleHistoryClose = useCallback(() => {
        setParams((prevParams) => omit({ ...prevParams }, 'since'));
    }, []);
    const setTimelineRange = useCallback((newSince, newRev) => {
        setParams((prevParams) => ({
            ...prevParams,
            since: newSince || undefined,
            rev: newRev || undefined,
        }));
    }, []);
    const isComparingCurrent = !historyController.onOlderRevision();
    const documentContext = useMemo(() => ({
        documentId,
        schemaType: schemaType,
        FieldWrapper: ChangeFieldWrapper,
        rootDiff: diff,
        isComparingCurrent,
        value,
    }), [diff, documentId, isComparingCurrent, schemaType, value]);
    return (React.createElement(Flex, { direction: "column", height: "fill" },
        React.createElement(Card, { borderBottom: true, padding: 2 },
            React.createElement(Inline, { space: 1 },
                React.createElement(Button, { icon: RestoreIcon, mode: "ghost", onClick: changesOpen ? handleHistoryClose : handleHistoryOpen, selected: changesOpen, text: "Review changes" }))),
        React.createElement(Flex, { flex: 1 },
            React.createElement(Card, { flex: 1, overflow: "auto", padding: 1 },
                React.createElement(Flex, { gap: 1 },
                    React.createElement(Stack, { flex: 1, space: 1 },
                        React.createElement(Box, { padding: 3 },
                            React.createElement(Text, { size: 1, weight: "semibold" }, "Revision")),
                        timeline.mapChunks((chunk) => {
                            return (React.createElement(Card, { as: "button", key: chunk.id, onClick: () => {
                                    const [sinceId, revId] = historyController.findRangeForNewRev(chunk);
                                    setTimelineRange(sinceId, revId);
                                }, padding: 3, selected: historyController.realRevChunk === chunk },
                                React.createElement(Stack, { space: 2 },
                                    React.createElement(Text, null, chunk.type),
                                    React.createElement(Text, { muted: true, size: 1 }, format(new Date(chunk.endTimestamp), 'MMM d, YYY @ HH:mm')))));
                        })),
                    changesOpen && (React.createElement(Stack, { flex: 1, space: 1 },
                        React.createElement(Box, { padding: 3 },
                            React.createElement(Text, { size: 1, weight: "semibold" }, "Changes since")),
                        timeline.mapChunks((chunk) => {
                            return (React.createElement(Card, { as: "button", key: chunk.id, onClick: () => {
                                    const [sinceId, revId] = historyController.findRangeForNewSince(chunk);
                                    setTimelineRange(sinceId, revId);
                                }, padding: 3, selected: historyController.sinceTime === chunk },
                                React.createElement(Stack, { space: 2 },
                                    React.createElement(Text, null, chunk.type),
                                    React.createElement(Text, { muted: true, size: 1 }, format(new Date(chunk.endTimestamp), 'MMM d, YYY @ HH:mm')))));
                        }))))),
            React.createElement(Card, { borderLeft: true, flex: 1, overflow: "auto", padding: 4 },
                diff && schemaType && (React.createElement(DocumentChangeContext.Provider, { value: documentContext },
                    React.createElement(ChangeList, { diff: diff, schemaType: schemaType }))),
                !changesOpen && React.createElement(Text, null, "No range selected")),
            React.createElement(Card, { borderLeft: true, flex: 1, overflow: "auto", padding: 4 },
                React.createElement(Code, { language: "json", size: 1 }, JSON.stringify({
                    changesOpen,
                    compareValue,
                    diff,
                    displayed,
                    params,
                    ready,
                    viewOlderVersion: isPreviousVersion,
                }, null, 2))))));
}
//# sourceMappingURL=HistoryTimelineStory.js.map