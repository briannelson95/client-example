import { Observable } from 'rxjs';
import { Schema } from '@sanity/types';
import { Template, InitialValueTemplateItem } from '../../templates';
import { PartialExcept } from '../../util/PartialExcept';
import { GrantsStore, PermissionCheckResult } from './types';
export interface TemplatePermissionsResult<TInitialValue = Record<string, unknown>> extends PermissionCheckResult, InitialValueTemplateItem {
    granted: boolean;
    reason: string;
    resolvedInitialValue: TInitialValue;
    subtitle?: string;
    template: Template;
}
export interface TemplatePermissionsOptions {
    grantsStore: GrantsStore;
    schema: Schema;
    templates: Template[];
    templateItems: InitialValueTemplateItem[];
}
/**
 * The observable version of `useTemplatePermissions`
 */
export declare function getTemplatePermissions({ grantsStore, templateItems, templates, schema, }: TemplatePermissionsOptions): Observable<Array<TemplatePermissionsResult<Record<string, unknown>>>>;
/**
 * Takes in an array of initial template values and returns an object of
 * `TemplatePermissionsResult` keyed by the IDs of the initial template values
 * given.
 *
 * The `TemplatePermissionsResult` is an object that contains a `granted`
 * boolean per key and can be used to determine if a user has the ability to
 * create documents using the given initial value template items.
 *
 * For each initial template value item, the corresponding template is found and
 * resolved against the parameters in each the initial template value item. The
 * resolved value is then run through the document-value permissions. If there
 * are any matching grants for the resolved initial template value, the
 * `TemplatePermissionsResult` will include `granted: true`.
 */
export declare const useTemplatePermissionsFromHookFactory: (args_0: TemplatePermissionsOptions) => import("../../util/createHookFromObservableFactory").LoadingTuple<TemplatePermissionsResult<Record<string, unknown>>[] | undefined>;
export declare function useTemplatePermissions({ templateItems, ...rest }: PartialExcept<TemplatePermissionsOptions, 'templateItems'>): ReturnType<typeof useTemplatePermissionsFromHookFactory>;
//# sourceMappingURL=templatePermissions.d.ts.map