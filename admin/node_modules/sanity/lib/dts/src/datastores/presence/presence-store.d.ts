import { Observable } from 'rxjs';
import { BifurClient } from '@sanity/bifur-client';
import { ConnectionStatusStore } from '../connection-status/connection-status-store';
import { UserStore } from '../user';
import { DocumentPresence, GlobalPresence, PresenceLocation } from './types';
export interface PresenceStore {
    /**
     * @internal
     */
    documentPresence: (documentId: string) => Observable<DocumentPresence[]>;
    /**
     * @internal
     */
    globalPresence$: Observable<GlobalPresence[]>;
    /**
     * @internal
     */
    reportLocations: (locations: PresenceLocation[]) => Observable<void>;
    /**
     * @internal
     */
    setLocation: (nextLocation: PresenceLocation[]) => void;
    /**
     * @internal
     */
    debugPresenceParam$: Observable<string[]>;
}
export declare const SESSION_ID: string;
export declare function __tmp_wrap_presenceStore(context: {
    bifur: BifurClient;
    connectionStatusStore: ConnectionStatusStore;
    userStore: UserStore;
}): PresenceStore;
//# sourceMappingURL=presence-store.d.ts.map