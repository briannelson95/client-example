/// <reference types="lodash" />
import { AuthStore } from './types';
export interface AuthProvider {
    name: string;
    title: string;
    url: string;
    logo?: string;
}
export interface AuthStoreOptions {
    projectId: string;
    dataset: string;
    /**
     * Login method to use for the studio the studio. Can be one of:
     * - `dual` (default) - attempt to use cookies where possible, falling back to
     *   storing authentication token in `localStorage` otherwise
     * - `cookie` - explicitly disable `localStorage` method, relying only on
     *   cookies
     */
    loginMethod?: 'dual' | 'cookie';
    /**
     * Append the custom providers to the default providers or replace them.
     */
    mode?: 'append' | 'replace';
    /**
     * If true, don't show the choose provider logo screen, automatically redirect
     * to the single provider login
     */
    redirectOnSingle?: boolean;
    /**
     * The custom provider implementations
     */
    providers?: AuthProvider[];
}
/**
 * @internal
 */
export declare function _createAuthStore({ projectId, dataset, loginMethod, ...providerOptions }: AuthStoreOptions): AuthStore;
/**
 * @public
 */
declare const createAuthStore: typeof _createAuthStore & import("lodash").MemoizedFunction;
export { createAuthStore };
//# sourceMappingURL=createAuthStore.d.ts.map