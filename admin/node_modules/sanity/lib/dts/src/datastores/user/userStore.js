import DataLoader from 'dataloader';
import raf from 'raf';
import { isRecord } from '../../util';
/**
 * Given a `client` and a `currentUser` creates a datastore that handles
 * fetching, batch fetching, and caching users.
 */
export function createUserStore({ client: _client, currentUser }) {
    const client = _client.withConfig({ apiVersion: '2021-06-07' });
    const userLoader = new DataLoader(async (userIds) => {
        const value = await client.request({
            uri: `/users/${userIds.join(',')}`,
            withCredentials: true,
            tag: 'users.get',
        });
        const response = Array.isArray(value) ? value : [value];
        const users = response.reduce((acc, next) => {
            if (next?.id) {
                acc[next.id] = next;
            }
            return acc;
        }, {});
        return userIds.map((id) => users[id] || null);
    }, { batchScheduleFn: (cb) => raf(cb) });
    const userFromCurrentUser = currentUser && {
        id: currentUser.id,
        displayName: currentUser.name,
        imageUrl: currentUser.profileImage,
    };
    userLoader.prime('me', userFromCurrentUser);
    if (userFromCurrentUser?.id) {
        userLoader.prime(userFromCurrentUser.id, userFromCurrentUser);
    }
    return {
        getUser: (userId) => userLoader.load(userId),
        getUsers: async (userIds) => {
            const results = await userLoader.loadMany(userIds);
            // remove `Error`s from the the results
            return results.filter((result) => isRecord(result) && typeof result.id === 'string');
        },
    };
}
//# sourceMappingURL=userStore.js.map