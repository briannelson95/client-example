import { SanityClient } from '@sanity/client';
import { Schema } from '@sanity/types';
import { Observable } from 'rxjs';
import { HistoryStore } from '../history';
import { DocumentPreviewStore } from '../../preview';
import { Template } from '../../templates';
import { DocumentVersionEvent, Pair } from './document-pair/checkoutPair';
import { EditStateFor } from './document-pair/editState';
import { OperationError, OperationSuccess } from './document-pair/operationEvents';
import { OperationsAPI } from './document-pair/operations';
import { ValidationStatus } from './document-pair/validation';
import { ListenQueryOptions } from './listenQuery';
import { IdPair } from './types';
import { InitialValueMsg, InitialValueOptions } from './initialValue';
export declare type QueryParams = Record<string, string | number | boolean | string[]>;
export interface DocumentStore {
    checkoutPair: (idPair: IdPair) => Pair;
    initialValue: (opts: InitialValueOptions) => Observable<InitialValueMsg>;
    listenQuery: (query: string | {
        fetch: string;
        listen: string;
    }, params: QueryParams, options: ListenQueryOptions) => Observable<any>;
    resolveTypeForDocument: (id: string, specifiedType?: string) => Observable<string>;
    pair: {
        consistencyStatus: (publishedId: string, type: string) => Observable<boolean>;
        documentEvents: (publishedId: string, type: string) => Observable<DocumentVersionEvent>;
        editOperations: (publishedId: string, type: string) => Observable<OperationsAPI>;
        editState: (publishedId: string, type: string) => Observable<EditStateFor>;
        operationEvents: (publishedId: string, type: string) => Observable<OperationSuccess | OperationError>;
        validation: (publishedId: string, type: string) => Observable<ValidationStatus>;
    };
}
export interface DocumentStoreOptions {
    client: SanityClient;
    documentPreviewStore: DocumentPreviewStore;
    historyStore: HistoryStore;
    schema: Schema;
    initialValueTemplates: Template[];
}
export declare function createDocumentStore({ client, documentPreviewStore, historyStore, initialValueTemplates, schema, }: DocumentStoreOptions): DocumentStore;
//# sourceMappingURL=document-store.d.ts.map