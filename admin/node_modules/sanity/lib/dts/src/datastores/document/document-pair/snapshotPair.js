import { filter, map, publishReplay, refCount } from 'rxjs/operators';
import { memoize } from '../utils/createMemoizer';
import { memoizedPair } from './memoizedPair';
// return true if the event comes with a document snapshot
function isSnapshotEvent(event) {
    return event.type === 'snapshot';
}
function withSnapshots(pair) {
    return {
        snapshots$: pair.events.pipe(filter(isSnapshotEvent), map((event) => event.document), publishReplay(1), refCount()),
        patch: pair.patch,
        create: pair.create,
        createIfNotExists: pair.createIfNotExists,
        createOrReplace: pair.createOrReplace,
        delete: pair.delete,
        mutate: pair.mutate,
        commit: pair.commit,
    };
}
export const snapshotPair = memoize((client, idPair, typeName) => {
    return memoizedPair(client, idPair, typeName).pipe(map(({ published, draft }) => {
        return {
            published: withSnapshots(published),
            draft: withSnapshots(draft),
        };
    }), publishReplay(1), refCount());
}, (_client, idPair, typeName) => idPair.publishedId + typeName);
//# sourceMappingURL=snapshotPair.js.map