import { defer, of as observableOf } from 'rxjs';
import { concatMap, map } from 'rxjs/operators';
export function getPairListener(client, idPair, options = {}) {
    const { publishedId, draftId } = idPair;
    return defer(() => client.observable.listen(`*[_id == $publishedId || _id == $draftId]`, {
        publishedId,
        draftId,
    }, {
        includeResult: false,
        events: ['welcome', 'mutation', 'reconnect'],
        effectFormat: 'mendoza',
        tag: options.tag || 'document.pair-listener',
    })).pipe(concatMap((event) => event.type === 'welcome'
        ? fetchInitialDocumentSnapshots().pipe(concatMap((snapshots) => [
            createSnapshotEvent(draftId, snapshots.draft),
            createSnapshotEvent(publishedId, snapshots.published),
        ]))
        : observableOf(event)));
    function fetchInitialDocumentSnapshots() {
        return client.observable
            .getDocuments([draftId, publishedId], { tag: 'document.snapshots' })
            .pipe(map(([draft, published]) => ({
            draft,
            published,
        })));
    }
}
function createSnapshotEvent(documentId, document) {
    return {
        type: 'snapshot',
        documentId,
        document,
    };
}
//# sourceMappingURL=getPairListener.js.map