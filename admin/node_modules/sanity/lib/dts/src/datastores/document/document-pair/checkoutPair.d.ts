import { SanityClient } from '@sanity/client';
import { Observable } from 'rxjs';
import { SanityDocument } from '@sanity/types';
import { BufferedDocumentEvent } from '../buffered-doc';
import { IdPair, Mutation, ReconnectEvent } from '../types';
import { RemoteSnapshotEvent } from '../buffered-doc/types';
export declare type WithVersion<T> = T & {
    version: 'published' | 'draft';
};
export declare type DocumentVersionEvent = WithVersion<ReconnectEvent | BufferedDocumentEvent>;
export declare type RemoteSnapshotVersionEvent = WithVersion<RemoteSnapshotEvent>;
export interface DocumentVersion {
    consistency$: Observable<boolean>;
    remoteSnapshot$: Observable<RemoteSnapshotVersionEvent>;
    events: Observable<DocumentVersionEvent>;
    patch: (patches: any[]) => Mutation[];
    create: (document: Partial<SanityDocument>) => Mutation;
    createIfNotExists: (document: SanityDocument) => Mutation;
    createOrReplace: (document: SanityDocument) => Mutation;
    delete: () => Mutation;
    mutate: (mutations: Mutation[]) => void;
    commit: () => Observable<never>;
}
export interface Pair {
    published: DocumentVersion;
    draft: DocumentVersion;
}
export declare function checkoutPair(client: SanityClient, idPair: IdPair): Pair;
//# sourceMappingURL=checkoutPair.d.ts.map