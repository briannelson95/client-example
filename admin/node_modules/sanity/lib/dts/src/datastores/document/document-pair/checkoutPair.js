import { merge } from 'rxjs';
import { filter, map, share } from 'rxjs/operators';
import { getPairListener } from '../getPairListener';
import { createBufferedDocument } from '../buffered-doc';
const isEventForDocId = (id) => (event) => event.type !== 'reconnect' && event.documentId === id;
function commitMutations(client, mutations) {
    return client.dataRequest('mutate', mutations, {
        visibility: 'async',
        returnDocuments: false,
        tag: 'document.commit',
    });
}
function setVersion(version) {
    return (ev) => ({ ...ev, version });
}
export function checkoutPair(client, idPair) {
    const { publishedId, draftId } = idPair;
    const listenerEvents$ = getPairListener(client, idPair).pipe(share());
    const reconnect$ = listenerEvents$.pipe(filter((ev) => ev.type === 'reconnect'));
    const draft = createBufferedDocument(draftId, listenerEvents$.pipe(filter(isEventForDocId(draftId))), (mut) => commitMutations(client, mut));
    const published = createBufferedDocument(publishedId, listenerEvents$.pipe(filter(isEventForDocId(publishedId))), (mut) => commitMutations(client, mut));
    return {
        draft: {
            ...draft,
            events: merge(reconnect$, draft.events).pipe(map(setVersion('draft'))),
            consistency$: draft.consistency$,
            remoteSnapshot$: draft.remoteSnapshot$.pipe(map(setVersion('draft'))),
        },
        published: {
            ...published,
            events: merge(reconnect$, published.events).pipe(map(setVersion('published'))),
            consistency$: published.consistency$,
            remoteSnapshot$: published.remoteSnapshot$.pipe(map(setVersion('published'))),
        },
    };
}
//# sourceMappingURL=checkoutPair.js.map