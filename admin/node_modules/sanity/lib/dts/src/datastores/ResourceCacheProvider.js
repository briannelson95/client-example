import React, { createContext, useContext, useMemo } from 'react';
import { createMultiKeyWeakMap } from './createMultiKeyWeakMap';
const ResourceCacheContext = createContext(null);
export function ResourceCacheProvider({ children }) {
    const resourceCache = useMemo(() => {
        const namespaces = new Map();
        // this is used to replace the `null` values in any `dependencies` so that
        // they can be used in the `MultiKeyWeakMap` which doesn't accept null
        const nullReplacer = {};
        return {
            get: ({ namespace, dependencies }) => {
                const dependenciesWithoutNull = dependencies.map((dep) => dep === null ? nullReplacer : dep);
                const namespaceMap = namespaces.get(namespace);
                return namespaceMap?.get(dependenciesWithoutNull);
            },
            set: ({ namespace, dependencies, value }) => {
                const namespaceMap = namespaces.get(namespace) || createMultiKeyWeakMap();
                const dependenciesWithoutNull = dependencies.map((dep) => dep === null ? nullReplacer : dep);
                namespaces.set(namespace, namespaceMap);
                namespaceMap.set(dependenciesWithoutNull, value);
            },
        };
    }, []);
    return (React.createElement(ResourceCacheContext.Provider, { value: resourceCache }, children));
}
export function useResourceCache() {
    const cache = useContext(ResourceCacheContext);
    if (!cache)
        throw new Error('Could not find `cache` context');
    return cache;
}
//# sourceMappingURL=ResourceCacheProvider.js.map