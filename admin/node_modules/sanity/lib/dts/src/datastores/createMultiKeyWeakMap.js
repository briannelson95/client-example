export function createMultiKeyWeakMap() {
    const rootMap = new WeakMap();
    const idCache = new WeakMap();
    function randomId() {
        return Array.from({ length: 10 })
            .map(() => Math.floor(Math.random() * 255)
            .toString(16)
            .padStart(2, '0'))
            .join('');
    }
    function assignId(key) {
        const cachedId = idCache.get(key);
        if (cachedId)
            return cachedId;
        const id = randomId();
        idCache.set(key, id);
        return id;
    }
    function arrangeKeys(keys) {
        return Array.from(new Set(keys))
            .map((key) => [assignId(key), key])
            .sort(([a], [b]) => a.localeCompare(b, 'en'))
            .map(([, key]) => key);
    }
    function getDeep(keys, map) {
        if (!keys.length)
            return undefined;
        const [firstKey, ...restOfKeys] = keys;
        const node = map.get(firstKey);
        if (!node)
            return undefined;
        if (!restOfKeys.length)
            return node.value;
        return getDeep(restOfKeys, node.next);
    }
    function setDeep(keys, map, value) {
        if (!keys.length)
            return;
        const [firstKey, ...restOfKeys] = keys;
        const node = map.get(firstKey) || {
            type: 'multi-key-weak-map-node',
            value: undefined,
            next: new WeakMap(),
        };
        map.set(firstKey, node);
        if (!restOfKeys.length) {
            node.value = value;
            return;
        }
        setDeep(restOfKeys, node.next, value);
    }
    function get(keys) {
        return getDeep(arrangeKeys(keys), rootMap);
    }
    function set(keys, value) {
        setDeep(arrangeKeys(keys), rootMap, value);
    }
    return { get, set };
}
//# sourceMappingURL=createMultiKeyWeakMap.js.map