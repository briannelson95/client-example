import { flatten } from 'lodash';
import { findMatchingRoutes } from './findMatchingRoutes';
import { debug } from './utils/debug';
/**
 * @public
 */
export function resolvePathFromState(node, state) {
    debug('Resolving path from state %o', state);
    const match = findMatchingRoutes(node, state);
    if (match.remaining.length > 0) {
        const remaining = match.remaining;
        throw new Error(`Unable to find matching route for state. Could not map the following state key${remaining.length == 1 ? '' : 's'} to a valid url: ${remaining.join(', ')}`);
    }
    if (match.nodes.length === 0) {
        throw new Error(`Unable to resolve path from given state: ${JSON.stringify(state)}`);
    }
    let scopedState = state;
    const relative = flatten(match.nodes.map((matchNode) => {
        if (matchNode.scope && matchNode.scope in scopedState) {
            scopedState = scopedState[matchNode.scope];
        }
        return matchNode.route.segments.map((segment) => {
            if (segment.type === 'dir') {
                return segment.name;
            }
            const transform = matchNode.transform && matchNode.transform[segment.name];
            return transform
                ? transform.toPath(scopedState[segment.name])
                : scopedState[segment.name];
        });
    })).join('/');
    debug('Resolved to /%s', relative);
    return `/${relative}`;
}
//# sourceMappingURL=resolvePathFromState.js.map