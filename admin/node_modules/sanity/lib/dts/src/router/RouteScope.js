/* eslint-disable camelcase */
import React, { useCallback, useMemo } from 'react';
import { isEmpty } from './utils/isEmpty';
import { RouterContext } from './RouterContext';
import { useRouter } from './useRouter';
function addScope(routerState, scope, scopedState) {
    return (scopedState && {
        ...routerState,
        [scope]: scopedState,
    });
}
/**
 * @public
 */
export function RouteScope(props) {
    const { children, scope } = props;
    const parent = useRouter();
    const { resolvePathFromState: parent_resolvePathFromState, navigate: parent_navigate } = parent;
    const resolvePathFromState = useCallback((nextState) => {
        const nextStateScoped = isEmpty(nextState)
            ? {}
            : addScope(parent.state, scope, nextState);
        return parent_resolvePathFromState(nextStateScoped);
    }, [parent_resolvePathFromState, parent.state, scope]);
    const navigate = useCallback((nextState, options) => {
        const nextScopedState = addScope(parent.state, scope, nextState);
        parent_navigate(nextScopedState, options);
    }, [parent_navigate, parent.state, scope]);
    const scopedRouter = useMemo(() => ({
        ...parent,
        navigate,
        resolvePathFromState,
        state: parent.state[scope],
    }), [navigate, parent, resolvePathFromState, scope]);
    return React.createElement(RouterContext.Provider, { value: scopedRouter }, children);
}
//# sourceMappingURL=RouteScope.js.map