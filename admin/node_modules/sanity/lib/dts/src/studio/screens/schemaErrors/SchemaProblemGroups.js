import { ErrorOutlineIcon, WarningOutlineIcon } from '@sanity/icons';
import { Box, Breadcrumbs, Card, Flex, Stack, Text } from '@sanity/ui';
import { generateHelpUrl } from '@sanity/generate-help-url';
import React, { useMemo } from 'react';
import styled from 'styled-components';
import { capitalize } from 'lodash';
const TONES = {
    error: 'critical',
    warning: 'caution',
};
const SegmentSpan = styled.code `
  && {
    background: none;
    color: inherit;
  }
`;
const ErrorMessageText = styled(Text) `
  white-space: pre-line;
`;
export function SchemaProblemGroups(props) {
    const { problemGroups } = props;
    const items = useMemo(() => {
        const ret = [];
        for (const problemGroup of problemGroups) {
            for (const problem of problemGroup.problems) {
                ret.push({ group: problemGroup, problem });
            }
        }
        return ret;
    }, [problemGroups]);
    return (React.createElement(Stack, { as: "ul", space: 4 }, items.map(({ group, problem }, i) => {
        const isError = problem.severity === 'error';
        const isWarning = problem.severity === 'warning';
        const schemaType = getTypeInfo(group);
        return (React.createElement(Card, { border: true, key: i, padding: 4, radius: 2, tone: TONES[problem.severity] },
            React.createElement(Flex, null,
                React.createElement(Box, { marginRight: 3 },
                    React.createElement(Text, { muted: true, size: 1 },
                        isError && React.createElement(ErrorOutlineIcon, null),
                        isWarning && React.createElement(WarningOutlineIcon, null))),
                React.createElement(Box, { flex: 1 },
                    React.createElement(Text, { size: 1, weight: "semibold" }, schemaType ? (React.createElement(React.Fragment, null,
                        capitalize(schemaType.type),
                        " type \"",
                        schemaType.name,
                        "\"")) : null))),
            React.createElement(Box, { marginTop: 4 },
                React.createElement(Card, { border: true, overflow: "auto", padding: 2, tone: "inherit" },
                    React.createElement(Breadcrumbs, { separator: React.createElement(Text, { muted: true, size: 1 }, "\u2192") }, group.path.map((segment, j) => {
                        if (segment.kind === 'type') {
                            return (React.createElement(Text, { key: j, size: 1 },
                                React.createElement(SegmentSpan, null, `${_renderSegmentName(segment.name)}:${segment.type}`)));
                        }
                        if (segment.kind === 'property') {
                            return (React.createElement(Text, { key: j, size: 1 },
                                React.createElement(SegmentSpan, null, segment.name)));
                        }
                        return null;
                    })))),
            React.createElement(Box, { as: "ul", marginTop: 4 },
                React.createElement(Box, { as: "li" },
                    React.createElement(Stack, { space: 3 },
                        React.createElement(ErrorMessageText, { muted: true, size: 1 }, problem.message),
                        problem.helpId && (React.createElement(Text, { muted: true, size: 1 },
                            React.createElement("a", { href: generateHelpUrl(problem.helpId), target: "_blank", rel: "noopener noreferrer" }, "View documentation \u2192"))))))));
    })));
}
function getTypeInfo(problem) {
    // note: unsure if the first segment here can ever be anything else than a type
    // a possible API improvement is to add schemaType info to the problem group interface itself
    const first = problem.path[0];
    if (first.kind === 'type') {
        return { name: first.name, type: first.type };
    }
    return null;
}
function _renderSegmentName(str) {
    if (str.startsWith('<unnamed_type_@_index')) {
        const parts = str.slice(1, -1).split('_');
        return `[${parts[4]}]`;
    }
    return str;
}
//# sourceMappingURL=SchemaProblemGroups.js.map