import React, { useEffect, useState } from 'react';
import { Button, Card, Code, Container, ErrorBoundary, Heading, Stack, useToast } from '@sanity/ui';
import { SchemaError } from '../config';
import { isRecord } from '../util';
import { globalScope } from '../util/globalScope';
import { CorsOriginError } from '../datastores';
import { CorsOriginErrorScreen, SchemaErrorsScreen } from './screens';
const errorChannel = globalScope.__sanityErrorChannel;
function isKnownError(err) {
    if (err instanceof SchemaError) {
        return true;
    }
    if (err instanceof CorsOriginError) {
        return true;
    }
    return false;
}
export function StudioErrorBoundary({ children }) {
    const [{ error }, setError] = useState({ error: null });
    const { push: pushToast } = useToast();
    const message = isRecord(error) && typeof error.message === 'string' && error.message;
    const stack = isRecord(error) && typeof error.stack === 'string' && error.stack;
    useEffect(() => {
        if (!errorChannel)
            return undefined;
        return errorChannel.subscribe((msg) => {
            // NOTE: Certain errors (such as the `ResizeObserver loop limit exceeded` error) is thrown
            // by the browser, and does not include an `error` property. We ignore these errors.
            if (!msg.error) {
                return;
            }
            // For errors that we "expect", eg have specific error screens for, do not push a toast
            if (isKnownError(msg.error)) {
                return;
            }
            console.error(msg.error);
            pushToast({
                closable: true,
                description: msg.error.message,
                duration: 5000,
                title: 'Uncaught error',
                status: 'error',
            });
        });
    }, [pushToast]);
    if (error instanceof CorsOriginError) {
        return React.createElement(CorsOriginErrorScreen, { projectId: error?.projectId });
    }
    if (error instanceof SchemaError) {
        return React.createElement(SchemaErrorsScreen, { schema: error.schema });
    }
    if (error) {
        return (React.createElement(Card, { height: "fill", overflow: "auto", paddingY: [4, 5, 6, 7], paddingX: 4, sizing: "border", tone: "critical" },
            React.createElement(Container, { width: 3 },
                React.createElement(Stack, { space: 4 },
                    React.createElement(Heading, null, "An error occurred"),
                    React.createElement("div", null,
                        React.createElement(Button
                        // eslint-disable-next-line react/jsx-no-bind
                        , { 
                            // eslint-disable-next-line react/jsx-no-bind
                            onClick: () => setError({ error: null }), text: "Retry", tone: "default" })),
                    React.createElement(Card, { border: true, radius: 2, overflow: "auto", padding: 4, tone: "inherit" },
                        React.createElement(Stack, { space: 4 },
                            message && (React.createElement(Code, { size: 1 },
                                React.createElement("strong", null,
                                    "Error: ",
                                    message))),
                            stack && React.createElement(Code, { size: 1 }, stack)))))));
    }
    return React.createElement(ErrorBoundary, { onCatch: setError }, children);
}
//# sourceMappingURL=StudioErrorBoundary.js.map