import React, { createContext, useContext } from 'react';
import { useWorkspace } from './workspace';
const SourceContext = createContext(null);
export function SourceProvider({ children, ...props }) {
    const parentSource = useContext(SourceContext);
    const { unstable_sources: sources } = useWorkspace();
    if ('source' in props) {
        const { source } = props;
        return React.createElement(SourceContext.Provider, { value: source }, children);
    }
    if ('name' in props) {
        const { name } = props;
        const source = sources.find((s) => s.name === name);
        if (!source) {
            throw new Error(`Could not find source with name \`${name}\` in current workspace`);
        }
        if (parentSource === source)
            return React.createElement(React.Fragment, null, children);
        return React.createElement(SourceContext.Provider, { value: source }, children);
    }
    throw new Error('Invalid props passed into SourceProvider. A `name` or a `source` object is required.');
}
/**
 * @deprecated INTERNAL USE ONLY
 */
export function useSource() {
    const source = useContext(SourceContext);
    if (!source)
        throw new Error('Could not find `source` context');
    return source;
}
//# sourceMappingURL=source.js.map