import { Box, Button, Card, Code, ErrorBoundary, Flex, Heading, Spinner } from '@sanity/ui';
import { startCase } from 'lodash';
import React, { createElement, Suspense, useCallback, useEffect, useMemo, useState } from 'react';
import styled from 'styled-components';
import { RouteScope, useRouter } from '../router';
import { Navbar } from './components';
import { NoToolsScreen } from './screens/NoToolsScreen';
import { ToolNotFoundScreen } from './screens/ToolNotFoundScreen';
import { useWorkspace } from './workspace';
const SearchFullscreenPortalCard = styled(Card) `
  display: flex;
  flex-direction: column;
  min-height: 100%;
  flex: 1;
`;
export function StudioLayout() {
    const { state: routerState } = useRouter();
    const { name, title, tools } = useWorkspace();
    const activeToolName = typeof routerState.tool === 'string' ? routerState.tool : undefined;
    const activeTool = tools.find((tool) => tool.name === activeToolName);
    const [toolError, setToolError] = useState(null);
    const [searchOpen, setSearchOpen] = useState(false);
    const [fullscreenSearchPortalEl, setFullscreenSearchPortalEl] = useState(null);
    const documentTitle = useMemo(() => {
        const mainTitle = title || startCase(name);
        if (activeToolName) {
            return `${mainTitle} â€“ ${startCase(activeToolName)}`;
        }
        return mainTitle;
    }, [activeToolName, name, title]);
    useEffect(() => {
        document.title = documentTitle;
    }, [documentTitle]);
    const handleSearchOpenChange = useCallback((open) => {
        setSearchOpen(open);
    }, []);
    useEffect(() => {
        setToolError(null);
    }, [activeToolName]);
    const handleToolRetry = useCallback(() => {
        setToolError(null);
    }, []);
    return (React.createElement(Flex, { "data-ui": "ToolScreen", direction: "column", height: "fill" },
        React.createElement(Navbar, { onSearchOpenChange: handleSearchOpenChange, fullscreenSearchPortalEl: fullscreenSearchPortalEl }),
        tools.length === 0 && React.createElement(NoToolsScreen, null),
        tools.length > 0 && !activeTool && activeToolName && (React.createElement(ToolNotFoundScreen, { toolName: activeToolName })),
        toolError && activeTool && (React.createElement(Card, { flex: 1, overflow: "auto", padding: 4 },
            React.createElement(Heading, { as: "h1" },
                "The ",
                React.createElement("code", null, activeToolName),
                " tool crashed"),
            React.createElement(Box, { marginTop: 4 },
                React.createElement(Button, { onClick: handleToolRetry, text: "Retry" })),
            React.createElement(Card, { marginTop: 4, overflow: "auto", padding: 3, tone: "critical" },
                React.createElement(Code, { size: 1 }, toolError.error.stack)),
            React.createElement(Card, { marginTop: 4, overflow: "auto", padding: 3, tone: "critical" },
                React.createElement(Code, { size: 1 }, toolError.info.componentStack)))),
        searchOpen && (React.createElement(SearchFullscreenPortalCard, { ref: setFullscreenSearchPortalEl, overflow: "auto" })),
        React.createElement(Card, { flex: 1, hidden: searchOpen }, !toolError && activeTool && activeToolName && (React.createElement(RouteScope, { scope: activeToolName },
            React.createElement(ErrorBoundary, { onCatch: setToolError },
                React.createElement(Suspense, { fallback: React.createElement(LoadingTool, null) }, createElement(activeTool.component, { tool: activeTool }))))))));
}
function LoadingTool() {
    return (React.createElement(Flex, { align: "center", height: "fill", justify: "center" },
        React.createElement(Spinner, { muted: true })));
}
//# sourceMappingURL=StudioLayout.js.map