import React, { createContext, useContext, useEffect, useMemo, useState } from 'react';
import { studioTheme, ThemeProvider, usePrefersDark } from '@sanity/ui';
const ColorSchemeContext = createContext(null);
export function ColorSchemeProvider({ children, onSchemeChange, scheme: schemeProp, }) {
    const prefersDark = usePrefersDark();
    const [scheme, setScheme] = useState(schemeProp || 'light');
    // if the preferred color scheme changes, then react to this change
    useEffect(() => {
        const nextScheme = prefersDark ? 'dark' : 'light';
        setScheme(nextScheme);
        onSchemeChange?.(nextScheme);
    }, [onSchemeChange, prefersDark]);
    const colorScheme = useMemo(() => ({ scheme, setScheme }), [scheme]);
    return (React.createElement(ColorSchemeContext.Provider, { value: colorScheme },
        React.createElement(ThemeProvider, { scheme: scheme, theme: studioTheme }, children)));
}
export function useColorScheme() {
    const value = useContext(ColorSchemeContext);
    if (!value)
        throw new Error('Could not find `colorScheme` context');
    return value;
}
//# sourceMappingURL=colorScheme.js.map