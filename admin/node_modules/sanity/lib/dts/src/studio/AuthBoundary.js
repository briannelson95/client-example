import React, { useEffect, useState } from 'react';
import { LoadingScreen, AuthenticateScreen, NotAuthenticatedScreen } from './screens';
import { useActiveWorkspace } from './activeWorkspaceMatcher';
export function AuthBoundary({ children, AuthenticateComponent = AuthenticateScreen, LoadingComponent = LoadingScreen, NotAuthenticatedComponent = NotAuthenticatedScreen, }) {
    const [error, handleError] = useState(null);
    if (error)
        throw error;
    const [loggedIn, setLoggedIn] = useState('loading');
    const { activeWorkspace } = useActiveWorkspace();
    useEffect(() => {
        activeWorkspace.auth.handleCallbackUrl?.().catch(handleError);
    }, [activeWorkspace.auth]);
    useEffect(() => {
        const subscription = activeWorkspace.auth.state.subscribe({
            next: ({ authenticated, currentUser }) => {
                if (currentUser?.roles?.length === 0) {
                    setLoggedIn('unauthorized');
                    return;
                }
                setLoggedIn(authenticated ? 'logged-in' : 'logged-out');
            },
            error: handleError,
        });
        return () => {
            subscription.unsubscribe();
        };
    }, [activeWorkspace]);
    if (loggedIn === 'loading')
        return React.createElement(LoadingComponent, null);
    if (loggedIn === 'unauthorized')
        return React.createElement(NotAuthenticatedComponent, null);
    // NOTE: there is currently a bug where the `AuthenticateComponent` will
    // flash after the first login with cookieless mode. See `createAuthStore`
    // for details
    if (loggedIn === 'logged-out')
        return React.createElement(AuthenticateComponent, null);
    return React.createElement(React.Fragment, null, children);
}
//# sourceMappingURL=AuthBoundary.js.map