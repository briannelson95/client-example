import React, { useCallback, useState } from 'react';
import { Box, Button, Dialog, Heading, Stack, Text, Tooltip } from '@sanity/ui';
import { WarningOutlineIcon } from '@sanity/icons';
import { useId } from '@reach/auto-id';
import { useSchema } from '../../../../hooks';
import { SchemaProblemGroups } from '../../../screens/schemaErrors/SchemaProblemGroups';
import { useColorScheme } from '../../../colorScheme';
export function ConfigIssuesButton() {
    const schema = useSchema();
    const groupsWithWarnings = schema._validation?.filter((group) => group.problems.some((problem) => problem.severity === 'warning')) || [];
    // get root scheme
    const { scheme } = useColorScheme();
    const dialogId = useId() || 'config-issues-dialog';
    const [isDialogOpen, setDialogOpen] = useState(false);
    const [buttonElement, setButtonElement] = useState(null);
    const handleOpen = useCallback(() => setDialogOpen(true), []);
    const handleClose = useCallback(() => {
        setDialogOpen(false);
        if (buttonElement) {
            buttonElement.focus();
        }
    }, [buttonElement]);
    if (groupsWithWarnings.length === 0) {
        return null;
    }
    return (React.createElement(React.Fragment, null,
        React.createElement(Tooltip, { content: React.createElement(Box, { padding: 2 },
                React.createElement(Text, { size: 1 }, "Found configuration issues")), placement: "bottom", portal: true, scheme: scheme },
            React.createElement(Box, null,
                React.createElement(Button, { icon: WarningOutlineIcon, mode: "bleed", tone: "caution", onClick: handleOpen, ref: setButtonElement, selected: isDialogOpen }))),
        isDialogOpen && (React.createElement(Dialog, { header: React.createElement(Stack, { space: 3 },
                React.createElement(Text, { weight: "semibold" }, "Configuration issues"),
                React.createElement(Text, { muted: true, size: 1 }, "Configuration checks are only performed during development and will not be visible in production builds")), width: 2, onClickOutside: handleClose, onClose: handleClose, 
            // force root scheme here to "break out" of the navbar's dark scheme
            scheme: scheme, id: dialogId },
            React.createElement(Stack, { space: 4, padding: 4 },
                React.createElement(Heading, { as: "h2", size: 1 },
                    "Found ",
                    groupsWithWarnings.length,
                    " schema warnings"),
                React.createElement(SchemaProblemGroups, { problemGroups: groupsWithWarnings }))))));
}
//# sourceMappingURL=ConfigIssuesButton.js.map