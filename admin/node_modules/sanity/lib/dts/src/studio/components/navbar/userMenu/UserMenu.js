import { SunIcon, MoonIcon, LeaveIcon, ChevronDownIcon, CogIcon } from '@sanity/icons';
import { Box, Button, Card, Flex, Label, Menu, MenuButton, MenuDivider, MenuItem, Stack, Text, Tooltip, } from '@sanity/ui';
import React, { useCallback, useMemo } from 'react';
import styled from 'styled-components';
import { UserAvatar } from '../../../../components/UserAvatar';
import { getProviderTitle } from '../../../../datastores/authStore/providerTitle';
import { useColorScheme } from '../../../colorScheme';
import { useWorkspace } from '../../../workspace';
import { LoginProviderLogo } from './LoginProviderLogo';
const StyledMenu = styled(Menu) `
  min-width: 125px;
  max-width: 350px;
`;
const AvatarBox = styled(Box) `
  position: relative;
`;
export function UserMenu() {
    const { currentUser, projectId, auth } = useWorkspace();
    const { scheme, setScheme } = useColorScheme();
    const providerTitle = getProviderTitle(currentUser?.provider);
    const popoverProps = useMemo(() => ({
        placement: 'bottom-end',
        portal: true,
        preventOverflow: true,
        scheme: scheme,
    }), [scheme]);
    const handleToggleScheme = useCallback(() => {
        setScheme(scheme === 'dark' ? 'light' : 'dark');
    }, [scheme, setScheme]);
    return (React.createElement(MenuButton, { button: React.createElement(Button, { mode: "bleed", padding: 0, paddingX: 1 },
            React.createElement(Flex, { align: "center", gap: 1 },
                React.createElement(UserAvatar, { user: "me", size: 1 }),
                React.createElement(Text, { size: 1, muted: true },
                    React.createElement(ChevronDownIcon, null)))), id: "user-menu", menu: React.createElement(StyledMenu, null,
            React.createElement(Card, { padding: 2 },
                React.createElement(Box, { marginBottom: 3 },
                    React.createElement(Label, { size: 1, muted: true }, "Signed in as")),
                React.createElement(Flex, { align: "center" },
                    React.createElement(Tooltip, { disabled: !providerTitle, portal: true, content: providerTitle && (React.createElement(Box, { padding: 2 },
                            React.createElement(Text, { size: 1 },
                                "Signed in with ",
                                providerTitle))) },
                        React.createElement(AvatarBox, { marginRight: 3 },
                            React.createElement(UserAvatar, { size: 1, user: "me" }),
                            currentUser?.provider && React.createElement(LoginProviderLogo, { provider: currentUser.provider }))),
                    React.createElement(Stack, { space: 2, flex: 1 },
                        React.createElement(Text, { size: 1, weight: "semibold", textOverflow: "ellipsis" }, currentUser?.name),
                        React.createElement(Text, { size: 1, muted: true, textOverflow: "ellipsis" }, currentUser?.email)))),
            React.createElement(MenuDivider, null),
            React.createElement(MenuItem, { icon: scheme === 'dark' ? SunIcon : MoonIcon, onClick: handleToggleScheme, text: scheme === 'dark' ? 'Switch to light mode' : 'Switch to dark mode' }),
            React.createElement(MenuDivider, null),
            React.createElement(MenuItem, { as: "a", href: `https://sanity.io/manage/project/${projectId}`, target: "_blank", text: "Manage project", icon: CogIcon }),
            auth.logout && (React.createElement(React.Fragment, null,
                React.createElement(MenuDivider, null),
                React.createElement(MenuItem, { iconRight: LeaveIcon, text: "Sign out", disabled: !auth.logout, ...(auth.logout && { onClick: auth.logout }) })))), popover: popoverProps }));
}
//# sourceMappingURL=UserMenu.js.map