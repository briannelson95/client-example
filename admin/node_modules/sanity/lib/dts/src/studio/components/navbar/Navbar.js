import { CloseIcon, MenuIcon, SearchIcon } from '@sanity/icons';
import { Box, Button, Card, Flex, Layer, Text, Tooltip, useGlobalKeyDown, useMediaIndex, } from '@sanity/ui';
import React, { createElement, useCallback, useState, isValidElement, useMemo, useEffect, useRef, } from 'react';
import { isValidElementType } from 'react-is';
import { startCase } from 'lodash';
import styled from 'styled-components';
import { useWorkspace } from '../../workspace';
import { useColorScheme } from '../../colorScheme';
import { useRouterState, useStateLink } from '../../../router';
import { useWorkspaces } from '../../workspaces';
import { isDev } from '../../../environment';
import { UserMenu } from './userMenu';
import { NewDocumentButton } from './NewDocumentButton';
import { PresenceMenu } from './presence';
import { NavDrawer } from './NavDrawer';
import { SearchField } from './search';
import { ToolMenu as DefaultToolMenu } from './tools/ToolMenu';
import { ChangelogButton } from './changelog';
import { WorkspaceMenuButton } from './workspace';
import { ConfigIssuesButton } from './configIssues/ConfigIssuesButton';
const RootLayer = styled(Layer) `
  min-height: auto;
  position: relative;

  &[data-search-open='true'] {
    top: 0;
    position: sticky;
  }
`;
const SearchCard = styled(Card) `
  z-index: 1;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;

  &[data-fullscreen='true'] {
    position: absolute;
  }

  &[data-fullscreen='false'] {
    min-width: 253px;
    max-width: 350px;
  }
`;
const LeftFlex = styled(Flex) `
  width: max-content;
`;
export function Navbar(props) {
    const { fullscreenSearchPortalEl, onSearchOpenChange } = props;
    const { name, logo, navbar, tools, ...workspace } = useWorkspace();
    const workspaces = useWorkspaces();
    const routerState = useRouterState();
    const ToolMenu = navbar?.components?.ToolMenu || DefaultToolMenu;
    const { scheme } = useColorScheme();
    const rootLink = useStateLink({ state: {} });
    const mediaIndex = useMediaIndex();
    const activeToolName = typeof routerState.tool === 'string' ? routerState.tool : undefined;
    const [searchOpen, setSearchOpen] = useState(false);
    const [drawerOpen, setDrawerOpen] = useState(false);
    const routerStateRef = useRef(routerState);
    const workspaceNameRef = useRef(name);
    // Close the NavDrawer when changing tool or workspace
    useEffect(() => {
        if (routerStateRef.current.tool !== routerState.tool || name !== workspaceNameRef.current) {
            setDrawerOpen(false);
        }
        routerStateRef.current = routerState;
        workspaceNameRef.current = name;
    }, [name, routerState]);
    const [drawerButtonEl, setDrawerButtonEl] = useState(null);
    const [searchInputElement, setSearchInputElement] = useState(null);
    const [searchOpenButtonEl, setSearchOpenButtonEl] = useState(null);
    const [searchCloseButtonEl, setSearchCloseButtonEl] = useState(null);
    const shouldRender = useMemo(() => ({
        brandingCenter: mediaIndex <= 1,
        changelog: mediaIndex > 1,
        collapsedPresenceMenu: mediaIndex <= 1,
        loginStatus: mediaIndex > 1,
        searchFullscreen: mediaIndex <= 1,
        configIssues: mediaIndex > 1 && isDev,
        workspaces: mediaIndex >= 3 && workspaces.length > 1,
        tools: mediaIndex >= 3,
    }), [mediaIndex, workspaces.length]);
    const formattedName = typeof name === 'string' && name !== 'root' ? startCase(name) : null;
    const title = workspace.title || formattedName || 'Studio';
    useEffect(() => {
        onSearchOpenChange(searchOpen);
        if (searchOpen)
            searchInputElement?.focus();
    }, [searchOpen, searchInputElement, onSearchOpenChange]);
    useGlobalKeyDown((e) => {
        if (e.key === 'Escape' && searchOpen) {
            handleCloseSearch();
        }
    });
    const handleOpenSearch = useCallback(() => {
        setSearchOpen(true);
    }, []);
    const handleCloseSearch = useCallback(() => {
        setSearchOpen(false);
        searchOpenButtonEl?.focus();
    }, [searchOpenButtonEl]);
    const handleCloseDrawer = useCallback(() => {
        setDrawerOpen(false);
        drawerButtonEl?.focus();
    }, [drawerButtonEl]);
    const handleOpenDrawer = useCallback(() => {
        setDrawerOpen(true);
    }, []);
    const rootLinkContent = (() => {
        if (isValidElementType(logo))
            return createElement(logo);
        if (isValidElement(logo))
            return logo;
        return React.createElement(Text, { weight: "bold" }, title);
    })();
    const brandingComponent = useMemo(() => (React.createElement(Button, { "aria-label": title, as: "a", href: rootLink.href, mode: "bleed", onClick: rootLink.handleClick, padding: 3 }, rootLinkContent)), [rootLink.handleClick, rootLink.href, rootLinkContent, title]);
    // The HTML elements that are part of the search view (i.e. the "close" button that is visible
    // when in fullscreen mode on narrow devices) needs to be passed to `<Autocomplete />` so it knows
    // how to make the search experience work properly for non-sighted users.
    // Specifically – without passing `relatedElements`, the listbox with results will close when you
    // TAB to focus the "close" button, and that‘s not a good experience for anyone.
    const searchRelatedElements = useMemo(() => [searchCloseButtonEl].filter(Boolean), [searchCloseButtonEl]);
    return (React.createElement(RootLayer, { zOffset: 100, "data-search-open": searchOpen },
        React.createElement(Card, { scheme: "dark", shadow: scheme === 'dark' ? 1 : undefined, style: { lineHeight: 0 }, padding: 2, sizing: "border", "data-ui": "Navbar" },
            React.createElement(Flex, { align: "center", justify: "space-between" },
                React.createElement(LeftFlex, { align: "center", flex: shouldRender.brandingCenter ? undefined : 1 },
                    !shouldRender.tools && (React.createElement(Box, { marginRight: 1 },
                        React.createElement(Button, { mode: "bleed", icon: MenuIcon, onClick: handleOpenDrawer, ref: setDrawerButtonEl }))),
                    !shouldRender.brandingCenter && React.createElement(Box, { marginRight: 1 }, brandingComponent),
                    shouldRender.workspaces && (React.createElement(Box, { marginRight: 2 },
                        React.createElement(Tooltip, { content: React.createElement(Box, { padding: 2 },
                                React.createElement(Text, { size: 1 }, "Select workspace")), placement: "bottom", portal: true, scheme: scheme },
                            React.createElement(Box, null,
                                React.createElement(WorkspaceMenuButton, null))))),
                    React.createElement(Box, { marginRight: shouldRender.brandingCenter ? undefined : 2 },
                        React.createElement(NewDocumentButton, null)),
                    (searchOpen || !shouldRender.searchFullscreen) && (React.createElement(SearchCard, { "data-fullscreen": shouldRender.searchFullscreen, "data-ui": "SearchRoot", flex: 1, padding: shouldRender.searchFullscreen ? 2 : undefined, scheme: shouldRender.searchFullscreen ? 'light' : undefined, shadow: shouldRender.searchFullscreen ? 1 : undefined },
                        React.createElement(Flex, null,
                            React.createElement(Box, { flex: 1, marginRight: shouldRender.tools ? undefined : [1, 1, 2] },
                                React.createElement(SearchField, { fullScreen: shouldRender.searchFullscreen, onSearchItemClick: handleCloseSearch, portalElement: fullscreenSearchPortalEl, setSearchInputElement: setSearchInputElement, relatedElements: searchRelatedElements })),
                            shouldRender.searchFullscreen && (React.createElement(Button, { "aria-label": "Close search", icon: CloseIcon, mode: "bleed", onClick: handleCloseSearch, ref: setSearchCloseButtonEl }))))),
                    shouldRender.tools && (React.createElement(Card, { borderRight: true, flex: 1, marginX: 2, overflow: "visible", paddingRight: 1 },
                        React.createElement(ToolMenu, { activeToolName: activeToolName, context: "topbar", isDrawerOpen: false, tools: tools, closeDrawer: handleCloseDrawer })))),
                shouldRender.brandingCenter && React.createElement(Box, { marginX: 1 }, brandingComponent),
                React.createElement(Flex, { align: "center" },
                    shouldRender.changelog && (React.createElement(Box, { marginRight: 1 },
                        React.createElement(ChangelogButton, null))),
                    shouldRender.configIssues && (React.createElement(Box, { marginRight: 2 },
                        React.createElement(ConfigIssuesButton, null))),
                    React.createElement(Box, { marginRight: 1 },
                        React.createElement(PresenceMenu, { collapse: shouldRender.collapsedPresenceMenu })),
                    shouldRender.tools && (React.createElement(Box, null,
                        React.createElement(UserMenu, null))),
                    shouldRender.searchFullscreen && (React.createElement(Button, { "aria-label": "Open search", icon: SearchIcon, mode: "bleed", onClick: handleOpenSearch, ref: setSearchOpenButtonEl }))))),
        !shouldRender.tools && (React.createElement(NavDrawer, { activeToolName: activeToolName, isOpen: drawerOpen, onClose: handleCloseDrawer, tools: tools }))));
}
//# sourceMappingURL=Navbar.js.map