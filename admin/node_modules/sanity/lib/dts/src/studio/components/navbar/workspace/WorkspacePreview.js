import { CheckmarkIcon } from '@sanity/icons';
import { Flex, Stack, Box, Text, Card } from '@sanity/ui';
import React, { createElement, isValidElement, useMemo } from 'react';
import { isValidElementType } from 'react-is';
import styled from 'styled-components';
const STATE_TITLES = {
    'logged-in': '',
    'logged-out': 'Signed out',
    'no-access': '',
};
export const MediaCard = styled(Card) `
  width: 35px;
  height: 35px;

  svg {
    width: 100%;
    height: 100%;
  }
`;
const createIcon = (icon) => {
    if (isValidElementType(icon))
        return createElement(icon);
    if (isValidElement(icon))
        return icon;
    return undefined;
};
export function WorkspacePreview(props) {
    const { state, subtitle, selected, title, icon, iconRight } = props;
    const iconComponent = useMemo(() => createIcon(icon), [icon]);
    const iconRightComponent = useMemo(() => createIcon(iconRight), [iconRight]);
    return (React.createElement(Flex, { align: "center", flex: "none", gap: 3 },
        React.createElement(MediaCard, { radius: 2, tone: "transparent" }, iconComponent),
        React.createElement(Stack, { flex: 1, space: 2 },
            React.createElement(Text, { textOverflow: "ellipsis", weight: "medium" }, title),
            subtitle && (React.createElement(Text, { muted: true, size: 1, textOverflow: "ellipsis" }, subtitle))),
        state && STATE_TITLES[state] && (React.createElement(Box, { paddingLeft: 1 },
            React.createElement(Text, { size: 1, muted: true, textOverflow: "ellipsis" }, STATE_TITLES[state]))),
        (selected || iconRightComponent) && (React.createElement(Flex, { align: "center", gap: 4, paddingLeft: 3, paddingRight: 2 },
            selected && (React.createElement(Text, { size: 1, muted: true },
                React.createElement(CheckmarkIcon, null))),
            iconRightComponent && (React.createElement(Text, { size: 1, muted: true }, iconRightComponent))))));
}
//# sourceMappingURL=WorkspacePreview.js.map