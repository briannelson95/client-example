import React, { useCallback, useMemo, useState } from 'react';
import { Dialog, Grid, Button, Flex, Box, Tooltip, Spinner, Text } from '@sanity/ui';
import styled from 'styled-components';
import { ComposeIcon } from '@sanity/icons';
import { DefaultPreview } from '../../../components/previews';
import { InsufficientPermissionsMessage } from '../../../components/InsufficientPermissionsMessage';
import { useTemplatePermissions } from '../../../datastores';
import { IntentLink } from '../../../router';
import { useSource } from '../../source';
import { useColorScheme } from '../../colorScheme';
const DocumentButton = styled(Button) `
  text-decoration: none;
`;
const TooltipContentBox = styled(Box) `
  max-width: 300px;
`;
const DisabledButtonWrapper = styled.div `
  & > * {
    width: 100%;
  }
`;
export function NewDocumentButton() {
    const [newDocumentButtonEl, setNewDocumentButtonEl] = useState(null);
    const [open, setOpen] = useState(false);
    const { scheme } = useColorScheme();
    const { __internal: { staticInitialValueTemplateItems }, currentUser, } = useSource();
    const [permissions, loading] = useTemplatePermissions({
        templateItems: staticInitialValueTemplateItems,
    });
    const keyedPermissions = useMemo(() => {
        if (!permissions)
            return {};
        return permissions.reduce((acc, next) => {
            acc[next.id] = next;
            return acc;
        }, {});
    }, [permissions]);
    const hasNewDocumentOptions = staticInitialValueTemplateItems.length > 0;
    const canCreateDocument = staticInitialValueTemplateItems.some((t) => keyedPermissions[t.id]?.granted);
    const tooltipContent = useMemo(() => {
        if (!hasNewDocumentOptions) {
            return React.createElement(Text, { size: 1 }, "No document types");
        }
        if (canCreateDocument) {
            return React.createElement(Text, { size: 1 }, "New document...");
        }
        return (React.createElement(InsufficientPermissionsMessage, { currentUser: currentUser, operationLabel: "create any document" }));
    }, [canCreateDocument, currentUser, hasNewDocumentOptions]);
    const handleOpen = useCallback(() => {
        setOpen(true);
    }, []);
    const handleClose = useCallback(() => {
        setOpen(false);
        newDocumentButtonEl?.focus();
    }, [newDocumentButtonEl]);
    const handleLinkClick = useCallback(() => {
        setOpen(false);
    }, []);
    return (React.createElement(React.Fragment, null,
        React.createElement(Tooltip, { content: React.createElement(TooltipContentBox, { padding: 2 }, tooltipContent), disabled: loading, placement: "bottom", portal: true, scheme: scheme },
            React.createElement(Box, null,
                React.createElement(Button, { "aria-label": "New document\u2026", disabled: !canCreateDocument || !hasNewDocumentOptions || loading, icon: ComposeIcon, mode: "bleed", onClick: handleOpen, ref: setNewDocumentButtonEl, style: {
                        cursor: !canCreateDocument || !hasNewDocumentOptions ? 'not-allowed' : undefined,
                    } }))),
        open && (React.createElement(Dialog, { header: "New document", id: "new-document-dialog", onClickOutside: handleClose, onClose: handleClose, scheme: scheme, width: 2 },
            loading && (React.createElement(Flex, { padding: 4, align: "center", justify: "center" },
                React.createElement(Spinner, { muted: true, "aria-label": "Loading\u2026" }))),
            !loading && (React.createElement(Grid, { padding: 4, columns: [1, 1, 2, 3], gap: 3 }, staticInitialValueTemplateItems.map((template) => {
                if (keyedPermissions[template.id]?.granted) {
                    return (React.createElement(DocumentButton, { forwardedAs: IntentLink, intent: "create", key: template.id, mode: "ghost", onClick: handleLinkClick, padding: 2, params: { template: template.templateId, type: template.schemaType } },
                        React.createElement(DefaultPreview, { media: template.icon, subtitle: template.subtitle, title: template.title })));
                }
                return (React.createElement(Tooltip, { key: template.id, content: React.createElement(TooltipContentBox, { padding: 2 },
                        React.createElement(InsufficientPermissionsMessage, { currentUser: currentUser, operationLabel: "create this document" })) },
                    React.createElement(DisabledButtonWrapper, null,
                        React.createElement(DocumentButton, { key: template.id, mode: "ghost", padding: 2, disabled: true },
                            React.createElement(DefaultPreview, { media: template.icon, subtitle: template.subtitle, title: template.title })))));
            })))))));
}
//# sourceMappingURL=NewDocumentButton.js.map