import { UnknownIcon } from '@sanity/icons';
import React, { forwardRef, useMemo, useState } from 'react';
import { startCase } from 'lodash';
import { CollapseMenu, CollapseMenuButton } from '../../../../components/collapseMenu';
import { useRovingFocus } from '../../../../components/rovingFocus';
import { useColorScheme } from '../../../colorScheme';
import { ToolLink } from './ToolLink';
export function ToolCollapseMenu(props) {
    const { activeToolName, tools } = props;
    const { scheme } = useColorScheme();
    const [collapseMenuEl, setCollapseMenuEl] = useState(null);
    useRovingFocus({
        rootElement: collapseMenuEl,
        navigation: ['arrows'],
    });
    const menuButtonProps = useMemo(() => ({
        popover: {
            constrainSize: true,
            portal: true,
            scheme: scheme,
        },
    }), [scheme]);
    const children = useMemo(() => tools.map((tool, index) => {
        const title = tool?.title || startCase(tool.name) || undefined;
        const Link = forwardRef(function Link(linkProps, ref) {
            return React.createElement(ToolLink, { ...linkProps, ref: ref, name: tool.name });
        });
        return (React.createElement(CollapseMenuButton, { as: Link, collapsedProps: { tooltipText: tool.title }, icon: tool.icon || UnknownIcon, 
            // eslint-disable-next-line react/no-array-index-key
            key: `${tool.name}-${index}`, mode: "bleed", selected: activeToolName === tool.name, text: title, tooltipProps: { scheme: scheme } }));
    }), [activeToolName, scheme, tools]);
    return (React.createElement(CollapseMenu, { gap: 1, menuButtonProps: menuButtonProps, ref: setCollapseMenuEl }, children));
}
//# sourceMappingURL=ToolCollapseMenu.js.map