import { Box, Button, Card, Flex, Stack } from '@sanity/ui';
import React, { useCallback, useState } from 'react';
import { omit } from 'lodash';
import { AddIcon, ArrowLeftIcon, ChevronRightIcon } from '@sanity/icons';
import { useActiveWorkspace } from '../../../../activeWorkspaceMatcher';
import { useWorkspaces } from '../../../../workspaces';
import { WorkspacePreview } from '../WorkspacePreview';
import { useWorkspaceAuthStates } from '../hooks';
import { LoadingScreen } from '../../../../screens';
import { workspacesDocsUrl } from '../constants';
import { Layout } from './Layout';
export function WorkspaceAuth() {
    const workspaces = useWorkspaces();
    const { activeWorkspace, setActiveWorkspace } = useActiveWorkspace();
    const [authStates] = useWorkspaceAuthStates(workspaces);
    const [selectedWorkspaceName, setSelectedWorkspaceName] = useState(activeWorkspace?.name || null);
    const selectedWorkspace = workspaces.length === 1
        ? workspaces[0]
        : workspaces.find((workspace) => workspace.name === selectedWorkspaceName);
    const LoginComponent = selectedWorkspace?.auth?.LoginComponent;
    const handleBack = useCallback(() => setSelectedWorkspaceName(null), []);
    if (!authStates)
        return React.createElement(LoadingScreen, null);
    if (LoginComponent && selectedWorkspace) {
        return (React.createElement(Stack, { space: 2 },
            workspaces.length > 1 && (React.createElement(Flex, null,
                React.createElement(Button, { fontSize: 1, icon: ArrowLeftIcon, mode: "bleed", onClick: handleBack, padding: 2, text: "Choose another workspace" }))),
            React.createElement(Layout, { header: React.createElement(Box, { padding: 3 },
                    React.createElement(WorkspacePreview, { icon: selectedWorkspace.icon, title: selectedWorkspace.title, subtitle: selectedWorkspace.dataset })) },
                React.createElement(Stack, { padding: 2, paddingBottom: 3, paddingTop: 4 },
                    React.createElement(LoginComponent, { ...omit(selectedWorkspace, ['type', '__internal']), key: selectedWorkspaceName })))));
    }
    return (React.createElement(Layout, { header: "Choose your workspace", footer: React.createElement(Stack, { padding: 1 },
            React.createElement(Button, { as: "a", href: workspacesDocsUrl, icon: AddIcon, justify: "flex-start", mode: "bleed", rel: "noopener noreferrer", target: "__blank", text: "Add workspace" })) },
        React.createElement(Stack, { space: 1, paddingX: 1, paddingY: 2 }, workspaces.map((workspace) => {
            const authState = authStates[workspace.name];
            // eslint-disable-next-line no-nested-ternary
            const state = authState.authenticated
                ? 'logged-in'
                : workspace.auth.LoginComponent
                    ? 'logged-out'
                    : 'no-access';
            const handleSelectWorkspace = () => {
                if (state === 'logged-in' && workspace.name !== activeWorkspace.name) {
                    setActiveWorkspace(workspace.name);
                }
                if (state === 'logged-out') {
                    setSelectedWorkspaceName(workspace.name);
                }
            };
            return (React.createElement(Card, { as: "button", radius: 2, key: workspace.name, padding: 2, 
                // eslint-disable-next-line react/jsx-no-bind
                onClick: handleSelectWorkspace },
                React.createElement(WorkspacePreview, { icon: workspace?.icon, iconRight: ChevronRightIcon, state: state, subtitle: workspace.dataset, title: workspace?.title || workspace.name })));
        }))));
}
//# sourceMappingURL=WorkspaceAuth.js.map