import { Layer, Card, Flex, Text, Box, Button, Stack, useGlobalKeyDown } from '@sanity/ui';
import { CloseIcon, LeaveIcon } from '@sanity/icons';
import React, { memo, useEffect, useState } from 'react';
import styled from 'styled-components';
import { UserAvatar } from '../../../components/UserAvatar';
import { useWorkspace } from '../../workspace';
import { useRovingFocus } from '../../../components/rovingFocus';
import { ToolMenu as DefaultToolMenu } from './tools/ToolMenu';
import { WorkspaceMenuButton } from './workspace';
const Root = styled(Layer) `
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
`;
const Backdrop = styled(Card) `
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: var(--card-shadow-penumbra-color);
  transition: 200ms opacity ease-in-out;
  pointer-events: none;
  opacity: 0;

  &[data-open='true'] {
    opacity: 1;
    pointer-events: all;
  }
`;
const InnerCard = styled(Card) `
  position: relative;
  pointer-events: all;
  flex-direction: column;
  min-width: 200px;
  max-width: 280px;
  transition: 200ms transform ease-in-out;
  transform: translate3d(calc(-100% - 1px), 0, 0);

  &[data-open='true'] {
    transform: translate3d(0, 0, 0);
  }
`;
export const NavDrawer = memo(function NavDrawer(props) {
    const { activeToolName, isOpen, onClose, tools } = props;
    const [closeButtonElement, setCloseButtonElement] = useState(null);
    const [innerCardElement, setInnerCardElement] = useState(null);
    const tabIndex = isOpen ? 0 : -1;
    const { currentUser, navbar, auth } = useWorkspace();
    const { ToolMenu = DefaultToolMenu } = navbar?.components || {};
    useRovingFocus({
        rootElement: innerCardElement,
        navigation: ['tab'],
    });
    useGlobalKeyDown((e) => {
        if (e.key === 'Escape' && isOpen) {
            onClose();
        }
    });
    useEffect(() => {
        if (isOpen) {
            closeButtonElement?.focus();
        }
    }, [closeButtonElement, isOpen]);
    return (React.createElement(Root, null,
        React.createElement(Backdrop, { "data-open": isOpen, onClick: onClose }),
        React.createElement(InnerCard, { display: "flex", height: "fill", "data-open": isOpen, shadow: 1, ref: setInnerCardElement },
            React.createElement(Card, { borderBottom: true },
                React.createElement(Stack, { space: 3, padding: [3, 3, 4] },
                    React.createElement(Flex, { align: "center" },
                        React.createElement(Flex, { flex: 1, align: "center", paddingRight: 2 },
                            React.createElement(Flex, { flex: 1, align: "center" },
                                React.createElement(Box, null,
                                    React.createElement(UserAvatar, { size: 1, user: "me" })),
                                React.createElement(Box, { flex: 1, marginLeft: 2, title: currentUser?.name || currentUser?.email },
                                    React.createElement(Text, { textOverflow: "ellipsis" }, currentUser?.name || currentUser?.email)))),
                        React.createElement(Box, null,
                            React.createElement(Button, { icon: CloseIcon, mode: "bleed", onClick: onClose, ref: setCloseButtonElement, tabIndex: tabIndex, title: "Close menu" }))),
                    React.createElement(WorkspaceMenuButton, { text: "Select workspace", justify: "flex-start" }))),
            React.createElement(Box, { flex: "auto", overflow: "auto", padding: [3, 3, 4] },
                React.createElement(ToolMenu, { activeToolName: activeToolName, closeDrawer: onClose, context: "drawer", isDrawerOpen: isOpen, tools: tools })),
            auth.logout && (React.createElement(Card, { flex: "none", padding: [3, 3, 4], borderTop: true },
                React.createElement(Stack, null,
                    React.createElement(Button, { iconRight: LeaveIcon, justify: "flex-start", mode: "bleed", 
                        // eslint-disable-next-line react/jsx-handler-names
                        onClick: auth.logout, tabIndex: tabIndex, text: "Sign out" })))))));
});
//# sourceMappingURL=NavDrawer.js.map