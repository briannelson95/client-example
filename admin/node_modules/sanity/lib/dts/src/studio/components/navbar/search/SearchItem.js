import React, { forwardRef, useMemo } from 'react';
import { Inline, Label } from '@sanity/ui';
import { PreviewCard } from '../../../../components/PreviewCard';
import { useSchema } from '../../../../hooks';
import { DocumentPreviewPresence } from '../../../../presence';
import { IntentLink } from '../../../../router';
import { SanityPreview } from '../../../../preview';
import { useDocumentPresence } from '../../../../datastores';
import { getPublishedId } from '../../../../util';
export function SearchItem(props) {
    const { documentId, documentType, onClick, ...restProps } = props;
    const documentPresence = useDocumentPresence(documentId);
    const schema = useSchema();
    const schemaType = schema.get(documentType);
    const params = useMemo(() => ({ id: getPublishedId(documentId), type: documentType }), [documentId, documentType]);
    const previewValue = useMemo(() => ({ _id: documentId, _type: documentType }), [documentId, documentType]);
    const LinkComponent = useMemo(() => 
    // eslint-disable-next-line @typescript-eslint/no-shadow
    forwardRef(function LinkComponent(linkProps, ref) {
        return React.createElement(IntentLink, { ...linkProps, intent: "edit", params: params, tabIndex: -1, ref: ref });
    }), [params]);
    if (!schemaType)
        return null;
    return (React.createElement(PreviewCard, { "data-as": "a", as: LinkComponent, onClick: onClick, ...restProps, radius: 2 },
        React.createElement(SanityPreview, { layout: "default", schemaType: schemaType, status: React.createElement(Inline, { space: 3 },
                documentPresence && documentPresence.length > 0 && (React.createElement(DocumentPreviewPresence, { presence: documentPresence })),
                React.createElement(Label, { size: 0, muted: true }, documentType || 'NONE')), value: previewValue })));
}
//# sourceMappingURL=SearchItem.js.map