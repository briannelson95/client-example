import { Observable } from 'rxjs';
import { CurrentUser } from '@sanity/types';
import { SanityClient } from '@sanity/client';
import { Config, SingleWorkspace, Source, Workspace, SchemaPluginOptions } from './types';
/**
 * Fully resolves a configuration including subscribing to all sources and
 * workspaces from a config. Returns an `Observable` that waits till all sources
 * emit once before emitting an array of fully resolved sources and workspaces.
 *
 * @alpha
 */
export declare function resolveConfig(config: Config): Observable<Workspace[]>;
declare type CreateWorkspaceFromConfigOptions = SingleWorkspace | (SingleWorkspace & {
    currentUser: CurrentUser;
    client: SanityClient;
    schema?: SchemaPluginOptions;
});
/**
 * PRIMARILY FOR TESTING PURPOSES.
 *
 * This will create a fully resolved workspace from a config and optionally
 * allows a `client` and `currentUser` override. This exists primarily for
 * testing purposes. If you need to use a workspace, we recommend using the
 * `useWorkspace` hook to grab the fully resolved workspace from the
 * `StudioProvider`
 *
 * @alpha
 */
export declare function createWorkspaceFromConfig(options: CreateWorkspaceFromConfigOptions): Promise<Workspace>;
/**
 * PRIMARILY FOR TESTING PURPOSES.
 *
 * This will create a fully resolved source from a config and optionally
 * allows a `client` and `currentUser` override. This exists primarily for
 * testing purposes. If you need to use a source, we recommend using the
 * `useSource` hook to grab the fully resolved source from the `StudioProvider`
 *
 * @alpha
 */
export declare function createSourceFromConfig(options: CreateWorkspaceFromConfigOptions): Promise<Source>;
export {};
//# sourceMappingURL=resolveConfig.d.ts.map