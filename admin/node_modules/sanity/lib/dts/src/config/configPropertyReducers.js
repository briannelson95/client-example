import { DeleteAction, DiscardChangesAction, DuplicateAction, PublishAction, UnpublishAction, } from '../desk/actions';
import { LiveEditBadge } from '../desk/badges';
export const initialDocumentBadges = [LiveEditBadge];
export const initialDocumentActions = [
    PublishAction,
    DiscardChangesAction,
    UnpublishAction,
    DuplicateAction,
    DeleteAction,
];
export const initialLanguageFilter = [];
export const schemaTypesReducer = (prev, { schema }, context) => {
    const schemaTypes = schema?.types;
    if (!schemaTypes)
        return prev;
    if (typeof schemaTypes === 'function')
        return schemaTypes(prev, context);
    if (Array.isArray(schemaTypes))
        return [...prev, ...schemaTypes];
    throw new Error(`Expected \`schema.types\` to an array or a function but found ${typeof schemaTypes} instead.`);
};
export const resolveProductionUrlReducer = async (prev, { document }, context) => {
    const resolveProductionUrl = document?.productionUrl;
    // the redundant await is useful for error logging because the error is caught
    // in this stack vs somewhere down stream
    // eslint-disable-next-line no-return-await
    if (resolveProductionUrl)
        return await resolveProductionUrl(prev, context);
    return prev;
};
export const toolsReducer = (prev, { tools }, context) => {
    if (!tools)
        return prev;
    if (typeof tools === 'function')
        return tools(prev, context);
    if (Array.isArray(tools))
        return [...prev, ...tools];
    throw new Error(`Expected \`tools\` to an array or a function but found ${typeof tools} instead.`);
};
export const schemaTemplatesReducer = (prev, { schema }, context) => {
    const schemaTemplates = schema?.templates;
    if (!schemaTemplates)
        return prev;
    if (typeof schemaTemplates === 'function')
        return schemaTemplates(prev, context);
    if (Array.isArray(schemaTemplates))
        return [...prev, ...schemaTemplates];
    throw new Error(`Expected \`schema.templates\` to an array or a function but found ${typeof schemaTemplates} instead.`);
};
export const documentBadgesReducer = (prev, { document }, context) => {
    const documentBadges = document?.badges;
    if (!documentBadges)
        return prev;
    if (typeof documentBadges === 'function')
        return documentBadges(prev, context);
    if (Array.isArray(documentBadges))
        return [...prev, ...documentBadges];
    throw new Error(`Expected \`document.actions\` to an array or a function but found ${typeof documentBadges} instead.`);
};
export const documentActionsReducer = (prev, { document }, context) => {
    const documentActions = document?.actions;
    if (!documentActions)
        return prev;
    if (typeof documentActions === 'function')
        return documentActions(prev, context);
    if (Array.isArray(documentActions))
        return [...prev, ...documentActions];
    throw new Error(`Expected \`document.actions\` to an array or a function but found ${typeof documentActions} instead.`);
};
export const newDocumentOptionsResolver = (prev, { document }, context) => {
    const resolveNewDocumentOptions = document?.newDocumentOptions;
    if (!resolveNewDocumentOptions)
        return prev;
    if (typeof resolveNewDocumentOptions !== 'function') {
        throw new Error(`Expected \`document.resolveNewDocumentOptions\` a function but found ${typeof resolveNewDocumentOptions} instead.`);
    }
    return resolveNewDocumentOptions(prev, context);
};
export const fileAssetSourceResolver = (prev, { form }, context) => {
    const assetSources = form?.file?.assetSources;
    if (!assetSources)
        return prev;
    if (typeof assetSources === 'function')
        return assetSources(prev, context);
    if (Array.isArray(assetSources))
        return [...prev, ...assetSources];
    throw new Error(`Expected \`file.assetSources\` to an array or a function but found ${typeof assetSources} instead.`);
};
export const imageAssetSourceResolver = (prev, { form }, context) => {
    const assetSources = form?.image?.assetSources;
    if (!assetSources)
        return prev;
    if (typeof assetSources === 'function')
        return assetSources(prev, context);
    if (Array.isArray(assetSources))
        return [...prev, ...assetSources];
    throw new Error(`Expected \`image.assetSources\` to an array or a function but found ${typeof assetSources} instead.`);
};
/**
 * @internal
 */
export const _documentLanguageFilterReducer = (prev, { document }, context) => {
    const resolveDocumentLanguageFilter = document?.unstable_languageFilter;
    if (!resolveDocumentLanguageFilter)
        return prev;
    if (typeof resolveDocumentLanguageFilter === 'function')
        return resolveDocumentLanguageFilter(prev, context);
    if (Array.isArray(resolveDocumentLanguageFilter))
        return [...prev, ...resolveDocumentLanguageFilter];
    throw new Error(`Expected \`document.actions\` to an array or a function but found ${typeof resolveDocumentLanguageFilter} instead.`);
};
//# sourceMappingURL=configPropertyReducers.js.map