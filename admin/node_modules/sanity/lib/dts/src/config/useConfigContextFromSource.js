import { useMemo } from 'react';
/**
 * Reduce a {@link Source} down to a {@link ConfigContext}, memoizing using `React.useMemo`
 *
 * @param source - Source to convert
 * @returns A config context containing only the defined properties of that interface
 * @internal
 */
export function useConfigContextFromSource(source) {
    const { projectId, dataset, schema, currentUser, client } = source;
    return useMemo(() => {
        return { projectId, dataset, schema, currentUser, client };
    }, [projectId, dataset, schema, currentUser, client]);
}
/**
 * Reduce a {@link Source} down to a {@link ConfigContext}, without memoization - use for non-react contexts
 *
 * @param source - Source to convert
 * @returns A config context containing only the defined properties of that interface
 * @internal
 */
export function getConfigContextFromSource(source) {
    const { projectId, dataset, schema, currentUser, client } = source;
    return { projectId, dataset, schema, currentUser, client };
}
//# sourceMappingURL=useConfigContextFromSource.js.map