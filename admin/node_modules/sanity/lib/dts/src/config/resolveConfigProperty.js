import { ConfigPropertyError } from './ConfigPropertyError';
const flattenConfig = ({ plugins = [], ...currentConfig }, path) => {
    return [
        { config: currentConfig, path: [...path, currentConfig.name] },
        ...plugins.flatMap((config) => flattenConfig(config, [...path, currentConfig.name])),
    ];
};
export function resolveConfigProperty({ config: inputConfig, context, initialValue, propertyName, ...reducers }) {
    const configs = flattenConfig(inputConfig, []);
    if ('reducer' in reducers) {
        return configs.reduce((acc, { config, path }) => {
            try {
                return reducers.reducer(acc, config, context);
            }
            catch (e) {
                throw new ConfigPropertyError({
                    propertyName,
                    path: path,
                    cause: e,
                });
            }
        }, initialValue);
    }
    const reducer = reducers.asyncReducer;
    return (async () => {
        let current = initialValue;
        for (const { config, path } of configs) {
            try {
                current = await reducer(current, config, context);
            }
            catch (e) {
                throw new ConfigPropertyError({
                    propertyName,
                    path,
                    cause: e,
                });
            }
        }
        return current;
    })();
}
//# sourceMappingURL=resolveConfigProperty.js.map