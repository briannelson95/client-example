import type { Doc, Mut } from './types';
/**
 * Parameters attached to the mutation
 *
 * @internal
 */
export interface MutationParams {
    transactionId?: string;
    transition?: string;
    identity?: string;
    previousRev?: string;
    resultRev?: string;
    mutations: Mut[];
    timestamp?: string;
    effects?: {
        apply: unknown;
        revert: unknown;
    };
}
/**
 * A mutation describing a number of operations on a single document.
 * This should be considered an immutable structure. Mutations are compiled
 * on first application, and any changes in properties will not effectively
 * change its behavior after that.
 *
 * @internal
 */
export declare class Mutation {
    params: MutationParams;
    compiled?: (doc: Doc | null) => Doc | null;
    _appliesToMissingDocument: boolean | undefined;
    constructor(options: MutationParams);
    get transactionId(): string | undefined;
    get transition(): string | undefined;
    get identity(): string | undefined;
    get previousRev(): string | undefined;
    get resultRev(): string | undefined;
    get mutations(): Mut[];
    get timestamp(): Date | undefined;
    get effects(): {
        apply: unknown;
        revert: unknown;
    } | undefined;
    assignRandomTransactionId(): void;
    appliesToMissingDocument(): boolean;
    compile(): void;
    apply(document: Doc | null): Doc | null;
    static applyAll(document: Doc | null, mutations: Mutation[]): Doc | null;
    static squash(document: Doc | null, mutations: Mutation[]): Mutation;
}
//# sourceMappingURL=Mutation.d.ts.map