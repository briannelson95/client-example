import { Descender } from './Descender';
import { Expression } from './Expression';
import type { Probe } from './Probe';
interface Result<P = unknown> {
    leads: {
        target: Expression;
        matcher: Matcher;
    }[];
    delivery?: {
        targets: Expression[];
        payload: P;
    };
}
/**
 * @internal
 */
export declare class Matcher {
    active: Descender[];
    recursives: Descender[];
    payload: unknown;
    constructor(active: Descender[], parent?: Matcher);
    setPayload(payload: unknown): this;
    extractRecursives(): void;
    activeRecursives(probe: Probe): Descender[];
    match(probe: Probe): Result;
    iterate(probe: Probe): Matcher;
    isDestination(): boolean;
    hasRecursives(): boolean;
    extractMatches(probe: Probe): Result;
    static fromPath(jsonpath: string): Matcher;
}
export {};
//# sourceMappingURL=Matcher.d.ts.map