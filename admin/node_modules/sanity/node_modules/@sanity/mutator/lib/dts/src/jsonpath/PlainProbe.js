import { isRecord } from '../util';
// A default implementation of a probe for vanilla JS _values
export class PlainProbe {
    constructor(value, path) {
        this._value = value;
        this.path = path || [];
    }
    containerType() {
        if (Array.isArray(this._value)) {
            return 'array';
        }
        else if (this._value !== null && typeof this._value === 'object') {
            return 'object';
        }
        return 'primitive';
    }
    length() {
        if (!Array.isArray(this._value)) {
            throw new Error("Won't return length of non-indexable _value");
        }
        return this._value.length;
    }
    getIndex(i) {
        if (!Array.isArray(this._value)) {
            return false;
        }
        if (i >= this.length()) {
            return null;
        }
        return new PlainProbe(this._value[i], this.path.concat(i));
    }
    hasAttribute(key) {
        if (!isRecord(this._value)) {
            return false;
        }
        return this._value.hasOwnProperty(key);
    }
    attributeKeys() {
        return isRecord(this._value) ? Object.keys(this._value) : [];
    }
    getAttribute(key) {
        if (!isRecord(this._value)) {
            throw new Error('getAttribute only applies to plain objects');
        }
        if (!this.hasAttribute(key)) {
            return null;
        }
        return new PlainProbe(this._value[key], this.path.concat(key));
    }
    get() {
        return this._value;
    }
}
//# sourceMappingURL=PlainProbe.js.map