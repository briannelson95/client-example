import type { Probe } from '../jsonpath/Probe';
/**
 * An immutable probe/writer for plain JS objects that will never mutate
 * the provided _value in place. Each setter returns a new (wrapped) version
 * of the value.
 */
export declare class ImmutableAccessor implements Probe {
    _value: unknown;
    path: (string | number)[];
    constructor(value: unknown, path?: (string | number)[]);
    containerType(): 'array' | 'object' | 'primitive';
    get(): unknown;
    length(): number;
    getIndex(i: number): ImmutableAccessor | false | null;
    hasAttribute(key: string): boolean;
    attributeKeys(): string[];
    getAttribute(key: string): ImmutableAccessor | null;
    set(value: unknown): ImmutableAccessor;
    setIndex(i: number, value: unknown): ImmutableAccessor;
    setIndexAccessor(i: number, accessor: ImmutableAccessor): ImmutableAccessor;
    unsetIndices(indices: number[]): ImmutableAccessor;
    insertItemsAt(pos: number, items: unknown[]): ImmutableAccessor;
    setAttribute(key: string, value: unknown): ImmutableAccessor;
    setAttributeAccessor(key: string, accessor: ImmutableAccessor): ImmutableAccessor;
    unsetAttribute(key: string): ImmutableAccessor;
}
//# sourceMappingURL=ImmutableAccessor.d.ts.map