import type { PatchMutationOperation } from '@sanity/types';
import type { SubmissionResponder } from '../../src/document/Document';
import type { Doc } from '../../src/document/types';
import { Document, Mutation } from '../../src/document';
export declare class DocumentTester {
    onRebaseCalled: boolean;
    onMutationCalled: boolean;
    context: string;
    staged: Record<string, Mutation | undefined>;
    stagedResponders: Record<string, SubmissionResponder | undefined>;
    doc: Document;
    constructor(attrs: Doc);
    reset(): void;
    stage(title: string): this;
    remotePatch(fromRev: string, toRev: string, patch: PatchMutationOperation): this;
    localPatch(fromRev: string, toRev: string, patch: PatchMutationOperation): this;
    localSucceeded(txnId: string): this;
    localFailed(txnId: string): this;
    arrivedLocal(txnId: string): this;
    assertEDGE(path: string, value: unknown): this;
    assertHEAD(path: string, value: unknown): this;
    assertBOTH(path: string, values: unknown): this;
    didRebase(): this;
    didNotRebase(): this;
    onMutationFired(): this;
    onMutationDidNotFire(): this;
    isConsistent(): this;
    isInconsistent(): this;
    hasUnresolvedLocalMutations(): this;
    noUnresolvedLocalMutations(): this;
}
//# sourceMappingURL=DocumentTester.d.ts.map