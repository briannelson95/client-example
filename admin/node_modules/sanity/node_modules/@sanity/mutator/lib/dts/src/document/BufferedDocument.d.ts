import { Document } from './Document';
import { Mutation } from './Mutation';
import { SquashingBuffer } from './SquashingBuffer';
import type { Doc, Mut } from './types';
/**
 * @internal
 */
export interface CommitHandlerMessage {
    mutation: Mutation;
    success: () => void;
    failure: () => void;
    cancel: (error: Error) => void;
}
/**
 * @internal
 */
export declare class BufferedDocument {
    private mutations;
    /**
     * The Document we are wrapping
     */
    document: Document;
    /**
     * The Document with local changes applied
     */
    LOCAL: Doc | null;
    /**
     * Commits that are waiting to be delivered to the server
     */
    private commits;
    /**
     * Local mutations that are not scheduled to be committed yet
     */
    buffer: SquashingBuffer;
    /**
     * Assignable event handler for when the buffered document applies a mutation
     */
    onMutation?: (message: {
        mutation: Mutation;
        document: Doc | null;
        remote: boolean;
    }) => void;
    /**
     * Assignable event handler for when a remote mutation happened
     */
    onRemoteMutation?: Document['onRemoteMutation'];
    /**
     * Assignable event handler for when the buffered document rebased
     */
    onRebase?: (localDoc: Doc | null, remoteMutations: Mut[], localMutations: Mut[]) => void;
    /**
     * Assignable event handler for when the document is deleted
     */
    onDelete?: (doc: Doc | null) => void;
    /**
     * Assignable event handler for when the state of consistency changed
     */
    onConsistencyChanged?: (isConsistent: boolean) => void;
    /**
     * Assignable event handler for when the buffered document should commit changes
     */
    commitHandler?: (msg: CommitHandlerMessage) => void;
    /**
     * Whether or not we are currently commiting
     */
    committerRunning: boolean;
    constructor(doc: Doc | null);
    reset(doc: Doc | null): void;
    add(mutation: Mutation): void;
    arrive(mutation: Mutation): void;
    commit(): Promise<void>;
    performCommits(): void;
    _cycleCommitter(): void;
    handleDocRebase(edge: Doc | null, remoteMutations: Mutation[], localMutations: Mutation[]): void;
    handleDocumentDeleted(): void;
    handleDocMutation(msg: {
        mutation: Mutation;
        document: Doc | null;
        remote: boolean;
    }): void;
    rebase(remoteMutations: Mutation[], localMutations: Mutation[]): void;
    handleDocConsistencyChanged(isConsistent: boolean): void;
}
//# sourceMappingURL=BufferedDocument.d.ts.map