import type { PatchMutationOperation } from '@sanity/types';
import type { CommitHandlerMessage } from '../../src/document/BufferedDocument';
import type { Doc, Mut } from '../../src/document/types';
import { BufferedDocument } from '../../src/document';
export declare class BufferedDocumentTester {
    doc: BufferedDocument;
    context: string;
    pendingCommit: CommitHandlerMessage | null;
    onMutationCalled: boolean;
    onRebaseCalled: boolean;
    onDeleteCalled: boolean;
    constructor(attrs: Doc);
    resetState(): void;
    resetDocument(doc: Doc | null): void;
    stage(title: string): this;
    remotePatch(fromRev: string, toRev: string, patch: PatchMutationOperation): this;
    remoteMutation(fromRev: string | undefined, toRev: string, operation: Mut): this;
    localPatch(patch: PatchMutationOperation): this;
    localMutation(fromRev: string | undefined, toRev: string, operation: Mut): this;
    commit(): this;
    commitSucceeds(): this;
    commitSucceedsButMutationArriveDuringCommitProcess(): this;
    commitFails(): this;
    assertLOCAL(path: string, value: unknown): this;
    assertEDGE(path: string, value: unknown): this;
    assertHEAD(path: string, value: unknown): this;
    assertALL(path: string, values: unknown): this;
    assertLOCALDeleted(): this;
    assertEDGEDeleted(): this;
    assertHEADDeleted(): this;
    assertALLDeleted(): this;
    assert(cb: (doc: BufferedDocument | null) => void): this;
    didRebase(): this;
    didNotRebase(): this;
    onMutationFired(): this;
    onMutationDidNotFire(): this;
    onDeleteDidFire(): this;
    onDeleteDidNotFire(): this;
    isConsistent(): this;
    isInconsistent(): this;
    hasUnresolvedLocalMutations(): this;
    noUnresolvedLocalMutations(): this;
    hasLocalEdits(): this;
    hasNoLocalEdits(): this;
    hasPendingCommit(): this;
    hasNoPendingCommit(): this;
}
//# sourceMappingURL=BufferedDocumentTester.d.ts.map