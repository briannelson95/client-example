"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSanityStudioConfigPath = getSanityStudioConfigPath;

var _path = _interopRequireDefault(require("path"));

var _promises = _interopRequireDefault(require("fs/promises"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Resolves the path to the studio configuration file with the following extensions,
 * in preferred order: '.mjs', '.js', '.ts', '.jsx', '.tsx' (aligns with vite)
 *
 * Falls back to the default studio configuration exported by `sanity` if none is found
 *
 * @internal
 */
async function getSanityStudioConfigPath(studioRootPath) {
  const configPaths = [_path.default.join(studioRootPath, 'sanity.config.mjs'), _path.default.join(studioRootPath, 'sanity.config.js'), _path.default.join(studioRootPath, 'sanity.config.ts'), _path.default.join(studioRootPath, 'sanity.config.jsx'), _path.default.join(studioRootPath, 'sanity.config.tsx')];
  const configs = await Promise.all(configPaths.map(async configPath => ({
    path: configPath,
    exists: await fileExists(configPath)
  }))); // No config file exists?

  const availableConfigs = configs.filter(config => config.exists);

  if (availableConfigs.length === 0) {
    console.warn('No `sanity.config.js`/`sanity.config.ts` found - using default studio config');
    return _path.default.join(__dirname, 'defaultStudioConfig.js');
  }

  if (availableConfigs.length > 1) {
    console.warn('Found multiple potential studio configs:');
    availableConfigs.forEach(config => console.warn(" - ".concat(config.path)));
    console.warn("Using ".concat(availableConfigs[0].path));
  }

  return availableConfigs[0].path;
}
/**
 * Asynchronously checks if a file exists. This is prone to race conditions,
 * as the file can exist/not exist by the time this resolves, but in this
 * case this is an acceptable trade-off. Best effort, and all that.
 */


function fileExists(filePath) {
  return _promises.default.stat(filePath).then(() => true, () => false);
}