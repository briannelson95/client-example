"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.writeSanityRuntime = writeSanityRuntime;

var _promises = _interopRequireDefault(require("fs/promises"));

var _path = _interopRequireDefault(require("path"));

var _chokidar = _interopRequireDefault(require("chokidar"));

var _debug = require("./debug");

var _getEntryModule = require("./getEntryModule");

var _sanityConfig = require("./sanityConfig");

var _sanityMonorepo = require("./sanityMonorepo");

var _renderDocument = require("./renderDocument");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Generates the `.sanity/runtime` directory, and optionally watches for custom
 * document files, rebuilding when they change
 *
 * @param options - Current working directory (Sanity root dir), and whether or not to watch
 * @internal
 */
async function writeSanityRuntime(_ref) {
  let {
    cwd,
    watch
  } = _ref;
  const monorepo = await (0, _sanityMonorepo.loadSanityMonorepo)(cwd);

  const runtimeDir = _path.default.join(cwd, '.sanity', 'runtime');

  (0, _debug.debug)('Making runtime directory');
  await _promises.default.mkdir(runtimeDir, {
    recursive: true
  });

  async function renderAndWriteDocument() {
    (0, _debug.debug)('Rendering document template');
    const indexHtml = (0, _renderDocument.decorateIndexWithAutoGeneratedWarning)(await (0, _renderDocument.renderDocument)({
      studioRootPath: cwd,
      monorepo,
      props: {
        entryPath: "/".concat(_path.default.relative(cwd, _path.default.join(runtimeDir, 'app.js')))
      }
    }));
    (0, _debug.debug)('Writing index.html to runtime directory');
    await _promises.default.writeFile(_path.default.join(runtimeDir, 'index.html'), indexHtml);
  }

  if (watch) {
    _chokidar.default.watch((0, _renderDocument.getPossibleDocumentComponentLocations)(cwd)).on('all', () => renderAndWriteDocument());
  }

  await renderAndWriteDocument();
  (0, _debug.debug)('Writing app.js to runtime directory');
  const studioConfigPath = await (0, _sanityConfig.getSanityStudioConfigPath)(cwd);

  const relativeConfigLocation = _path.default.relative(runtimeDir, studioConfigPath);

  await _promises.default.writeFile(_path.default.join(runtimeDir, 'app.js'), (0, _getEntryModule.getEntryModule)({
    relativeConfigLocation
  }));
}