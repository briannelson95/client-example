"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.finalizeViteConfig = finalizeViteConfig;
exports.getViteConfig = getViteConfig;

var _path = _interopRequireDefault(require("path"));

var _pluginReact = _interopRequireDefault(require("@vitejs/plugin-react"));

var _aliases = require("./aliases");

var _helpers = require("./helpers");

var _sanityMonorepo = require("./sanityMonorepo");

var _pluginSanityBuildEntries = require("./vite/plugin-sanity-build-entries");

var _pluginSanityDotWorkaround = require("./vite/plugin-sanity-dot-workaround");

var _pluginSanityRuntimeRewrite = require("./vite/plugin-sanity-runtime-rewrite");

var _pluginSanityFavicons = require("./vite/plugin-sanity-favicons");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Get a configuration object for Vite based on the passed options
 *
 * @internal Only meant for consumption inside of Sanity modules, do not depend on this externally
 */
async function getViteConfig(options) {
  const {
    cwd,
    mode,
    outputDir,
    // default to `true` when `mode=development`
    sourceMap = options.mode === 'development',
    server,
    minify,
    basePath: rawBasePath = '/'
  } = options;
  const monorepo = await (0, _sanityMonorepo.loadSanityMonorepo)(cwd);
  const basePath = (0, _helpers.normalizeBasePath)(rawBasePath);

  const faviconsPath = _path.default.join(__dirname, 'static', 'favicons');

  const staticPath = "".concat(basePath, "static");
  const viteConfig = {
    root: cwd,
    base: basePath,
    build: {
      outDir: outputDir || _path.default.resolve(cwd, 'dist'),
      sourcemap: sourceMap
    },
    server: {
      base: basePath,
      host: server === null || server === void 0 ? void 0 : server.host,
      port: (server === null || server === void 0 ? void 0 : server.port) || 3333,
      strictPort: true
    },
    configFile: false,
    mode,
    plugins: [(0, _pluginReact.default)(), (0, _pluginSanityFavicons.sanityFaviconsPlugin)({
      faviconsPath,
      staticUrlPath: staticPath
    }), (0, _pluginSanityDotWorkaround.sanityDotWorkaroundPlugin)(), (0, _pluginSanityRuntimeRewrite.sanityRuntimeRewritePlugin)(), (0, _pluginSanityBuildEntries.sanityBuildEntries)({
      basePath,
      cwd,
      monorepo
    })],
    envPrefix: 'SANITY_STUDIO_',
    logLevel: mode === 'production' ? 'silent' : 'info',
    resolve: {
      alias: (0, _aliases.getAliases)({
        monorepo
      })
    }
  };

  if (mode === 'production') {
    viteConfig.build = { ...viteConfig.build,
      assetsDir: 'static',
      minify: minify ? 'esbuild' : false,
      emptyOutDir: false,
      // Rely on CLI to do this
      rollupOptions: {
        input: {
          sanity: _path.default.join(cwd, '.sanity', 'runtime', 'app.js')
        }
      }
    };
  }

  return viteConfig;
}
/**
 * Ensure Sanity entry chunk is always loaded
 *
 * @param config - User-modified configuration
 * @returns Merged configuration
 * @internal
 */


function finalizeViteConfig(config) {
  var _config$build, _config$build$rollupO;

  if (typeof ((_config$build = config.build) === null || _config$build === void 0 ? void 0 : (_config$build$rollupO = _config$build.rollupOptions) === null || _config$build$rollupO === void 0 ? void 0 : _config$build$rollupO.input) !== 'object') {
    throw new Error('Vite config must contain `build.rollupOptions.input`, and it must be an object');
  }

  if (!config.root) {
    throw new Error('Vite config must contain `root` property, and must point to the Sanity root directory');
  }

  return { ...config,
    build: { ...config.build,
      rollupOptions: { ...config.build.rollupOptions,
        input: { ...config.build.rollupOptions.input,
          sanity: _path.default.join(config.root, '.sanity', 'runtime', 'app.js')
        }
      }
    }
  };
}