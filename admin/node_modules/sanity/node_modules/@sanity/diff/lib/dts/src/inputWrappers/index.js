import ArrayWrapper from './array';
import ObjectWrapper from './object';
import StringWrapper from './string';
import BasicWrapper from './basic';
/**
 * Takes an input (any JSON-serializable value) and an annotation, and generates an input
 * object for it, to be used with {@link diffInput | the diffInput() method} and others.
 *
 * @param input - The value to wrap in an input object
 * @param annotation - Annotation attached to the input - will be bound to generated diffs
 * @returns A input object
 * @throws if `input` is not a JSON-serializable type
 * @public
 */
export function wrap(input, annotation) {
    if (Array.isArray(input)) {
        return new ArrayWrapper(input, annotation);
    }
    else if (input === null) {
        return new BasicWrapper('null', input, annotation);
    }
    const type = typeof input;
    switch (type) {
        case 'number':
            return new BasicWrapper(type, input, annotation);
        case 'boolean':
            return new BasicWrapper(type, input, annotation);
        case 'object':
            return new ObjectWrapper(input, annotation);
        case 'string':
            return new StringWrapper(input, annotation);
        default:
            throw new Error(`cannot wrap value of type: ${type}`);
    }
}
//# sourceMappingURL=index.js.map