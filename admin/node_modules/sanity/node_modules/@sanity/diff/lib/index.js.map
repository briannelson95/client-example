{"version":3,"file":"index.js","sources":["../src/helpers.ts","../src/calculate/lcs.ts","../src/calculate/diffArray.ts","../src/calculate/diffString.ts","../src/calculate/diffTypeChange.ts","../src/calculate/diffObject.ts","../src/calculate/diffSimple.ts","../src/calculate/diffInput.ts","../src/inputWrappers/array.ts","../src/inputWrappers/object.ts","../src/inputWrappers/string.ts","../src/inputWrappers/basic.ts","../src/inputWrappers/index.ts"],"sourcesContent":["export function replaceProperty<P, V extends P[K], K extends keyof P>(\n  parent: P,\n  prop: K,\n  value: V\n): V {\n  delete parent[prop]\n  parent[prop] = value\n  return value\n}\n","/*\n * Longest common subsequence implementation, for diffing arrays\n * Reference: http://en.wikipedia.org/wiki/Longest_common_subsequence_problem\n */\n\ntype NumberArray = number[]\ntype LengthMatrix = NumberArray[]\ntype Subsequence<E> = {\n  sequence: E[]\n  prevIndices: number[]\n  nextIndices: number[]\n}\n\nexport function getLongestCommonSubsequence<E>(previous: E[], next: E[]): Subsequence<E> {\n  const matrix = getLengthMatrix(previous, next)\n  const result = backtrack(matrix, previous, next)\n  return result\n}\n\nfunction getLengthMatrix<E>(previous: E[], next: E[]): LengthMatrix {\n  const len1 = previous.length\n  const len2 = next.length\n  let x = 0\n  let y = 0\n\n  // initialize empty matrix of len1+1 x len2+1\n  const matrix: LengthMatrix = new Array(len1 + 1)\n  for (x = 0; x < len1 + 1; x++) {\n    matrix[x] = [len2 + 1]\n    for (y = 0; y < len2 + 1; y++) {\n      matrix[x][y] = 0\n    }\n  }\n\n  // save sequence lengths for each coordinate\n  for (x = 1; x < len1 + 1; x++) {\n    for (y = 1; y < len2 + 1; y++) {\n      if (previous[x - 1] === next[y - 1]) {\n        matrix[x][y] = matrix[x - 1][y - 1] + 1\n      } else {\n        matrix[x][y] = Math.max(matrix[x - 1][y], matrix[x][y - 1])\n      }\n    }\n  }\n\n  return matrix\n}\n\nfunction backtrack<E>(matrix: LengthMatrix, previous: E[], next: E[]): Subsequence<E> {\n  let prevIndex = previous.length\n  let nextIndex = next.length\n  const subsequence: Subsequence<E> = {\n    sequence: [],\n    prevIndices: [],\n    nextIndices: [],\n  }\n\n  while (prevIndex !== 0 && nextIndex !== 0) {\n    const areEqual = previous[prevIndex - 1] === next[nextIndex - 1]\n    if (areEqual) {\n      subsequence.sequence.unshift(previous[prevIndex - 1])\n      subsequence.prevIndices.unshift(prevIndex - 1)\n      subsequence.nextIndices.unshift(nextIndex - 1)\n      --prevIndex\n      --nextIndex\n    } else {\n      const valueAtMatrixAbove = matrix[prevIndex][nextIndex - 1]\n      const valueAtMatrixLeft = matrix[prevIndex - 1][nextIndex]\n      if (valueAtMatrixAbove > valueAtMatrixLeft) {\n        --nextIndex\n      } else {\n        --prevIndex\n      }\n    }\n  }\n  return subsequence\n}\n","import type {ArrayDiff, ArrayInput, ItemDiff, DiffOptions} from '../types'\nimport {replaceProperty} from '../helpers'\nimport {diffInput, removedInput, addedInput} from './diffInput'\nimport {getLongestCommonSubsequence} from './lcs'\n\nexport function diffArray<A>(\n  fromInput: ArrayInput<A>,\n  toInput: ArrayInput<A>,\n  options: DiffOptions\n): ArrayDiff<A> {\n  if (fromInput === toInput) {\n    const fromValue = fromInput.value\n    const toValue = toInput.value\n\n    return {\n      type: 'array',\n      action: 'unchanged',\n      isChanged: false,\n      fromValue,\n      toValue,\n      get items(): ItemDiff<A>[] {\n        const items = diffExactByPosition(fromInput, toInput, options)\n        if (!items) throw new Error('invariant broken: equivalent input, but diff detected')\n        return replaceProperty(this, 'items', items)\n      },\n    }\n  }\n\n  // The key-ed approach should handle most cases (_key'ed objects, primitives):\n  const keyedA = indexByKey(fromInput)\n  const keyedB = indexByKey(toInput)\n\n  if (keyedA && keyedB) {\n    return diffArrayByKey(fromInput, keyedA, toInput, keyedB, options)\n  }\n\n  // Check if they are 100% equivalent:\n  const items = diffExactByPosition(fromInput, toInput, options)\n  if (items) return buildArrayDiff(fromInput, toInput, items, false)\n\n  // Otherwise we create a diff where we model it as removing the from-items and adding the to-items.\n  return diffArrayByReinsert(fromInput, toInput, options)\n}\n\nfunction buildArrayDiff<A>(\n  fromInput: ArrayInput<A>,\n  toInput: ArrayInput<A>,\n  items: ItemDiff<A>[],\n  isChanged: boolean\n): ArrayDiff<A> {\n  const fromValue = fromInput.value\n  const toValue = toInput.value\n\n  return isChanged\n    ? {\n        type: 'array',\n        action: 'changed',\n        isChanged: true,\n        fromValue,\n        toValue,\n        items,\n        annotation: toInput.annotation,\n      }\n    : {\n        type: 'array',\n        action: 'unchanged',\n        isChanged: false,\n        fromValue,\n        toValue,\n        items,\n      }\n}\n\n/**\n * Diffes the two arrays by position. Returns an `items` array if they are unchanged, or undefined\n * if there are any changes anywhere.\n */\nfunction diffExactByPosition<A>(\n  fromInput: ArrayInput<A>,\n  toInput: ArrayInput<A>,\n  options: DiffOptions\n): ItemDiff<A>[] | undefined {\n  if (fromInput.length !== toInput.length) {\n    return undefined\n  }\n\n  const items: ItemDiff<A>[] = []\n\n  for (let idx = 0; idx < fromInput.length; idx++) {\n    const diff = diffInput(fromInput.at(idx), toInput.at(idx), options)\n    if (diff.isChanged) {\n      return undefined\n    }\n\n    items.push({\n      fromIndex: idx,\n      toIndex: idx,\n      hasMoved: false,\n      diff,\n      annotation: toInput.annotationAt(idx),\n    })\n  }\n\n  return items\n}\n\nfunction diffArrayByReinsert<A>(\n  fromInput: ArrayInput<A>,\n  toInput: ArrayInput<A>,\n  options: DiffOptions\n): ArrayDiff<A> {\n  const items: ItemDiff<A>[] = []\n\n  for (let idx = 0; idx < toInput.length; idx++) {\n    const input = toInput.at(idx)\n\n    items.push({\n      fromIndex: undefined,\n      toIndex: idx,\n      hasMoved: false,\n      diff: addedInput(input, undefined, options),\n      annotation: input.annotation,\n    })\n  }\n\n  for (let idx = 0; idx < fromInput.length; idx++) {\n    const input = fromInput.at(idx)\n\n    items.push({\n      fromIndex: idx,\n      toIndex: undefined,\n      hasMoved: false,\n      diff: removedInput(input, undefined, options),\n      annotation: input.annotation,\n    })\n  }\n\n  return buildArrayDiff(fromInput, toInput, items, true)\n}\n\ntype Key = string | number | boolean\n\n/**\n * Diff an array when all the elements have _key in the same position.\n */\nfunction diffArrayByKey<A>(\n  fromArray: ArrayInput<A>,\n  fromKeyIndex: KeyIndex,\n  toArray: ArrayInput<A>,\n  toKeyIndex: KeyIndex,\n  options: DiffOptions\n): ArrayDiff<A> {\n  const items: ItemDiff<A>[] = []\n  let isChanged = false\n\n  function diffCommon(key: Key, fromIndex: number, toIndex: number, hasMoved: boolean) {\n    deletePositionInIndex(fromKeyIndex.index, key, fromIndex)\n    deletePositionInIndex(toKeyIndex.index, key, toIndex)\n\n    const fromInput = fromArray.at(fromIndex)\n    const toInput = toArray.at(toIndex)\n\n    const diff = diffInput(fromInput, toInput)\n    items.push({\n      fromIndex,\n      toIndex,\n      hasMoved,\n      diff,\n      annotation: toArray.annotationAt(toIndex),\n    })\n\n    if (diff.isChanged || fromIndex !== toIndex) {\n      isChanged = true\n    }\n  }\n\n  const lcs = getLongestCommonSubsequence(fromKeyIndex.keys, toKeyIndex.keys)\n\n  for (let fromIndex = 0; fromIndex < fromKeyIndex.keys.length; fromIndex++) {\n    const key = fromKeyIndex.keys[fromIndex]\n\n    const subsequenceIdx = lcs.prevIndices.indexOf(fromIndex)\n    if (subsequenceIdx !== -1) {\n      // Part of the common subsequence => hasMoved:false\n      diffCommon(key, fromIndex, lcs.nextIndices[subsequenceIdx], false)\n      continue\n    }\n\n    // Not a part of the subsequence. Try to find another item which has the same key\n    // and also is not part of the common subsequence.\n    const toIndexes = toKeyIndex.index.get(key)\n    const toIndex = toIndexes && toIndexes.find((idx) => !lcs.nextIndices.includes(idx))\n    if (toIndex !== undefined) {\n      diffCommon(key, fromIndex, toIndex, true)\n      continue\n    }\n\n    const input = fromArray.at(fromIndex)\n\n    items.push({\n      fromIndex,\n      toIndex: undefined,\n      hasMoved: false,\n      diff: removedInput(input, undefined, options),\n      annotation: fromArray.annotationAt(fromIndex),\n    })\n\n    isChanged = true\n  }\n\n  // The remaining data in toKeyIndex are the new elements which has been added\n  for (const positions of toKeyIndex.index.values()) {\n    for (const toIndex of positions) {\n      const input = toArray.at(toIndex)\n      items.push({\n        fromIndex: undefined,\n        toIndex,\n        hasMoved: false,\n        diff: addedInput(input, undefined, options),\n        annotation: toArray.annotationAt(toIndex),\n      })\n    }\n\n    isChanged = true\n  }\n\n  items.sort(compareItemDiff)\n\n  return buildArrayDiff(fromArray, toArray, items, isChanged)\n}\n\nfunction compareItemDiff<A>(a: ItemDiff<A>, b: ItemDiff<A>): number {\n  if (a.toIndex !== undefined && b.toIndex !== undefined) {\n    return a.toIndex - b.toIndex\n  }\n\n  if (a.fromIndex !== undefined && b.fromIndex !== undefined) {\n    return a.fromIndex - b.fromIndex\n  }\n\n  if (a.fromIndex !== undefined && b.toIndex !== undefined) {\n    // A was removed and B was added. Prefer to sort removals last.\n    return -1\n  }\n\n  if (a.toIndex !== undefined && b.fromIndex !== undefined) {\n    // A was added and B was removed. Prefer to sort removals last.\n    return 1\n  }\n\n  throw new Error('invalid item diff comparison')\n}\n\nfunction deletePositionInIndex(index: Map<Key, number[]>, key: Key, pos: number) {\n  const positions = index.get(key)!\n  deleteArrayValue(positions, pos)\n  if (positions.length === 0) {\n    index.delete(key)\n  }\n}\n\nfunction deleteArrayValue<E>(arr: E[], value: E) {\n  const idx = arr.indexOf(value)\n  if (idx === -1) throw new Error('value not found')\n  arr.splice(idx, 1)\n}\n\ntype KeyIndex = {\n  keys: Key[]\n  index: Map<Key, number[]>\n}\n\n/**\n * Indexes the array by a key. This handles cases where the items are:\n *\n * - Objects with _key\n * - Strings\n * - Numbers\n */\nfunction indexByKey<A>(arr: ArrayInput<A>): KeyIndex | undefined {\n  const index = new Map<Key, number[]>()\n  const keys: Key[] = []\n  const length = arr.length\n\n  for (let i = 0; i < length; i++) {\n    const item = arr.at(i)\n\n    let key: Key | null = null\n\n    switch (item.type) {\n      case 'string':\n        key = `s${item.value}`\n        break\n      case 'number':\n        key = item.value\n        break\n      case 'boolean':\n        key = item.value\n        break\n      case 'null':\n        key = 'n'\n        break\n      case 'object':\n        {\n          const keyField = item.get('_key')\n          if (keyField && keyField.type === 'string') {\n            key = `k${keyField.value}`\n\n            // We do not handle duplicate _key\n            if (index.has(key)) return undefined\n          }\n        }\n        break\n      default:\n    }\n\n    // No key => abort\n    if (key === null) return undefined\n\n    keys.push(key)\n    let positions = index.get(key)\n    if (!positions) {\n      positions = []\n      index.set(key, positions)\n    }\n    positions.push(i)\n  }\n\n  // All is good.\n  return {keys, index}\n}\n\nexport function removedArray<A>(\n  input: ArrayInput<A>,\n  toValue: null | undefined,\n  options: DiffOptions\n): ArrayDiff<A> & {action: 'removed'} {\n  return {\n    type: 'array',\n    action: 'removed',\n    isChanged: true,\n    fromValue: input.value,\n    toValue,\n    annotation: input.annotation,\n\n    get items(): ArrayDiff<A>['items'] {\n      const items: ArrayDiff<A>['items'] = []\n      for (let i = 0; i < input.length; i++) {\n        const item = input.at(i)\n        items.push({\n          fromIndex: i,\n          toIndex: undefined,\n          hasMoved: false,\n          diff: removedInput(item, undefined, options),\n          annotation: input.annotationAt(i),\n        })\n      }\n\n      return replaceProperty(this, 'items', items)\n    },\n  }\n}\n\nexport function addedArray<A>(\n  input: ArrayInput<A>,\n  fromValue: null | undefined,\n  options: DiffOptions\n): ArrayDiff<A> & {action: 'added'} {\n  return {\n    type: 'array',\n    action: 'added',\n    isChanged: true,\n    fromValue,\n    toValue: input.value,\n    annotation: input.annotation,\n\n    get items(): ArrayDiff<A>['items'] {\n      const items: ArrayDiff<A>['items'] = []\n      for (let i = 0; i < input.length; i++) {\n        const item = input.at(i)\n        items.push({\n          fromIndex: undefined,\n          toIndex: i,\n          hasMoved: false,\n          diff: addedInput(item, undefined, options),\n          annotation: input.annotationAt(i),\n        })\n      }\n\n      return replaceProperty(this, 'items', items)\n    },\n  }\n}\n","import {\n  diff_match_patch as DiffMatchPatch,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n} from 'diff-match-patch'\nimport type {StringDiffSegment, StringDiff, StringInput, DiffOptions} from '../types'\nimport {replaceProperty} from '../helpers'\n\nconst dmp = new DiffMatchPatch()\n\nexport function diffString<A>(\n  fromInput: StringInput<A>,\n  toInput: StringInput<A>,\n  options: DiffOptions\n): StringDiff<A> {\n  const fromValue = fromInput.value\n  const toValue = toInput.value\n\n  if (fromValue === toValue) {\n    return {\n      type: 'string',\n      action: 'unchanged',\n      isChanged: false,\n      fromValue,\n      toValue,\n      segments: [{type: 'stringSegment', action: 'unchanged', text: fromValue}],\n    }\n  }\n\n  return {\n    type: 'string',\n    action: 'changed',\n    isChanged: true,\n    fromValue,\n    toValue,\n    annotation: toInput.annotation,\n\n    // Compute and memoize string segments only when accessed\n    get segments(): StringDiffSegment<A>[] {\n      const segments = buildSegments(fromInput, toInput)\n      return replaceProperty(this, 'segments', segments)\n    },\n  }\n}\n\nfunction buildSegments<A>(\n  fromInput: StringInput<A>,\n  toInput: StringInput<A>\n): StringDiffSegment<A>[] {\n  const segments: StringDiffSegment<A>[] = []\n\n  const dmpDiffs = dmp.diff_main(fromInput.value, toInput.value)\n  dmp.diff_cleanupSemantic(dmpDiffs)\n\n  let fromIdx = 0\n  let toIdx = 0\n\n  for (const [op, text] of dmpDiffs) {\n    switch (op) {\n      case DIFF_EQUAL:\n        segments.push({type: 'stringSegment', action: 'unchanged', text})\n        fromIdx += text.length\n        toIdx += text.length\n        break\n      case DIFF_DELETE:\n        for (const segment of fromInput.sliceAnnotation(fromIdx, fromIdx + text.length)) {\n          segments.push({\n            type: 'stringSegment',\n            action: 'removed',\n            text: segment.text,\n            annotation: segment.annotation,\n          })\n        }\n        fromIdx += text.length\n        break\n      case DIFF_INSERT:\n        for (const segment of toInput.sliceAnnotation(toIdx, toIdx + text.length)) {\n          segments.push({\n            type: 'stringSegment',\n            action: 'added',\n            text: segment.text,\n            annotation: segment.annotation,\n          })\n        }\n        toIdx += text.length\n        break\n      default:\n        throw new Error(`Unhandled diff-match-patch operation \"${op}\"`)\n    }\n  }\n\n  return segments\n}\n\nexport function removedString<A>(\n  input: StringInput<A>,\n  toValue: null | undefined,\n  options: DiffOptions\n): StringDiff<A> & {action: 'removed'} {\n  return {\n    type: 'string',\n    action: 'removed',\n    isChanged: true,\n    fromValue: input.value,\n    toValue,\n    annotation: input.annotation,\n\n    get segments(): StringDiffSegment<A>[] {\n      const segments: StringDiffSegment<A>[] = input\n        .sliceAnnotation(0, input.value.length)\n        .map((segment) => ({type: 'stringSegment', action: 'removed', ...segment}))\n\n      return replaceProperty(this, 'segments', segments)\n    },\n  }\n}\n\nexport function addedString<A>(\n  input: StringInput<A>,\n  fromValue: null | undefined,\n  options: DiffOptions\n): StringDiff<A> & {action: 'added'} {\n  return {\n    type: 'string',\n    action: 'added',\n    isChanged: true,\n    fromValue,\n    toValue: input.value,\n    annotation: input.annotation,\n\n    get segments(): StringDiffSegment<A>[] {\n      const segments: StringDiffSegment<A>[] = input\n        .sliceAnnotation(0, input.value.length)\n        .map((segment) => ({type: 'stringSegment', action: 'added', ...segment}))\n\n      return replaceProperty(this, 'segments', segments)\n    },\n  }\n}\n","import type {TypeChangeDiff, Input, DiffOptions} from '../types'\nimport {removedInput, addedInput} from './diffInput'\n\nexport function diffTypeChange<A>(\n  fromInput: Input<A>,\n  toInput: Input<A>,\n  options: DiffOptions\n): TypeChangeDiff<A> {\n  return {\n    type: 'typeChange',\n    action: 'changed',\n    isChanged: true,\n\n    fromType: fromInput.type,\n    fromValue: fromInput.value,\n    fromDiff: removedInput(fromInput, undefined, options),\n\n    toType: toInput.type,\n    toValue: toInput.value,\n    toDiff: addedInput(toInput, undefined, options),\n\n    annotation: toInput.annotation,\n  }\n}\n","import type {ObjectDiff, ObjectInput, DiffOptions} from '../types'\nimport {replaceProperty} from '../helpers'\nimport {diffInput, removedInput, addedInput} from './diffInput'\n\nconst ignoredFields = new Set(['_id', '_type', '_createdAt', '_updatedAt', '_rev', '_weak'])\n\nexport function diffObject<A>(\n  fromInput: ObjectInput<A>,\n  toInput: ObjectInput<A>,\n  options: DiffOptions\n): ObjectDiff<A> {\n  const fields: ObjectDiff<A>['fields'] = {}\n  let isChanged = false\n\n  for (const key of fromInput.keys) {\n    if (ignoredFields.has(key)) continue\n\n    const fromField = fromInput.get(key)!\n\n    const toField = toInput.get(key)\n    if (toField) {\n      const fieldDiff = diffInput(fromField, toField, options)\n      fields[key] = fieldDiff\n      if (fieldDiff.isChanged) isChanged = true\n    } else {\n      fields[key] = removedInput(fromField, undefined, options)\n      isChanged = true\n    }\n  }\n\n  for (const key of toInput.keys) {\n    if (ignoredFields.has(key)) continue\n\n    // Already handled above\n    if (fromInput.get(key)) continue\n\n    const toField = toInput.get(key)!\n    fields[key] = addedInput(toField, undefined, options)\n    isChanged = true\n  }\n\n  const fromValue = fromInput.value\n  const toValue = toInput.value\n\n  if (!isChanged) {\n    return {\n      type: 'object',\n      action: 'unchanged',\n      isChanged: false,\n      fromValue,\n      toValue,\n      fields,\n    }\n  }\n\n  return {\n    type: 'object',\n    action: 'changed',\n    isChanged: true,\n    fromValue,\n    toValue,\n    fields,\n    annotation: toInput.annotation,\n  }\n}\n\nexport function removedObject<A>(\n  input: ObjectInput<A>,\n  toValue: null | undefined,\n  options: DiffOptions\n): ObjectDiff<A> & {action: 'removed'} {\n  return {\n    type: 'object',\n    action: 'removed',\n    isChanged: true,\n    fromValue: input.value,\n    toValue,\n    annotation: input.annotation,\n\n    get fields(): ObjectDiff<A>['fields'] {\n      const fields: ObjectDiff<A>['fields'] = {}\n      for (const key of input.keys) {\n        const value = input.get(key)!\n        fields[key] = removedInput(value, undefined, options)\n      }\n      return replaceProperty(this, 'fields', fields)\n    },\n  }\n}\n\nexport function addedObject<A>(\n  input: ObjectInput<A>,\n  fromValue: null | undefined,\n  options: DiffOptions\n): ObjectDiff<A> & {action: 'added'} {\n  return {\n    type: 'object',\n    action: 'added',\n    isChanged: true,\n    fromValue,\n    toValue: input.value,\n    annotation: input.annotation,\n\n    get fields(): ObjectDiff<A>['fields'] {\n      const fields: ObjectDiff<A>['fields'] = {}\n      for (const key of input.keys) {\n        const value = input.get(key)!\n        fields[key] = addedInput(value, undefined, options)\n      }\n      return replaceProperty(this, 'fields', fields)\n    },\n  }\n}\n","import type {DiffOptions, NumberInput, BooleanInput, NumberDiff, BooleanDiff} from '../types'\n\nexport function diffNumber<A>(\n  fromInput: NumberInput<A>,\n  toInput: NumberInput<A>,\n  options: DiffOptions\n): NumberDiff<A> {\n  const fromValue = fromInput.value\n  const toValue = toInput.value\n  const type = fromInput.type\n\n  if (fromValue === toValue)\n    return {\n      type,\n      action: 'unchanged',\n      fromValue,\n      toValue,\n      isChanged: false,\n    }\n\n  return {\n    type: fromInput.type,\n    action: 'changed',\n    isChanged: true,\n    fromValue: fromValue,\n    toValue: toValue,\n    annotation: toInput.annotation,\n  }\n}\n\nexport function diffBoolean<A>(\n  fromInput: BooleanInput<A>,\n  toInput: BooleanInput<A>,\n  options: DiffOptions\n): BooleanDiff<A> {\n  const fromValue = fromInput.value\n  const toValue = toInput.value\n  const type = fromInput.type\n\n  if (fromValue === toValue)\n    return {\n      type,\n      action: 'unchanged',\n      fromValue,\n      toValue,\n      isChanged: false,\n    }\n\n  return {\n    type: fromInput.type,\n    action: 'changed',\n    isChanged: true,\n    fromValue: fromValue,\n    toValue: toValue,\n    annotation: toInput.annotation,\n  }\n}\n","import type {\n  Diff,\n  Input,\n  ArrayInput,\n  StringInput,\n  ObjectInput,\n  DiffOptions,\n  BooleanInput,\n  NumberInput,\n} from '../types'\nimport {diffArray, addedArray, removedArray} from './diffArray'\nimport {diffString, removedString, addedString} from './diffString'\nimport {diffTypeChange} from './diffTypeChange'\nimport {diffObject, removedObject, addedObject} from './diffObject'\nimport {diffBoolean, diffNumber} from './diffSimple'\n\n/**\n * Takes a `from` and `to` input and calulates a diff between the two\n *\n * @param fromInput - The source (`from`) input - use {@link wrap | the wrap() method} to generate an \"input\"\n * @param toInput - The destination (`to`) input - use {@link wrap | the wrap() method} to generate an \"input\"\n * @param options - Options for the diffing process - currently no options are defined\n * @returns A diff object representing the change\n * @public\n */\nexport function diffInput<A>(\n  fromInput: Input<A>,\n  toInput: Input<A>,\n  options: DiffOptions = {}\n): Diff<A> {\n  if (fromInput.type !== toInput.type) {\n    if (fromInput.type === 'null') {\n      return addedInput(toInput, null, options)\n    }\n\n    if (toInput.type === 'null') {\n      return removedInput(fromInput, null, options)\n    }\n\n    return diffTypeChange(fromInput, toInput, options)\n  }\n\n  return diffWithType(fromInput.type, fromInput, toInput, options)\n}\n\nfunction diffWithType<A>(\n  type: Input<A>['type'],\n  fromInput: Input<A>,\n  toInput: Input<A>,\n  options: DiffOptions\n): Diff<A> {\n  switch (type) {\n    case 'null':\n      return {\n        type: 'null',\n        action: 'unchanged',\n        isChanged: false,\n        toValue: null,\n        fromValue: null,\n      }\n    case 'boolean':\n      return diffBoolean(fromInput as BooleanInput<A>, toInput as BooleanInput<A>, options)\n    case 'number':\n      return diffNumber(fromInput as NumberInput<A>, toInput as NumberInput<A>, options)\n    case 'string':\n      return diffString(fromInput as StringInput<A>, toInput as StringInput<A>, options)\n    case 'array':\n      return diffArray(fromInput as ArrayInput<A>, toInput as ArrayInput<A>, options)\n    case 'object':\n      return diffObject(fromInput as ObjectInput<A>, toInput as ObjectInput<A>, options)\n    default:\n      throw new Error(`Unhandled diff type \"${type}\"`)\n  }\n}\n\nexport function removedInput<A>(\n  input: Input<A>,\n  toValue: null | undefined,\n  options: DiffOptions\n): Diff<A> & {action: 'removed'} {\n  switch (input.type) {\n    case 'null':\n      return {\n        type: 'null',\n        action: 'removed',\n        isChanged: true,\n        fromValue: null,\n        toValue,\n        annotation: input.annotation,\n      }\n    case 'boolean':\n      return {\n        type: 'boolean',\n        action: 'removed',\n        isChanged: true,\n        fromValue: input.value,\n        toValue,\n        annotation: input.annotation,\n      }\n    case 'number':\n      return {\n        type: 'number',\n        action: 'removed',\n        isChanged: true,\n        fromValue: input.value,\n        toValue,\n        annotation: input.annotation,\n      }\n    case 'string':\n      return removedString(input, toValue, options)\n    case 'array':\n      return removedArray(input, toValue, options)\n    case 'object':\n      return removedObject(input, toValue, options)\n    default:\n      throw new Error('Unhandled diff type')\n  }\n}\n\nexport function addedInput<A>(\n  input: Input<A>,\n  fromValue: null | undefined,\n  options: DiffOptions\n): Diff<A> & {action: 'added'} {\n  switch (input.type) {\n    case 'null':\n      return {\n        type: 'null',\n        action: 'added',\n        isChanged: true,\n        fromValue,\n        toValue: null,\n        annotation: input.annotation,\n      }\n    case 'boolean':\n      return {\n        type: 'boolean',\n        action: 'added',\n        isChanged: true,\n        fromValue,\n        toValue: input.value,\n        annotation: input.annotation,\n      }\n    case 'number':\n      return {\n        type: 'number',\n        action: 'added',\n        isChanged: true,\n        fromValue,\n        toValue: input.value,\n        annotation: input.annotation,\n      }\n    case 'string':\n      return addedString(input, fromValue, options)\n    case 'array':\n      return addedArray(input, fromValue, options)\n    case 'object':\n      return addedObject(input, fromValue, options)\n    default:\n      throw new Error('Unhandled diff type')\n  }\n}\n","import type {ArrayInput, Input} from '../types'\nimport {wrap} from './index'\n\nexport default class ArrayWrapper<A> implements ArrayInput<A> {\n  type: 'array' = 'array'\n  length: number\n  value: unknown[]\n  annotation: A\n\n  private elements: Input<A>[] = []\n\n  constructor(value: unknown[], annotation: A) {\n    this.annotation = annotation\n    this.value = value\n    this.length = value.length\n  }\n\n  at(idx: number): Input<A> {\n    if (idx >= this.length) throw new Error('out of bounds')\n    const input = this.elements[idx]\n    if (input) {\n      return input\n    }\n\n    return (this.elements[idx] = wrap(this.value[idx], this.annotation))\n  }\n\n  annotationAt(): A {\n    return this.annotation\n  }\n}\n","import type {ObjectInput, Input} from '../types'\nimport {wrap} from './index'\n\nexport default class ObjectWrapper<A> implements ObjectInput<A> {\n  type: 'object' = 'object'\n  value: Record<string, unknown>\n  keys: string[]\n  annotation: A\n\n  private fields: Record<string, Input<A>> = {}\n\n  constructor(value: Record<string, unknown>, annotation: A) {\n    this.value = value\n    this.annotation = annotation\n    this.keys = Object.keys(value)\n  }\n\n  get(key: string): Input<A> | undefined {\n    const input = this.fields[key]\n    if (input) {\n      return input\n    }\n\n    if (!this.value.hasOwnProperty(key)) {\n      return undefined\n    }\n\n    const raw = this.value[key]\n    return (this.fields[key] = wrap(raw, this.annotation))\n  }\n}\n","import type {StringInput} from '../types'\n\nexport default class StringWrapper<A> implements StringInput<A> {\n  type: 'string' = 'string'\n  value: string\n  annotation: A\n\n  constructor(value: string, annotation: A) {\n    this.value = value\n    this.annotation = annotation\n  }\n\n  sliceAnnotation(start: number, end: number): {text: string; annotation: A}[] {\n    return [{text: this.value.slice(start, end), annotation: this.annotation}]\n  }\n}\n","type SimpleType = 'boolean' | 'number' | 'null'\n\nexport default class BasicWrapper<K extends SimpleType, V, A> {\n  type: K\n  value: V\n  annotation: A\n\n  constructor(type: K, value: V, annotation: A) {\n    this.type = type\n    this.value = value\n    this.annotation = annotation\n  }\n}\n","import type {Input} from '../types'\nimport ArrayWrapper from './array'\nimport ObjectWrapper from './object'\nimport StringWrapper from './string'\nimport BasicWrapper from './basic'\n\n/**\n * Takes an input (any JSON-serializable value) and an annotation, and generates an input\n * object for it, to be used with {@link diffInput | the diffInput() method} and others.\n *\n * @param input - The value to wrap in an input object\n * @param annotation - Annotation attached to the input - will be bound to generated diffs\n * @returns A input object\n * @throws if `input` is not a JSON-serializable type\n * @public\n */\nexport function wrap<A>(input: unknown, annotation: A): Input<A> {\n  if (Array.isArray(input)) {\n    return new ArrayWrapper(input, annotation)\n  } else if (input === null) {\n    return new BasicWrapper('null', input, annotation)\n  }\n\n  const type = typeof input\n  switch (type) {\n    case 'number':\n      return new BasicWrapper(type, input as number, annotation)\n    case 'boolean':\n      return new BasicWrapper(type, input as boolean, annotation)\n    case 'object':\n      return new ObjectWrapper(input as Record<string, unknown>, annotation)\n    case 'string':\n      return new StringWrapper(input as string, annotation)\n    default:\n      throw new Error(`cannot wrap value of type: ${type}`)\n  }\n}\n"],"names":["DiffMatchPatch"],"mappings":"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"}