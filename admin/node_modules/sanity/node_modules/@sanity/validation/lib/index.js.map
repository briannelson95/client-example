{"version":3,"file":"index.js","sources":["../src/ValidationError.ts","../src/util/escapeRegex.ts","../src/util/pathToString.ts","../src/util/convertToValidationMarker.ts","../src/util/typeString.ts","../src/util/deepEquals.ts","../src/validators/genericValidator.ts","../src/validators/booleanValidator.ts","../src/validators/numberValidator.ts","../src/validators/stringValidator.ts","../src/validators/arrayValidator.ts","../src/validators/objectValidator.ts","../src/validators/dateValidator.ts","../src/Rule.ts","../src/validators/slugValidator.ts","../src/util/normalizeValidationRules.ts","../src/validateDocument.ts","../src/inferFromSchemaType.ts","../src/inferFromSchema.ts","../src/index.ts"],"sourcesContent":["import {\n  Path,\n  ValidationMarker,\n  ValidationError as IValidationError,\n  ValidationErrorOptions,\n  ValidationErrorClass,\n} from '@sanity/types'\n\n// Follows the same pattern as Rule and RuleClass. @see Rule\nconst ValidationError: ValidationErrorClass = class ValidationError implements IValidationError {\n  message: string\n  paths: Path[]\n  children: ValidationMarker[] | undefined\n  operation: 'AND' | 'OR' | undefined\n\n  constructor(message: string, options: ValidationErrorOptions = {}) {\n    this.message = message\n    this.paths = options.paths || []\n    this.children = options.children\n    this.operation = options.operation\n  }\n\n  cloneWithMessage(msg: string): ValidationError {\n    return new ValidationError(msg, {\n      paths: this.paths,\n      children: this.children,\n      operation: this.operation,\n    })\n  }\n}\n\nexport default ValidationError\n","/* eslint-disable no-useless-escape */\nexport default (string: string): string => {\n  // Escape ^$.*+-?=!:|\\/()[]{},\n  return string.replace(/[\\^\\$\\.\\*\\+\\-\\?\\=\\!\\:\\|\\\\\\/\\(\\)\\[\\]\\{\\}\\,]/g, '\\\\$&')\n}\n","import {Path, isKeyedObject} from '@sanity/types'\n\nexport default function pathToString(path: Path | undefined = []): string {\n  return path.reduce<string>((target, segment, i) => {\n    const segmentType = typeof segment\n    if (segmentType === 'number') {\n      return `${target}[${segment}]`\n    }\n\n    if (segmentType === 'string') {\n      const separator = i === 0 ? '' : '.'\n      return `${target}${separator}${segment}`\n    }\n\n    if (isKeyedObject(segment)) {\n      return `${target}[_key==\"${segment._key}\"]`\n    }\n\n    throw new Error(`Unsupported path segment \"${segment}\"`)\n  }, '')\n}\n","import {ValidationMarker, ValidationError, ValidationContext} from '@sanity/types'\nimport ValidationErrorClass from '../ValidationError'\nimport pathToString from '../util/pathToString'\n\ntype ValidationErrorLike = Pick<ValidationError, 'message'> & Partial<ValidationError>\n\nexport function isNonNullable<T>(t: T): t is NonNullable<T> {\n  return t !== null || t !== undefined\n}\n\nexport function convertToValidationMarker(\n  validatorResult:\n    | true\n    | true[]\n    | string\n    | string[]\n    | ValidationError\n    | ValidationError[]\n    | ValidationErrorLike\n    | ValidationErrorLike[],\n  level: 'error' | 'warning' | 'info' | undefined,\n  context: ValidationContext\n): ValidationMarker[] {\n  if (!context) {\n    throw new Error('missing context')\n  }\n\n  if (validatorResult === true) return []\n\n  if (Array.isArray(validatorResult)) {\n    return validatorResult\n      .flatMap((child) => convertToValidationMarker(child, level, context))\n      .filter(isNonNullable)\n  }\n\n  if (typeof validatorResult === 'string') {\n    return convertToValidationMarker(new ValidationErrorClass(validatorResult), level, context)\n  }\n\n  if (!(validatorResult instanceof ValidationErrorClass)) {\n    // in order to accept the `ValidationErrorLike`, it at least needs to have\n    // a `message` in the object\n    if (typeof validatorResult?.message !== 'string') {\n      throw new Error(\n        `${pathToString(\n          context.path\n        )}: Validator must return 'true' if valid or an error message as a string on errors`\n      )\n    }\n\n    // this is the occurs when an object is returned that wasn't created with the\n    // `ValidationErrorClass`. in this case, we want to convert it to a class\n    return convertToValidationMarker(\n      new ValidationErrorClass(validatorResult.message, validatorResult),\n      level,\n      context\n    )\n  }\n\n  const results: ValidationMarker[] = []\n\n  // the validator result does not include any item-level relative paths,\n  // then just return the top-level path with the validation result\n  if (!validatorResult.paths?.length) {\n    return [\n      {\n        level: level || 'error',\n        item: validatorResult,\n        path: context.path || [],\n      },\n    ]\n  }\n\n  // if the validator result did include item-level relative paths, then for\n  // each item-level relative path, create a validation marker that concatenates\n  // the relative path with the path from the validation context\n  return results.concat(\n    validatorResult.paths.map((path) => ({\n      path: (context.path || []).concat(path),\n      level: level || 'error',\n      item: validatorResult,\n    }))\n  )\n}\n","// this file was adapted from a previous dependency `type-of-is`\n// https://github.com/stephenhandley/type-of-is/blob/7138a7e79f5af7c286bf8123f60843a91aaebf38/index.js\nconst _toString = {}.toString\n\nconst builtIns = [Object, Function, Array, String, Boolean, Number, Date, RegExp, Error]\n\nfunction isBuiltIn(_constructor: unknown) {\n  for (let i = 0; i < builtIns.length; i++) {\n    if (builtIns[i] === _constructor) return true\n  }\n  return false\n}\n\nexport default function typeString(obj: unknown): string {\n  // [object Blah] -> Blah\n  const stringType = _toString.call(obj).slice(8, -1)\n  if (obj === null || obj === undefined) return stringType.toLowerCase()\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const constructorType = (obj as object).constructor\n  if (constructorType && !isBuiltIn(constructorType)) return constructorType.name\n  return stringType\n}\n","/**\n * Modified version of fast-deep-equal (https://github.com/epoberezkin/fast-deep-equal)\n * MIT-licensed, copyright (c) 2017 Evgeny Poberezkin\n **/\n\n// NOTE: when converting to typescript, some of the checks were inlined (vs\n// having them in a variable) because the type predicate type narrowing only\n// works when type predicate is called inline in the condition that starts the\n// control flow branch.\n// see here: https://www.typescriptlang.org/docs/handbook/2/narrowing.html\nexport default function deepEquals(a: unknown, b: unknown): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length != b.length) return false\n    for (let i = 0; i < a.length; i++) {\n      if (!deepEquals(a[i], b[i])) {\n        return false\n      }\n    }\n    return true\n  }\n\n  if (Array.isArray(a) != Array.isArray(b)) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    const keys = Object.keys(a)\n    if (keys.length !== Object.keys(b).length) {\n      return false\n    }\n\n    if (a instanceof Date && b instanceof Date) {\n      return a.getTime() === b.getTime()\n    }\n\n    if (a instanceof Date != b instanceof Date) {\n      return false\n    }\n\n    if (a instanceof RegExp && b instanceof RegExp) {\n      return a.toString() == b.toString()\n    }\n\n    if (a instanceof RegExp != b instanceof RegExp) {\n      return false\n    }\n\n    for (let i = 0; i < keys.length; i++) {\n      if (keys[i] === '_key') {\n        continue\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {\n        return false\n      }\n    }\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i] as keyof typeof a\n      if (key === '_key') {\n        continue\n      }\n\n      if (!deepEquals(a[key], b[key])) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  return false\n}\n","import {ValidationMarker, Validators} from '@sanity/types'\nimport typeString from '../util/typeString'\nimport deepEquals from '../util/deepEquals'\nimport pathToString from '../util/pathToString'\nimport ValidationErrorClass from '../ValidationError'\n\nconst SLOW_VALIDATOR_TIMEOUT = 5000\n\nconst formatValidationErrors = (options: {\n  message: string | undefined\n  results: ValidationMarker[]\n  operation: 'AND' | 'OR'\n}) => {\n  let message\n\n  if (options.message) {\n    message = options.message\n  } else if (options.results.length === 1) {\n    message = options.results[0]?.item.message\n  } else {\n    message = `[${options.results\n      .map((err) => err.item.message)\n      .join(` - ${options.operation} - `)}]`\n  }\n\n  return new ValidationErrorClass(message, {\n    children: options.results.length > 1 ? options.results : undefined,\n    operation: options.operation,\n  })\n}\n\nconst genericValidators: Validators = {\n  type: (expected, value, message) => {\n    const actualType = typeString(value)\n    if (actualType !== expected && actualType !== 'undefined') {\n      return message || `Expected type \"${expected}\", got \"${actualType}\"`\n    }\n\n    return true\n  },\n\n  presence: (expected, value, message) => {\n    if (value === undefined && expected === 'required') {\n      return message || 'Value is required'\n    }\n\n    return true\n  },\n\n  all: async (children, value, message, context) => {\n    const resolved = await Promise.all(children.map((child) => child.validate(value, context)))\n    const results = resolved.flat()\n\n    if (!results.length) return true\n\n    return formatValidationErrors({\n      message,\n      results,\n      operation: 'AND',\n    })\n  },\n\n  either: async (children, value, message, context) => {\n    const resolved = await Promise.all(children.map((child) => child.validate(value, context)))\n    const results = resolved.flat()\n\n    // Read: There is at least one rule that matched\n    if (results.length < children.length) return true\n\n    return formatValidationErrors({\n      message,\n      results,\n      operation: 'OR',\n    })\n  },\n\n  valid: (allowedValues, actual, message) => {\n    const valueType = typeof actual\n    if (valueType === 'undefined') {\n      return true\n    }\n\n    const value = (valueType === 'number' || valueType === 'string') && `${actual}`\n    const strValue = value && value.length > 30 ? `${value.slice(0, 30)}…` : value\n\n    const defaultMessage = value\n      ? `Value \"${strValue}\" did not match any allowed values`\n      : 'Value did not match any allowed values'\n\n    return allowedValues.some((expected) => deepEquals(expected, actual))\n      ? true\n      : message || defaultMessage\n  },\n\n  custom: async (fn, value, message, context) => {\n    const slowTimer = setTimeout(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Custom validator at ${pathToString(\n          context.path\n        )} has taken more than ${SLOW_VALIDATOR_TIMEOUT}ms to respond`\n      )\n    }, SLOW_VALIDATOR_TIMEOUT)\n\n    let result\n    try {\n      result = await fn(value, context)\n    } finally {\n      clearTimeout(slowTimer)\n    }\n\n    if (typeof result === 'string') return message || result\n    return result\n  },\n}\n\nexport default genericValidators\n","import {Validators} from '@sanity/types'\nimport genericValidator from './genericValidator'\n\nconst booleanValidators: Validators = {\n  ...genericValidator,\n\n  presence: (flag, value, message) => {\n    if (flag === 'required' && typeof value !== 'boolean') {\n      return message || 'Required'\n    }\n\n    return true\n  },\n}\n\nexport default booleanValidators\n","import {Validators} from '@sanity/types'\nimport genericValidator from './genericValidator'\n\nconst precisionRx = /(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/\n\nconst numberValidators: Validators = {\n  ...genericValidator,\n\n  integer: (_unused, value, message) => {\n    if (!Number.isInteger(value)) {\n      return message || 'Must be an integer'\n    }\n\n    return true\n  },\n\n  precision: (limit, value, message) => {\n    if (value === undefined) return true\n\n    const places = value.toString().match(precisionRx)\n    const decimals = Math.max(\n      (places[1] ? places[1].length : 0) - (places[2] ? parseInt(places[2], 10) : 0),\n      0\n    )\n\n    if (decimals > limit) {\n      return message || `Max precision is ${limit}`\n    }\n\n    return true\n  },\n\n  min: (minNum, value, message) => {\n    if (value >= minNum) {\n      return true\n    }\n\n    return message || `Must be greater than or equal ${minNum}`\n  },\n\n  max: (maxNum, value, message) => {\n    if (value <= maxNum) {\n      return true\n    }\n\n    return message || `Must be less than or equal ${maxNum}`\n  },\n\n  greaterThan: (num, value, message) => {\n    if (value > num) {\n      return true\n    }\n\n    return message || `Must be greater than ${num}`\n  },\n\n  lessThan: (maxNum, value, message) => {\n    if (value < maxNum) {\n      return true\n    }\n\n    return message || `Must be less than ${maxNum}`\n  },\n}\n\nexport default numberValidators\n","import {Validators} from '@sanity/types'\nimport genericValidator from './genericValidator'\n\nconst DUMMY_ORIGIN = 'http://sanity'\nconst emailRegex =\n  /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\nconst isRelativeUrl = (url: string) => /^\\.*\\//.test(url)\n\nconst stringValidators: Validators = {\n  ...genericValidator,\n\n  min: (minLength, value, message) => {\n    if (!value || value.length >= minLength) {\n      return true\n    }\n\n    return message || `Must be at least ${minLength} characters long`\n  },\n\n  max: (maxLength, value, message) => {\n    if (!value || value.length <= maxLength) {\n      return true\n    }\n\n    return message || `Must be at most ${maxLength} characters long`\n  },\n\n  length: (wantedLength, value, message) => {\n    const strValue = value || ''\n    if (strValue.length === wantedLength) {\n      return true\n    }\n\n    return message || `Must be exactly ${wantedLength} characters long`\n  },\n\n  uri: (constraints, value, message) => {\n    const strValue = value || ''\n    const {options} = constraints\n    const {allowCredentials, relativeOnly} = options\n    const allowRelative = options.allowRelative || relativeOnly\n\n    let url\n    try {\n      // WARNING: Safari checks for a given `base` param by looking at the length of arguments passed\n      // to new URL(str, base), and will fail if invoked with new URL(strValue, undefined)\n      url = allowRelative ? new URL(strValue, DUMMY_ORIGIN) : new URL(strValue)\n    } catch (err) {\n      return message || 'Not a valid URL'\n    }\n\n    if (relativeOnly && url.origin !== DUMMY_ORIGIN) {\n      return message || 'Only relative URLs are allowed'\n    }\n\n    if (!allowRelative && url.origin === DUMMY_ORIGIN && isRelativeUrl(strValue)) {\n      return message || 'Relative URLs are not allowed'\n    }\n\n    if (!allowCredentials && (url.username || url.password)) {\n      return message || `Username/password not allowed`\n    }\n\n    const urlScheme = url.protocol.replace(/:$/, '')\n    const matchesAllowedScheme = options.scheme.some((scheme) => scheme.test(urlScheme))\n    if (!matchesAllowedScheme) {\n      return message || 'Does not match allowed protocols/schemes'\n    }\n\n    return true\n  },\n\n  stringCasing: (casing, value, message) => {\n    const strValue = value || ''\n    if (casing === 'uppercase' && strValue !== strValue.toLocaleUpperCase()) {\n      return message || `Must be all uppercase letters`\n    }\n\n    if (casing === 'lowercase' && strValue !== strValue.toLocaleLowerCase()) {\n      return message || `Must be all lowercase letters`\n    }\n\n    return true\n  },\n\n  presence: (flag, value, message) => {\n    if (flag === 'required' && !value) {\n      return message || 'Required'\n    }\n\n    return true\n  },\n\n  regex: (options, value, message) => {\n    const {pattern, name, invert} = options\n    const regName = name || `\"${pattern.toString()}\"`\n    const strValue = value || ''\n    const matches = pattern.test(strValue)\n    if ((!invert && !matches) || (invert && matches)) {\n      const defaultMessage = invert\n        ? `Should not match ${regName}-pattern`\n        : `Does not match ${regName}-pattern`\n\n      return message || defaultMessage\n    }\n\n    return true\n  },\n\n  email: (_unused, value, message) => {\n    const strValue = `${value || ''}`.trim()\n    if (!strValue || emailRegex.test(strValue)) {\n      return true\n    }\n\n    return message || 'Must be a valid email address'\n  },\n}\n\nexport default stringValidators\n","import {Path, PathSegment, Validators} from '@sanity/types'\nimport deepEquals from '../util/deepEquals'\nimport ValidationErrorClass from '../ValidationError'\nimport genericValidator from './genericValidator'\n\nconst arrayValidators: Validators = {\n  ...genericValidator,\n\n  min: (minLength, value, message) => {\n    if (!value || value.length >= minLength) {\n      return true\n    }\n\n    return message || `Must have at least ${minLength} items`\n  },\n\n  max: (maxLength, value, message) => {\n    if (!value || value.length <= maxLength) {\n      return true\n    }\n\n    return message || `Must have at most ${maxLength} items`\n  },\n\n  length: (wantedLength, value, message) => {\n    if (!value || value.length === wantedLength) {\n      return true\n    }\n\n    return message || `Must have exactly ${wantedLength} items`\n  },\n\n  presence: (flag, value, message) => {\n    if (flag === 'required' && !value) {\n      return message || 'Required'\n    }\n\n    return true\n  },\n\n  valid: (allowedValues, values, message) => {\n    const valueType = typeof values\n    if (valueType === 'undefined') {\n      return true\n    }\n\n    const paths: Path[] = []\n    for (let i = 0; i < values.length; i++) {\n      const value = values[i]\n      if (allowedValues.some((expected) => deepEquals(expected, value))) {\n        continue\n      }\n\n      const pathSegment: PathSegment = value && value._key ? {_key: value._key} : i\n      paths.push([pathSegment])\n    }\n\n    return paths.length === 0\n      ? true\n      : new ValidationErrorClass(message || 'Value did not match any allowed values', {paths})\n  },\n\n  unique: (_unused, value, message) => {\n    const dupeIndices = []\n    if (!value) {\n      return true\n    }\n\n    for (let x = 0; x < value.length; x++) {\n      for (let y = x + 1; y < value.length; y++) {\n        const itemA = value[x]\n        const itemB = value[y]\n\n        if (!deepEquals(itemA, itemB)) {\n          continue\n        }\n\n        if (dupeIndices.indexOf(x) === -1) {\n          dupeIndices.push(x)\n        }\n\n        if (dupeIndices.indexOf(y) === -1) {\n          dupeIndices.push(y)\n        }\n      }\n    }\n\n    const paths = dupeIndices.map((idx) => {\n      const item = value[idx]\n      const pathSegment = item && item._key ? {_key: item._key} : idx\n      return [pathSegment]\n    })\n\n    return dupeIndices.length > 0\n      ? new ValidationErrorClass(message || `Can't be a duplicate`, {paths})\n      : true\n  },\n}\n\nexport default arrayValidators\n","import {Validators, isReference} from '@sanity/types'\nimport genericValidator from './genericValidator'\n\nconst metaKeys = ['_key', '_type', '_weak']\n\nconst objectValidators: Validators = {\n  ...genericValidator,\n\n  presence: (expected, value, message) => {\n    if (expected !== 'required') {\n      return true\n    }\n\n    const keys = value && Object.keys(value).filter((key) => !metaKeys.includes(key))\n\n    if (value === undefined || (keys && keys.length === 0)) {\n      return message || 'Required'\n    }\n\n    return true\n  },\n\n  reference: async (_unused, value: unknown, message, context) => {\n    if (!value) {\n      return true\n    }\n\n    if (!isReference(value)) {\n      return message || true\n    }\n\n    const {type, getDocumentExists} = context\n\n    if (!type) {\n      throw new Error(`\\`type\\` was not provided in validation context`)\n    }\n\n    if ('weak' in type && type.weak) {\n      return true\n    }\n\n    if (!getDocumentExists) {\n      throw new Error(`\\`getDocumentExists\\` was not provided in validation context`)\n    }\n\n    const exists = await getDocumentExists({id: value._ref})\n    if (!exists) {\n      return 'This reference must be published'\n    }\n\n    return true\n  },\n\n  assetRequired: (flag, value, message) => {\n    if (!value || !value.asset || !value.asset._ref) {\n      const assetType = flag.assetType || 'Asset'\n      return message || `${assetType} required`\n    }\n\n    return true\n  },\n}\n\nexport default objectValidators\n","import {Validators} from '@sanity/types'\nimport formatDate from 'date-fns/format'\nimport genericValidator from './genericValidator'\n\nexport function isRecord(obj: unknown): obj is Record<string, unknown> {\n  return typeof obj === 'object' && obj !== null && !Array.isArray(obj)\n}\n\nconst isoDate =\n  /^(?:[-+]\\d{2})?(?:\\d{4}(?!\\d{2}\\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\\1(?:[12]\\d|0[1-9]|3[01]))?|W(?:[0-4]\\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\\d|[12]\\d{2}|3(?:[0-5]\\d|6[1-6])))(?![T]$|[T][\\d]+Z$)(?:[T\\s](?:(?:(?:[01]\\d|2[0-3])(?:(:?)[0-5]\\d)?|24:?00)(?:[.,]\\d+(?!:))?)(?:\\2[0-5]\\d(?:[.,]\\d+)?)?(?:[Z]|(?:[+-])(?:[01]\\d|2[0-3])(?::?[0-5]\\d)?)?)?)?$/\n\n// eslint-disable-next-line no-warning-comments\n// TODO (eventually): move these to schema type package\ninterface DateTimeOptions {\n  dateFormat?: string\n  timeFormat?: string\n}\n\nconst getFormattedDate = (type = '', value: string | number | Date, options?: DateTimeOptions) => {\n  let format = 'yyyy-MM-dd'\n  if (options && options.dateFormat) {\n    format = options.dateFormat\n  }\n\n  if (type === 'date') {\n    // If the type is date only\n    return formatDate(new Date(value), format)\n  }\n\n  // If the type is datetime\n  if (options && options.timeFormat) {\n    format += ` ${options.timeFormat}`\n  } else {\n    format += ' HH:mm'\n  }\n\n  return formatDate(new Date(value), format)\n}\n\nfunction parseDate(date: unknown): Date | null\nfunction parseDate(date: unknown, throwOnError: true): Date\nfunction parseDate(date: unknown, throwOnError = false): Date | null {\n  if (!date) return null\n  if (date === 'now') return new Date()\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const parsed = new Date(date as any)\n  const isInvalid = isNaN(parsed.getTime())\n  if (isInvalid && throwOnError) {\n    throw new Error(`Unable to parse \"${date}\" to a date`)\n  }\n\n  return isInvalid ? null : parsed\n}\n\nconst dateValidators: Validators = {\n  ...genericValidator,\n\n  type: (_unused, value, message) => {\n    const strVal = `${value}`\n    if (!strVal || isoDate.test(value)) {\n      return true\n    }\n\n    return message || 'Must be a valid ISO-8601 formatted date string'\n  },\n\n  min: (minDate, value, message, context) => {\n    const dateVal = parseDate(value)\n    if (!dateVal) {\n      return true // `type()` should catch parse errors\n    }\n\n    if (!value || dateVal >= parseDate(minDate, true)) {\n      return true\n    }\n    if (!context.type) {\n      throw new Error(`\\`type\\` was not provided in validation context.`)\n    }\n\n    const dateTimeOptions: DateTimeOptions = isRecord(context.type.options)\n      ? (context.type.options as DateTimeOptions)\n      : {}\n\n    const date = getFormattedDate(context.type.name, minDate, dateTimeOptions)\n\n    return message || `Must be at or after ${date}`\n  },\n\n  max: (maxDate, value, message, context) => {\n    const dateVal = parseDate(value)\n    if (!dateVal) {\n      return true // `type()` should catch parse errors\n    }\n\n    if (!value || dateVal <= parseDate(maxDate, true)) {\n      return true\n    }\n\n    if (!context.type) {\n      throw new Error(`\\`type\\` was not provided in validation context.`)\n    }\n\n    const dateTimeOptions: DateTimeOptions = isRecord(context.type.options)\n      ? (context.type.options as DateTimeOptions)\n      : {}\n\n    const date = getFormattedDate(context.type.name, maxDate, dateTimeOptions)\n    return message || `Must be at or before ${date}`\n  },\n}\n\nexport default dateValidators\n","import {\n  SchemaType,\n  Rule as IRule,\n  RuleClass,\n  CustomValidator,\n  RuleSpecConstraint,\n  FieldRules,\n  ValidationContext,\n  RuleSpec,\n  ValidationMarker,\n  RuleTypeConstraint,\n  Validator,\n  Block,\n} from '@sanity/types'\nimport {cloneDeep, get} from 'lodash'\nimport ValidationErrorClass from './ValidationError'\nimport escapeRegex from './util/escapeRegex'\nimport {convertToValidationMarker} from './util/convertToValidationMarker'\nimport pathToString from './util/pathToString'\nimport genericValidator from './validators/genericValidator'\nimport booleanValidator from './validators/booleanValidator'\nimport numberValidator from './validators/numberValidator'\nimport stringValidator from './validators/stringValidator'\nimport arrayValidator from './validators/arrayValidator'\nimport objectValidator from './validators/objectValidator'\nimport dateValidator from './validators/dateValidator'\n\nconst typeValidators = {\n  Boolean: booleanValidator,\n  Number: numberValidator,\n  String: stringValidator,\n  Array: arrayValidator,\n  Object: objectValidator,\n  Date: dateValidator,\n}\n\nconst getBaseType = (type: SchemaType | undefined): SchemaType | undefined => {\n  return type && type.type ? getBaseType(type.type) : type\n}\n\nconst isFieldRef = (constraint: unknown): constraint is {type: symbol; path: string | string[]} => {\n  if (typeof constraint !== 'object' || !constraint) return false\n  return (constraint as Record<string, unknown>).type === Rule.FIELD_REF\n}\n\nconst EMPTY_ARRAY: unknown[] = []\nconst FIELD_REF = Symbol('FIELD_REF')\nconst ruleConstraintTypes: RuleTypeConstraint[] = [\n  'Array',\n  'Boolean',\n  'Date',\n  'Number',\n  'Object',\n  'String',\n]\n\n// Note: `RuleClass` and `Rule` are split to fit the current `@sanity/types`\n// setup. Classes are a bit weird in the `@sanity/types` package because classes\n// create an actual javascript class while simultaneously creating a type\n// definition.\n//\n// This implicitly creates two types:\n// 1. the instance type — `Rule` and\n// 2. the static/class type - `RuleClass`\n//\n// The `RuleClass` type contains the static methods and the `Rule` instance\n// contains the instance methods.\n//\n// This package exports the RuleClass as a value without implicitly exporting\n// an instance definition. This should help reminder downstream users to import\n// from the `@sanity/types` package.\nconst Rule: RuleClass = class Rule implements IRule {\n  static readonly FIELD_REF = FIELD_REF\n  static array = (def?: SchemaType): Rule => new Rule(def).type('Array')\n  static object = (def?: SchemaType): Rule => new Rule(def).type('Object')\n  static string = (def?: SchemaType): Rule => new Rule(def).type('String')\n  static number = (def?: SchemaType): Rule => new Rule(def).type('Number')\n  static boolean = (def?: SchemaType): Rule => new Rule(def).type('Boolean')\n  static dateTime = (def?: SchemaType): Rule => new Rule(def).type('Date')\n  static valueOfField = (path: string | string[]): {type: symbol; path: string | string[]} => ({\n    type: FIELD_REF,\n    path,\n  })\n\n  _type: RuleTypeConstraint | undefined = undefined\n  _level: 'error' | 'warning' | 'info' | undefined = undefined\n  _required: 'required' | 'optional' | undefined = undefined\n  _typeDef: SchemaType | undefined = undefined\n  _message: string | undefined = undefined\n  _rules: RuleSpec[] = []\n  _fieldRules: FieldRules | undefined = undefined\n\n  constructor(typeDef?: SchemaType) {\n    this._typeDef = typeDef\n    this.reset()\n  }\n\n  private _mergeRequired(next: Rule) {\n    if (this._required === 'required' || next._required === 'required') return 'required'\n    if (this._required === 'optional' || next._required === 'optional') return 'optional'\n    return undefined\n  }\n\n  // Alias to static method, since we often have access to an _instance_ of a rule but not the actual Rule class\n  valueOfField = Rule.valueOfField.bind(Rule)\n\n  error(message?: string): Rule {\n    const rule = this.clone()\n    rule._level = 'error'\n    rule._message = message || undefined\n    return rule\n  }\n\n  warning(message?: string): Rule {\n    const rule = this.clone()\n    rule._level = 'warning'\n    rule._message = message || undefined\n    return rule\n  }\n\n  info(message?: string): Rule {\n    const rule = this.clone()\n    rule._level = 'info'\n    rule._message = message || undefined\n    return rule\n  }\n\n  reset(): this {\n    this._type = this._type || undefined\n    this._rules = (this._rules || []).filter((rule) => rule.flag === 'type')\n    this._message = undefined\n    this._required = undefined\n    this._level = 'error'\n    this._fieldRules = undefined\n    return this\n  }\n\n  isRequired(): boolean {\n    return this._required === 'required'\n  }\n\n  clone(): Rule {\n    const rule = new Rule()\n    rule._type = this._type\n    rule._message = this._message\n    rule._required = this._required\n    rule._rules = cloneDeep(this._rules)\n    rule._level = this._level\n    rule._fieldRules = this._fieldRules\n    rule._typeDef = this._typeDef\n    return rule\n  }\n\n  cloneWithRules(rules: RuleSpec[]): Rule {\n    const rule = this.clone()\n    const newRules = new Set()\n    rules.forEach((curr) => {\n      if (curr.flag === 'type') {\n        rule._type = curr.constraint\n      }\n\n      newRules.add(curr.flag)\n    })\n\n    rule._rules = rule._rules\n      .filter((curr) => {\n        const disallowDuplicate = ['type', 'uri', 'email'].includes(curr.flag)\n        const isDuplicate = newRules.has(curr.flag)\n        return !(disallowDuplicate && isDuplicate)\n      })\n      .concat(rules)\n\n    return rule\n  }\n\n  merge(rule: Rule): Rule {\n    if (this._type && rule._type && this._type !== rule._type) {\n      throw new Error('merge() failed: conflicting types')\n    }\n\n    const newRule = this.cloneWithRules(rule._rules)\n    newRule._type = this._type || rule._type\n    newRule._message = this._message || rule._message\n    newRule._required = this._mergeRequired(rule)\n    newRule._level = this._level === 'error' ? rule._level : this._level\n    return newRule\n  }\n\n  // Validation flag setters\n  type(targetType: RuleTypeConstraint | Lowercase<RuleTypeConstraint>): Rule {\n    const type = `${targetType.slice(0, 1).toUpperCase()}${targetType.slice(1)}` as Capitalize<\n      typeof targetType\n    >\n\n    if (!ruleConstraintTypes.includes(type)) {\n      throw new Error(`Unknown type \"${targetType}\"`)\n    }\n\n    const rule = this.cloneWithRules([{flag: 'type', constraint: type}])\n    rule._type = type\n    return rule\n  }\n\n  all(children: Rule[]): Rule {\n    return this.cloneWithRules([{flag: 'all', constraint: children}])\n  }\n\n  either(children: Rule[]): Rule {\n    return this.cloneWithRules([{flag: 'either', constraint: children}])\n  }\n\n  // Shared rules\n  optional(): Rule {\n    const rule = this.cloneWithRules([{flag: 'presence', constraint: 'optional'}])\n    rule._required = 'optional'\n    return rule\n  }\n\n  required(): Rule {\n    const rule = this.cloneWithRules([{flag: 'presence', constraint: 'required'}])\n    rule._required = 'required'\n    return rule\n  }\n\n  custom<T = unknown>(fn: CustomValidator<T>): Rule {\n    return this.cloneWithRules([{flag: 'custom', constraint: fn as CustomValidator}])\n  }\n\n  /**\n   * @deprecated use `Rule.custom` instead\n   */\n  block(fn: CustomValidator<Block>): Rule {\n    return this.cloneWithRules([{flag: 'custom', constraint: fn as CustomValidator}])\n  }\n\n  min(len: number): Rule {\n    return this.cloneWithRules([{flag: 'min', constraint: len}])\n  }\n\n  max(len: number): Rule {\n    return this.cloneWithRules([{flag: 'max', constraint: len}])\n  }\n\n  length(len: number): Rule {\n    return this.cloneWithRules([{flag: 'length', constraint: len}])\n  }\n\n  valid(value: unknown | unknown[]): Rule {\n    const values = Array.isArray(value) ? value : [value]\n    return this.cloneWithRules([{flag: 'valid', constraint: values}])\n  }\n\n  // Numbers only\n  integer(): Rule {\n    return this.cloneWithRules([{flag: 'integer'}])\n  }\n\n  precision(limit: number): Rule {\n    return this.cloneWithRules([{flag: 'precision', constraint: limit}])\n  }\n\n  positive(): Rule {\n    return this.cloneWithRules([{flag: 'min', constraint: 0}])\n  }\n\n  negative(): Rule {\n    return this.cloneWithRules([{flag: 'lessThan', constraint: 0}])\n  }\n\n  greaterThan(num: number): Rule {\n    return this.cloneWithRules([{flag: 'greaterThan', constraint: num}])\n  }\n\n  lessThan(num: number): Rule {\n    return this.cloneWithRules([{flag: 'lessThan', constraint: num}])\n  }\n\n  // String only\n  uppercase(): Rule {\n    return this.cloneWithRules([{flag: 'stringCasing', constraint: 'uppercase'}])\n  }\n\n  lowercase(): Rule {\n    return this.cloneWithRules([{flag: 'stringCasing', constraint: 'lowercase'}])\n  }\n\n  regex(pattern: RegExp, name: string, options: {name?: string; invert?: boolean}): Rule\n  regex(pattern: RegExp, options: {name?: string; invert?: boolean}): Rule\n  regex(pattern: RegExp, name: string): Rule\n  regex(pattern: RegExp): Rule\n  regex(\n    pattern: RegExp,\n    a?: string | {name?: string; invert?: boolean},\n    b?: {name?: string; invert?: boolean}\n  ): Rule {\n    const name = typeof a === 'string' ? a : a?.name ?? b?.name\n    const invert = typeof a === 'string' ? false : a?.invert ?? b?.invert\n\n    const constraint: RuleSpecConstraint<'regex'> = {\n      pattern,\n      name,\n      invert: invert || false,\n    }\n\n    return this.cloneWithRules([{flag: 'regex', constraint}])\n  }\n\n  email(): Rule {\n    return this.cloneWithRules([{flag: 'email'}])\n  }\n\n  uri(opts?: {\n    scheme?: (string | RegExp) | Array<string | RegExp>\n    allowRelative?: boolean\n    relativeOnly?: boolean\n    allowCredentials?: boolean\n  }): Rule {\n    const optsScheme = opts?.scheme || ['http', 'https']\n    const schemes = Array.isArray(optsScheme) ? optsScheme : [optsScheme]\n\n    if (!schemes.length) {\n      throw new Error('scheme must have at least 1 scheme specified')\n    }\n\n    const constraint: RuleSpecConstraint<'uri'> = {\n      options: {\n        scheme: schemes.map((scheme) => {\n          if (!(scheme instanceof RegExp) && typeof scheme !== 'string') {\n            throw new Error('scheme must be a RegExp or a String')\n          }\n\n          return typeof scheme === 'string' ? new RegExp(`^${escapeRegex(scheme)}$`) : scheme\n        }),\n        allowRelative: opts?.allowRelative || false,\n        relativeOnly: opts?.relativeOnly || false,\n        allowCredentials: opts?.allowCredentials || false,\n      },\n    }\n\n    return this.cloneWithRules([{flag: 'uri', constraint}])\n  }\n\n  // Array only\n  unique(): Rule {\n    return this.cloneWithRules([{flag: 'unique'}])\n  }\n\n  // Objects only\n  reference(): Rule {\n    return this.cloneWithRules([{flag: 'reference'}])\n  }\n\n  fields(rules: FieldRules): Rule {\n    if (this._type !== 'Object') {\n      throw new Error('fields() can only be called on an object type')\n    }\n\n    const rule = this.cloneWithRules([])\n    rule._fieldRules = rules\n    return rule\n  }\n\n  assetRequired(): Rule {\n    const base = getBaseType(this._typeDef)\n    let assetType: 'Asset' | 'Image' | 'File'\n    if (base && ['image', 'file'].includes(base.name)) {\n      assetType = base.name === 'image' ? 'Image' : 'File'\n    } else {\n      assetType = 'Asset'\n    }\n\n    return this.cloneWithRules([{flag: 'assetRequired', constraint: {assetType}}])\n  }\n\n  async validate(value: unknown, context: ValidationContext): Promise<ValidationMarker[]> {\n    if (!context) {\n      throw new Error('missing context')\n    }\n\n    const valueIsEmpty = value === null || value === undefined\n\n    // Short-circuit on optional, empty fields\n    if (valueIsEmpty && this._required === 'optional') {\n      return EMPTY_ARRAY as ValidationMarker[]\n    }\n\n    const rules =\n      // Run only the _custom_ functions if the rule is not set to required or optional\n      this._required === undefined && valueIsEmpty\n        ? this._rules.filter((curr) => curr.flag === 'custom')\n        : this._rules\n\n    const validators = (this._type && typeValidators[this._type]) || genericValidator\n\n    const results = await Promise.all(\n      rules.map(async (curr) => {\n        if (curr.flag === undefined) {\n          throw new Error('Invalid rule, did not contain \"flag\"-property')\n        }\n\n        const validator: Validator | undefined = validators[curr.flag]\n        if (!validator) {\n          const forType = this._type ? `type \"${this._type}\"` : 'rule without declared type'\n          throw new Error(`Validator for flag \"${curr.flag}\" not found for ${forType}`)\n        }\n\n        let specConstraint = 'constraint' in curr ? curr.constraint : null\n        if (isFieldRef(specConstraint)) {\n          specConstraint = get(context.parent, specConstraint.path)\n        }\n\n        let result\n        try {\n          result = await validator(specConstraint, value, this._message, context)\n        } catch (err) {\n          const errorFromException = new ValidationErrorClass(\n            `${pathToString(context.path)}: Exception occurred while validating value: ${\n              err.message\n            }`\n          )\n          return convertToValidationMarker(errorFromException, 'error', context)\n        }\n\n        return convertToValidationMarker(result, this._level, context)\n      })\n    )\n\n    return results.flat()\n  }\n}\n\nexport default Rule\n","import {SlugIsUniqueValidator, Path, CustomValidator, isKeyedObject} from '@sanity/types'\nimport {memoize} from 'lodash'\n// import getClient from '../getClient'\n\nconst memoizedWarnOnArraySlug = memoize(warnOnArraySlug)\n\nfunction getDocumentIds(id: string) {\n  const isDraft = id.indexOf('drafts.') === 0\n  return {\n    published: isDraft ? id.slice('drafts.'.length) : id,\n    draft: isDraft ? id : `drafts.${id}`,\n  }\n}\n\nfunction serializePath(path: Path): string {\n  return path.reduce<string>((target, part, i) => {\n    const isIndex = typeof part === 'number'\n    const isKey = isKeyedObject(part)\n    const separator = i === 0 ? '' : '.'\n    const add = isIndex || isKey ? '[]' : `${separator}${part}`\n    return `${target}${add}`\n  }, '')\n}\n\nconst defaultIsUnique: SlugIsUniqueValidator = (slug, context) => {\n  const {client, document, path, type} = context\n  const schemaOptions = type?.options as {disableArrayWarning?: boolean} | undefined\n\n  if (!document) {\n    throw new Error(`\\`document\\` was not provided in validation context.`)\n  }\n  if (!path) {\n    throw new Error(`\\`path\\` was not provided in validation context.`)\n  }\n\n  const disableArrayWarning = schemaOptions?.disableArrayWarning || false\n  const {published, draft} = getDocumentIds(document._id)\n  const docType = document._type\n  const atPath = serializePath(path.concat('current'))\n\n  if (!disableArrayWarning && atPath.includes('[]')) {\n    memoizedWarnOnArraySlug(serializePath(path))\n  }\n\n  const constraints = [\n    '_type == $docType',\n    `!(_id in [$draft, $published])`,\n    `${atPath} == $slug`,\n  ].join(' && ')\n\n  return client.fetch<boolean>(\n    `!defined(*[${constraints}][0]._id)`,\n    {\n      docType,\n      draft,\n      published,\n      slug,\n    },\n    {tag: 'validation.slug-is-unique'}\n  )\n}\n\nfunction warnOnArraySlug(serializedPath: string) {\n  /* eslint-disable no-console */\n  console.warn(\n    [\n      `Slug field at path ${serializedPath} is within an array and cannot be automatically checked for uniqueness`,\n      `If you need to check for uniqueness, provide your own \"isUnique\" method`,\n      `To disable this message, set \\`disableArrayWarning: true\\` on the slug \\`options\\` field`,\n    ].join('\\n')\n  )\n  /* eslint-enable no-console */\n}\n\n/**\n * Validates slugs values by querying for uniqueness from the client.\n *\n * This is a custom rule implementation (e.g. `Rule.custom(slugValidator)`)\n * that's populated in `inferFromSchemaType` when the type name is `slug`\n */\nexport const slugValidator: CustomValidator = async (value, context) => {\n  if (!value) {\n    return true\n  }\n  if (typeof value !== 'object') {\n    return 'Slug must be an object'\n  }\n\n  const slugValue = (value as {current?: string}).current\n  if (!slugValue) {\n    return 'Slug must have a value'\n  }\n\n  const options = context?.type?.options as {isUnique?: SlugIsUniqueValidator} | undefined\n  const isUnique = options?.isUnique || defaultIsUnique\n\n  const wasUnique = await isUnique(slugValue, {...context, defaultIsUnique})\n  if (wasUnique) {\n    return true\n  }\n\n  return 'Slug is already in use'\n}\n","import {SchemaType, Rule, RuleTypeConstraint} from '@sanity/types'\nimport RuleClass from '../Rule'\nimport {slugValidator} from '../validators/slugValidator'\n\nconst ruleConstraintTypes: {[P in Lowercase<RuleTypeConstraint>]: true} = {\n  array: true,\n  boolean: true,\n  date: true,\n  number: true,\n  object: true,\n  string: true,\n}\n\nconst isRuleConstraint = (typeString: string): typeString is Lowercase<RuleTypeConstraint> =>\n  typeString in ruleConstraintTypes\n\nfunction getTypeChain(type: SchemaType | undefined, visited: Set<SchemaType>): SchemaType[] {\n  if (!type) return []\n  if (visited.has(type)) return []\n\n  visited.add(type)\n\n  const next = type.type ? getTypeChain(type.type, visited) : []\n  return [...next, type]\n}\n\nfunction baseRuleReducer(inputRule: Rule, type: SchemaType) {\n  let baseRule = inputRule\n\n  if (isRuleConstraint(type.jsonType)) {\n    baseRule = baseRule.type(type.jsonType)\n  }\n\n  const typeOptionsList =\n    // if type.options is truthy\n    type?.options &&\n    // and type.options is an object (non-null from the previous)\n    typeof type.options === 'object' &&\n    // and if `list` is in options\n    'list' in type.options &&\n    // then finally access the list\n    type.options.list\n\n  if (Array.isArray(typeOptionsList)) {\n    baseRule = baseRule.valid(\n      typeOptionsList.map((option) => extractValueFromListOption(option, type))\n    )\n  }\n\n  if (type.name === 'datetime') return baseRule.type('Date')\n  if (type.name === 'date') return baseRule.type('Date')\n  if (type.name === 'url') return baseRule.uri()\n  if (type.name === 'slug') return baseRule.custom(slugValidator)\n  if (type.name === 'reference') return baseRule.reference()\n  if (type.name === 'email') return baseRule.email()\n  return baseRule\n}\n\nfunction hasValueField(typeDef: SchemaType | undefined): boolean {\n  if (!typeDef) return false\n  if (!('fields' in typeDef) && typeDef.type) return hasValueField(typeDef.type)\n  if (!('fields' in typeDef)) return false\n  if (!Array.isArray(typeDef.fields)) return false\n  return typeDef.fields.some((field) => field.name === 'value')\n}\n\nfunction extractValueFromListOption(option: unknown, typeDef: SchemaType): unknown {\n  // If you define a `list` option with object items, where the item has a `value` field,\n  // we don't want to treat that as the value but rather the surrounding object\n  // This differs from the case where you have a title/value pair setup for a string/number, for instance\n  if (typeDef.jsonType === 'object' && hasValueField(typeDef)) return option\n\n  return (option as Record<string, unknown>).value === undefined\n    ? option\n    : (option as Record<string, unknown>).value\n}\n\n/**\n * Takes in `SchemaValidationValue` and returns an array of `Rule` instances.\n */\nexport default function normalizeValidationRules(typeDef: SchemaType | undefined): Rule[] {\n  if (!typeDef) {\n    return []\n  }\n\n  const validation = typeDef.validation\n\n  if (Array.isArray(validation)) {\n    return validation.flatMap((i) =>\n      normalizeValidationRules({\n        ...typeDef,\n        validation: i,\n      })\n    )\n  }\n\n  if (validation instanceof RuleClass) {\n    return [validation]\n  }\n\n  const baseRule =\n    // using an object + Object.values to de-dupe the type chain by type name\n    Object.values(\n      getTypeChain(typeDef, new Set()).reduce<Record<string, SchemaType>>((acc, type) => {\n        acc[type.name] = type\n        return acc\n      }, {})\n    ).reduce(baseRuleReducer, new RuleClass(typeDef))\n\n  if (!validation) {\n    return [baseRule]\n  }\n\n  return normalizeValidationRules({\n    ...typeDef,\n    validation: validation(baseRule),\n  })\n}\n","import {\n  SanityDocument,\n  Schema,\n  SchemaType,\n  ValidationContext,\n  ValidationMarker,\n  isKeyedObject,\n  isTypedObject,\n  isBlock,\n  isBlockSchemaType,\n  isSpanSchemaType,\n} from '@sanity/types'\nimport {uniqBy} from 'lodash'\nimport {SanityClient} from '@sanity/client'\nimport typeString from './util/typeString'\nimport ValidationErrorClass from './ValidationError'\nimport normalizeValidationRules from './util/normalizeValidationRules'\n\nconst isRecord = (maybeRecord: unknown): maybeRecord is Record<string, unknown> =>\n  typeof maybeRecord === 'object' && maybeRecord !== null && !Array.isArray(maybeRecord)\n\nconst isNonNullable = <T>(value: T): value is NonNullable<T> =>\n  value !== null && value !== undefined\n\n/**\n * @internal\n */\nexport function resolveTypeForArrayItem(\n  item: unknown,\n  candidates: SchemaType[]\n): SchemaType | undefined {\n  // if there is only one type available, assume that it's the correct one\n  if (candidates.length === 1) return candidates[0]\n\n  const itemType = isTypedObject(item) && item._type\n  const primitive =\n    item === undefined || item === null || (!itemType && typeString(item).toLowerCase())\n\n  if (primitive && primitive !== 'object') {\n    return candidates.find((candidate) => candidate.jsonType === primitive)\n  }\n\n  return (\n    candidates.find((candidate) => candidate.type?.name === itemType) ||\n    candidates.find((candidate) => candidate.name === itemType) ||\n    candidates.find((candidate) => candidate.name === 'object' && primitive === 'object')\n  )\n}\n\nexport default async function validateDocument(\n  client: SanityClient,\n  doc: SanityDocument,\n  schema: Schema,\n  context?: Pick<ValidationContext, 'getDocumentExists'>\n): Promise<ValidationMarker[]> {\n  const documentType = schema.get(doc._type)\n  if (!documentType) {\n    console.warn('Schema type for object type \"%s\" not found, skipping validation', doc._type)\n    return []\n  }\n\n  try {\n    return await validateItem({\n      client,\n      parent: undefined,\n      value: doc,\n      path: [],\n      document: doc,\n      type: documentType,\n      getDocumentExists: context?.getDocumentExists,\n    })\n  } catch (err) {\n    console.error(err)\n    return [\n      {\n        level: 'error',\n        path: [],\n        item: new ValidationErrorClass(err?.message),\n      },\n    ]\n  }\n}\n\n/**\n * this is used make optional properties required by replacing optionals with\n * `T[P] | undefined`. this is used to prevent errors in `validateItem` where\n * an option from a previous invocation would be incorrectly passed down.\n *\n * https://medium.com/terria/typescript-transforming-optional-properties-to-required-properties-that-may-be-undefined-7482cb4e1585\n */\ntype ExplicitUndefined<T> = {\n  [P in keyof Required<T>]: Pick<T, P> extends Required<Pick<T, P>> ? T[P] : T[P] | undefined\n}\n\ntype ValidateItemOptions = {\n  value: unknown\n} & ExplicitUndefined<ValidationContext>\n\nexport async function validateItem({\n  value,\n  type,\n  path = [],\n  parent,\n  ...restOfContext\n}: ValidateItemOptions): Promise<ValidationMarker[]> {\n  const rules = normalizeValidationRules(type)\n\n  // run validation for the current value\n  const selfChecks = rules.map((rule) =>\n    rule.validate(value, {\n      ...restOfContext,\n      parent,\n      path,\n      type,\n    })\n  )\n\n  // run validation for nested values (conditionally)\n  let nestedChecks: Array<Promise<ValidationMarker[]>> = []\n\n  const selfIsRequired = rules.some((rule) => rule.isRequired())\n  const shouldRunNestedObjectValidation =\n    // run nested validation for objects\n    type?.jsonType === 'object' &&\n    // if the value is truthy\n    (!!value || // or\n      // (the value is null or undefined) and the top-level value is required\n      ((value === null || value === undefined) && selfIsRequired))\n\n  if (shouldRunNestedObjectValidation) {\n    const fieldTypes = type.fields.reduce<Record<string, SchemaType>>((acc, field) => {\n      acc[field.name] = field.type\n      return acc\n    }, {})\n\n    // Validation for rules set at the object level with `Rule.fields({/* ... */})`\n    nestedChecks = nestedChecks.concat(\n      rules\n        .map((rule) => rule._fieldRules)\n        .filter(isNonNullable)\n        .flatMap((fieldResults) => Object.entries(fieldResults))\n        .flatMap(([name, validation]) => {\n          const fieldType = fieldTypes[name]\n          return normalizeValidationRules({...fieldType, validation}).map((subRule) => {\n            const nestedValue = isRecord(value) ? value[name] : undefined\n            return subRule.validate(nestedValue, {\n              ...restOfContext,\n              parent: value,\n              path: path.concat(name),\n              type: fieldType,\n            })\n          })\n        })\n    )\n\n    // Validation from each field's schema `validation: Rule => {/* ... */}` function\n    nestedChecks = nestedChecks.concat(\n      type.fields.map((field) =>\n        validateItem({\n          ...restOfContext,\n          parent: value,\n          value: isRecord(value) ? value[field.name] : undefined,\n          path: path.concat(field.name),\n          type: field.type,\n        })\n      )\n    )\n  }\n\n  // note: unlike objects, arrays should not run nested validation for undefined\n  // values because we won't have a valid path to put a marker (i.e. missing the\n  // key or index in the path) and the downstream form builder won't have a\n  // valid target component\n  const shouldRunNestedValidationForArrays = type?.jsonType === 'array' && Array.isArray(value)\n\n  if (shouldRunNestedValidationForArrays) {\n    nestedChecks = nestedChecks.concat(\n      value.map((item) =>\n        validateItem({\n          ...restOfContext,\n          parent: value,\n          value: item,\n          path: path.concat(isKeyedObject(item) ? {_key: item._key} : value.indexOf(item)),\n          type: resolveTypeForArrayItem(item, type.of),\n        })\n      )\n    )\n  }\n\n  // markDefs also do no run nested validation if the parent object is undefined\n  // for a similar reason to arrays\n  const shouldRunNestedValidationForMarkDefs =\n    isBlock(value) && value.markDefs.length && isBlockSchemaType(type)\n\n  if (shouldRunNestedValidationForMarkDefs) {\n    const [spanChildrenField] = type.fields\n    const spanType = spanChildrenField.type.of.find(isSpanSchemaType)\n\n    const annotations = (spanType?.annotations || []).reduce<Map<string, SchemaType>>(\n      (map, annotationType) => {\n        map.set(annotationType.name, annotationType)\n        return map\n      },\n      new Map()\n    )\n\n    nestedChecks = nestedChecks.concat(\n      value.markDefs.map((markDef) =>\n        validateItem({\n          ...restOfContext,\n          parent: value,\n          value: markDef,\n          path: path.concat(['markDefs', {_key: markDef._key}]),\n          type: annotations.get(markDef._type),\n        })\n      )\n    )\n  }\n\n  const results = (await Promise.all([...selfChecks, ...nestedChecks])).flat()\n\n  // run `uniqBy` if `_fieldRules` are present because they can\n  // cause repeat markers\n  if (rules.some((rule) => rule._fieldRules)) {\n    return uniqBy(results, (rule) => JSON.stringify(rule))\n  }\n\n  return results\n}\n","import {Schema, SchemaType} from '@sanity/types'\nimport normalizeValidationRules from './util/normalizeValidationRules'\n\nfunction traverse(typeDef: SchemaType, visited: Set<SchemaType>) {\n  if (visited.has(typeDef)) {\n    return\n  }\n\n  visited.add(typeDef)\n\n  typeDef.validation = normalizeValidationRules(typeDef)\n\n  if ('fields' in typeDef) {\n    for (const field of typeDef.fields) {\n      traverse(field.type, visited)\n    }\n  }\n\n  if ('of' in typeDef) {\n    for (const candidate of typeDef.of) {\n      traverse(candidate, visited)\n    }\n  }\n\n  // eslint-disable-next-line no-warning-comments\n  // @ts-expect-error TODO (eventually): `annotations` does not exist on the SchemaType yet\n  if (typeDef.annotations) {\n    // eslint-disable-next-line no-warning-comments\n    // @ts-expect-error TODO (eventually): `annotations` does not exist on the SchemaType yet\n    for (const annotation of typeDef.annotations) {\n      traverse(annotation, visited)\n    }\n  }\n}\n\n// NOTE: this overload is for TS API compatibility with a previous implementation\nfunction inferFromSchemaType(\n  typeDef: SchemaType,\n  // these are intentionally unused\n  _schema: Schema,\n  _visited?: Set<SchemaType>\n): SchemaType\n// note: this seemingly redundant overload is required\nfunction inferFromSchemaType(typeDef: SchemaType): SchemaType\nfunction inferFromSchemaType(typeDef: SchemaType): SchemaType {\n  traverse(typeDef, new Set())\n  return typeDef\n}\n\nexport default inferFromSchemaType\n","import {Schema} from '@sanity/types'\nimport inferFromSchemaType from './inferFromSchemaType'\n\n// Note: Mutates schema. Refactor when @sanity/schema supports middlewares\nfunction inferFromSchema(schema: Schema): Schema {\n  const typeNames = schema.getTypeNames()\n\n  typeNames.forEach((typeName) => {\n    const schemaType = schema.get(typeName)\n\n    if (schemaType) {\n      inferFromSchemaType(schemaType)\n    }\n  })\n\n  return schema\n}\n\nexport default inferFromSchema\n","import RuleClass from './Rule'\nimport validateDocument from './validateDocument'\nimport inferFromSchema from './inferFromSchema'\nimport inferFromSchemaType from './inferFromSchemaType'\n\nexport default {Rule: RuleClass, validateDocument, inferFromSchema, inferFromSchemaType}\nexport {RuleClass as Rule, validateDocument, inferFromSchema, inferFromSchemaType}\n"],"names":["isNonNullable","ValidationErrorClass","genericValidator","isRecord","booleanValidator","numberValidator","stringValidator","arrayValidator","objectValidator","dateValidator","ruleConstraintTypes","RuleClass"],"mappings":"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"}