import normalizeValidationRules from './util/normalizeValidationRules';
function traverse(typeDef, visited) {
    if (visited.has(typeDef)) {
        return;
    }
    visited.add(typeDef);
    typeDef.validation = normalizeValidationRules(typeDef);
    if ('fields' in typeDef) {
        for (const field of typeDef.fields) {
            traverse(field.type, visited);
        }
    }
    if ('of' in typeDef) {
        for (const candidate of typeDef.of) {
            traverse(candidate, visited);
        }
    }
    // eslint-disable-next-line no-warning-comments
    // @ts-expect-error TODO (eventually): `annotations` does not exist on the SchemaType yet
    if (typeDef.annotations) {
        // eslint-disable-next-line no-warning-comments
        // @ts-expect-error TODO (eventually): `annotations` does not exist on the SchemaType yet
        for (const annotation of typeDef.annotations) {
            traverse(annotation, visited);
        }
    }
}
function inferFromSchemaType(typeDef) {
    traverse(typeDef, new Set());
    return typeDef;
}
export default inferFromSchemaType;
//# sourceMappingURL=inferFromSchemaType.js.map