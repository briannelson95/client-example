import { useMemo } from 'react';
import { useSyncExternalStore } from 'use-sync-external-store/shim';
import { shareReplay, tap } from 'rxjs/operators';
import { useIsomorphicEffect } from './useIsomorphicEffect';
function getValue(value) {
    return typeof value === 'function' ? value() : value;
}
const cache = new WeakMap();
function getOrCreateStore(inputObservable, initialValue) {
    if (!cache.has(inputObservable)) {
        const entry = { currentValue: initialValue };
        entry.observable = inputObservable.pipe(shareReplay({ refCount: true, bufferSize: 1 }), tap(value => (entry.currentValue = value)));
        entry.subscription = entry.observable.subscribe();
        cache.set(inputObservable, entry);
    }
    return cache.get(inputObservable);
}
export function useObservable(observable, initialValue) {
    const [getSnapshot, subscribe] = useMemo(() => {
        const record = getOrCreateStore(observable, getValue(initialValue));
        return [
            function getSnapshot() {
                return record.currentValue;
            },
            function subscribe(callback) {
                const sub = record.observable.subscribe(next => callback(next));
                return () => {
                    sub.unsubscribe();
                };
            },
        ];
    }, [observable]);
    useIsomorphicEffect(() => {
        return () => {
            getOrCreateStore(observable, getValue(initialValue)).subscription.unsubscribe();
        };
    }, [observable]);
    return useSyncExternalStore(subscribe, getSnapshot);
}
export function useMemoObservable(observableOrFactory, deps, initialValue) {
    return useObservable(useMemo(() => getValue(observableOrFactory), deps), initialValue);
}
