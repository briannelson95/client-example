import { BehaviorSubject } from 'rxjs';
import { useCallback, useRef } from 'react';
import { useIsomorphicEffect } from './useIsomorphicEffect';
import { distinctUntilChanged } from 'rxjs/operators';
export function useAsObservable(value, operator) {
    var setup = useCallback(function () {
        var subject = new BehaviorSubject(value);
        var observable = subject.asObservable().pipe(distinctUntilChanged());
        return [operator ? observable.pipe(operator) : observable, subject];
    }, []);
    var ref = useRef();
    if (!ref.current) {
        ref.current = setup();
    }
    var observable = ref.current[0];
    useIsomorphicEffect(function () {
        if (!ref.current) {
            return;
        }
        var _a = ref.current, subject = _a[1];
        subject.next(value);
    }, [value, ref]);
    useIsomorphicEffect(function () {
        return function () {
            if (!ref.current) {
                return;
            }
            var _a = ref.current, subject = _a[1];
            subject.complete();
            ref.current = undefined;
        };
    }, []);
    return observable;
}
