import { useMemo } from 'react';
import { useSyncExternalStore } from 'use-sync-external-store/shim';
import { shareReplay, tap } from 'rxjs/operators';
import { useIsomorphicEffect } from './useIsomorphicEffect';
function getValue(value) {
    return typeof value === 'function' ? value() : value;
}
var cache = new WeakMap();
function getOrCreateStore(inputObservable, initialValue) {
    if (!cache.has(inputObservable)) {
        var entry_1 = { currentValue: initialValue };
        entry_1.observable = inputObservable.pipe(shareReplay({ refCount: true, bufferSize: 1 }), tap(function (value) { return (entry_1.currentValue = value); }));
        entry_1.subscription = entry_1.observable.subscribe();
        cache.set(inputObservable, entry_1);
    }
    return cache.get(inputObservable);
}
export function useObservable(observable, initialValue) {
    var _a = useMemo(function () {
        var record = getOrCreateStore(observable, getValue(initialValue));
        return [
            function getSnapshot() {
                return record.currentValue;
            },
            function subscribe(callback) {
                var sub = record.observable.subscribe(function (next) { return callback(next); });
                return function () {
                    sub.unsubscribe();
                };
            },
        ];
    }, [observable]), getSnapshot = _a[0], subscribe = _a[1];
    useIsomorphicEffect(function () {
        return function () {
            getOrCreateStore(observable, getValue(initialValue)).subscription.unsubscribe();
        };
    }, [observable]);
    return useSyncExternalStore(subscribe, getSnapshot);
}
export function useMemoObservable(observableOrFactory, deps, initialValue) {
    return useObservable(useMemo(function () { return getValue(observableOrFactory); }, deps), initialValue);
}
