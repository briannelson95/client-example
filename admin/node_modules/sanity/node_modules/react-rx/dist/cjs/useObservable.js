"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMemoObservable = exports.useObservable = void 0;
var react_1 = require("react");
var shim_1 = require("use-sync-external-store/shim");
var operators_1 = require("rxjs/operators");
var useIsomorphicEffect_1 = require("./useIsomorphicEffect");
function getValue(value) {
    return typeof value === 'function' ? value() : value;
}
var cache = new WeakMap();
function getOrCreateStore(inputObservable, initialValue) {
    if (!cache.has(inputObservable)) {
        var entry_1 = { currentValue: initialValue };
        entry_1.observable = inputObservable.pipe((0, operators_1.shareReplay)({ refCount: true, bufferSize: 1 }), (0, operators_1.tap)(function (value) { return (entry_1.currentValue = value); }));
        entry_1.subscription = entry_1.observable.subscribe();
        cache.set(inputObservable, entry_1);
    }
    return cache.get(inputObservable);
}
function useObservable(observable, initialValue) {
    var _a = (0, react_1.useMemo)(function () {
        var record = getOrCreateStore(observable, getValue(initialValue));
        return [
            function getSnapshot() {
                return record.currentValue;
            },
            function subscribe(callback) {
                var sub = record.observable.subscribe(function (next) { return callback(next); });
                return function () {
                    sub.unsubscribe();
                };
            },
        ];
    }, [observable]), getSnapshot = _a[0], subscribe = _a[1];
    (0, useIsomorphicEffect_1.useIsomorphicEffect)(function () {
        return function () {
            getOrCreateStore(observable, getValue(initialValue)).subscription.unsubscribe();
        };
    }, [observable]);
    return (0, shim_1.useSyncExternalStore)(subscribe, getSnapshot);
}
exports.useObservable = useObservable;
function useMemoObservable(observableOrFactory, deps, initialValue) {
    return useObservable((0, react_1.useMemo)(function () { return getValue(observableOrFactory); }, deps), initialValue);
}
exports.useMemoObservable = useMemoObservable;
