import { ObjectOptions, ObjectInputProps, ObjectSchemaType, ObjectDefinition } from "sanity";
import { HSLColor, HSVColor, RGBColor } from "react-color";
export const hslaColor: {
    type: "object";
    name: "hslaColor";
} & Omit<import("sanity").ObjectDefinition, "preview"> & {
    preview?: import("sanity").PreviewConfig<Record<string, string>, Record<never, any>> | undefined;
};
export const rgbaColor: {
    type: "object";
    name: "rgbaColor";
} & Omit<import("sanity").ObjectDefinition, "preview"> & {
    preview?: import("sanity").PreviewConfig<Record<string, string>, Record<never, any>> | undefined;
};
export interface ColorValue {
    hex: string;
    hsl: HSLColor;
    hsv: HSVColor;
    rgb: RGBColor;
}
export interface ColorOptions extends Omit<ObjectOptions, 'columns'> {
    disableAlpha?: boolean;
}
export type ColorSchemaType = Omit<ObjectSchemaType, 'options'> & {
    options?: ColorOptions;
};
export type ColorInputProps = ObjectInputProps<ColorValue, ColorSchemaType>;
export function ColorInput(props: ColorInputProps): JSX.Element;
declare const colorTypeName: "color";
/**
 * @public
 */
export interface ColorDefinition extends Omit<ObjectDefinition, 'type' | 'fields' | 'options'> {
    type: typeof colorTypeName;
    options?: ColorOptions;
}
declare module '@sanity/types' {
    interface IntrinsicDefinitions {
        color: ColorDefinition;
    }
}
export const color: {
    type: "object";
    name: "color";
} & Omit<ObjectDefinition, "preview"> & {
    preview?: import("sanity").PreviewConfig<{
        title: string;
        alpha: string;
        hex: string;
        hsl: string;
    }, Record<"title" | "hsl" | "hex" | "alpha", any>> | undefined;
};
export const hsvaColor: {
    type: "object";
    name: "hsvaColor";
} & Omit<import("sanity").ObjectDefinition, "preview"> & {
    preview?: import("sanity").PreviewConfig<Record<string, string>, Record<never, any>> | undefined;
};
export const colorInput: import("sanity").Plugin<void>;

//# sourceMappingURL=index.d.ts.map
