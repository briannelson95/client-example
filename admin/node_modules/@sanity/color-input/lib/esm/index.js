import {createPlugin as $gGrEF$createPlugin} from "sanity";
import {jsx as $gGrEF$jsx, Fragment as $gGrEF$Fragment, jsxs as $gGrEF$jsxs} from "react/jsx-runtime";
import {useRef as $gGrEF$useRef, useState as $gGrEF$useState, useEffect as $gGrEF$useEffect, useCallback as $gGrEF$useCallback, useMemo as $gGrEF$useMemo} from "react";
import {set as $gGrEF$set, setIfMissing as $gGrEF$setIfMissing, unset as $gGrEF$unset} from "sanity/form";
import {debounce as $gGrEF$debounce} from "lodash";
import {Button as $gGrEF$Button, Box as $gGrEF$Box, Flex as $gGrEF$Flex, Card as $gGrEF$Card, Stack as $gGrEF$Stack, Text as $gGrEF$Text, Inline as $gGrEF$Inline, useTheme as $gGrEF$useTheme} from "@sanity/ui";
import {AddIcon as $gGrEF$AddIcon, TrashIcon as $gGrEF$TrashIcon} from "@sanity/icons";
import {Saturation as $gGrEF$Saturation, Hue as $gGrEF$Hue, Alpha as $gGrEF$Alpha, Checkboard as $gGrEF$Checkboard, EditableInput as $gGrEF$EditableInput} from "react-color/lib/components/common";
import {CustomPicker as $gGrEF$CustomPicker} from "react-color";
import $gGrEF$styledcomponents from "styled-components";
import {isValidHex as $gGrEF$isValidHex} from "react-color/lib/helpers/color";


const $88b170db27d5e6f3$export$4e4b8c12b77623c0 = {
    title: "Hue Saturation Lightness",
    name: "hslaColor",
    type: "object",
    fields: [
        {
            name: "h",
            type: "number",
            title: "Hue"
        },
        {
            name: "s",
            type: "number",
            title: "Saturation"
        },
        {
            name: "l",
            type: "number",
            title: "Lightness"
        },
        {
            name: "a",
            type: "number",
            title: "Alpha"
        }, 
    ]
};


const $37ec22070cd01c8b$export$cc215b4b2c268dfd = {
    title: "Red Green Blue (rgb)",
    name: "rgbaColor",
    type: "object",
    fields: [
        {
            name: "r",
            type: "number",
            title: "Red"
        },
        {
            name: "g",
            type: "number",
            title: "Green"
        },
        {
            name: "b",
            type: "number",
            title: "Blue"
        },
        {
            name: "a",
            type: "number",
            title: "Alpha"
        }, 
    ]
};






















const $69987db005d80051$export$5367735792921e7d = ({ onChange: onChange , rgb: rgb , hsl: hsl , hex: hex , disableAlpha: disableAlpha  })=>{
    const { sanity: sanity  } = (0, $gGrEF$useTheme)();
    const inputStyles = (0, $gGrEF$useMemo)(()=>({
            input: {
                width: "80%",
                padding: "4px 10% 3px",
                border: "none",
                boxShadow: `inset 0 0 0 1px ${sanity.color.input.default.enabled.border}`,
                color: sanity.color.input.default.enabled.fg,
                backgroundColor: sanity.color.input.default.enabled.bg,
                fontSize: sanity.fonts.text.sizes[0].fontSize,
                textAlign: "center"
            },
            label: {
                display: "block",
                textAlign: "center",
                fontSize: sanity.fonts.label.sizes[0].fontSize,
                color: sanity.color.base.fg,
                paddingTop: "3px",
                paddingBottom: "4px",
                textTransform: "capitalize"
            }
        }), [
        sanity
    ]);
    const handleChange = (0, $gGrEF$useCallback)((data)=>{
        if ("hex" in data && data.hex && (0, $gGrEF$isValidHex)(data.hex)) onChange({
            hex: data.hex,
            source: "hex"
        });
        else if (rgb && ("r" in data && data.r || "g" in data && data.g || "b" in data && data.b)) onChange({
            r: Number(data.r) || rgb.r,
            g: Number(data.g) || rgb.g,
            b: Number(data.b) || rgb.b,
            a: rgb.a,
            source: "rgb"
        });
        else if (hsl && "a" in data && data.a) {
            let alpha = Number(data.a);
            if (alpha < 0) alpha = 0;
            else if (alpha > 100) alpha = 100;
            alpha /= 100;
            onChange({
                h: hsl.h,
                s: hsl.s,
                l: hsl.l,
                a: alpha,
                source: "hsl"
            });
        }
    }, [
        onChange,
        hsl,
        rgb
    ]);
    return /*#__PURE__*/ (0, $gGrEF$jsxs)((0, $gGrEF$Flex), {
        children: [
            /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$Box), {
                flex: 2,
                marginRight: 1,
                children: /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$EditableInput), {
                    style: inputStyles,
                    label: "hex",
                    value: hex?.replace("#", ""),
                    onChange: handleChange
                })
            }),
            /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$Box), {
                flex: 1,
                marginRight: 1,
                children: /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$EditableInput), {
                    style: inputStyles,
                    label: "r",
                    value: rgb?.r,
                    onChange: handleChange,
                    dragLabel: true,
                    dragMax: 255
                })
            }),
            /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$Box), {
                flex: 1,
                marginRight: 1,
                children: /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$EditableInput), {
                    style: inputStyles,
                    label: "g",
                    value: rgb?.g,
                    onChange: handleChange,
                    dragLabel: true,
                    dragMax: 255
                })
            }),
            /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$Box), {
                flex: 1,
                marginRight: 1,
                children: /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$EditableInput), {
                    style: inputStyles,
                    label: "b",
                    value: rgb?.b,
                    onChange: handleChange,
                    dragLabel: true,
                    dragMax: 255
                })
            }),
            !disableAlpha && /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$Box), {
                flex: 1,
                children: /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$EditableInput), {
                    style: inputStyles,
                    label: "a",
                    value: Math.round((rgb?.a ?? 1) * 100),
                    onChange: handleChange,
                    dragLabel: true,
                    dragMax: 100
                })
            })
        ]
    });
};


const $167ca0588b34aece$var$ColorBox = (0, $gGrEF$styledcomponents)((0, $gGrEF$Box))`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
`;
const $167ca0588b34aece$var$ReadOnlyContainer = (0, $gGrEF$styledcomponents)((0, $gGrEF$Flex))`
  margin-top: 6rem;
  background-color: var(--card-bg-color);
  position: relative;
  width: 100%;
`;
const $167ca0588b34aece$var$ColorPickerInner = (props)=>{
    const { width: width , color: { rgb: rgb , hex: hex , hsv: hsv , hsl: hsl  } , onChange: onChange , onUnset: onUnset , disableAlpha: disableAlpha , readOnly: readOnly ,  } = props;
    return /*#__PURE__*/ (0, $gGrEF$jsx)("div", {
        style: {
            width: width
        },
        children: /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$Card), {
            padding: 1,
            border: true,
            radius: 1,
            children: /*#__PURE__*/ (0, $gGrEF$jsxs)((0, $gGrEF$Stack), {
                space: 2,
                children: [
                    !readOnly && /*#__PURE__*/ (0, $gGrEF$jsxs)((0, $gGrEF$Fragment), {
                        children: [
                            /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$Card), {
                                overflow: "hidden",
                                style: {
                                    position: "relative",
                                    height: "5em"
                                },
                                children: /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$Saturation), {
                                    onChange: onChange,
                                    hsl: hsl,
                                    hsv: hsv
                                })
                            }),
                            /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$Card), {
                                shadow: 1,
                                radius: 3,
                                overflow: "hidden",
                                style: {
                                    position: "relative",
                                    height: "10px"
                                },
                                children: /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$Hue), {
                                    hsl: hsl,
                                    onChange: !readOnly && onChange
                                })
                            }),
                            !disableAlpha && /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$Card), {
                                shadow: 1,
                                radius: 3,
                                overflow: "hidden",
                                style: {
                                    position: "relative",
                                    height: "10px"
                                },
                                children: /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$Alpha), {
                                    rgb: rgb,
                                    hsl: hsl,
                                    onChange: onChange
                                })
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, $gGrEF$jsxs)((0, $gGrEF$Flex), {
                        children: [
                            /*#__PURE__*/ (0, $gGrEF$jsxs)((0, $gGrEF$Card), {
                                flex: 1,
                                radius: 2,
                                overflow: "hidden",
                                style: {
                                    position: "relative",
                                    minWidth: "4em"
                                },
                                children: [
                                    /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$Checkboard), {}),
                                    /*#__PURE__*/ (0, $gGrEF$jsx)($167ca0588b34aece$var$ColorBox, {
                                        style: {
                                            backgroundColor: `rgba(${rgb?.r},${rgb?.g},${rgb?.b},${rgb?.a})`
                                        }
                                    }),
                                    readOnly && /*#__PURE__*/ (0, $gGrEF$jsx)($167ca0588b34aece$var$ReadOnlyContainer, {
                                        padding: 2,
                                        paddingBottom: 1,
                                        sizing: "border",
                                        justify: "space-between",
                                        children: /*#__PURE__*/ (0, $gGrEF$jsxs)((0, $gGrEF$Stack), {
                                            space: 3,
                                            marginTop: 1,
                                            children: [
                                                /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$Text), {
                                                    size: 3,
                                                    weight: "bold",
                                                    children: hex
                                                }),
                                                /*#__PURE__*/ (0, $gGrEF$jsxs)((0, $gGrEF$Inline), {
                                                    space: 3,
                                                    children: [
                                                        /*#__PURE__*/ (0, $gGrEF$jsxs)((0, $gGrEF$Text), {
                                                            size: 1,
                                                            children: [
                                                                /*#__PURE__*/ (0, $gGrEF$jsx)("strong", {
                                                                    children: "RGB: "
                                                                }),
                                                                rgb?.r,
                                                                " ",
                                                                rgb?.g,
                                                                " ",
                                                                rgb?.b
                                                            ]
                                                        }),
                                                        /*#__PURE__*/ (0, $gGrEF$jsxs)((0, $gGrEF$Text), {
                                                            size: 1,
                                                            children: [
                                                                /*#__PURE__*/ (0, $gGrEF$jsx)("strong", {
                                                                    children: "HSL: "
                                                                }),
                                                                " ",
                                                                Math.round(hsl?.h ?? 0),
                                                                " ",
                                                                Math.round(hsl?.s ?? 0),
                                                                "%",
                                                                " ",
                                                                Math.round(hsl?.l ?? 0)
                                                            ]
                                                        })
                                                    ]
                                                })
                                            ]
                                        })
                                    })
                                ]
                            }),
                            !readOnly && /*#__PURE__*/ (0, $gGrEF$jsxs)((0, $gGrEF$Flex), {
                                align: "flex-start",
                                marginLeft: 2,
                                children: [
                                    /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$Box), {
                                        style: {
                                            width: 200
                                        },
                                        children: /*#__PURE__*/ (0, $gGrEF$jsx)((0, $69987db005d80051$export$5367735792921e7d), {
                                            rgb: rgb,
                                            hsl: hsl,
                                            hex: hex,
                                            onChange: onChange,
                                            disableAlpha: disableAlpha
                                        })
                                    }),
                                    /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$Box), {
                                        marginLeft: 2,
                                        children: /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$Button), {
                                            onClick: onUnset,
                                            title: "Delete color",
                                            icon: (0, $gGrEF$TrashIcon),
                                            tone: "critical"
                                        })
                                    })
                                ]
                            })
                        ]
                    })
                ]
            })
        })
    });
};
const $167ca0588b34aece$export$9feb1bc2e5f1ccb3 = (0, $gGrEF$CustomPicker)($167ca0588b34aece$var$ColorPickerInner);


const $9a1b799aa4bfa9c5$var$DEFAULT_COLOR = {
    hex: "#24a3e3",
    hsl: {
        h: 200,
        s: 0.7732,
        l: 0.5156,
        a: 1
    },
    hsv: {
        h: 200,
        s: 0.8414,
        v: 0.8901,
        a: 1
    },
    rgb: {
        r: 46,
        g: 163,
        b: 227,
        a: 1
    },
    source: "hex"
};
function $9a1b799aa4bfa9c5$export$5a1d7ca0a925d9c2(props) {
    const { onChange: onChange , schemaType: type , readOnly: readOnly , value: value  } = props;
    const focusRef = (0, $gGrEF$useRef)(null);
    // use local state so we can have instant ui updates while debouncing patch emits
    const [color, setColor] = (0, $gGrEF$useState)(value);
    (0, $gGrEF$useEffect)(()=>setColor(value), [
        value
    ]);
    const emitSetColor = (0, $gGrEF$useCallback)((nextColor)=>{
        const fieldPatches = type.fields.filter((field)=>field.name in nextColor).map((field)=>{
            const nextFieldValue = nextColor[field.name];
            const isObject = field.type.jsonType === "object";
            return (0, $gGrEF$set)(isObject ? Object.assign({
                _type: field.type.name
            }, nextFieldValue) : nextFieldValue, [
                field.name
            ]);
        });
        onChange([
            (0, $gGrEF$setIfMissing)({
                _type: type.name
            }),
            (0, $gGrEF$set)(type.name, [
                "_type"
            ]),
            (0, $gGrEF$set)(nextColor.rgb?.a, [
                "alpha"
            ]),
            ...fieldPatches, 
        ]);
    }, [
        onChange,
        type
    ]);
    // The color picker emits onChange events continuously while the user is sliding the
    // hue/saturation/alpha selectors. This debounces the event to avoid excessive patches
    const debouncedColorChange = (0, $gGrEF$useMemo)(()=>(0, $gGrEF$debounce)(emitSetColor, 100), [
        emitSetColor
    ]);
    const handleColorChange = (0, $gGrEF$useCallback)((nextColor)=>{
        setColor(nextColor);
        debouncedColorChange(nextColor);
    }, [
        debouncedColorChange,
        setColor
    ]);
    const handleCreateColor = (0, $gGrEF$useCallback)(()=>{
        setColor($9a1b799aa4bfa9c5$var$DEFAULT_COLOR);
        emitSetColor($9a1b799aa4bfa9c5$var$DEFAULT_COLOR);
    }, [
        emitSetColor
    ]);
    const handleUnset = (0, $gGrEF$useCallback)(()=>{
        setColor(undefined);
        onChange((0, $gGrEF$unset)());
    }, [
        onChange
    ]);
    return /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$Fragment), {
        children: value ? /*#__PURE__*/ (0, $gGrEF$jsx)((0, $167ca0588b34aece$export$9feb1bc2e5f1ccb3), {
            /*            ref={this.focusRef}*/ color: color,
            onChange: handleColorChange,
            readOnly: readOnly || typeof type.readOnly === "boolean" && type.readOnly,
            disableAlpha: type.options?.disableAlpha,
            onUnset: handleUnset
        }) : /*#__PURE__*/ (0, $gGrEF$jsx)((0, $gGrEF$Button), {
            icon: (0, $gGrEF$AddIcon),
            mode: "ghost",
            text: "Create color",
            ref: focusRef,
            disabled: Boolean(readOnly),
            onClick: handleCreateColor
        })
    });
}


const $771ddc1e2be43f68$var$round = (val = 1)=>Math.round(val * 100);
const $771ddc1e2be43f68$export$35e9368ef982300f = {
    name: "color",
    type: "object",
    title: "Color",
    components: {
        input: (0, $9a1b799aa4bfa9c5$export$5a1d7ca0a925d9c2)
    },
    fields: [
        {
            title: "Hex",
            name: "hex",
            type: "string"
        },
        {
            title: "Alpha",
            name: "alpha",
            type: "number"
        },
        {
            title: "Hue Saturation Lightness",
            name: "hsl",
            type: "hslaColor"
        },
        {
            title: "Hue Saturation Value",
            name: "hsv",
            type: "hsvaColor"
        },
        {
            title: "Red Green Blue (rgb)",
            name: "rgb",
            type: "rgbaColor"
        }, 
    ],
    preview: {
        select: {
            title: "hex",
            alpha: "alpha",
            hex: "hex",
            hsl: "hsl"
        },
        prepare ({ title: title , hex: hex , hsl: hsl , alpha: alpha  }) {
            let subtitle = hex || "No color set";
            if (hsl) subtitle = `H:${$771ddc1e2be43f68$var$round(hsl.h)} S:${$771ddc1e2be43f68$var$round(hsl.s)} L:${$771ddc1e2be43f68$var$round(hsl.l)} A:${$771ddc1e2be43f68$var$round(alpha)}`;
            return {
                title: title,
                subtitle: subtitle,
                media: ()=>/*#__PURE__*/ (0, $gGrEF$jsx)("div", {
                        style: {
                            backgroundColor: hex ?? "#000",
                            opacity: alpha ?? 1,
                            position: "absolute",
                            height: "100%",
                            width: "100%",
                            top: "0",
                            left: "0"
                        }
                    })
            };
        }
    }
};


const $b26c91ff9252c28d$export$633851ea6f85c81b = {
    title: "Hue Saturation Value",
    name: "hsvaColor",
    type: "object",
    fields: [
        {
            name: "h",
            type: "number",
            title: "Hue"
        },
        {
            name: "s",
            type: "number",
            title: "Saturation"
        },
        {
            name: "v",
            type: "number",
            title: "Value"
        },
        {
            name: "a",
            type: "number",
            title: "Alpha"
        }, 
    ]
};



const $df9eabe9bda49ea8$export$1d1c20ca26e20eb8 = (0, $gGrEF$createPlugin)({
    name: "@sanity/color-input",
    schema: {
        types: [
            (0, $88b170db27d5e6f3$export$4e4b8c12b77623c0),
            (0, $b26c91ff9252c28d$export$633851ea6f85c81b),
            (0, $37ec22070cd01c8b$export$cc215b4b2c268dfd),
            (0, $771ddc1e2be43f68$export$35e9368ef982300f)
        ]
    }
});


export {$df9eabe9bda49ea8$export$1d1c20ca26e20eb8 as colorInput, $88b170db27d5e6f3$export$4e4b8c12b77623c0 as hslaColor, $37ec22070cd01c8b$export$cc215b4b2c268dfd as rgbaColor, $771ddc1e2be43f68$export$35e9368ef982300f as color, $b26c91ff9252c28d$export$633851ea6f85c81b as hsvaColor, $9a1b799aa4bfa9c5$export$5a1d7ca0a925d9c2 as ColorInput};
//# sourceMappingURL=index.js.map
