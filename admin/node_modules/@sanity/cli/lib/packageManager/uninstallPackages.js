"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uninstallPackages = uninstallPackages;

var _execa = _interopRequireDefault(require("execa"));

var _packageManagerChoice = require("./packageManagerChoice");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function uninstallPackages(options, context) {
  var _result, _result2;

  const {
    packageManager,
    packages
  } = options;
  const {
    output,
    workDir
  } = context;
  const execOptions = {
    encoding: 'utf8',
    env: (0, _packageManagerChoice.getPartialEnvWithNpmPath)(workDir),
    cwd: workDir,
    stdio: 'inherit'
  };
  const npmArgs = ['uninstall', ...packages];
  let result;

  if (packageManager === 'npm') {
    output.print("Running 'npm ".concat(npmArgs.join(' '), "'"));
    result = await (0, _execa.default)('npm', npmArgs, execOptions);
  } else if (packageManager === 'yarn') {
    const yarnArgs = ['remove', ...packages];
    output.print("Running 'yarn ".concat(yarnArgs.join(' '), "'"));
    result = await (0, _execa.default)('yarn', yarnArgs, execOptions);
  } else if (packageManager === 'pnpm') {
    const pnpmArgs = ['remove', ...packages];
    output.print("Running 'pnpm ".concat(pnpmArgs.join(' '), "'"));
    result = await (0, _execa.default)('pnpm', pnpmArgs, execOptions);
  } else if (packageManager === 'manual') {
    output.print("Manual installation selected - run 'npm ".concat(npmArgs.join(' '), "' or equivalent"));
  }

  if ((_result = result) !== null && _result !== void 0 && _result.exitCode || (_result2 = result) !== null && _result2 !== void 0 && _result2.failed) {
    throw new Error('Package installation failed');
  }
}