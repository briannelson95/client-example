"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCliUpgradeCommand = getCliUpgradeCommand;

var _path = _interopRequireDefault(require("path"));

var _isInstalledGlobally = _interopRequireDefault(require("is-installed-globally"));

var _debug = require("../debug");

var _packageManagerChoice = require("./packageManagerChoice");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const cliPkgName = '@sanity/cli';

async function getCliUpgradeCommand() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let {
    cwd,
    workDir
  } = options;
  cwd = _path.default.resolve(cwd || process.cwd());
  workDir = _path.default.resolve(workDir || cwd);

  if (_isInstalledGlobally.default && isInstalledUsingYarn()) {
    (0, _debug.debug)('CLI is installed globally with yarn');
    return "yarn global add ".concat(cliPkgName);
  }

  if (_isInstalledGlobally.default) {
    (0, _debug.debug)('CLI is installed globally with npm');
    return "npm install -g ".concat(cliPkgName);
  }

  const cmds = cwd === workDir ? [] : ["cd ".concat(_path.default.relative(cwd, workDir))];
  const {
    chosen
  } = await (0, _packageManagerChoice.getPackageManagerChoice)(workDir, {
    interactive: false
  });

  if (chosen === 'yarn') {
    cmds.push("yarn upgrade ".concat(cliPkgName));
  } else if (chosen === 'pnpm') {
    cmds.push("pnpm update ".concat(cliPkgName));
  } else {
    cmds.push("npm update ".concat(cliPkgName));
  }

  return cmds.join(' && ');
}

function isInstalledUsingYarn() {
  const isWindows = process.platform === 'win32';
  const yarnPath = isWindows ? _path.default.join('Yarn', 'config', 'global') : _path.default.join('.config', 'yarn', 'global');
  return __dirname.includes(yarnPath);
}