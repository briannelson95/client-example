"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCliClient = getCliClient;

var _client = _interopRequireDefault(require("@sanity/client"));

var _getCliConfig = require("./util/getCliConfig");

var _resolveRootDir = require("./util/resolveRootDir");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getCliClient() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (typeof process !== 'object') {
    throw new Error('getCliClient() should only be called from node.js scripts');
  }

  const {
    // eslint-disable-next-line no-process-env
    cwd = process.env.SANITY_BASE_PATH || process.cwd(),
    useCdn = false,
    apiVersion = '2022-06-06',
    projectId,
    dataset,
    token = getCliClient.__internal__getToken()
  } = options;

  if (projectId && dataset) {
    return (0, _client.default)({
      projectId,
      dataset,
      apiVersion,
      useCdn,
      token
    });
  }

  const rootDir = (0, _resolveRootDir.resolveRootDir)(cwd);
  const {
    config
  } = (0, _getCliConfig.getCliConfigSync)(rootDir) || {};

  if (!config) {
    throw new Error('Unable to resolve CLI configuration');
  }

  const apiConfig = (config === null || config === void 0 ? void 0 : config.api) || {};

  if (!apiConfig.projectId || !apiConfig.dataset) {
    throw new Error('Unable to resolve project ID/dataset from CLI configuration');
  }

  return (0, _client.default)({
    projectId: apiConfig.projectId,
    dataset: apiConfig.dataset,
    apiVersion,
    useCdn,
    token
  });
}
/* eslint-disable camelcase */

/**
 * @internal
 * @deprecated This is only for INTERNAL use, and should not be relied upon outside of official Sanity modules
 * @returns A token to use when constructing a client without a `token` explicitly defined, or undefined
 */


getCliClient.__internal__getToken = () => undefined;
/* eslint-enable camelcase */