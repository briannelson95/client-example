import type { CliCommandArguments, CliCommandDefinition, CliCommandGroupDefinition, CliOutputter, CliPrompter, CommandRunnerOptions, ResolvedCliCommand } from './types';
interface Handlers {
    outputter: CliOutputter;
    prompter: CliPrompter;
}
declare type CommandOrGroup = CliCommandDefinition | CliCommandGroupDefinition;
export declare class CommandRunner {
    handlers: Handlers;
    commands: CommandOrGroup[];
    commandGroups: Record<string, (CliCommandDefinition | CliCommandGroupDefinition)[]>;
    constructor(handlers: Handlers, commands?: CommandOrGroup[]);
    runCommand(commandOrGroup: string, args: CliCommandArguments, options: CommandRunnerOptions): Promise<unknown>;
    resolveCommand(commandOrGroup: string, subCommandName?: string): ResolvedCliCommand | null;
    resolveSubcommand(group: (CliCommandDefinition | CliCommandGroupDefinition)[], subCommandName: string, parentGroupName: string): ResolvedCliCommand | null;
    resolveHelpForGroup(): ResolvedCliCommand;
}
export declare function getCliRunner(commands: CommandOrGroup[]): CommandRunner;
export {};
//# sourceMappingURL=CommandRunner.d.ts.map