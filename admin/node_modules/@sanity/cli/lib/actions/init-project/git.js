"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tryGitInit = tryGitInit;

var _child_process = require("child_process");

var _path = _interopRequireDefault(require("path"));

var _rimraf = _interopRequireDefault(require("rimraf"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultCommitMessage = 'feat: bootstrap sanity studio';

function tryGitInit(rootDir, commitMessage) {
  const execOptions = {
    stdio: 'ignore',
    cwd: rootDir
  };
  let didInit = false;

  try {
    (0, _child_process.execSync)('git --version', execOptions);

    if (isInGitRepository(rootDir) || isInMercurialRepository(rootDir)) {
      return false;
    }

    (0, _child_process.execSync)('git init', execOptions);
    didInit = true;
    (0, _child_process.execSync)('git checkout -b main', execOptions);
    (0, _child_process.execSync)('git add -A', execOptions);
    (0, _child_process.execFileSync)('git', ['commit', '-m', commitMessage || defaultCommitMessage], {
      stdio: 'ignore',
      cwd: rootDir
    });
    return true;
  } catch (e) {
    if (didInit) {
      try {
        _rimraf.default.sync(_path.default.join(rootDir, '.git'));
      } catch (_) {// intentional noop
      }
    }

    return false;
  }
}

function isInGitRepository(rootDir) {
  try {
    (0, _child_process.execSync)('git rev-parse --is-inside-work-tree', {
      stdio: 'ignore',
      cwd: rootDir
    });
    return true;
  } catch (_) {// intentional noop
  }

  return false;
}

function isInMercurialRepository(rootDir) {
  try {
    (0, _child_process.execSync)('hg --cwd . root', {
      stdio: 'ignore',
      cwd: rootDir
    });
    return true;
  } catch (_) {// intentional noop
  }

  return false;
}