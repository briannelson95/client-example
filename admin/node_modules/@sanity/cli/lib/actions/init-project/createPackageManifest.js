"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPackageManifest = createPackageManifest;

var _deepSortObject = _interopRequireDefault(require("deep-sort-object"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const manifestPropOrder = ['name', 'private', 'version', 'description', 'main', 'author', 'license', 'scripts', 'keywords', 'dependencies', 'devDependencies'];

function createPackageManifest(data) {
  const dependencies = data.dependencies ? {
    dependencies: (0, _deepSortObject.default)(data.dependencies)
  } : {};
  const devDependencies = data.devDependencies ? {
    devDependencies: (0, _deepSortObject.default)(data.devDependencies)
  } : {};
  const pkg = { ...getCommonManifest(data),
    main: 'package.json',
    keywords: ['sanity'],
    scripts: {
      start: 'sanity start',
      build: 'sanity build',
      deploy: 'sanity deploy',
      'deploy-graphql': 'sanity graphql deploy'
    },
    ...dependencies,
    ...devDependencies,
    prettier: {
      semi: false,
      printWidth: 100,
      bracketSpacing: false,
      singleQuote: true
    }
  };
  return serializeManifest(pkg);
}

function getCommonManifest(data) {
  const pkg = {
    name: data.name,
    version: '1.0.0',
    description: data.description,
    author: data.author,
    license: data.license || 'UNLICENSED',
    devDependencies: {}
  };

  if (pkg.license === 'UNLICENSED') {
    pkg.private = true;
  }

  if (data.gitRemote) {
    pkg.repository = {
      type: 'git',
      url: data.gitRemote
    };
  }

  return pkg;
}

function serializeManifest(src) {
  const props = manifestPropOrder.concat(Object.keys(src));
  const ordered = props.reduce((target, prop) => {
    const source = src;

    if (typeof source[prop] !== 'undefined' && typeof target[prop] === 'undefined') {
      target[prop] = source[prop];
    }

    return target;
  }, {});
  return "".concat(JSON.stringify(ordered, null, 2), "\n");
}