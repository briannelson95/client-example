"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStudioConfig = createStudioConfig;

var _recast = require("recast");

var parser = _interopRequireWildcard(require("recast/parsers/typescript"));

var _traverse = _interopRequireDefault(require("@babel/traverse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const defaultTemplate = "\nimport {createConfig} from 'sanity'\nimport {deskTool} from 'sanity/desk'\nimport {schemaTypes} from './schemas'\n\nexport default createConfig({\n  name: '%sourceName%',\n  title: '%projectName%',\n\n  projectId: '%projectId%',\n  dataset: '%dataset%',\n\n  plugins: [deskTool()],\n\n  schema: {\n    types: schemaTypes,\n  },\n})\n";
const defaultVariables = {
  projectName: 'Sanity Studio',
  sourceName: 'default',
  sourceTitle: 'Default'
};

function createStudioConfig(options) {
  const variables = { ...defaultVariables,
    ...options.variables
  };

  if (typeof options.template === 'function') {
    return options.template(variables).trimStart();
  }

  const template = (options.template || defaultTemplate).trimStart();
  const ast = (0, _recast.parse)(template, {
    parser
  });
  (0, _traverse.default)(ast, {
    StringLiteral: {
      enter(_ref) {
        let {
          node
        } = _ref;
        const value = node.value;

        if (!value.startsWith('%') || !value.endsWith('%')) {
          return;
        }

        const variableName = value.slice(1, -1);

        if (!(variableName in variables)) {
          throw new Error("Template variable '".concat(value, "' not defined"));
        }

        node.value = variables[variableName] || '';
      }

    }
  });
  return (0, _recast.print)(ast, {
    quote: 'single'
  }).code;
}