"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reactIconsV3 = void 0;

var _path = _interopRequireDefault(require("path"));

var _resolveFrom = _interopRequireDefault(require("resolve-from"));

var _semverCompare = _interopRequireDefault(require("semver-compare"));

var _readJson = require("../../../util/readJson");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const purpose = 'Transform react-icons v2 imports to v3 form';
const description = "\nModifies all found react-icons import and require statements from their v2 form\nto the path structure used in react-icons v3. For instance:\n\nfrom: import {MdPerson} from 'react-icons/lib/md'\n  to: import {MdPerson} from 'react-icons/md'\n\nfrom: import PersonIcon from 'react-icons/lib/md/person'\n  to: import {MdPerson as PersonIcon} from 'react-icons/md'\n".trim();
const reactIconsV3 = {
  purpose,
  description,
  filename: 'reactIconsV3.js',
  verify: async context => {
    const {
      workDir
    } = context;
    const studioPkg = await maybeReadJson(_path.default.join(workDir, 'package.json'));
    const dependencies = studioPkg && studioPkg.dependencies || {};
    const dependencyVersion = (dependencies['react-icons'] || '').replace(/^[\^~]/, '');

    if (!dependencyVersion) {
      throw new Error('Could not find react-icons declared as dependency in package.json');
    }

    if ((0, _semverCompare.default)(dependencyVersion, '3.0.0') < 0) {
      throw new Error('react-icons declared in package.json dependencies is lower than 3.0.0');
    }

    const iconPkgPath = _resolveFrom.default.silent(workDir, 'react-icons/package.json');

    const iconPkg = iconPkgPath && (await maybeReadJson(iconPkgPath));

    if (iconPkg && (0, _semverCompare.default)(iconPkg.version, '3.0.0') < 0) {
      throw new Error('The installed version of react-icon seems to be < 3.0.0');
    }
  }
};
exports.reactIconsV3 = reactIconsV3;

async function maybeReadJson(jsonPath) {
  try {
    return await (0, _readJson.readJson)(jsonPath);
  } catch (err) {
    return null;
  }
}