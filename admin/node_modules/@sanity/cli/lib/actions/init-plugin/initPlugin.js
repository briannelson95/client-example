"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = initPlugin;

var _promises = _interopRequireDefault(require("fs/promises"));

var _path = _interopRequireDefault(require("path"));

var _debug = require("../../debug");

var _bootstrapFromTemplate = require("./bootstrapFromTemplate");

var _pluginTemplates = require("./pluginTemplates");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function initPlugin(args, context) {
  const {
    output,
    prompt
  } = context;
  const [, specifiedTemplateUrl] = args.argsWithoutOptions;
  output.print('This utility will walk you through creating a new Sanity plugin.');
  output.print('Press ^C at any time to quit.\n');
  const hasTemplateUrl = /^https?:\/\//.test(specifiedTemplateUrl || '');

  if (hasTemplateUrl) {
    (0, _debug.debug)('User provided template URL: %s', specifiedTemplateUrl);
    return bootstrapFromUrl(context, specifiedTemplateUrl);
  }

  let specifiedTemplate = null;

  if (specifiedTemplateUrl) {
    specifiedTemplate = _pluginTemplates.pluginTemplates.find(tpl => tpl.value === specifiedTemplateUrl);
  }

  if (specifiedTemplate) {
    (0, _debug.debug)('User wanted template "%s", match found at %s', specifiedTemplateUrl, specifiedTemplate.url);
    return bootstrapFromUrl(context, specifiedTemplate.url);
  } else if (specifiedTemplateUrl) {
    throw new Error("Cannot find template with name \"".concat(specifiedTemplateUrl, "\""));
  }

  const templateChoices = _pluginTemplates.pluginTemplates.map(_ref => {
    let {
      value,
      name
    } = _ref;
    return {
      value,
      name
    };
  });

  const selected = await prompt.single({
    message: 'Select template to use',
    type: 'list',
    choices: templateChoices
  });
  specifiedTemplate = _pluginTemplates.pluginTemplates.find(tpl => tpl.value === selected);

  if (!specifiedTemplate) {
    throw new Error('No template selected');
  }

  (0, _debug.debug)('User selected template URL: %s', specifiedTemplate.url);
  return bootstrapFromUrl(context, specifiedTemplate.url);
}

async function bootstrapFromUrl(context, url) {
  const {
    output,
    prompt,
    yarn,
    workDir
  } = context;
  (0, _debug.debug)('Bootstrapping from URL: %s', url);
  const {
    name,
    outputPath,
    inPluginsPath,
    dependencies
  } = await (0, _bootstrapFromTemplate.bootstrapFromTemplate)(context, url);

  if (inPluginsPath) {
    const addIt = await prompt.single({
      type: 'confirm',
      message: 'Enable plugin in current Sanity installation?',
      default: true
    });

    if (addIt) {
      await addPluginToManifest(workDir, name.replace(/^sanity-plugin-/, ''));
    }
  }

  if (dependencies) {
    const dependencyString = JSON.stringify(dependencies, null, 2).split('\n').slice(1, -1).join('\n').replace(/"/g, '');
    output.print('\nThe following dependencies are required for this template:');
    output.print("".concat(dependencyString, "\n"));
  }

  if (dependencies && inPluginsPath) {
    const addDeps = await prompt.single({
      type: 'confirm',
      message: 'Install dependencies in current project?',
      default: true
    });

    if (addDeps) {
      const deps = Object.keys(dependencies).map(dep => "".concat(dep, "@").concat(dependencies[dep]));
      await yarn(['add'].concat(deps), { ...output,
        rootDir: workDir
      });
      output.print('Dependencies installed.');
      output.print('Remember to remove them from `package.json` if you no longer need them!');
    }
  }

  output.print("\nSuccess! Plugin initialized at ".concat(outputPath));
}

async function addPluginToManifest(sanityDir, pluginName) {
  const manifestPath = _path.default.join(sanityDir, 'sanity.json');

  const manifest = JSON.parse(await _promises.default.readFile(manifestPath, 'utf8'));
  manifest.plugins = manifest.plugins || [];

  if (manifest.plugins.indexOf(pluginName) === -1) {
    manifest.plugins.push(pluginName);
  }

  await _promises.default.writeFile(manifestPath, JSON.stringify(manifest, null, 2));
  return manifest;
}