"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

var _getUserConfig = require("../../util/getUserConfig");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const helpText = "\nExamples\n  # Log out of the CLI\n  sanity logout\n";
const logoutCommand = {
  name: 'logout',
  helpText,
  signature: 'logout',
  description: 'Logs out of the Sanity.io session',

  async action(args, _ref) {
    let {
      output,
      apiClient
    } = _ref;
    const cfg = (0, _getUserConfig.getUserConfig)();
    const token = cfg.get('authToken');

    if (!token) {
      output.print(_chalk.default.red('No login credentials found'));
      return;
    }

    const client = apiClient({
      requireUser: true,
      requireProject: false
    });

    try {
      await client.request({
        uri: '/auth/logout',
        method: 'POST'
      });
    } catch (err) {
      const statusCode = err && err.response && err.response.statusCode; // In the case of session timeouts or missing sessions, we'll get a 401
      // This is an acceptable situation seen from a logout perspective - all we
      // need to do in this case is clear the session from the view of the CLI

      if (statusCode !== 401) {
        output.error(_chalk.default.red("Failed to communicate with the Sanity API:\n".concat(err.message)));
        return;
      }
    }

    cfg.delete('authType');
    cfg.delete('authToken');
    output.print(_chalk.default.green('Logged out'));
  }

};
var _default = logoutCommand;
exports.default = _default;