"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug = require("../../debug");

var _noSuchCommandText = require("../../util/noSuchCommandText");

var _isCommandGroup = require("../../util/isCommandGroup");

var _generateCommandsDocumentation = require("../../util/generateCommandsDocumentation");

const showHelpAction = async (args, context) => {
  const [commandName, subCommandName] = args.argsWithoutOptions;
  const {
    commandGroups
  } = context.commandRunner;

  if (!commandName) {
    (0, _debug.debug)('No command given to "help", showing generate Sanity CLI help');
    context.output.print((0, _generateCommandsDocumentation.generateCommandsDocumentation)(commandGroups));
    return;
  }

  const defaultCommand = commandGroups.default.find(cmd => cmd.name === commandName);

  if (defaultCommand && !(0, _isCommandGroup.isCommandGroup)(defaultCommand)) {
    (0, _debug.debug)("Found command in default group with name \"".concat(commandName, "\""));
    context.output.print((0, _generateCommandsDocumentation.generateCommandDocumentation)(defaultCommand));
    return;
  }

  const group = commandGroups[commandName];

  if (!subCommandName && !group) {
    (0, _debug.debug)("No subcommand given, and we couldn't find a group with name \"".concat(group, "\""));
    throw new Error((0, _noSuchCommandText.getNoSuchCommandText)(commandName, null, commandGroups));
  }

  if (!subCommandName && group) {
    (0, _debug.debug)("No subcommand given, but found group with name \"".concat(commandName, "\""));
    context.output.print((0, _generateCommandsDocumentation.generateCommandsDocumentation)(commandGroups, commandName));
    return;
  }

  if (subCommandName && !group) {
    (0, _debug.debug)("Subcommand given, but couldn't find group with name \"".concat(commandName, "\""));
    throw new Error((0, _noSuchCommandText.getNoSuchCommandText)(subCommandName, commandName, commandGroups));
  }

  const subCommand = context.commandRunner.resolveSubcommand(group, subCommandName, commandName);

  if (!subCommand) {
    (0, _debug.debug)("Subcommand given, but not found in group \"".concat(commandName, "\""));
    throw new Error((0, _noSuchCommandText.getNoSuchCommandText)(subCommandName, commandName, commandGroups));
  }

  (0, _debug.debug)('Subcommand "%s" for group "%s" found, showing help', subCommandName, commandName);

  if (!(0, _isCommandGroup.isCommandGroup)(subCommand.command)) {
    context.output.print((0, _generateCommandsDocumentation.generateCommandDocumentation)(subCommand.command, commandName, subCommandName));
  }
};

var _default = showHelpAction;
exports.default = _default;