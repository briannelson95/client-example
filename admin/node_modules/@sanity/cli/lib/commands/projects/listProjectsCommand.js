"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _sortBy2 = _interopRequireDefault(require("lodash/sortBy"));

var _size2 = _interopRequireDefault(require("lodash/size"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const headings = ['id', 'members', 'name', 'url', 'created'];
const helpText = "\nOptions\n  --sort <field> Sort output by specified column\n  --order <asc/desc> Sort output ascending/descending\n\nExamples\n  # List projects\n  sanity projects list\n\n  # List projects sorted by member count, ascending\n  sanity projects list --sort=members --order=asc\n";
const defaultFlags = {
  sort: 'created',
  order: 'desc'
};
const listProjectsCommand = {
  name: 'list',
  group: 'projects',
  signature: '',
  helpText,
  description: 'Lists projects connected to your user',
  action: async (args, context) => {
    const {
      apiClient,
      output,
      chalk
    } = context;
    const flags = { ...defaultFlags,
      ...args.extOptions
    };
    const client = apiClient({
      requireUser: true,
      requireProject: false
    });
    const projects = await client.projects.list();
    const ordered = (0, _sortBy2.default)(projects.map(_ref => {
      let {
        displayName,
        id,
        members = [],
        studioHost = '',
        createdAt
      } = _ref;
      const studio = studioHost ? "https://".concat(studioHost, ".sanity.studio") : 'Not deployed';
      return [id, members.length, displayName, studio, createdAt].map(String);
    }), [headings.indexOf(flags.sort)]);
    const rows = flags.order === 'asc' ? ordered : ordered.reverse();
    const maxWidths = rows.reduce((max, row) => row.map((current, index) => Math.max((0, _size2.default)(current), max[index])), headings.map(str => (0, _size2.default)(str)));

    const printRow = row => row.map((col, i) => "".concat(col).padEnd(maxWidths[i])).join('   ');

    output.print(chalk.cyan(printRow(headings)));
    rows.forEach(row => output.print(printRow(row)));
  }
};
var _default = listProjectsCommand;
exports.default = _default;