"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCliConfig = getCliConfig;
exports.getCliConfigSync = getCliConfigSync;

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _worker_threads = require("worker_threads");

var _node = require("esbuild-register/dist/node");

var _dynamicRequire = require("./dynamicRequire");

var _cliWorker = require("./cliWorker");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-sync */

/**
 * Reads the Sanity CLI config from one of the following files (in preferred order):
 *   - sanity.cli.js
 *   - sanity.cli.ts
 *
 * Note: There are two ways of using this:
 * a) `getCliConfig(cwd)`
 * b) `getCliConfig(cwd, {forked: true})`
 *
 * Approach a is generally a bit faster as it avoids the forking startup time, while
 * approach b could be considered "safer" since any side-effects of running the config
 * file will not bleed into the current CLI process directly.
 */
async function getCliConfig(cwd) {
  let {
    forked
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (forked) {
    try {
      return await getCliConfigForked(cwd);
    } catch (err) {// Intentional noop - try unforked variant
    }
  }

  const {
    unregister
  } = (0, _node.register)();

  try {
    const v3Config = getSanityCliConfig(cwd);

    if (v3Config) {
      return v3Config;
    }

    return getSanityJsonConfig(cwd);
  } catch (err) {
    throw err;
  } finally {
    unregister();
  }
}

function getCliConfigSync(cwd) {
  const v3Config = getSanityCliConfig(cwd);
  return v3Config ? v3Config : getSanityJsonConfig(cwd);
}

async function getCliConfigForked(cwd) {
  const workerPath = await (0, _cliWorker.getCliWorkerPath)('util/getCliConfig.worker');
  return new Promise((resolve, reject) => {
    const worker = new _worker_threads.Worker(workerPath, {
      workerData: cwd
    });
    worker.on('message', message => {
      if (message.type === 'config') {
        resolve(message.config);
      } else {
        const error = new Error(message.error);
        error.type = message.errorType;
        reject(new Error(message.error));
      }
    });
    worker.on('error', reject);
    worker.on('exit', code => {
      if (code !== 0) {
        reject(new Error("Worker stopped with exit code ".concat(code)));
      }
    });
  });
}

function getSanityJsonConfig(cwd) {
  const configPath = _path.default.join(cwd, 'sanity.json');

  if (!_fs.default.existsSync(configPath)) {
    return null;
  }

  return {
    config: loadJsonConfig(configPath),
    path: configPath,
    version: 2
  };
}

function getSanityCliConfig(cwd) {
  const jsConfigPath = _path.default.join(cwd, 'sanity.cli.js');

  const tsConfigPath = _path.default.join(cwd, 'sanity.cli.ts');

  const [js, ts] = [_fs.default.existsSync(jsConfigPath), _fs.default.existsSync(tsConfigPath)];

  if (!js && !ts) {
    return null;
  }

  if (!js && ts) {
    return {
      config: importConfig(tsConfigPath),
      path: tsConfigPath,
      version: 3
    };
  }

  if (js && ts) {
    warn('Found both `sanity.cli.js` and `sanity.cli.ts` - using sanity.cli.js');
  }

  return {
    config: importConfig(jsConfigPath),
    path: jsConfigPath,
    version: 3
  };
}

function loadJsonConfig(filePath) {
  try {
    const content = _fs.default.readFileSync(filePath, 'utf8');

    return JSON.parse(content);
  } catch (err) {
    console.error("Error reading \"".concat(filePath, "\": ").concat(err.message));
    return null;
  }
}

function importConfig(filePath) {
  try {
    const config = (0, _dynamicRequire.dynamicRequire)(filePath);

    if (config === null || typeof config !== 'object') {
      throw new Error('Module export is not a configuration object');
    }

    return 'default' in config ? config.default : config;
  } catch (err) {
    // If attempting to import `createCliConfig` or similar from `sanity/cli`,
    // accept the fact that it might not be installed. Instead, let the CLI
    // give a warning about the `sanity` module not being installed
    if (err.code === 'MODULE_NOT_FOUND' && err.message.includes('sanity/cli')) {
      return null;
    }

    console.error("Error reading \"".concat(filePath, "\": ").concat(err.message));
    return null;
  }
}

function warn(warning) {
  if (typeof process.send === 'function') {
    process.send({
      type: 'warning',
      warning
    });
  } else {
    console.warn(warning);
  }
}