"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveRootDir = resolveRootDir;

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _debug = require("../debug");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-sync */

/**
 * Resolve project root directory, falling back to cwd if it cannot be found
 */
function resolveRootDir(cwd) {
  try {
    return resolveProjectRoot(cwd) || cwd;
  } catch (err) {
    throw new Error("Error occurred trying to resolve project root:\n".concat(err.message));
  }
}

function hasStudioConfig(basePath) {
  const buildConfigs = [fileExists(_path.default.join(basePath, 'studio.config.js')), fileExists(_path.default.join(basePath, 'studio.config.ts')), isSanityV2StudioRoot(basePath)];
  return buildConfigs.some(Boolean);
}

function resolveProjectRoot(basePath) {
  let iterations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  if (hasStudioConfig(basePath)) {
    return basePath;
  }

  const parentDir = _path.default.resolve(basePath, '..');

  if (parentDir === basePath || iterations > 30) {
    // Reached root (or max depth), give up
    return false;
  }

  return resolveProjectRoot(parentDir, iterations + 1);
}

function isSanityV2StudioRoot(basePath) {
  try {
    const content = _fs.default.readFileSync(_path.default.join(basePath, 'sanity.json'), 'utf8');

    const sanityJson = JSON.parse(content);
    const isRoot = Boolean(sanityJson === null || sanityJson === void 0 ? void 0 : sanityJson.root);

    if (isRoot) {
      (0, _debug.debug)('Found Sanity v2 studio root at %s', basePath);
    }

    return isRoot;
  } catch (err) {
    return false;
  }
}

function fileExists(filePath) {
  return _fs.default.existsSync(filePath);
}