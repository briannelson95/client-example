"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateCommandDocumentation = generateCommandDocumentation;
exports.generateCommandsDocumentation = generateCommandsDocumentation;

var _padEnd2 = _interopRequireDefault(require("lodash/padEnd"));

var _noSuchCommandText = require("./noSuchCommandText");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Generate documentation for all commands within a given group
 */
function generateCommandsDocumentation(commandGroups) {
  let group = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
  const commandGroup = commandGroups[group];
  const commands = commandGroup && commandGroup.filter(cmd => !cmd.hideFromHelp);

  if (!commands || commands.length === 0) {
    throw new Error((0, _noSuchCommandText.getNoSuchCommandText)(group));
  } // Find the maximum length of a command name, so we can pad the descriptions


  const cmdLength = commands.reduce((max, cmd) => Math.max(cmd.name.length, max), 0);
  const prefix = group === 'default' ? '' : " ".concat(group);
  const rows = ["usage: sanity".concat(prefix, " [--default] [-v|--version] [-d|--debug] [-h|--help] <command> [<args>]"), '', 'Commands:'].concat(commands.map(cmd => "   ".concat((0, _padEnd2.default)(cmd.name, cmdLength + 1), " ").concat(cmd.description))).concat(['', "See 'sanity help".concat(prefix, " <command>' for specific information on a subcommand.")]);
  return rows.join('\n');
}
/**
 * Generate documentation for a single command within the given group
 */


function generateCommandDocumentation(command, group, subCommand) {
  if (!command) {
    throw new Error(subCommand ? "\"".concat(subCommand, "\" is not a subcommand of \"").concat(group, "\". See 'sanity help ").concat(group, "'") : (0, _noSuchCommandText.getNoSuchCommandText)(group || command));
  }

  const cmdParts = [group || command.name, subCommand].filter(Boolean).join(' ');
  return ["usage: sanity ".concat(cmdParts, " ").concat(command.signature), '', "   ".concat(command.description), '', (command.helpText || '').trim()].join('\n');
}