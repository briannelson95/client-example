"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNoSuchCommandText = getNoSuchCommandText;

var _leven = _interopRequireDefault(require("leven"));

var _chalk = _interopRequireDefault(require("chalk"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const commonMistakes = {
  get: 'list'
};
const levenThreshold = 3;
const coreCommands = ['build', 'check', 'configcheck', 'cors', 'dataset', 'deploy', 'documents', 'exec', 'graphql', 'hook', 'start', 'undeploy', 'uninstall', 'users'];
const helpText = "\nRun the command again within a Sanity project directory, where \"sanity\"\nis installed as a dependency.";

function getNoSuchCommandText(cmdName, parentGroupName, groups) {
  if (parentGroupName && groups && groups[parentGroupName]) {
    return suggestCommand(cmdName, groups[parentGroupName], parentGroupName);
  }

  const isCoreCommand = coreCommands.includes(cmdName);

  if (isCoreCommand) {
    return "Command \"".concat(cmdName, "\" is not available outside of a Sanity project context.").concat(helpText);
  }

  return suggestCommand(cmdName, groups ? groups.default : []);
}

function suggestCommand(cmdName, group) {
  let parentGroupName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  // Try to find something similar
  const closest = group.map(command => (0, _leven.default)(command.name, cmdName)).reduce((current, distance, index) => distance < current.distance ? {
    index,
    distance
  } : current, {
    index: 0,
    distance: +Infinity
  }); // Given we are within our target threshold, suggest the command

  let suggestCmd = '';

  if (closest.distance <= levenThreshold) {
    const cmdCandidate = group[closest.index];
    suggestCmd = cmdCandidate.name;
  } // Is this a common mistake that we can suggest an alias for?


  const alternative = commonMistakes[cmdName];

  if (!suggestCmd && alternative) {
    suggestCmd = alternative;
  }

  const input = _chalk.default.cyan("\"".concat(cmdName, "\""));

  const suggest = _chalk.default.green("\"".concat(suggestCmd, "\""));

  const help = _chalk.default.cyan('"sanity --help"');

  const didYouMean = suggestCmd ? "Did you mean ".concat(suggest, "? ") : ' ';
  return parentGroupName ? "".concat(input, " is not a subcommand of \"sanity ").concat(parentGroupName, "\". ").concat(didYouMean, "See ").concat(help) : "".concat(input, " is not a sanity command. ").concat(didYouMean, "See ").concat(help);
}