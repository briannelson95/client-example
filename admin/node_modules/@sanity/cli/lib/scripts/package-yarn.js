"use strict";

var _path = _interopRequireDefault(require("path"));

var _fs = require("fs");

var _promises = _interopRequireDefault(require("fs/promises"));

var _getIt = _interopRequireDefault(require("get-it"));

var _middleware = require("get-it/middleware");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-console */
const version = '1.22.17';
const baseUrl = 'https://github.com/yarnpkg/yarn/releases/download';
const bundleUrl = "".concat(baseUrl, "/v").concat(version, "/yarn-").concat(version, ".js");
const licenseUrl = 'https://raw.githubusercontent.com/yarnpkg/yarn/master/LICENSE';

const destination = _path.default.join(__dirname, '..', '..', 'vendor', 'yarn');

const writeFlags = {
  encoding: 'utf8',
  mode: 0o755
};
const request = (0, _getIt.default)([(0, _middleware.promise)()]);

async function download() {
  console.log('[package-yarn] Downloading bundle');
  const res = await request({
    url: bundleUrl,
    stream: true
  });
  res.body.pipe((0, _fs.createWriteStream)(destination, writeFlags).on('close', writeHeader));
}

async function writeHeader() {
  console.log('[package-yarn] Downloading license');
  const response = await request(licenseUrl);
  const license = response.body;
  const commented = license.split('\n').map(line => " * ".concat(line)).join('\n');
  const wrappedLicense = "/*\n".concat(commented, "*/");
  console.log('[package-yarn] Reading bundle');
  const bundle = await _promises.default.readFile(destination, writeFlags);

  if (bundle[0] !== '#' && bundle[1] !== '!') {
    throw new Error('[package-yarn] Expected bundle to start with a shebang (#!), but it did not');
  }

  console.log('[package-yarn] Writing modified bundle');
  const pkgDate = new Date().toISOString().substr(0, 10);
  const versionString = "/* yarn v".concat(version, " - packaged ").concat(pkgDate, " */");
  const licensed = bundle.replace(/^(#!.*\n)/, "$1".concat(versionString, "\n").concat(wrappedLicense, "\n\n"));
  await _promises.default.writeFile(destination, licensed, writeFlags);
}

download();